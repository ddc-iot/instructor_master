
c:/Users/IoTPa/Documents/IoT/cohort2/instructor_master/Utilities/Fix/target/1.4.4/argon/Fix.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001324  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  000153d4  2**0
                  CONTENTS
  4 .data         00000068  2003e36c  000d5340  0000e36c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000041c  2003e3d4  2003e3d4  0001e3d4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d53a8  000d53a8  000153a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d53d0  000d53d0  000153d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000b08e0  00000000  00000000  000153d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000d0a9  00000000  00000000  000c5cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00017f46  00000000  00000000  000d2d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001e38  00000000  00000000  000eaca3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000039f0  00000000  00000000  000ecadb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002fb3e  00000000  00000000  000f04cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001e949  00000000  00000000  00120009  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000fcbe9  00000000  00000000  0013e952  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b84c  00000000  00000000  0023b53c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f000 ffb3 	bl	d4f98 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f000 ffb8 	bl	d4fae <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e36c 	.word	0x2003e36c
   d4048:	000d5340 	.word	0x000d5340
   d404c:	2003e3d4 	.word	0x2003e3d4
   d4050:	2003e3d4 	.word	0x2003e3d4
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 fafb 	bl	d4654 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d5334 	.word	0x000d5334
   d4080:	000d52f8 	.word	0x000d52f8

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b814 	b.w	d40b0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fa91 	bl	d45b0 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 baad 	b.w	d45f0 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 b98d 	b.w	d43b4 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 b98b 	b.w	d43b4 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <setup>:
 * Date: 09-APR-2020
 */
#include "Particle.h"
#include "dct.h"
SYSTEM_MODE(SEMI_AUTOMATIC);
void setup() {
   d40b0:	b513      	push	{r0, r1, r4, lr}
    const uint8_t val = 0x01;
   d40b2:	a802      	add	r0, sp, #8
   d40b4:	2201      	movs	r2, #1
   d40b6:	4c0b      	ldr	r4, [pc, #44]	; (d40e4 <setup+0x34>)
   d40b8:	f800 2d01 	strb.w	r2, [r0, #-1]!
    dct_write_app_data(&val, DCT_SETUP_DONE_OFFSET, 1);
   d40bc:	f641 71c6 	movw	r1, #8134	; 0x1fc6
   d40c0:	f000 f8bc 	bl	d423c <dct_write_app_data>
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d40c4:	2300      	movs	r3, #0
   d40c6:	461a      	mov	r2, r3
   d40c8:	4619      	mov	r1, r3
   d40ca:	6860      	ldr	r0, [r4, #4]
   d40cc:	f000 f92a 	bl	d4324 <network_on>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d40d0:	2300      	movs	r3, #0
   d40d2:	461a      	mov	r2, r3
   d40d4:	4619      	mov	r1, r3
   d40d6:	6860      	ldr	r0, [r4, #4]
   d40d8:	f000 f904 	bl	d42e4 <network_connect>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d40dc:	f000 f952 	bl	d4384 <spark_cloud_flag_connect>
    WiFi.on();
    WiFi.connect();
    Particle.connect();
   d40e0:	b002      	add	sp, #8
   d40e2:	bd10      	pop	{r4, pc}
   d40e4:	2003e71c 	.word	0x2003e71c

000d40e8 <_GLOBAL__sub_I_SystemMode>:
   d40e8:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d40ea:	f000 f81f 	bl	d412c <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d40ee:	4b06      	ldr	r3, [pc, #24]	; (d4108 <_GLOBAL__sub_I_SystemMode+0x20>)
   d40f0:	2200      	movs	r2, #0
   d40f2:	701a      	strb	r2, [r3, #0]
   d40f4:	805a      	strh	r2, [r3, #2]
   d40f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d40fa:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d40fc:	2002      	movs	r0, #2
   d40fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4102:	f000 b8d3 	b.w	d42ac <set_system_mode>
   d4106:	bf00      	nop
   d4108:	2003e3d8 	.word	0x2003e3d8

000d410c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d410c:	b508      	push	{r3, lr}
   d410e:	4b02      	ldr	r3, [pc, #8]	; (d4118 <netdb_freeaddrinfo+0xc>)
   d4110:	681b      	ldr	r3, [r3, #0]
   d4112:	689b      	ldr	r3, [r3, #8]
   d4114:	9301      	str	r3, [sp, #4]
   d4116:	bd08      	pop	{r3, pc}
   d4118:	00030268 	.word	0x00030268

000d411c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d411c:	b508      	push	{r3, lr}
   d411e:	4b02      	ldr	r3, [pc, #8]	; (d4128 <netdb_getaddrinfo+0xc>)
   d4120:	681b      	ldr	r3, [r3, #0]
   d4122:	68db      	ldr	r3, [r3, #12]
   d4124:	9301      	str	r3, [sp, #4]
   d4126:	bd08      	pop	{r3, pc}
   d4128:	00030268 	.word	0x00030268

000d412c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d412c:	b508      	push	{r3, lr}
   d412e:	4b02      	ldr	r3, [pc, #8]	; (d4138 <HAL_Pin_Map+0xc>)
   d4130:	681b      	ldr	r3, [r3, #0]
   d4132:	681b      	ldr	r3, [r3, #0]
   d4134:	9301      	str	r3, [sp, #4]
   d4136:	bd08      	pop	{r3, pc}
   d4138:	0003022c 	.word	0x0003022c

000d413c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d413c:	b508      	push	{r3, lr}
   d413e:	4b02      	ldr	r3, [pc, #8]	; (d4148 <HAL_SPI_Init+0xc>)
   d4140:	681b      	ldr	r3, [r3, #0]
   d4142:	69db      	ldr	r3, [r3, #28]
   d4144:	9301      	str	r3, [sp, #4]
   d4146:	bd08      	pop	{r3, pc}
   d4148:	00030230 	.word	0x00030230

000d414c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d414c:	b508      	push	{r3, lr}
   d414e:	4b02      	ldr	r3, [pc, #8]	; (d4158 <HAL_RNG_GetRandomNumber+0xc>)
   d4150:	681b      	ldr	r3, [r3, #0]
   d4152:	685b      	ldr	r3, [r3, #4]
   d4154:	9301      	str	r3, [sp, #4]
   d4156:	bd08      	pop	{r3, pc}
   d4158:	00030218 	.word	0x00030218

000d415c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d415c:	b508      	push	{r3, lr}
   d415e:	4b02      	ldr	r3, [pc, #8]	; (d4168 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4160:	681b      	ldr	r3, [r3, #0]
   d4162:	695b      	ldr	r3, [r3, #20]
   d4164:	9301      	str	r3, [sp, #4]
   d4166:	bd08      	pop	{r3, pc}
   d4168:	00030218 	.word	0x00030218

000d416c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d416c:	b508      	push	{r3, lr}
   d416e:	4b02      	ldr	r3, [pc, #8]	; (d4178 <os_thread_is_current+0xc>)
   d4170:	681b      	ldr	r3, [r3, #0]
   d4172:	689b      	ldr	r3, [r3, #8]
   d4174:	9301      	str	r3, [sp, #4]
   d4176:	bd08      	pop	{r3, pc}
   d4178:	00030248 	.word	0x00030248

000d417c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d417c:	b508      	push	{r3, lr}
   d417e:	4b02      	ldr	r3, [pc, #8]	; (d4188 <os_thread_join+0xc>)
   d4180:	681b      	ldr	r3, [r3, #0]
   d4182:	691b      	ldr	r3, [r3, #16]
   d4184:	9301      	str	r3, [sp, #4]
   d4186:	bd08      	pop	{r3, pc}
   d4188:	00030248 	.word	0x00030248

000d418c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d418c:	b508      	push	{r3, lr}
   d418e:	4b02      	ldr	r3, [pc, #8]	; (d4198 <os_thread_cleanup+0xc>)
   d4190:	681b      	ldr	r3, [r3, #0]
   d4192:	695b      	ldr	r3, [r3, #20]
   d4194:	9301      	str	r3, [sp, #4]
   d4196:	bd08      	pop	{r3, pc}
   d4198:	00030248 	.word	0x00030248

000d419c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d419c:	b508      	push	{r3, lr}
   d419e:	4b02      	ldr	r3, [pc, #8]	; (d41a8 <os_mutex_create+0xc>)
   d41a0:	681b      	ldr	r3, [r3, #0]
   d41a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d41a4:	9301      	str	r3, [sp, #4]
   d41a6:	bd08      	pop	{r3, pc}
   d41a8:	00030248 	.word	0x00030248

000d41ac <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d41ac:	b508      	push	{r3, lr}
   d41ae:	4b02      	ldr	r3, [pc, #8]	; (d41b8 <os_mutex_recursive_create+0xc>)
   d41b0:	681b      	ldr	r3, [r3, #0]
   d41b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d41b4:	9301      	str	r3, [sp, #4]
   d41b6:	bd08      	pop	{r3, pc}
   d41b8:	00030248 	.word	0x00030248

000d41bc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d41bc:	b508      	push	{r3, lr}
   d41be:	4b02      	ldr	r3, [pc, #8]	; (d41c8 <inet_inet_ntop+0xc>)
   d41c0:	681b      	ldr	r3, [r3, #0]
   d41c2:	695b      	ldr	r3, [r3, #20]
   d41c4:	9301      	str	r3, [sp, #4]
   d41c6:	bd08      	pop	{r3, pc}
   d41c8:	00030264 	.word	0x00030264

000d41cc <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d41cc:	b508      	push	{r3, lr}
   d41ce:	4b02      	ldr	r3, [pc, #8]	; (d41d8 <HAL_USART_Init+0xc>)
   d41d0:	681b      	ldr	r3, [r3, #0]
   d41d2:	681b      	ldr	r3, [r3, #0]
   d41d4:	9301      	str	r3, [sp, #4]
   d41d6:	bd08      	pop	{r3, pc}
   d41d8:	0003023c 	.word	0x0003023c

000d41dc <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d41dc:	b508      	push	{r3, lr}
   d41de:	4b02      	ldr	r3, [pc, #8]	; (d41e8 <HAL_USART_Write_Data+0xc>)
   d41e0:	681b      	ldr	r3, [r3, #0]
   d41e2:	68db      	ldr	r3, [r3, #12]
   d41e4:	9301      	str	r3, [sp, #4]
   d41e6:	bd08      	pop	{r3, pc}
   d41e8:	0003023c 	.word	0x0003023c

000d41ec <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d41ec:	b508      	push	{r3, lr}
   d41ee:	4b02      	ldr	r3, [pc, #8]	; (d41f8 <HAL_USART_Available_Data+0xc>)
   d41f0:	681b      	ldr	r3, [r3, #0]
   d41f2:	691b      	ldr	r3, [r3, #16]
   d41f4:	9301      	str	r3, [sp, #4]
   d41f6:	bd08      	pop	{r3, pc}
   d41f8:	0003023c 	.word	0x0003023c

000d41fc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d41fc:	b508      	push	{r3, lr}
   d41fe:	4b02      	ldr	r3, [pc, #8]	; (d4208 <HAL_USART_Read_Data+0xc>)
   d4200:	681b      	ldr	r3, [r3, #0]
   d4202:	695b      	ldr	r3, [r3, #20]
   d4204:	9301      	str	r3, [sp, #4]
   d4206:	bd08      	pop	{r3, pc}
   d4208:	0003023c 	.word	0x0003023c

000d420c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d420c:	b508      	push	{r3, lr}
   d420e:	4b02      	ldr	r3, [pc, #8]	; (d4218 <HAL_USART_Peek_Data+0xc>)
   d4210:	681b      	ldr	r3, [r3, #0]
   d4212:	699b      	ldr	r3, [r3, #24]
   d4214:	9301      	str	r3, [sp, #4]
   d4216:	bd08      	pop	{r3, pc}
   d4218:	0003023c 	.word	0x0003023c

000d421c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d421c:	b508      	push	{r3, lr}
   d421e:	4b02      	ldr	r3, [pc, #8]	; (d4228 <HAL_USART_Flush_Data+0xc>)
   d4220:	681b      	ldr	r3, [r3, #0]
   d4222:	69db      	ldr	r3, [r3, #28]
   d4224:	9301      	str	r3, [sp, #4]
   d4226:	bd08      	pop	{r3, pc}
   d4228:	0003023c 	.word	0x0003023c

000d422c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d422c:	b508      	push	{r3, lr}
   d422e:	4b02      	ldr	r3, [pc, #8]	; (d4238 <HAL_USART_Available_Data_For_Write+0xc>)
   d4230:	681b      	ldr	r3, [r3, #0]
   d4232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4234:	9301      	str	r3, [sp, #4]
   d4236:	bd08      	pop	{r3, pc}
   d4238:	0003023c 	.word	0x0003023c

000d423c <dct_write_app_data>:

DYNALIB_BEGIN(hal_dct)

#if HAL_PLATFORM_DCT_NO_DEPRECATED
DYNALIB_FN(0, hal_dct, dct_read_app_data_copy, int(uint32_t, void*, size_t))
DYNALIB_FN(1, hal_dct, dct_write_app_data, int(const void*, uint32_t, uint32_t))
   d423c:	b508      	push	{r3, lr}
   d423e:	4b02      	ldr	r3, [pc, #8]	; (d4248 <dct_write_app_data+0xc>)
   d4240:	681b      	ldr	r3, [r3, #0]
   d4242:	685b      	ldr	r3, [r3, #4]
   d4244:	9301      	str	r3, [sp, #4]
   d4246:	bd08      	pop	{r3, pc}
   d4248:	00030258 	.word	0x00030258

000d424c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d424c:	b508      	push	{r3, lr}
   d424e:	4b02      	ldr	r3, [pc, #8]	; (d4258 <HAL_USB_USART_Init+0xc>)
   d4250:	681b      	ldr	r3, [r3, #0]
   d4252:	681b      	ldr	r3, [r3, #0]
   d4254:	9301      	str	r3, [sp, #4]
   d4256:	bd08      	pop	{r3, pc}
   d4258:	0003024c 	.word	0x0003024c

000d425c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d425c:	b508      	push	{r3, lr}
   d425e:	4b02      	ldr	r3, [pc, #8]	; (d4268 <HAL_USB_USART_Available_Data+0xc>)
   d4260:	681b      	ldr	r3, [r3, #0]
   d4262:	691b      	ldr	r3, [r3, #16]
   d4264:	9301      	str	r3, [sp, #4]
   d4266:	bd08      	pop	{r3, pc}
   d4268:	0003024c 	.word	0x0003024c

000d426c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d426c:	b508      	push	{r3, lr}
   d426e:	4b02      	ldr	r3, [pc, #8]	; (d4278 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4270:	681b      	ldr	r3, [r3, #0]
   d4272:	695b      	ldr	r3, [r3, #20]
   d4274:	9301      	str	r3, [sp, #4]
   d4276:	bd08      	pop	{r3, pc}
   d4278:	0003024c 	.word	0x0003024c

000d427c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d427c:	b508      	push	{r3, lr}
   d427e:	4b02      	ldr	r3, [pc, #8]	; (d4288 <HAL_USB_USART_Receive_Data+0xc>)
   d4280:	681b      	ldr	r3, [r3, #0]
   d4282:	699b      	ldr	r3, [r3, #24]
   d4284:	9301      	str	r3, [sp, #4]
   d4286:	bd08      	pop	{r3, pc}
   d4288:	0003024c 	.word	0x0003024c

000d428c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d428c:	b508      	push	{r3, lr}
   d428e:	4b02      	ldr	r3, [pc, #8]	; (d4298 <HAL_USB_USART_Send_Data+0xc>)
   d4290:	681b      	ldr	r3, [r3, #0]
   d4292:	69db      	ldr	r3, [r3, #28]
   d4294:	9301      	str	r3, [sp, #4]
   d4296:	bd08      	pop	{r3, pc}
   d4298:	0003024c 	.word	0x0003024c

000d429c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d429c:	b508      	push	{r3, lr}
   d429e:	4b02      	ldr	r3, [pc, #8]	; (d42a8 <HAL_USB_USART_Flush_Data+0xc>)
   d42a0:	681b      	ldr	r3, [r3, #0]
   d42a2:	6a1b      	ldr	r3, [r3, #32]
   d42a4:	9301      	str	r3, [sp, #4]
   d42a6:	bd08      	pop	{r3, pc}
   d42a8:	0003024c 	.word	0x0003024c

000d42ac <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d42ac:	b508      	push	{r3, lr}
   d42ae:	4b02      	ldr	r3, [pc, #8]	; (d42b8 <set_system_mode+0xc>)
   d42b0:	681b      	ldr	r3, [r3, #0]
   d42b2:	685b      	ldr	r3, [r3, #4]
   d42b4:	9301      	str	r3, [sp, #4]
   d42b6:	bd08      	pop	{r3, pc}
   d42b8:	00030220 	.word	0x00030220

000d42bc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d42bc:	b508      	push	{r3, lr}
   d42be:	4b03      	ldr	r3, [pc, #12]	; (d42cc <system_ctrl_set_app_request_handler+0x10>)
   d42c0:	681b      	ldr	r3, [r3, #0]
   d42c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d42c6:	9301      	str	r3, [sp, #4]
   d42c8:	bd08      	pop	{r3, pc}
   d42ca:	0000      	.short	0x0000
   d42cc:	00030220 	.word	0x00030220

000d42d0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d42d0:	b508      	push	{r3, lr}
   d42d2:	4b03      	ldr	r3, [pc, #12]	; (d42e0 <system_ctrl_set_result+0x10>)
   d42d4:	681b      	ldr	r3, [r3, #0]
   d42d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d42da:	9301      	str	r3, [sp, #4]
   d42dc:	bd08      	pop	{r3, pc}
   d42de:	0000      	.short	0x0000
   d42e0:	00030220 	.word	0x00030220

000d42e4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d42e4:	b508      	push	{r3, lr}
   d42e6:	4b02      	ldr	r3, [pc, #8]	; (d42f0 <network_connect+0xc>)
   d42e8:	681b      	ldr	r3, [r3, #0]
   d42ea:	685b      	ldr	r3, [r3, #4]
   d42ec:	9301      	str	r3, [sp, #4]
   d42ee:	bd08      	pop	{r3, pc}
   d42f0:	00030240 	.word	0x00030240

000d42f4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d42f4:	b508      	push	{r3, lr}
   d42f6:	4b02      	ldr	r3, [pc, #8]	; (d4300 <network_connecting+0xc>)
   d42f8:	681b      	ldr	r3, [r3, #0]
   d42fa:	689b      	ldr	r3, [r3, #8]
   d42fc:	9301      	str	r3, [sp, #4]
   d42fe:	bd08      	pop	{r3, pc}
   d4300:	00030240 	.word	0x00030240

000d4304 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4304:	b508      	push	{r3, lr}
   d4306:	4b02      	ldr	r3, [pc, #8]	; (d4310 <network_disconnect+0xc>)
   d4308:	681b      	ldr	r3, [r3, #0]
   d430a:	68db      	ldr	r3, [r3, #12]
   d430c:	9301      	str	r3, [sp, #4]
   d430e:	bd08      	pop	{r3, pc}
   d4310:	00030240 	.word	0x00030240

000d4314 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4314:	b508      	push	{r3, lr}
   d4316:	4b02      	ldr	r3, [pc, #8]	; (d4320 <network_ready+0xc>)
   d4318:	681b      	ldr	r3, [r3, #0]
   d431a:	691b      	ldr	r3, [r3, #16]
   d431c:	9301      	str	r3, [sp, #4]
   d431e:	bd08      	pop	{r3, pc}
   d4320:	00030240 	.word	0x00030240

000d4324 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4324:	b508      	push	{r3, lr}
   d4326:	4b02      	ldr	r3, [pc, #8]	; (d4330 <network_on+0xc>)
   d4328:	681b      	ldr	r3, [r3, #0]
   d432a:	695b      	ldr	r3, [r3, #20]
   d432c:	9301      	str	r3, [sp, #4]
   d432e:	bd08      	pop	{r3, pc}
   d4330:	00030240 	.word	0x00030240

000d4334 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4334:	b508      	push	{r3, lr}
   d4336:	4b02      	ldr	r3, [pc, #8]	; (d4340 <network_off+0xc>)
   d4338:	681b      	ldr	r3, [r3, #0]
   d433a:	699b      	ldr	r3, [r3, #24]
   d433c:	9301      	str	r3, [sp, #4]
   d433e:	bd08      	pop	{r3, pc}
   d4340:	00030240 	.word	0x00030240

000d4344 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4344:	b508      	push	{r3, lr}
   d4346:	4b02      	ldr	r3, [pc, #8]	; (d4350 <network_listen+0xc>)
   d4348:	681b      	ldr	r3, [r3, #0]
   d434a:	69db      	ldr	r3, [r3, #28]
   d434c:	9301      	str	r3, [sp, #4]
   d434e:	bd08      	pop	{r3, pc}
   d4350:	00030240 	.word	0x00030240

000d4354 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4354:	b508      	push	{r3, lr}
   d4356:	4b02      	ldr	r3, [pc, #8]	; (d4360 <network_listening+0xc>)
   d4358:	681b      	ldr	r3, [r3, #0]
   d435a:	6a1b      	ldr	r3, [r3, #32]
   d435c:	9301      	str	r3, [sp, #4]
   d435e:	bd08      	pop	{r3, pc}
   d4360:	00030240 	.word	0x00030240

000d4364 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4364:	b508      	push	{r3, lr}
   d4366:	4b02      	ldr	r3, [pc, #8]	; (d4370 <network_set_listen_timeout+0xc>)
   d4368:	681b      	ldr	r3, [r3, #0]
   d436a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d436c:	9301      	str	r3, [sp, #4]
   d436e:	bd08      	pop	{r3, pc}
   d4370:	00030240 	.word	0x00030240

000d4374 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4374:	b508      	push	{r3, lr}
   d4376:	4b02      	ldr	r3, [pc, #8]	; (d4380 <network_get_listen_timeout+0xc>)
   d4378:	681b      	ldr	r3, [r3, #0]
   d437a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d437c:	9301      	str	r3, [sp, #4]
   d437e:	bd08      	pop	{r3, pc}
   d4380:	00030240 	.word	0x00030240

000d4384 <spark_cloud_flag_connect>:
DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d4384:	b508      	push	{r3, lr}
   d4386:	4b02      	ldr	r3, [pc, #8]	; (d4390 <spark_cloud_flag_connect+0xc>)
   d4388:	681b      	ldr	r3, [r3, #0]
   d438a:	68db      	ldr	r3, [r3, #12]
   d438c:	9301      	str	r3, [sp, #4]
   d438e:	bd08      	pop	{r3, pc}
   d4390:	00030244 	.word	0x00030244

000d4394 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4394:	b508      	push	{r3, lr}
   d4396:	4b02      	ldr	r3, [pc, #8]	; (d43a0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4398:	681b      	ldr	r3, [r3, #0]
   d439a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d439c:	9301      	str	r3, [sp, #4]
   d439e:	bd08      	pop	{r3, pc}
   d43a0:	00030244 	.word	0x00030244

000d43a4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d43a4:	b508      	push	{r3, lr}
   d43a6:	4b02      	ldr	r3, [pc, #8]	; (d43b0 <malloc+0xc>)
   d43a8:	681b      	ldr	r3, [r3, #0]
   d43aa:	681b      	ldr	r3, [r3, #0]
   d43ac:	9301      	str	r3, [sp, #4]
   d43ae:	bd08      	pop	{r3, pc}
   d43b0:	0003021c 	.word	0x0003021c

000d43b4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d43b4:	b508      	push	{r3, lr}
   d43b6:	4b02      	ldr	r3, [pc, #8]	; (d43c0 <free+0xc>)
   d43b8:	681b      	ldr	r3, [r3, #0]
   d43ba:	685b      	ldr	r3, [r3, #4]
   d43bc:	9301      	str	r3, [sp, #4]
   d43be:	bd08      	pop	{r3, pc}
   d43c0:	0003021c 	.word	0x0003021c

000d43c4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d43c4:	2200      	movs	r2, #0
   d43c6:	4611      	mov	r1, r2
   d43c8:	6840      	ldr	r0, [r0, #4]
   d43ca:	f7ff bfc3 	b.w	d4354 <network_listening>

000d43ce <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d43ce:	2200      	movs	r2, #0
   d43d0:	4611      	mov	r1, r2
   d43d2:	6840      	ldr	r0, [r0, #4]
   d43d4:	f7ff bfce 	b.w	d4374 <network_get_listen_timeout>

000d43d8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d43d8:	2200      	movs	r2, #0
   d43da:	6840      	ldr	r0, [r0, #4]
   d43dc:	f7ff bfc2 	b.w	d4364 <network_set_listen_timeout>

000d43e0 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d43e0:	2200      	movs	r2, #0
   d43e2:	f081 0101 	eor.w	r1, r1, #1
   d43e6:	6840      	ldr	r0, [r0, #4]
   d43e8:	f7ff bfac 	b.w	d4344 <network_listen>

000d43ec <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d43ec:	2300      	movs	r3, #0
   d43ee:	461a      	mov	r2, r3
   d43f0:	4619      	mov	r1, r3
   d43f2:	6840      	ldr	r0, [r0, #4]
   d43f4:	f7ff bf9e 	b.w	d4334 <network_off>

000d43f8 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d43f8:	2300      	movs	r3, #0
   d43fa:	461a      	mov	r2, r3
   d43fc:	4619      	mov	r1, r3
   d43fe:	6840      	ldr	r0, [r0, #4]
   d4400:	f7ff bf90 	b.w	d4324 <network_on>

000d4404 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4404:	2200      	movs	r2, #0
   d4406:	4611      	mov	r1, r2
   d4408:	6840      	ldr	r0, [r0, #4]
   d440a:	f7ff bf83 	b.w	d4314 <network_ready>

000d440e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d440e:	2200      	movs	r2, #0
   d4410:	4611      	mov	r1, r2
   d4412:	6840      	ldr	r0, [r0, #4]
   d4414:	f7ff bf6e 	b.w	d42f4 <network_connecting>

000d4418 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4418:	2200      	movs	r2, #0
   d441a:	2102      	movs	r1, #2
   d441c:	6840      	ldr	r0, [r0, #4]
   d441e:	f7ff bf71 	b.w	d4304 <network_disconnect>

000d4422 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4422:	2300      	movs	r3, #0
   d4424:	461a      	mov	r2, r3
   d4426:	6840      	ldr	r0, [r0, #4]
   d4428:	f7ff bf5c 	b.w	d42e4 <network_connect>

000d442c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d442c:	4b02      	ldr	r3, [pc, #8]	; (d4438 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d442e:	2203      	movs	r2, #3
   d4430:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4432:	4a02      	ldr	r2, [pc, #8]	; (d443c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4434:	601a      	str	r2, [r3, #0]
   d4436:	4770      	bx	lr
   d4438:	2003e3e0 	.word	0x2003e3e0
   d443c:	000d503c 	.word	0x000d503c

000d4440 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4440:	4770      	bx	lr

000d4442 <_ZN8SPIClassD0Ev>:
   d4442:	b510      	push	{r4, lr}
   d4444:	2110      	movs	r1, #16
   d4446:	4604      	mov	r4, r0
   d4448:	f000 fc4d 	bl	d4ce6 <_ZdlPvj>
   d444c:	4620      	mov	r0, r4
   d444e:	bd10      	pop	{r4, pc}

000d4450 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4450:	b570      	push	{r4, r5, r6, lr}
   d4452:	4b08      	ldr	r3, [pc, #32]	; (d4474 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d4454:	6003      	str	r3, [r0, #0]
   d4456:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d4458:	2500      	movs	r5, #0
   d445a:	460e      	mov	r6, r1
   d445c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4460:	f7ff fe9c 	bl	d419c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d4464:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d4466:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4468:	f7ff fe68 	bl	d413c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d446c:	60a5      	str	r5, [r4, #8]
}
   d446e:	4620      	mov	r0, r4
   d4470:	bd70      	pop	{r4, r5, r6, pc}
   d4472:	bf00      	nop
   d4474:	000d5070 	.word	0x000d5070

000d4478 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4478:	4b04      	ldr	r3, [pc, #16]	; (d448c <_GLOBAL__sub_I_System+0x14>)
   d447a:	2000      	movs	r0, #0
   d447c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4480:	7018      	strb	r0, [r3, #0]
   d4482:	8058      	strh	r0, [r3, #2]
   d4484:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4486:	f7ff bf11 	b.w	d42ac <set_system_mode>
   d448a:	bf00      	nop
   d448c:	2003e3e8 	.word	0x2003e3e8

000d4490 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4490:	4802      	ldr	r0, [pc, #8]	; (d449c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4492:	2300      	movs	r3, #0
   d4494:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4496:	f7ff be89 	b.w	d41ac <os_mutex_recursive_create>
   d449a:	bf00      	nop
   d449c:	2003e3f0 	.word	0x2003e3f0

000d44a0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d44a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d44a2:	4606      	mov	r6, r0
   d44a4:	460d      	mov	r5, r1
   d44a6:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d44a8:	2400      	movs	r4, #0
  while (size--) {
   d44aa:	42bd      	cmp	r5, r7
   d44ac:	d00c      	beq.n	d44c8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d44ae:	6833      	ldr	r3, [r6, #0]
   d44b0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d44b4:	689b      	ldr	r3, [r3, #8]
   d44b6:	4630      	mov	r0, r6
   d44b8:	4798      	blx	r3
     if (chunk>=0)
   d44ba:	2800      	cmp	r0, #0
   d44bc:	db01      	blt.n	d44c2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d44be:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d44c0:	e7f3      	b.n	d44aa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d44c2:	2c00      	cmp	r4, #0
   d44c4:	bf08      	it	eq
   d44c6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d44c8:	4620      	mov	r0, r4
   d44ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d44cc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d44cc:	b570      	push	{r4, r5, r6, lr}
   d44ce:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d44d0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d44d2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d44d4:	b149      	cbz	r1, d44ea <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d44d6:	f000 fd9b 	bl	d5010 <strlen>
   d44da:	682b      	ldr	r3, [r5, #0]
   d44dc:	4602      	mov	r2, r0
   d44de:	4621      	mov	r1, r4
   d44e0:	4628      	mov	r0, r5
   d44e2:	68db      	ldr	r3, [r3, #12]
    }
   d44e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d44e8:	4718      	bx	r3
    }
   d44ea:	bd70      	pop	{r4, r5, r6, pc}

000d44ec <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d44ec:	6803      	ldr	r3, [r0, #0]
   d44ee:	689b      	ldr	r3, [r3, #8]
   d44f0:	4718      	bx	r3

000d44f2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d44f2:	b530      	push	{r4, r5, lr}
   d44f4:	b08b      	sub	sp, #44	; 0x2c
   d44f6:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d44f8:	2100      	movs	r1, #0
   d44fa:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d44fe:	2a01      	cmp	r2, #1
   d4500:	bf98      	it	ls
   d4502:	220a      	movls	r2, #10
   d4504:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d4508:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d450c:	fb05 3312 	mls	r3, r5, r2, r3
   d4510:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4514:	2b09      	cmp	r3, #9
   d4516:	bf94      	ite	ls
   d4518:	3330      	addls	r3, #48	; 0x30
   d451a:	3337      	addhi	r3, #55	; 0x37
   d451c:	b2db      	uxtb	r3, r3
   d451e:	4621      	mov	r1, r4
   d4520:	f804 3901 	strb.w	r3, [r4], #-1
   d4524:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4526:	2d00      	cmp	r5, #0
   d4528:	d1ee      	bne.n	d4508 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d452a:	f7ff ffcf 	bl	d44cc <_ZN5Print5writeEPKc>
}
   d452e:	b00b      	add	sp, #44	; 0x2c
   d4530:	bd30      	pop	{r4, r5, pc}

000d4532 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d4532:	b410      	push	{r4}
  if (base == 0) return write(n);
   d4534:	b92a      	cbnz	r2, d4542 <_ZN5Print5printEmi+0x10>
   d4536:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d4538:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d453c:	689b      	ldr	r3, [r3, #8]
   d453e:	b2c9      	uxtb	r1, r1
   d4540:	4718      	bx	r3
  else return printNumber(n, base);
   d4542:	b2d2      	uxtb	r2, r2
}
   d4544:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4548:	f7ff bfd3 	b.w	d44f2 <_ZN5Print11printNumberEmh>

000d454c <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d454c:	f7ff bff1 	b.w	d4532 <_ZN5Print5printEmi>

000d4550 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4550:	4b01      	ldr	r3, [pc, #4]	; (d4558 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4552:	4a02      	ldr	r2, [pc, #8]	; (d455c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4554:	601a      	str	r2, [r3, #0]
   d4556:	4770      	bx	lr
   d4558:	2003e3f4 	.word	0x2003e3f4
   d455c:	000d50eb 	.word	0x000d50eb

000d4560 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4560:	4b02      	ldr	r3, [pc, #8]	; (d456c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4562:	681a      	ldr	r2, [r3, #0]
   d4564:	4b02      	ldr	r3, [pc, #8]	; (d4570 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4566:	601a      	str	r2, [r3, #0]
   d4568:	4770      	bx	lr
   d456a:	bf00      	nop
   d456c:	2003e36c 	.word	0x2003e36c
   d4570:	2003e3f8 	.word	0x2003e3f8

000d4574 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4574:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4576:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4578:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d457a:	b113      	cbz	r3, d4582 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d457c:	2203      	movs	r2, #3
   d457e:	4601      	mov	r1, r0
   d4580:	4798      	blx	r3
    }
   d4582:	4620      	mov	r0, r4
   d4584:	bd10      	pop	{r4, pc}

000d4586 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4586:	b510      	push	{r4, lr}
   d4588:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d458a:	f7ff fff3 	bl	d4574 <_ZNSt14_Function_baseD1Ev>
   d458e:	4620      	mov	r0, r4
   d4590:	bd10      	pop	{r4, pc}
	...

000d4594 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4594:	4803      	ldr	r0, [pc, #12]	; (d45a4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4596:	4a04      	ldr	r2, [pc, #16]	; (d45a8 <_GLOBAL__sub_I_RGB+0x14>)
   d4598:	4904      	ldr	r1, [pc, #16]	; (d45ac <_GLOBAL__sub_I_RGB+0x18>)
   d459a:	2300      	movs	r3, #0
   d459c:	6083      	str	r3, [r0, #8]
   d459e:	f000 bb9d 	b.w	d4cdc <__aeabi_atexit>
   d45a2:	bf00      	nop
   d45a4:	2003e3fc 	.word	0x2003e3fc
   d45a8:	2003e3d4 	.word	0x2003e3d4
   d45ac:	000d4587 	.word	0x000d4587

000d45b0 <loop>:
void setup()  {

}


void loop() {
   d45b0:	4770      	bx	lr
	...

000d45b4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d45b4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d45b6:	4b0c      	ldr	r3, [pc, #48]	; (d45e8 <serialEventRun+0x34>)
   d45b8:	b133      	cbz	r3, d45c8 <serialEventRun+0x14>
   d45ba:	f000 f935 	bl	d4828 <_Z16_fetch_usbserialv>
   d45be:	6803      	ldr	r3, [r0, #0]
   d45c0:	691b      	ldr	r3, [r3, #16]
   d45c2:	4798      	blx	r3
   d45c4:	2800      	cmp	r0, #0
   d45c6:	dc09      	bgt.n	d45dc <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d45c8:	4b08      	ldr	r3, [pc, #32]	; (d45ec <serialEventRun+0x38>)
   d45ca:	b163      	cbz	r3, d45e6 <serialEventRun+0x32>
   d45cc:	f000 f9aa 	bl	d4924 <_Z22__fetch_global_Serial1v>
   d45d0:	6803      	ldr	r3, [r0, #0]
   d45d2:	691b      	ldr	r3, [r3, #16]
   d45d4:	4798      	blx	r3
   d45d6:	2800      	cmp	r0, #0
   d45d8:	dc03      	bgt.n	d45e2 <serialEventRun+0x2e>
   d45da:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d45dc:	f3af 8000 	nop.w
   d45e0:	e7f2      	b.n	d45c8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d45e2:	f3af 8000 	nop.w
   d45e6:	bd08      	pop	{r3, pc}
	...

000d45f0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d45f0:	b508      	push	{r3, lr}
	serialEventRun();
   d45f2:	f7ff ffdf 	bl	d45b4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d45f6:	f7ff fdb1 	bl	d415c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d45fa:	4b01      	ldr	r3, [pc, #4]	; (d4600 <_post_loop+0x10>)
   d45fc:	6018      	str	r0, [r3, #0]
   d45fe:	bd08      	pop	{r3, pc}
   d4600:	2003e74c 	.word	0x2003e74c

000d4604 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4604:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4606:	2300      	movs	r3, #0
   d4608:	9300      	str	r3, [sp, #0]
   d460a:	461a      	mov	r2, r3
   d460c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4610:	f7ff fe5e 	bl	d42d0 <system_ctrl_set_result>
}
   d4614:	b003      	add	sp, #12
   d4616:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d461c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d461c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d461e:	8843      	ldrh	r3, [r0, #2]
   d4620:	2b0a      	cmp	r3, #10
   d4622:	d008      	beq.n	d4636 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4624:	2b50      	cmp	r3, #80	; 0x50
   d4626:	d109      	bne.n	d463c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4628:	4b09      	ldr	r3, [pc, #36]	; (d4650 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d462a:	681b      	ldr	r3, [r3, #0]
   d462c:	b13b      	cbz	r3, d463e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d462e:	b003      	add	sp, #12
   d4630:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4634:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4636:	f7ff ffe5 	bl	d4604 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d463a:	e006      	b.n	d464a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d463c:	2300      	movs	r3, #0
   d463e:	9300      	str	r3, [sp, #0]
   d4640:	461a      	mov	r2, r3
   d4642:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4646:	f7ff fe43 	bl	d42d0 <system_ctrl_set_result>
        break;
    }
}
   d464a:	b003      	add	sp, #12
   d464c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4650:	2003e40c 	.word	0x2003e40c

000d4654 <module_user_init_hook>:

void module_user_init_hook()
{
   d4654:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4656:	f7ff fd79 	bl	d414c <HAL_RNG_GetRandomNumber>
   d465a:	4604      	mov	r4, r0
    srand(seed);
   d465c:	f000 fcb0 	bl	d4fc0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4660:	4b07      	ldr	r3, [pc, #28]	; (d4680 <module_user_init_hook+0x2c>)
   d4662:	b113      	cbz	r3, d466a <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d4664:	4620      	mov	r0, r4
   d4666:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d466a:	2100      	movs	r1, #0
   d466c:	4804      	ldr	r0, [pc, #16]	; (d4680 <module_user_init_hook+0x2c>)
   d466e:	f7ff fe91 	bl	d4394 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4672:	2100      	movs	r1, #0
   d4674:	4803      	ldr	r0, [pc, #12]	; (d4684 <module_user_init_hook+0x30>)
}
   d4676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d467a:	f7ff be1f 	b.w	d42bc <system_ctrl_set_app_request_handler>
   d467e:	bf00      	nop
   d4680:	00000000 	.word	0x00000000
   d4684:	000d461d 	.word	0x000d461d

000d4688 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4688:	4770      	bx	lr

000d468a <_ZN9IPAddressD0Ev>:
   d468a:	b510      	push	{r4, lr}
   d468c:	2118      	movs	r1, #24
   d468e:	4604      	mov	r4, r0
   d4690:	f000 fb29 	bl	d4ce6 <_ZdlPvj>
   d4694:	4620      	mov	r0, r4
   d4696:	bd10      	pop	{r4, pc}

000d4698 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4698:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d469a:	7d03      	ldrb	r3, [r0, #20]
   d469c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d469e:	b08d      	sub	sp, #52	; 0x34
   d46a0:	460e      	mov	r6, r1
   d46a2:	f100 0704 	add.w	r7, r0, #4
   d46a6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d46aa:	d002      	beq.n	d46b2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d46ac:	f100 0508 	add.w	r5, r0, #8
   d46b0:	e018      	b.n	d46e4 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d46b2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d46b4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d46b6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d46ba:	232f      	movs	r3, #47	; 0x2f
   d46bc:	462a      	mov	r2, r5
   d46be:	200a      	movs	r0, #10
   d46c0:	f7ff fd7c 	bl	d41bc <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d46c4:	4628      	mov	r0, r5
   d46c6:	f000 fca3 	bl	d5010 <strlen>
   d46ca:	6833      	ldr	r3, [r6, #0]
   d46cc:	4602      	mov	r2, r0
   d46ce:	68db      	ldr	r3, [r3, #12]
   d46d0:	4629      	mov	r1, r5
   d46d2:	4630      	mov	r0, r6
   d46d4:	4798      	blx	r3
   d46d6:	e00f      	b.n	d46f8 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d46d8:	b124      	cbz	r4, d46e4 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d46da:	212e      	movs	r1, #46	; 0x2e
   d46dc:	4630      	mov	r0, r6
   d46de:	f7ff ff05 	bl	d44ec <_ZN5Print5printEc>
   d46e2:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d46e4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d46e8:	220a      	movs	r2, #10
   d46ea:	4630      	mov	r0, r6
   d46ec:	f7ff ff2e 	bl	d454c <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d46f0:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d46f2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d46f4:	d1f0      	bne.n	d46d8 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d46f6:	4620      	mov	r0, r4
    }
    return n;
}
   d46f8:	b00d      	add	sp, #52	; 0x34
   d46fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d46fc <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d46fc:	b510      	push	{r4, lr}
   d46fe:	4b05      	ldr	r3, [pc, #20]	; (d4714 <_ZN9IPAddressC1Ev+0x18>)
   d4700:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4702:	2211      	movs	r2, #17
   d4704:	f840 3b04 	str.w	r3, [r0], #4
   d4708:	2100      	movs	r1, #0
   d470a:	f000 fc50 	bl	d4fae <memset>
{
    clear();
}
   d470e:	4620      	mov	r0, r4
   d4710:	bd10      	pop	{r4, pc}
   d4712:	bf00      	nop
   d4714:	000d518c 	.word	0x000d518c

000d4718 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4718:	4603      	mov	r3, r0
   d471a:	4a07      	ldr	r2, [pc, #28]	; (d4738 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d471c:	b510      	push	{r4, lr}
   d471e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4722:	f101 0210 	add.w	r2, r1, #16
   d4726:	f851 4b04 	ldr.w	r4, [r1], #4
   d472a:	f843 4b04 	str.w	r4, [r3], #4
   d472e:	4291      	cmp	r1, r2
   d4730:	d1f9      	bne.n	d4726 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4732:	780a      	ldrb	r2, [r1, #0]
   d4734:	701a      	strb	r2, [r3, #0]
}
   d4736:	bd10      	pop	{r4, pc}
   d4738:	000d518c 	.word	0x000d518c

000d473c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d473c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d473e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4742:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4746:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d474a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d474e:	2304      	movs	r3, #4
   d4750:	6041      	str	r1, [r0, #4]
   d4752:	7503      	strb	r3, [r0, #20]
   d4754:	bd10      	pop	{r4, pc}

000d4756 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4756:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4758:	780d      	ldrb	r5, [r1, #0]
   d475a:	788b      	ldrb	r3, [r1, #2]
   d475c:	784a      	ldrb	r2, [r1, #1]
   d475e:	78c9      	ldrb	r1, [r1, #3]
   d4760:	9100      	str	r1, [sp, #0]
   d4762:	4629      	mov	r1, r5
   d4764:	f7ff ffea 	bl	d473c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4768:	b003      	add	sp, #12
   d476a:	bd30      	pop	{r4, r5, pc}

000d476c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d476c:	7441      	strb	r1, [r0, #17]
   d476e:	4770      	bx	lr

000d4770 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4770:	4770      	bx	lr

000d4772 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4772:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4774:	2100      	movs	r1, #0
   d4776:	7c00      	ldrb	r0, [r0, #16]
   d4778:	f7ff fd80 	bl	d427c <HAL_USB_USART_Receive_Data>
}
   d477c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4780:	bf28      	it	cs
   d4782:	f04f 30ff 	movcs.w	r0, #4294967295
   d4786:	bd08      	pop	{r3, pc}

000d4788 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4788:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d478a:	2101      	movs	r1, #1
   d478c:	7c00      	ldrb	r0, [r0, #16]
   d478e:	f7ff fd75 	bl	d427c <HAL_USB_USART_Receive_Data>
}
   d4792:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4796:	bf28      	it	cs
   d4798:	f04f 30ff 	movcs.w	r0, #4294967295
   d479c:	bd08      	pop	{r3, pc}

000d479e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d479e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d47a0:	7c00      	ldrb	r0, [r0, #16]
   d47a2:	f7ff fd63 	bl	d426c <HAL_USB_USART_Available_Data_For_Write>
}
   d47a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d47aa:	bd08      	pop	{r3, pc}

000d47ac <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d47ac:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d47ae:	7c00      	ldrb	r0, [r0, #16]
   d47b0:	f7ff fd54 	bl	d425c <HAL_USB_USART_Available_Data>
}
   d47b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d47b8:	bd08      	pop	{r3, pc}

000d47ba <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d47ba:	7c00      	ldrb	r0, [r0, #16]
   d47bc:	f7ff bd6e 	b.w	d429c <HAL_USB_USART_Flush_Data>

000d47c0 <_ZN9USBSerialD0Ev>:
   d47c0:	b510      	push	{r4, lr}
   d47c2:	2114      	movs	r1, #20
   d47c4:	4604      	mov	r4, r0
   d47c6:	f000 fa8e 	bl	d4ce6 <_ZdlPvj>
   d47ca:	4620      	mov	r0, r4
   d47cc:	bd10      	pop	{r4, pc}

000d47ce <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d47ce:	b538      	push	{r3, r4, r5, lr}
   d47d0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d47d2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d47d4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d47d6:	f7ff fd49 	bl	d426c <HAL_USB_USART_Available_Data_For_Write>
   d47da:	2800      	cmp	r0, #0
   d47dc:	dc01      	bgt.n	d47e2 <_ZN9USBSerial5writeEh+0x14>
   d47de:	7c60      	ldrb	r0, [r4, #17]
   d47e0:	b128      	cbz	r0, d47ee <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d47e2:	4629      	mov	r1, r5
   d47e4:	7c20      	ldrb	r0, [r4, #16]
   d47e6:	f7ff fd51 	bl	d428c <HAL_USB_USART_Send_Data>
   d47ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d47ee:	bd38      	pop	{r3, r4, r5, pc}

000d47f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d47f0:	b510      	push	{r4, lr}
   d47f2:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d47f4:	2300      	movs	r3, #0
   d47f6:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d47f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d47fc:	60a3      	str	r3, [r4, #8]
   d47fe:	4b05      	ldr	r3, [pc, #20]	; (d4814 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4800:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4802:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4804:	4608      	mov	r0, r1
{
  _serial = serial;
   d4806:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4808:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d480a:	4611      	mov	r1, r2
   d480c:	f7ff fd1e 	bl	d424c <HAL_USB_USART_Init>
}
   d4810:	4620      	mov	r0, r4
   d4812:	bd10      	pop	{r4, pc}
   d4814:	000d51a0 	.word	0x000d51a0

000d4818 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4818:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d481a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d481c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d481e:	2100      	movs	r1, #0
   d4820:	f000 fbc5 	bl	d4fae <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4824:	4620      	mov	r0, r4
   d4826:	bd10      	pop	{r4, pc}

000d4828 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4828:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d482a:	4d0e      	ldr	r5, [pc, #56]	; (d4864 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d482c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d482e:	a801      	add	r0, sp, #4
   d4830:	f7ff fff2 	bl	d4818 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4834:	6829      	ldr	r1, [r5, #0]
   d4836:	f011 0401 	ands.w	r4, r1, #1
   d483a:	d110      	bne.n	d485e <_Z16_fetch_usbserialv+0x36>
   d483c:	4628      	mov	r0, r5
   d483e:	f7ff fc2e 	bl	d409e <__cxa_guard_acquire>
   d4842:	b160      	cbz	r0, d485e <_Z16_fetch_usbserialv+0x36>
   d4844:	aa01      	add	r2, sp, #4
   d4846:	4621      	mov	r1, r4
   d4848:	4807      	ldr	r0, [pc, #28]	; (d4868 <_Z16_fetch_usbserialv+0x40>)
   d484a:	f7ff ffd1 	bl	d47f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d484e:	4628      	mov	r0, r5
   d4850:	f7ff fc2a 	bl	d40a8 <__cxa_guard_release>
   d4854:	4a05      	ldr	r2, [pc, #20]	; (d486c <_Z16_fetch_usbserialv+0x44>)
   d4856:	4906      	ldr	r1, [pc, #24]	; (d4870 <_Z16_fetch_usbserialv+0x48>)
   d4858:	4803      	ldr	r0, [pc, #12]	; (d4868 <_Z16_fetch_usbserialv+0x40>)
   d485a:	f000 fa3f 	bl	d4cdc <__aeabi_atexit>
	return _usbserial;
}
   d485e:	4802      	ldr	r0, [pc, #8]	; (d4868 <_Z16_fetch_usbserialv+0x40>)
   d4860:	b007      	add	sp, #28
   d4862:	bd30      	pop	{r4, r5, pc}
   d4864:	2003e410 	.word	0x2003e410
   d4868:	2003e414 	.word	0x2003e414
   d486c:	2003e3d4 	.word	0x2003e3d4
   d4870:	000d4771 	.word	0x000d4771

000d4874 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4874:	4770      	bx	lr

000d4876 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4876:	7441      	strb	r1, [r0, #17]
   d4878:	4770      	bx	lr

000d487a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d487a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d487c:	7c00      	ldrb	r0, [r0, #16]
   d487e:	f7ff fcd5 	bl	d422c <HAL_USART_Available_Data_For_Write>
}
   d4882:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4886:	bd08      	pop	{r3, pc}

000d4888 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4888:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d488a:	7c00      	ldrb	r0, [r0, #16]
   d488c:	f7ff fcae 	bl	d41ec <HAL_USART_Available_Data>
}
   d4890:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4894:	bd08      	pop	{r3, pc}

000d4896 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4896:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4898:	7c00      	ldrb	r0, [r0, #16]
   d489a:	f7ff fcb7 	bl	d420c <HAL_USART_Peek_Data>
}
   d489e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d48a2:	bf28      	it	cs
   d48a4:	f04f 30ff 	movcs.w	r0, #4294967295
   d48a8:	bd08      	pop	{r3, pc}

000d48aa <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d48aa:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d48ac:	7c00      	ldrb	r0, [r0, #16]
   d48ae:	f7ff fca5 	bl	d41fc <HAL_USART_Read_Data>
}
   d48b2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d48b6:	bf28      	it	cs
   d48b8:	f04f 30ff 	movcs.w	r0, #4294967295
   d48bc:	bd08      	pop	{r3, pc}

000d48be <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d48be:	7c00      	ldrb	r0, [r0, #16]
   d48c0:	f7ff bcac 	b.w	d421c <HAL_USART_Flush_Data>

000d48c4 <_ZN11USARTSerialD0Ev>:
   d48c4:	b510      	push	{r4, lr}
   d48c6:	2114      	movs	r1, #20
   d48c8:	4604      	mov	r4, r0
   d48ca:	f000 fa0c 	bl	d4ce6 <_ZdlPvj>
   d48ce:	4620      	mov	r0, r4
   d48d0:	bd10      	pop	{r4, pc}

000d48d2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d48d2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d48d4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d48d6:	4604      	mov	r4, r0
   d48d8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d48da:	b925      	cbnz	r5, d48e6 <_ZN11USARTSerial5writeEh+0x14>
   d48dc:	7c00      	ldrb	r0, [r0, #16]
   d48de:	f7ff fca5 	bl	d422c <HAL_USART_Available_Data_For_Write>
   d48e2:	2800      	cmp	r0, #0
   d48e4:	dd05      	ble.n	d48f2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d48e6:	4631      	mov	r1, r6
   d48e8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d48ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d48ee:	f7ff bc75 	b.w	d41dc <HAL_USART_Write_Data>
  }
  return 0;
}
   d48f2:	4628      	mov	r0, r5
   d48f4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d48f8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d48f8:	b510      	push	{r4, lr}
   d48fa:	4604      	mov	r4, r0
   d48fc:	4608      	mov	r0, r1
   d48fe:	4611      	mov	r1, r2
   d4900:	2200      	movs	r2, #0
   d4902:	6062      	str	r2, [r4, #4]
   d4904:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4908:	60a2      	str	r2, [r4, #8]
   d490a:	4a05      	ldr	r2, [pc, #20]	; (d4920 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d490c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d490e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4910:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4912:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d4914:	461a      	mov	r2, r3
   d4916:	f7ff fc59 	bl	d41cc <HAL_USART_Init>
}
   d491a:	4620      	mov	r0, r4
   d491c:	bd10      	pop	{r4, pc}
   d491e:	bf00      	nop
   d4920:	000d51d0 	.word	0x000d51d0

000d4924 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4924:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4926:	4d0c      	ldr	r5, [pc, #48]	; (d4958 <_Z22__fetch_global_Serial1v+0x34>)
   d4928:	6829      	ldr	r1, [r5, #0]
   d492a:	f011 0401 	ands.w	r4, r1, #1
   d492e:	d111      	bne.n	d4954 <_Z22__fetch_global_Serial1v+0x30>
   d4930:	4628      	mov	r0, r5
   d4932:	f7ff fbb4 	bl	d409e <__cxa_guard_acquire>
   d4936:	b168      	cbz	r0, d4954 <_Z22__fetch_global_Serial1v+0x30>
   d4938:	4a08      	ldr	r2, [pc, #32]	; (d495c <_Z22__fetch_global_Serial1v+0x38>)
   d493a:	4b09      	ldr	r3, [pc, #36]	; (d4960 <_Z22__fetch_global_Serial1v+0x3c>)
   d493c:	4809      	ldr	r0, [pc, #36]	; (d4964 <_Z22__fetch_global_Serial1v+0x40>)
   d493e:	4621      	mov	r1, r4
   d4940:	f7ff ffda 	bl	d48f8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d4944:	4628      	mov	r0, r5
   d4946:	f7ff fbaf 	bl	d40a8 <__cxa_guard_release>
   d494a:	4a07      	ldr	r2, [pc, #28]	; (d4968 <_Z22__fetch_global_Serial1v+0x44>)
   d494c:	4907      	ldr	r1, [pc, #28]	; (d496c <_Z22__fetch_global_Serial1v+0x48>)
   d494e:	4805      	ldr	r0, [pc, #20]	; (d4964 <_Z22__fetch_global_Serial1v+0x40>)
   d4950:	f000 f9c4 	bl	d4cdc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4954:	4803      	ldr	r0, [pc, #12]	; (d4964 <_Z22__fetch_global_Serial1v+0x40>)
   d4956:	bd38      	pop	{r3, r4, r5, pc}
   d4958:	2003e4c0 	.word	0x2003e4c0
   d495c:	2003e4c4 	.word	0x2003e4c4
   d4960:	2003e43c 	.word	0x2003e43c
   d4964:	2003e428 	.word	0x2003e428
   d4968:	2003e3d4 	.word	0x2003e3d4
   d496c:	000d4875 	.word	0x000d4875

000d4970 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4970:	2200      	movs	r2, #0
   d4972:	4611      	mov	r1, r2
   d4974:	6840      	ldr	r0, [r0, #4]
   d4976:	f7ff bced 	b.w	d4354 <network_listening>

000d497a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d497a:	2200      	movs	r2, #0
   d497c:	4611      	mov	r1, r2
   d497e:	6840      	ldr	r0, [r0, #4]
   d4980:	f7ff bcf8 	b.w	d4374 <network_get_listen_timeout>

000d4984 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4984:	2200      	movs	r2, #0
   d4986:	6840      	ldr	r0, [r0, #4]
   d4988:	f7ff bcec 	b.w	d4364 <network_set_listen_timeout>

000d498c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d498c:	2200      	movs	r2, #0
   d498e:	f081 0101 	eor.w	r1, r1, #1
   d4992:	6840      	ldr	r0, [r0, #4]
   d4994:	f7ff bcd6 	b.w	d4344 <network_listen>

000d4998 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d4998:	2300      	movs	r3, #0
   d499a:	461a      	mov	r2, r3
   d499c:	2101      	movs	r1, #1
   d499e:	6840      	ldr	r0, [r0, #4]
   d49a0:	f7ff bcc8 	b.w	d4334 <network_off>

000d49a4 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d49a4:	2300      	movs	r3, #0
   d49a6:	461a      	mov	r2, r3
   d49a8:	4619      	mov	r1, r3
   d49aa:	6840      	ldr	r0, [r0, #4]
   d49ac:	f7ff bcba 	b.w	d4324 <network_on>

000d49b0 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d49b0:	2200      	movs	r2, #0
   d49b2:	4611      	mov	r1, r2
   d49b4:	6840      	ldr	r0, [r0, #4]
   d49b6:	f7ff bcad 	b.w	d4314 <network_ready>

000d49ba <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d49ba:	2200      	movs	r2, #0
   d49bc:	4611      	mov	r1, r2
   d49be:	6840      	ldr	r0, [r0, #4]
   d49c0:	f7ff bc98 	b.w	d42f4 <network_connecting>

000d49c4 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d49c4:	2200      	movs	r2, #0
   d49c6:	2102      	movs	r1, #2
   d49c8:	6840      	ldr	r0, [r0, #4]
   d49ca:	f7ff bc9b 	b.w	d4304 <network_disconnect>

000d49ce <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d49ce:	2300      	movs	r3, #0
   d49d0:	461a      	mov	r2, r3
   d49d2:	6840      	ldr	r0, [r0, #4]
   d49d4:	f7ff bc86 	b.w	d42e4 <network_connect>

000d49d8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d49d8:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d49da:	4605      	mov	r5, r0
   d49dc:	b188      	cbz	r0, d4a02 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d49de:	6804      	ldr	r4, [r0, #0]
   d49e0:	b14c      	cbz	r4, d49f6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d49e2:	68a3      	ldr	r3, [r4, #8]
   d49e4:	b11b      	cbz	r3, d49ee <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d49e6:	2203      	movs	r2, #3
   d49e8:	4621      	mov	r1, r4
   d49ea:	4620      	mov	r0, r4
   d49ec:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d49ee:	2110      	movs	r1, #16
   d49f0:	4620      	mov	r0, r4
   d49f2:	f000 f978 	bl	d4ce6 <_ZdlPvj>
   d49f6:	4628      	mov	r0, r5
   d49f8:	2114      	movs	r1, #20
      }
   d49fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d49fe:	f000 b972 	b.w	d4ce6 <_ZdlPvj>
   d4a02:	bd38      	pop	{r3, r4, r5, pc}

000d4a04 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4a04:	b110      	cbz	r0, d4a0c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d4a06:	6803      	ldr	r3, [r0, #0]
   d4a08:	685b      	ldr	r3, [r3, #4]
   d4a0a:	4718      	bx	r3
   d4a0c:	4770      	bx	lr

000d4a0e <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4a0e:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4a10:	6803      	ldr	r3, [r0, #0]
   d4a12:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4a14:	b1bb      	cbz	r3, d4a46 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4a16:	6858      	ldr	r0, [r3, #4]
   d4a18:	f7ff fba8 	bl	d416c <os_thread_is_current>
   d4a1c:	b978      	cbnz	r0, d4a3e <_ZN6ThreadD1Ev+0x30>
   d4a1e:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4a20:	7c5a      	ldrb	r2, [r3, #17]
   d4a22:	b912      	cbnz	r2, d4a2a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4a24:	6858      	ldr	r0, [r3, #4]
   d4a26:	f7ff fba9 	bl	d417c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4a2a:	6823      	ldr	r3, [r4, #0]
   d4a2c:	6858      	ldr	r0, [r3, #4]
   d4a2e:	f7ff fbad 	bl	d418c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4a32:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4a34:	2300      	movs	r3, #0
   d4a36:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4a38:	b128      	cbz	r0, d4a46 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4a3a:	f7ff ffcd 	bl	d49d8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4a3e:	6820      	ldr	r0, [r4, #0]
   d4a40:	b108      	cbz	r0, d4a46 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4a42:	f7ff ffc9 	bl	d49d8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d4a46:	4620      	mov	r0, r4
   d4a48:	bd10      	pop	{r4, pc}
	...

000d4a4c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4a4c:	b538      	push	{r3, r4, r5, lr}
   d4a4e:	4b0c      	ldr	r3, [pc, #48]	; (d4a80 <_ZN5spark9MeshClassD1Ev+0x34>)
   d4a50:	6003      	str	r3, [r0, #0]
   d4a52:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4a54:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d4a58:	b108      	cbz	r0, d4a5e <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4a5a:	f7ff fb1e 	bl	d409a <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4a5e:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d4a62:	b135      	cbz	r5, d4a72 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4a64:	4628      	mov	r0, r5
   d4a66:	f7ff ffd2 	bl	d4a0e <_ZN6ThreadD1Ev>
   d4a6a:	2104      	movs	r1, #4
   d4a6c:	4628      	mov	r0, r5
   d4a6e:	f000 f93a 	bl	d4ce6 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4a72:	68a0      	ldr	r0, [r4, #8]
   d4a74:	b108      	cbz	r0, d4a7a <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d4a76:	f7ff ffc5 	bl	d4a04 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d4a7a:	4620      	mov	r0, r4
   d4a7c:	bd38      	pop	{r3, r4, r5, pc}
   d4a7e:	bf00      	nop
   d4a80:	000d5200 	.word	0x000d5200

000d4a84 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4a84:	b538      	push	{r3, r4, r5, lr}
   d4a86:	4c0e      	ldr	r4, [pc, #56]	; (d4ac0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d4a88:	4b0e      	ldr	r3, [pc, #56]	; (d4ac4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d4a8a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4a8c:	2500      	movs	r5, #0
   d4a8e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4a90:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4a94:	6063      	str	r3, [r4, #4]
   d4a96:	60a5      	str	r5, [r4, #8]
   d4a98:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4a9c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4aa0:	f7ff fb84 	bl	d41ac <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4aa4:	4b08      	ldr	r3, [pc, #32]	; (d4ac8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d4aa6:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4aaa:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d4aae:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4ab0:	4620      	mov	r0, r4
   d4ab2:	4a06      	ldr	r2, [pc, #24]	; (d4acc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d4ab4:	4906      	ldr	r1, [pc, #24]	; (d4ad0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d4ab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4aba:	f000 b90f 	b.w	d4cdc <__aeabi_atexit>
   d4abe:	bf00      	nop
   d4ac0:	2003e548 	.word	0x2003e548
   d4ac4:	000d5268 	.word	0x000d5268
   d4ac8:	000d5200 	.word	0x000d5200
   d4acc:	2003e3d4 	.word	0x2003e3d4
   d4ad0:	000d4a4d 	.word	0x000d4a4d

000d4ad4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4ad4:	2200      	movs	r2, #0
   d4ad6:	4611      	mov	r1, r2
   d4ad8:	6840      	ldr	r0, [r0, #4]
   d4ada:	f7ff bc1b 	b.w	d4314 <network_ready>

000d4ade <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4ade:	2200      	movs	r2, #0
   d4ae0:	4611      	mov	r1, r2
   d4ae2:	6840      	ldr	r0, [r0, #4]
   d4ae4:	f7ff bc36 	b.w	d4354 <network_listening>

000d4ae8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4ae8:	2200      	movs	r2, #0
   d4aea:	4611      	mov	r1, r2
   d4aec:	6840      	ldr	r0, [r0, #4]
   d4aee:	f7ff bc41 	b.w	d4374 <network_get_listen_timeout>

000d4af2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4af2:	2200      	movs	r2, #0
   d4af4:	6840      	ldr	r0, [r0, #4]
   d4af6:	f7ff bc35 	b.w	d4364 <network_set_listen_timeout>

000d4afa <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4afa:	2200      	movs	r2, #0
   d4afc:	f081 0101 	eor.w	r1, r1, #1
   d4b00:	6840      	ldr	r0, [r0, #4]
   d4b02:	f7ff bc1f 	b.w	d4344 <network_listen>

000d4b06 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d4b06:	2300      	movs	r3, #0
   d4b08:	461a      	mov	r2, r3
   d4b0a:	4619      	mov	r1, r3
   d4b0c:	6840      	ldr	r0, [r0, #4]
   d4b0e:	f7ff bc11 	b.w	d4334 <network_off>

000d4b12 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d4b12:	2300      	movs	r3, #0
   d4b14:	461a      	mov	r2, r3
   d4b16:	4619      	mov	r1, r3
   d4b18:	6840      	ldr	r0, [r0, #4]
   d4b1a:	f7ff bc03 	b.w	d4324 <network_on>

000d4b1e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4b1e:	2200      	movs	r2, #0
   d4b20:	4611      	mov	r1, r2
   d4b22:	6840      	ldr	r0, [r0, #4]
   d4b24:	f7ff bbe6 	b.w	d42f4 <network_connecting>

000d4b28 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4b28:	2200      	movs	r2, #0
   d4b2a:	2102      	movs	r1, #2
   d4b2c:	6840      	ldr	r0, [r0, #4]
   d4b2e:	f7ff bbe9 	b.w	d4304 <network_disconnect>

000d4b32 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4b32:	2300      	movs	r3, #0
   d4b34:	461a      	mov	r2, r3
   d4b36:	6840      	ldr	r0, [r0, #4]
   d4b38:	f7ff bbd4 	b.w	d42e4 <network_connect>

000d4b3c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d4b3c:	4b02      	ldr	r3, [pc, #8]	; (d4b48 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d4b3e:	2204      	movs	r2, #4
   d4b40:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d4b42:	4a02      	ldr	r2, [pc, #8]	; (d4b4c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d4b44:	601a      	str	r2, [r3, #0]
   d4b46:	4770      	bx	lr
   d4b48:	2003e71c 	.word	0x2003e71c
   d4b4c:	000d5234 	.word	0x000d5234

000d4b50 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4b50:	2300      	movs	r3, #0
   d4b52:	461a      	mov	r2, r3
   d4b54:	6840      	ldr	r0, [r0, #4]
   d4b56:	f7ff bbc5 	b.w	d42e4 <network_connect>

000d4b5a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4b5a:	2200      	movs	r2, #0
   d4b5c:	2102      	movs	r1, #2
   d4b5e:	6840      	ldr	r0, [r0, #4]
   d4b60:	f7ff bbd0 	b.w	d4304 <network_disconnect>

000d4b64 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4b64:	2200      	movs	r2, #0
   d4b66:	4611      	mov	r1, r2
   d4b68:	6840      	ldr	r0, [r0, #4]
   d4b6a:	f7ff bbc3 	b.w	d42f4 <network_connecting>

000d4b6e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4b6e:	2200      	movs	r2, #0
   d4b70:	4611      	mov	r1, r2
   d4b72:	6840      	ldr	r0, [r0, #4]
   d4b74:	f7ff bbce 	b.w	d4314 <network_ready>

000d4b78 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4b78:	2300      	movs	r3, #0
   d4b7a:	461a      	mov	r2, r3
   d4b7c:	4619      	mov	r1, r3
   d4b7e:	6840      	ldr	r0, [r0, #4]
   d4b80:	f7ff bbd0 	b.w	d4324 <network_on>

000d4b84 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4b84:	2300      	movs	r3, #0
   d4b86:	461a      	mov	r2, r3
   d4b88:	4619      	mov	r1, r3
   d4b8a:	6840      	ldr	r0, [r0, #4]
   d4b8c:	f7ff bbd2 	b.w	d4334 <network_off>

000d4b90 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4b90:	2200      	movs	r2, #0
   d4b92:	f081 0101 	eor.w	r1, r1, #1
   d4b96:	6840      	ldr	r0, [r0, #4]
   d4b98:	f7ff bbd4 	b.w	d4344 <network_listen>

000d4b9c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4b9c:	2200      	movs	r2, #0
   d4b9e:	6840      	ldr	r0, [r0, #4]
   d4ba0:	f7ff bbe0 	b.w	d4364 <network_set_listen_timeout>

000d4ba4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4ba4:	2200      	movs	r2, #0
   d4ba6:	4611      	mov	r1, r2
   d4ba8:	6840      	ldr	r0, [r0, #4]
   d4baa:	f7ff bbe3 	b.w	d4374 <network_get_listen_timeout>

000d4bae <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4bae:	2200      	movs	r2, #0
   d4bb0:	4611      	mov	r1, r2
   d4bb2:	6840      	ldr	r0, [r0, #4]
   d4bb4:	f7ff bbce 	b.w	d4354 <network_listening>

000d4bb8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4bb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4bbc:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d4bbe:	b095      	sub	sp, #84	; 0x54
   d4bc0:	4616      	mov	r6, r2
   d4bc2:	460d      	mov	r5, r1
   d4bc4:	4607      	mov	r7, r0
    IPAddress addr;
   d4bc6:	f7ff fd99 	bl	d46fc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d4bca:	4621      	mov	r1, r4
   d4bcc:	2220      	movs	r2, #32
   d4bce:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4bd0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4bd2:	f000 f9ec 	bl	d4fae <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4bd6:	2340      	movs	r3, #64	; 0x40
   d4bd8:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4bda:	4621      	mov	r1, r4
   d4bdc:	466b      	mov	r3, sp
   d4bde:	aa0c      	add	r2, sp, #48	; 0x30
   d4be0:	4630      	mov	r0, r6
   d4be2:	f7ff fa9b 	bl	d411c <netdb_getaddrinfo>
    if (!r) {
   d4be6:	4604      	mov	r4, r0
   d4be8:	2800      	cmp	r0, #0
   d4bea:	d144      	bne.n	d4c76 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4bec:	4602      	mov	r2, r0
   d4bee:	2101      	movs	r1, #1
   d4bf0:	6868      	ldr	r0, [r5, #4]
   d4bf2:	f7ff fb8f 	bl	d4314 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4bf6:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4bf8:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4bfa:	4622      	mov	r2, r4
   d4bfc:	6868      	ldr	r0, [r5, #4]
   d4bfe:	f7ff fb89 	bl	d4314 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4c02:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4c04:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d4c06:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4c08:	2e00      	cmp	r6, #0
   d4c0a:	d034      	beq.n	d4c76 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d4c0c:	2900      	cmp	r1, #0
   d4c0e:	d132      	bne.n	d4c76 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4c10:	6873      	ldr	r3, [r6, #4]
   d4c12:	2b02      	cmp	r3, #2
   d4c14:	d002      	beq.n	d4c1c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d4c16:	2b0a      	cmp	r3, #10
   d4c18:	d009      	beq.n	d4c2e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d4c1a:	e02a      	b.n	d4c72 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d4c1c:	f1b8 0f00 	cmp.w	r8, #0
   d4c20:	d027      	beq.n	d4c72 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4c22:	6971      	ldr	r1, [r6, #20]
   d4c24:	4638      	mov	r0, r7
   d4c26:	3104      	adds	r1, #4
   d4c28:	f7ff fd95 	bl	d4756 <_ZN9IPAddressaSEPKh>
   d4c2c:	e020      	b.n	d4c70 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4c2e:	f1b9 0f00 	cmp.w	r9, #0
   d4c32:	d01e      	beq.n	d4c72 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4c34:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4c36:	2211      	movs	r2, #17
   d4c38:	a801      	add	r0, sp, #4
   d4c3a:	f000 f9b8 	bl	d4fae <memset>
                    a.v = 6;
   d4c3e:	2306      	movs	r3, #6
   d4c40:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4c44:	ad01      	add	r5, sp, #4
   d4c46:	f104 0308 	add.w	r3, r4, #8
   d4c4a:	3418      	adds	r4, #24
   d4c4c:	6818      	ldr	r0, [r3, #0]
   d4c4e:	6859      	ldr	r1, [r3, #4]
   d4c50:	462a      	mov	r2, r5
   d4c52:	c203      	stmia	r2!, {r0, r1}
   d4c54:	3308      	adds	r3, #8
   d4c56:	42a3      	cmp	r3, r4
   d4c58:	4615      	mov	r5, r2
   d4c5a:	d1f7      	bne.n	d4c4c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d4c5c:	a901      	add	r1, sp, #4
   d4c5e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4c60:	ad07      	add	r5, sp, #28
   d4c62:	f7ff fd59 	bl	d4718 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4c66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4c68:	1d3c      	adds	r4, r7, #4
   d4c6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4c6c:	682b      	ldr	r3, [r5, #0]
   d4c6e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d4c70:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4c72:	69f6      	ldr	r6, [r6, #28]
   d4c74:	e7c8      	b.n	d4c08 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4c76:	9800      	ldr	r0, [sp, #0]
   d4c78:	f7ff fa48 	bl	d410c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4c7c:	4638      	mov	r0, r7
   d4c7e:	b015      	add	sp, #84	; 0x54
   d4c80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4c84 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4c84:	4b02      	ldr	r3, [pc, #8]	; (d4c90 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4c86:	4a03      	ldr	r2, [pc, #12]	; (d4c94 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4c88:	601a      	str	r2, [r3, #0]
   d4c8a:	2200      	movs	r2, #0
   d4c8c:	605a      	str	r2, [r3, #4]
   d4c8e:	4770      	bx	lr
   d4c90:	2003e724 	.word	0x2003e724
   d4c94:	000d5268 	.word	0x000d5268

000d4c98 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d4c98:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d4c9a:	4c0c      	ldr	r4, [pc, #48]	; (d4ccc <_GLOBAL__sub_I_SPI+0x34>)
   d4c9c:	4e0c      	ldr	r6, [pc, #48]	; (d4cd0 <_GLOBAL__sub_I_SPI+0x38>)
   d4c9e:	4d0d      	ldr	r5, [pc, #52]	; (d4cd4 <_GLOBAL__sub_I_SPI+0x3c>)
   d4ca0:	2100      	movs	r1, #0
   d4ca2:	4620      	mov	r0, r4
   d4ca4:	f7ff fbd4 	bl	d4450 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4ca8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d4caa:	4c0b      	ldr	r4, [pc, #44]	; (d4cd8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d4cac:	4632      	mov	r2, r6
   d4cae:	4629      	mov	r1, r5
   d4cb0:	f000 f814 	bl	d4cdc <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d4cb4:	2101      	movs	r1, #1
   d4cb6:	4620      	mov	r0, r4
   d4cb8:	f7ff fbca 	bl	d4450 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4cbc:	4632      	mov	r2, r6
   d4cbe:	4629      	mov	r1, r5
   d4cc0:	4620      	mov	r0, r4
   d4cc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d4cc6:	f000 b809 	b.w	d4cdc <__aeabi_atexit>
   d4cca:	bf00      	nop
   d4ccc:	2003e72c 	.word	0x2003e72c
   d4cd0:	2003e3d4 	.word	0x2003e3d4
   d4cd4:	000d4441 	.word	0x000d4441
   d4cd8:	2003e73c 	.word	0x2003e73c

000d4cdc <__aeabi_atexit>:
   d4cdc:	460b      	mov	r3, r1
   d4cde:	4601      	mov	r1, r0
   d4ce0:	4618      	mov	r0, r3
   d4ce2:	f000 b94b 	b.w	d4f7c <__cxa_atexit>

000d4ce6 <_ZdlPvj>:
   d4ce6:	f7ff b9d6 	b.w	d4096 <_ZdlPv>
	...

000d4cec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d4cec:	4b18      	ldr	r3, [pc, #96]	; (d4d50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d4cee:	681a      	ldr	r2, [r3, #0]
   d4cf0:	07d1      	lsls	r1, r2, #31
   d4cf2:	bf5c      	itt	pl
   d4cf4:	2201      	movpl	r2, #1
   d4cf6:	601a      	strpl	r2, [r3, #0]
   d4cf8:	4b16      	ldr	r3, [pc, #88]	; (d4d54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d4cfa:	681a      	ldr	r2, [r3, #0]
   d4cfc:	07d2      	lsls	r2, r2, #31
   d4cfe:	bf5c      	itt	pl
   d4d00:	2201      	movpl	r2, #1
   d4d02:	601a      	strpl	r2, [r3, #0]
   d4d04:	4b14      	ldr	r3, [pc, #80]	; (d4d58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d4d06:	681a      	ldr	r2, [r3, #0]
   d4d08:	07d0      	lsls	r0, r2, #31
   d4d0a:	bf5c      	itt	pl
   d4d0c:	2201      	movpl	r2, #1
   d4d0e:	601a      	strpl	r2, [r3, #0]
   d4d10:	4b12      	ldr	r3, [pc, #72]	; (d4d5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d4d12:	681a      	ldr	r2, [r3, #0]
   d4d14:	07d1      	lsls	r1, r2, #31
   d4d16:	bf5c      	itt	pl
   d4d18:	2201      	movpl	r2, #1
   d4d1a:	601a      	strpl	r2, [r3, #0]
   d4d1c:	4b10      	ldr	r3, [pc, #64]	; (d4d60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d4d1e:	681a      	ldr	r2, [r3, #0]
   d4d20:	07d2      	lsls	r2, r2, #31
   d4d22:	bf5c      	itt	pl
   d4d24:	2201      	movpl	r2, #1
   d4d26:	601a      	strpl	r2, [r3, #0]
   d4d28:	4b0e      	ldr	r3, [pc, #56]	; (d4d64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d4d2a:	681a      	ldr	r2, [r3, #0]
   d4d2c:	07d0      	lsls	r0, r2, #31
   d4d2e:	bf5c      	itt	pl
   d4d30:	2201      	movpl	r2, #1
   d4d32:	601a      	strpl	r2, [r3, #0]
   d4d34:	4b0c      	ldr	r3, [pc, #48]	; (d4d68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d4d36:	681a      	ldr	r2, [r3, #0]
   d4d38:	07d1      	lsls	r1, r2, #31
   d4d3a:	bf5c      	itt	pl
   d4d3c:	2201      	movpl	r2, #1
   d4d3e:	601a      	strpl	r2, [r3, #0]
   d4d40:	4b0a      	ldr	r3, [pc, #40]	; (d4d6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d4d42:	681a      	ldr	r2, [r3, #0]
   d4d44:	07d2      	lsls	r2, r2, #31
   d4d46:	bf5c      	itt	pl
   d4d48:	2201      	movpl	r2, #1
   d4d4a:	601a      	strpl	r2, [r3, #0]
   d4d4c:	4770      	bx	lr
   d4d4e:	bf00      	nop
   d4d50:	2003e76c 	.word	0x2003e76c
   d4d54:	2003e768 	.word	0x2003e768
   d4d58:	2003e764 	.word	0x2003e764
   d4d5c:	2003e760 	.word	0x2003e760
   d4d60:	2003e75c 	.word	0x2003e75c
   d4d64:	2003e758 	.word	0x2003e758
   d4d68:	2003e754 	.word	0x2003e754
   d4d6c:	2003e750 	.word	0x2003e750

000d4d70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d4d70:	4b24      	ldr	r3, [pc, #144]	; (d4e04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d4d72:	681a      	ldr	r2, [r3, #0]
   d4d74:	07d0      	lsls	r0, r2, #31
   d4d76:	bf5c      	itt	pl
   d4d78:	2201      	movpl	r2, #1
   d4d7a:	601a      	strpl	r2, [r3, #0]
   d4d7c:	4b22      	ldr	r3, [pc, #136]	; (d4e08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d4d7e:	681a      	ldr	r2, [r3, #0]
   d4d80:	07d1      	lsls	r1, r2, #31
   d4d82:	bf5c      	itt	pl
   d4d84:	2201      	movpl	r2, #1
   d4d86:	601a      	strpl	r2, [r3, #0]
   d4d88:	4b20      	ldr	r3, [pc, #128]	; (d4e0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d4d8a:	681a      	ldr	r2, [r3, #0]
   d4d8c:	07d2      	lsls	r2, r2, #31
   d4d8e:	bf5c      	itt	pl
   d4d90:	2201      	movpl	r2, #1
   d4d92:	601a      	strpl	r2, [r3, #0]
   d4d94:	4b1e      	ldr	r3, [pc, #120]	; (d4e10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d4d96:	681a      	ldr	r2, [r3, #0]
   d4d98:	07d0      	lsls	r0, r2, #31
   d4d9a:	bf5c      	itt	pl
   d4d9c:	2201      	movpl	r2, #1
   d4d9e:	601a      	strpl	r2, [r3, #0]
   d4da0:	4b1c      	ldr	r3, [pc, #112]	; (d4e14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d4da2:	681a      	ldr	r2, [r3, #0]
   d4da4:	07d1      	lsls	r1, r2, #31
   d4da6:	bf5c      	itt	pl
   d4da8:	2201      	movpl	r2, #1
   d4daa:	601a      	strpl	r2, [r3, #0]
   d4dac:	4b1a      	ldr	r3, [pc, #104]	; (d4e18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d4dae:	681a      	ldr	r2, [r3, #0]
   d4db0:	07d2      	lsls	r2, r2, #31
   d4db2:	bf5c      	itt	pl
   d4db4:	2201      	movpl	r2, #1
   d4db6:	601a      	strpl	r2, [r3, #0]
   d4db8:	4b18      	ldr	r3, [pc, #96]	; (d4e1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d4dba:	681a      	ldr	r2, [r3, #0]
   d4dbc:	07d0      	lsls	r0, r2, #31
   d4dbe:	bf5c      	itt	pl
   d4dc0:	2201      	movpl	r2, #1
   d4dc2:	601a      	strpl	r2, [r3, #0]
   d4dc4:	4b16      	ldr	r3, [pc, #88]	; (d4e20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d4dc6:	681a      	ldr	r2, [r3, #0]
   d4dc8:	07d1      	lsls	r1, r2, #31
   d4dca:	bf5c      	itt	pl
   d4dcc:	2201      	movpl	r2, #1
   d4dce:	601a      	strpl	r2, [r3, #0]
   d4dd0:	4b14      	ldr	r3, [pc, #80]	; (d4e24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d4dd2:	681a      	ldr	r2, [r3, #0]
   d4dd4:	07d2      	lsls	r2, r2, #31
   d4dd6:	bf5c      	itt	pl
   d4dd8:	2201      	movpl	r2, #1
   d4dda:	601a      	strpl	r2, [r3, #0]
   d4ddc:	4b12      	ldr	r3, [pc, #72]	; (d4e28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d4dde:	681a      	ldr	r2, [r3, #0]
   d4de0:	07d0      	lsls	r0, r2, #31
   d4de2:	bf5c      	itt	pl
   d4de4:	2201      	movpl	r2, #1
   d4de6:	601a      	strpl	r2, [r3, #0]
   d4de8:	4b10      	ldr	r3, [pc, #64]	; (d4e2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d4dea:	681a      	ldr	r2, [r3, #0]
   d4dec:	07d1      	lsls	r1, r2, #31
   d4dee:	bf5c      	itt	pl
   d4df0:	2201      	movpl	r2, #1
   d4df2:	601a      	strpl	r2, [r3, #0]
   d4df4:	4b0e      	ldr	r3, [pc, #56]	; (d4e30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d4df6:	681a      	ldr	r2, [r3, #0]
   d4df8:	07d2      	lsls	r2, r2, #31
   d4dfa:	bf5c      	itt	pl
   d4dfc:	2201      	movpl	r2, #1
   d4dfe:	601a      	strpl	r2, [r3, #0]
   d4e00:	4770      	bx	lr
   d4e02:	bf00      	nop
   d4e04:	2003e79c 	.word	0x2003e79c
   d4e08:	2003e798 	.word	0x2003e798
   d4e0c:	2003e794 	.word	0x2003e794
   d4e10:	2003e790 	.word	0x2003e790
   d4e14:	2003e78c 	.word	0x2003e78c
   d4e18:	2003e788 	.word	0x2003e788
   d4e1c:	2003e784 	.word	0x2003e784
   d4e20:	2003e780 	.word	0x2003e780
   d4e24:	2003e77c 	.word	0x2003e77c
   d4e28:	2003e778 	.word	0x2003e778
   d4e2c:	2003e774 	.word	0x2003e774
   d4e30:	2003e770 	.word	0x2003e770

000d4e34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d4e34:	4b24      	ldr	r3, [pc, #144]	; (d4ec8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d4e36:	681a      	ldr	r2, [r3, #0]
   d4e38:	07d0      	lsls	r0, r2, #31
   d4e3a:	bf5c      	itt	pl
   d4e3c:	2201      	movpl	r2, #1
   d4e3e:	601a      	strpl	r2, [r3, #0]
   d4e40:	4b22      	ldr	r3, [pc, #136]	; (d4ecc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d4e42:	681a      	ldr	r2, [r3, #0]
   d4e44:	07d1      	lsls	r1, r2, #31
   d4e46:	bf5c      	itt	pl
   d4e48:	2201      	movpl	r2, #1
   d4e4a:	601a      	strpl	r2, [r3, #0]
   d4e4c:	4b20      	ldr	r3, [pc, #128]	; (d4ed0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d4e4e:	681a      	ldr	r2, [r3, #0]
   d4e50:	07d2      	lsls	r2, r2, #31
   d4e52:	bf5c      	itt	pl
   d4e54:	2201      	movpl	r2, #1
   d4e56:	601a      	strpl	r2, [r3, #0]
   d4e58:	4b1e      	ldr	r3, [pc, #120]	; (d4ed4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d4e5a:	681a      	ldr	r2, [r3, #0]
   d4e5c:	07d0      	lsls	r0, r2, #31
   d4e5e:	bf5c      	itt	pl
   d4e60:	2201      	movpl	r2, #1
   d4e62:	601a      	strpl	r2, [r3, #0]
   d4e64:	4b1c      	ldr	r3, [pc, #112]	; (d4ed8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d4e66:	681a      	ldr	r2, [r3, #0]
   d4e68:	07d1      	lsls	r1, r2, #31
   d4e6a:	bf5c      	itt	pl
   d4e6c:	2201      	movpl	r2, #1
   d4e6e:	601a      	strpl	r2, [r3, #0]
   d4e70:	4b1a      	ldr	r3, [pc, #104]	; (d4edc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d4e72:	681a      	ldr	r2, [r3, #0]
   d4e74:	07d2      	lsls	r2, r2, #31
   d4e76:	bf5c      	itt	pl
   d4e78:	2201      	movpl	r2, #1
   d4e7a:	601a      	strpl	r2, [r3, #0]
   d4e7c:	4b18      	ldr	r3, [pc, #96]	; (d4ee0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d4e7e:	681a      	ldr	r2, [r3, #0]
   d4e80:	07d0      	lsls	r0, r2, #31
   d4e82:	bf5c      	itt	pl
   d4e84:	2201      	movpl	r2, #1
   d4e86:	601a      	strpl	r2, [r3, #0]
   d4e88:	4b16      	ldr	r3, [pc, #88]	; (d4ee4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d4e8a:	681a      	ldr	r2, [r3, #0]
   d4e8c:	07d1      	lsls	r1, r2, #31
   d4e8e:	bf5c      	itt	pl
   d4e90:	2201      	movpl	r2, #1
   d4e92:	601a      	strpl	r2, [r3, #0]
   d4e94:	4b14      	ldr	r3, [pc, #80]	; (d4ee8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d4e96:	681a      	ldr	r2, [r3, #0]
   d4e98:	07d2      	lsls	r2, r2, #31
   d4e9a:	bf5c      	itt	pl
   d4e9c:	2201      	movpl	r2, #1
   d4e9e:	601a      	strpl	r2, [r3, #0]
   d4ea0:	4b12      	ldr	r3, [pc, #72]	; (d4eec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d4ea2:	681a      	ldr	r2, [r3, #0]
   d4ea4:	07d0      	lsls	r0, r2, #31
   d4ea6:	bf5c      	itt	pl
   d4ea8:	2201      	movpl	r2, #1
   d4eaa:	601a      	strpl	r2, [r3, #0]
   d4eac:	4b10      	ldr	r3, [pc, #64]	; (d4ef0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d4eae:	681a      	ldr	r2, [r3, #0]
   d4eb0:	07d1      	lsls	r1, r2, #31
   d4eb2:	bf5c      	itt	pl
   d4eb4:	2201      	movpl	r2, #1
   d4eb6:	601a      	strpl	r2, [r3, #0]
   d4eb8:	4b0e      	ldr	r3, [pc, #56]	; (d4ef4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d4eba:	681a      	ldr	r2, [r3, #0]
   d4ebc:	07d2      	lsls	r2, r2, #31
   d4ebe:	bf5c      	itt	pl
   d4ec0:	2201      	movpl	r2, #1
   d4ec2:	601a      	strpl	r2, [r3, #0]
   d4ec4:	4770      	bx	lr
   d4ec6:	bf00      	nop
   d4ec8:	2003e7cc 	.word	0x2003e7cc
   d4ecc:	2003e7c8 	.word	0x2003e7c8
   d4ed0:	2003e7c4 	.word	0x2003e7c4
   d4ed4:	2003e7c0 	.word	0x2003e7c0
   d4ed8:	2003e7bc 	.word	0x2003e7bc
   d4edc:	2003e7b8 	.word	0x2003e7b8
   d4ee0:	2003e7b4 	.word	0x2003e7b4
   d4ee4:	2003e7b0 	.word	0x2003e7b0
   d4ee8:	2003e7ac 	.word	0x2003e7ac
   d4eec:	2003e7a8 	.word	0x2003e7a8
   d4ef0:	2003e7a4 	.word	0x2003e7a4
   d4ef4:	2003e7a0 	.word	0x2003e7a0

000d4ef8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d4ef8:	4b18      	ldr	r3, [pc, #96]	; (d4f5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d4efa:	681a      	ldr	r2, [r3, #0]
   d4efc:	07d1      	lsls	r1, r2, #31
   d4efe:	bf5c      	itt	pl
   d4f00:	2201      	movpl	r2, #1
   d4f02:	601a      	strpl	r2, [r3, #0]
   d4f04:	4b16      	ldr	r3, [pc, #88]	; (d4f60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d4f06:	681a      	ldr	r2, [r3, #0]
   d4f08:	07d2      	lsls	r2, r2, #31
   d4f0a:	bf5c      	itt	pl
   d4f0c:	2201      	movpl	r2, #1
   d4f0e:	601a      	strpl	r2, [r3, #0]
   d4f10:	4b14      	ldr	r3, [pc, #80]	; (d4f64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d4f12:	681a      	ldr	r2, [r3, #0]
   d4f14:	07d0      	lsls	r0, r2, #31
   d4f16:	bf5c      	itt	pl
   d4f18:	2201      	movpl	r2, #1
   d4f1a:	601a      	strpl	r2, [r3, #0]
   d4f1c:	4b12      	ldr	r3, [pc, #72]	; (d4f68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d4f1e:	681a      	ldr	r2, [r3, #0]
   d4f20:	07d1      	lsls	r1, r2, #31
   d4f22:	bf5c      	itt	pl
   d4f24:	2201      	movpl	r2, #1
   d4f26:	601a      	strpl	r2, [r3, #0]
   d4f28:	4b10      	ldr	r3, [pc, #64]	; (d4f6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d4f2a:	681a      	ldr	r2, [r3, #0]
   d4f2c:	07d2      	lsls	r2, r2, #31
   d4f2e:	bf5c      	itt	pl
   d4f30:	2201      	movpl	r2, #1
   d4f32:	601a      	strpl	r2, [r3, #0]
   d4f34:	4b0e      	ldr	r3, [pc, #56]	; (d4f70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d4f36:	681a      	ldr	r2, [r3, #0]
   d4f38:	07d0      	lsls	r0, r2, #31
   d4f3a:	bf5c      	itt	pl
   d4f3c:	2201      	movpl	r2, #1
   d4f3e:	601a      	strpl	r2, [r3, #0]
   d4f40:	4b0c      	ldr	r3, [pc, #48]	; (d4f74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d4f42:	681a      	ldr	r2, [r3, #0]
   d4f44:	07d1      	lsls	r1, r2, #31
   d4f46:	bf5c      	itt	pl
   d4f48:	2201      	movpl	r2, #1
   d4f4a:	601a      	strpl	r2, [r3, #0]
   d4f4c:	4b0a      	ldr	r3, [pc, #40]	; (d4f78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d4f4e:	681a      	ldr	r2, [r3, #0]
   d4f50:	07d2      	lsls	r2, r2, #31
   d4f52:	bf5c      	itt	pl
   d4f54:	2201      	movpl	r2, #1
   d4f56:	601a      	strpl	r2, [r3, #0]
   d4f58:	4770      	bx	lr
   d4f5a:	bf00      	nop
   d4f5c:	2003e7ec 	.word	0x2003e7ec
   d4f60:	2003e7e8 	.word	0x2003e7e8
   d4f64:	2003e7e4 	.word	0x2003e7e4
   d4f68:	2003e7e0 	.word	0x2003e7e0
   d4f6c:	2003e7dc 	.word	0x2003e7dc
   d4f70:	2003e7d8 	.word	0x2003e7d8
   d4f74:	2003e7d4 	.word	0x2003e7d4
   d4f78:	2003e7d0 	.word	0x2003e7d0

000d4f7c <__cxa_atexit>:
   d4f7c:	b510      	push	{r4, lr}
   d4f7e:	4c05      	ldr	r4, [pc, #20]	; (d4f94 <__cxa_atexit+0x18>)
   d4f80:	4613      	mov	r3, r2
   d4f82:	b12c      	cbz	r4, d4f90 <__cxa_atexit+0x14>
   d4f84:	460a      	mov	r2, r1
   d4f86:	4601      	mov	r1, r0
   d4f88:	2002      	movs	r0, #2
   d4f8a:	f3af 8000 	nop.w
   d4f8e:	bd10      	pop	{r4, pc}
   d4f90:	4620      	mov	r0, r4
   d4f92:	bd10      	pop	{r4, pc}
   d4f94:	00000000 	.word	0x00000000

000d4f98 <memcpy>:
   d4f98:	b510      	push	{r4, lr}
   d4f9a:	1e43      	subs	r3, r0, #1
   d4f9c:	440a      	add	r2, r1
   d4f9e:	4291      	cmp	r1, r2
   d4fa0:	d004      	beq.n	d4fac <memcpy+0x14>
   d4fa2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d4fa6:	f803 4f01 	strb.w	r4, [r3, #1]!
   d4faa:	e7f8      	b.n	d4f9e <memcpy+0x6>
   d4fac:	bd10      	pop	{r4, pc}

000d4fae <memset>:
   d4fae:	4402      	add	r2, r0
   d4fb0:	4603      	mov	r3, r0
   d4fb2:	4293      	cmp	r3, r2
   d4fb4:	d002      	beq.n	d4fbc <memset+0xe>
   d4fb6:	f803 1b01 	strb.w	r1, [r3], #1
   d4fba:	e7fa      	b.n	d4fb2 <memset+0x4>
   d4fbc:	4770      	bx	lr
	...

000d4fc0 <srand>:
   d4fc0:	b538      	push	{r3, r4, r5, lr}
   d4fc2:	4b12      	ldr	r3, [pc, #72]	; (d500c <srand+0x4c>)
   d4fc4:	681c      	ldr	r4, [r3, #0]
   d4fc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d4fc8:	4605      	mov	r5, r0
   d4fca:	b9d3      	cbnz	r3, d5002 <srand+0x42>
   d4fcc:	2018      	movs	r0, #24
   d4fce:	f7ff f9e9 	bl	d43a4 <malloc>
   d4fd2:	f243 330e 	movw	r3, #13070	; 0x330e
   d4fd6:	63a0      	str	r0, [r4, #56]	; 0x38
   d4fd8:	8003      	strh	r3, [r0, #0]
   d4fda:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d4fde:	8043      	strh	r3, [r0, #2]
   d4fe0:	f241 2334 	movw	r3, #4660	; 0x1234
   d4fe4:	8083      	strh	r3, [r0, #4]
   d4fe6:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d4fea:	80c3      	strh	r3, [r0, #6]
   d4fec:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d4ff0:	8103      	strh	r3, [r0, #8]
   d4ff2:	2305      	movs	r3, #5
   d4ff4:	8143      	strh	r3, [r0, #10]
   d4ff6:	230b      	movs	r3, #11
   d4ff8:	8183      	strh	r3, [r0, #12]
   d4ffa:	2201      	movs	r2, #1
   d4ffc:	2300      	movs	r3, #0
   d4ffe:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5002:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5004:	2200      	movs	r2, #0
   d5006:	611d      	str	r5, [r3, #16]
   d5008:	615a      	str	r2, [r3, #20]
   d500a:	bd38      	pop	{r3, r4, r5, pc}
   d500c:	2003e3d0 	.word	0x2003e3d0

000d5010 <strlen>:
   d5010:	4603      	mov	r3, r0
   d5012:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5016:	2a00      	cmp	r2, #0
   d5018:	d1fb      	bne.n	d5012 <strlen+0x2>
   d501a:	1a18      	subs	r0, r3, r0
   d501c:	3801      	subs	r0, #1
   d501e:	4770      	bx	lr

000d5020 <dynalib_user>:
   d5020:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d5030:	0000 0000                                   ....

000d5034 <_ZTVN5spark13EthernetClassE>:
	...
   d503c:	4423 000d 4419 000d 440f 000d 4405 000d     #D...D...D...D..
   d504c:	43f9 000d 43ed 000d 43e1 000d 43d9 000d     .C...C...C...C..
   d505c:	43cf 000d 43c5 000d 4bb9 000d               .C...C...K..

000d5068 <_ZTV8SPIClass>:
	...
   d5070:	4441 000d 4443 000d 6162 6475 5300 7265     AD..CD..baud.Ser
   d5080:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d5090:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d50a0:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d50b0:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d50c0:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d50d0:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d50e0:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d50f0:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
   d5100:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d5110:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   d5120:	0066 6e6c 6600 006e 6f63 6564 6400 7465     f.ln.fn.code.det
   d5130:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
   d5140:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   d5150:	6e61 6369 6100 6c6c 5a00 2500 302b 6433     anic.all.Z.%+03d
   d5160:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   d5170:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   d5180:	0065 0000                                   e...

000d5184 <_ZTV9IPAddress>:
	...
   d518c:	4699 000d 4689 000d 468b 000d               .F...F...F..

000d5198 <_ZTV9USBSerial>:
	...
   d51a0:	4771 000d 47c1 000d 47cf 000d 44a1 000d     qG...G...G...D..
   d51b0:	47ad 000d 4773 000d 4789 000d 47bb 000d     .G..sG...G...G..
   d51c0:	479f 000d 476d 000d                         .G..mG..

000d51c8 <_ZTV11USARTSerial>:
	...
   d51d0:	4875 000d 48c5 000d 48d3 000d 44a1 000d     uH...H...H...D..
   d51e0:	4889 000d 48ab 000d 4897 000d 48bf 000d     .H...H...H...H..
   d51f0:	4877 000d 487b 000d                         wH..{H..

000d51f8 <_ZTVN5spark9MeshClassE>:
	...
   d5200:	49cf 000d 49c5 000d 49bb 000d 49b1 000d     .I...I...I...I..
   d5210:	49a5 000d 4999 000d 498d 000d 4985 000d     .I...I...I...I..
   d5220:	497b 000d 4971 000d 4bb9 000d               {I..qI...K..

000d522c <_ZTVN5spark9WiFiClassE>:
	...
   d5234:	4b33 000d 4b29 000d 4b1f 000d 4ad5 000d     3K..)K...K...J..
   d5244:	4b13 000d 4b07 000d 4afb 000d 4af3 000d     .K...K...J...J..
   d5254:	4ae9 000d 4adf 000d 4bb9 000d               .J...J...K..

000d5260 <_ZTVN5spark12NetworkClassE>:
	...
   d5268:	4b51 000d 4b5b 000d 4b65 000d 4b6f 000d     QK..[K..eK..oK..
   d5278:	4b79 000d 4b85 000d 4b91 000d 4b9d 000d     yK...K...K...K..
   d5288:	4ba5 000d 4baf 000d 4bb9 000d               .K...K...K..

000d5294 <__sf_fake_stdin>:
	...

000d52b4 <__sf_fake_stdout>:
	...

000d52d4 <__sf_fake_stderr>:
	...
   d52f4:	0043                                        C.

000d52f6 <link_const_variable_data_end>:
	...

000d52f8 <link_constructors_location>:
   d52f8:	000d40e9 	.word	0x000d40e9
   d52fc:	000d442d 	.word	0x000d442d
   d5300:	000d4479 	.word	0x000d4479
   d5304:	000d4491 	.word	0x000d4491
   d5308:	000d4551 	.word	0x000d4551
   d530c:	000d4561 	.word	0x000d4561
   d5310:	000d4595 	.word	0x000d4595
   d5314:	000d4a85 	.word	0x000d4a85
   d5318:	000d4b3d 	.word	0x000d4b3d
   d531c:	000d4c85 	.word	0x000d4c85
   d5320:	000d4c99 	.word	0x000d4c99
   d5324:	000d4ced 	.word	0x000d4ced
   d5328:	000d4d71 	.word	0x000d4d71
   d532c:	000d4e35 	.word	0x000d4e35
   d5330:	000d4ef9 	.word	0x000d4ef9

000d5334 <link_constructors_end>:
	...
