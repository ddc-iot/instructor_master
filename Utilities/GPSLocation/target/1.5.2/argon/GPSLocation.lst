
c:/Users/IoT_Instructor/Documents/IoT/instructor_master/Utilities/GPSLocation/target/1.5.2/argon/GPSLocation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000027a0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d67c0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e1d8  000d67c4  0001e1d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005ac  2003e244  2003e244  0002e244  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6830  000d6830  00026830  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6858  000d6858  00026858  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000cfb46  00000000  00000000  0002685c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f557  00000000  00000000  000f63a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001c994  00000000  00000000  001058f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002080  00000000  00000000  0012228d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003f20  00000000  00000000  0012430d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00032f1b  00000000  00000000  0012822d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000264cd  00000000  00000000  0015b148  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00106801  00000000  00000000  00181615  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c2e4  00000000  00000000  00287e18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 f877 	bl	d6124 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 f87c 	bl	d613a <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e1d8 	.word	0x2003e1d8
   d404c:	000d67c4 	.word	0x000d67c4
   d4050:	2003e244 	.word	0x2003e244
   d4054:	2003e244 	.word	0x2003e244
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f000 ff99 	bl	d4f94 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d67c0 	.word	0x000d67c0
   d4084:	000d6778 	.word	0x000d6778

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b814 	b.w	d40b4 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f8bf 	bl	d4210 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f000 bf3f 	b.w	d4f18 <_post_loop>

000d409a <_ZdlPv>:
   d409a:	f000 bdd5 	b.w	d4c48 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bdd3 	b.w	d4c48 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <setup>:
unsigned long lastPublish = 0;
unsigned long startFix = 0;
bool gettingFix = false;

void setup()
{
   d40b4:	b508      	push	{r3, lr}
	Serial.begin(9600);
   d40b6:	f001 f86d 	bl	d5194 <_Z16_fetch_usbserialv>
   d40ba:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40be:	f001 f85d 	bl	d517c <_ZN9USBSerial5beginEl>

	// The GPS module initialization
	Serial1.begin(9600);
   d40c2:	f001 f8ed 	bl	d52a0 <_Z22__fetch_global_Serial1v>
   d40c6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40ca:	f001 f8e5 	bl	d5298 <_ZN11USARTSerial5beginEm>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d40ce:	f000 fc7f 	bl	d49d0 <HAL_Timer_Get_Milli_Seconds>
    startFix = millis();
   d40d2:	4b03      	ldr	r3, [pc, #12]	; (d40e0 <setup+0x2c>)
   d40d4:	6018      	str	r0, [r3, #0]
    gettingFix = true;
   d40d6:	4b03      	ldr	r3, [pc, #12]	; (d40e4 <setup+0x30>)
   d40d8:	2201      	movs	r2, #1
   d40da:	701a      	strb	r2, [r3, #0]
   d40dc:	bd08      	pop	{r3, pc}
   d40de:	bf00      	nop
   d40e0:	2003e3ec 	.word	0x2003e3ec
   d40e4:	2003e3e8 	.word	0x2003e3e8

000d40e8 <_Z11displayInfov>:
		}
	}

}

void displayInfo() {
   d40e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	float lat,lon;
	uint8_t hr,mn,se;
	if (millis() - lastSerial >= SERIAL_PERIOD) {
   d40ec:	4c40      	ldr	r4, [pc, #256]	; (d41f0 <_Z11displayInfov+0x108>)
		}
	}

}

void displayInfo() {
   d40ee:	b0a5      	sub	sp, #148	; 0x94
   d40f0:	f000 fc6e 	bl	d49d0 <HAL_Timer_Get_Milli_Seconds>
	float lat,lon;
	uint8_t hr,mn,se;
	if (millis() - lastSerial >= SERIAL_PERIOD) {
   d40f4:	6823      	ldr	r3, [r4, #0]
   d40f6:	1ac0      	subs	r0, r0, r3
   d40f8:	f241 3387 	movw	r3, #4999	; 0x1387
   d40fc:	4298      	cmp	r0, r3
   d40fe:	d974      	bls.n	d41ea <_Z11displayInfov+0x102>
   d4100:	f8df 9108 	ldr.w	r9, [pc, #264]	; d420c <_Z11displayInfov+0x124>
   d4104:	4d3b      	ldr	r5, [pc, #236]	; (d41f4 <_Z11displayInfov+0x10c>)
   d4106:	f000 fc63 	bl	d49d0 <HAL_Timer_Get_Milli_Seconds>
		lastSerial = millis();

		char buf[128];
		if (gps.location.isValid() && gps.location.age() < MAX_GPS_AGE_MS) {
   d410a:	f899 3000 	ldrb.w	r3, [r9]

void displayInfo() {
	float lat,lon;
	uint8_t hr,mn,se;
	if (millis() - lastSerial >= SERIAL_PERIOD) {
		lastSerial = millis();
   d410e:	6020      	str	r0, [r4, #0]

		char buf[128];
		if (gps.location.isValid() && gps.location.age() < MAX_GPS_AGE_MS) {
   d4110:	b143      	cbz	r3, d4124 <_Z11displayInfov+0x3c>
   d4112:	f000 fc5d 	bl	d49d0 <HAL_Timer_Get_Milli_Seconds>
   d4116:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
   d411a:	1ac0      	subs	r0, r0, r3
   d411c:	f242 730f 	movw	r3, #9999	; 0x270f
   d4120:	4298      	cmp	r0, r3
   d4122:	d90e      	bls.n	d4142 <_Z11displayInfov+0x5a>
				unsigned long elapsed = millis() - startFix;
				Serial.printlnf("%lu milliseconds to get GPS fix", elapsed);
			}
		}
		else {
			strcpy(buf, "no location");
   d4124:	4934      	ldr	r1, [pc, #208]	; (d41f8 <_Z11displayInfov+0x110>)
   d4126:	a804      	add	r0, sp, #16
   d4128:	f002 f842 	bl	d61b0 <strcpy>
			if (!gettingFix) {
   d412c:	782b      	ldrb	r3, [r5, #0]
   d412e:	2b00      	cmp	r3, #0
   d4130:	d15b      	bne.n	d41ea <_Z11displayInfov+0x102>
				gettingFix = true;
   d4132:	4b30      	ldr	r3, [pc, #192]	; (d41f4 <_Z11displayInfov+0x10c>)
   d4134:	2201      	movs	r2, #1
   d4136:	701a      	strb	r2, [r3, #0]
   d4138:	f000 fc4a 	bl	d49d0 <HAL_Timer_Get_Milli_Seconds>
				startFix = millis();
   d413c:	4b2f      	ldr	r3, [pc, #188]	; (d41fc <_Z11displayInfov+0x114>)
   d413e:	6018      	str	r0, [r3, #0]
			}
		}
	}
}
   d4140:	e053      	b.n	d41ea <_Z11displayInfov+0x102>
	if (millis() - lastSerial >= SERIAL_PERIOD) {
		lastSerial = millis();

		char buf[128];
		if (gps.location.isValid() && gps.location.age() < MAX_GPS_AGE_MS) {
			lat = gps.location.lat();
   d4142:	4648      	mov	r0, r9
   d4144:	f000 f99c 	bl	d4480 <_ZN15TinyGPSLocation3latEv>
   d4148:	ec51 0b10 	vmov	r0, r1, d0
   d414c:	f001 ff88 	bl	d6060 <__aeabi_d2f>
   d4150:	4606      	mov	r6, r0
			lon = gps.location.lng(); 
   d4152:	4648      	mov	r0, r9
   d4154:	f000 f9bc 	bl	d44d0 <_ZN15TinyGPSLocation3lngEv>
   d4158:	ec51 0b10 	vmov	r0, r1, d0
   d415c:	f001 ff80 	bl	d6060 <__aeabi_d2f>
   d4160:	4607      	mov	r7, r0
			hr = gps.time.hour();
   d4162:	f109 0048 	add.w	r0, r9, #72	; 0x48
   d4166:	f000 f9ff 	bl	d4568 <_ZN11TinyGPSTime4hourEv>
   d416a:	4604      	mov	r4, r0
			mn = gps.time.minute();
   d416c:	f109 0048 	add.w	r0, r9, #72	; 0x48
   d4170:	f000 fa04 	bl	d457c <_ZN11TinyGPSTime6minuteEv>
   d4174:	4680      	mov	r8, r0
			se = gps.time.second();
   d4176:	f109 0048 	add.w	r0, r9, #72	; 0x48
   d417a:	f000 fa0d 	bl	d4598 <_ZN11TinyGPSTime6secondEv>

			if(hr > 7) {
   d417e:	2c07      	cmp	r4, #7
		if (gps.location.isValid() && gps.location.age() < MAX_GPS_AGE_MS) {
			lat = gps.location.lat();
			lon = gps.location.lng(); 
			hr = gps.time.hour();
			mn = gps.time.minute();
			se = gps.time.second();
   d4180:	4681      	mov	r9, r0

			if(hr > 7) {
   d4182:	d901      	bls.n	d4188 <_Z11displayInfov+0xa0>
				hr = hr + UTC_offset;
   d4184:	3c06      	subs	r4, #6
   d4186:	e000      	b.n	d418a <_Z11displayInfov+0xa2>
			}
			else {
				hr = hr + 24 + UTC_offset;
   d4188:	3412      	adds	r4, #18
   d418a:	b2e4      	uxtb	r4, r4
			}
			Serial.printf("Time: %02i:%02i:%02i --- ",hr,mn,se);
   d418c:	f001 f802 	bl	d5194 <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4190:	4623      	mov	r3, r4
   d4192:	4a1b      	ldr	r2, [pc, #108]	; (d4200 <_Z11displayInfov+0x118>)
   d4194:	2100      	movs	r1, #0
   d4196:	e88d 0300 	stmia.w	sp, {r8, r9}
   d419a:	f000 fe3e 	bl	d4e1a <_ZN5Print11printf_implEbPKcz>
			Serial.printf("lat: %f, long: %f \n", lat,lon);
   d419e:	f000 fff9 	bl	d5194 <_Z16_fetch_usbserialv>
   d41a2:	4604      	mov	r4, r0
   d41a4:	4638      	mov	r0, r7
   d41a6:	f001 fcf5 	bl	d5b94 <__aeabi_f2d>
   d41aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d41ae:	4630      	mov	r0, r6
   d41b0:	f001 fcf0 	bl	d5b94 <__aeabi_f2d>
   d41b4:	4a13      	ldr	r2, [pc, #76]	; (d4204 <_Z11displayInfov+0x11c>)
   d41b6:	e9cd 0100 	strd	r0, r1, [sp]
   d41ba:	2100      	movs	r1, #0
   d41bc:	4620      	mov	r0, r4
   d41be:	f000 fe2c 	bl	d4e1a <_ZN5Print11printf_implEbPKcz>
			if (gettingFix) {
   d41c2:	782b      	ldrb	r3, [r5, #0]
   d41c4:	b18b      	cbz	r3, d41ea <_Z11displayInfov+0x102>
				gettingFix = false;
   d41c6:	4b0b      	ldr	r3, [pc, #44]	; (d41f4 <_Z11displayInfov+0x10c>)
   d41c8:	2200      	movs	r2, #0
   d41ca:	701a      	strb	r2, [r3, #0]
   d41cc:	f000 fc00 	bl	d49d0 <HAL_Timer_Get_Milli_Seconds>
				unsigned long elapsed = millis() - startFix;
   d41d0:	4b0a      	ldr	r3, [pc, #40]	; (d41fc <_Z11displayInfov+0x114>)
   d41d2:	681c      	ldr	r4, [r3, #0]
   d41d4:	1b04      	subs	r4, r0, r4
				Serial.printlnf("%lu milliseconds to get GPS fix", elapsed);
   d41d6:	f000 ffdd 	bl	d5194 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d41da:	4a0b      	ldr	r2, [pc, #44]	; (d4208 <_Z11displayInfov+0x120>)
   d41dc:	4623      	mov	r3, r4
   d41de:	2101      	movs	r1, #1
				gettingFix = true;
				startFix = millis();
			}
		}
	}
}
   d41e0:	b025      	add	sp, #148	; 0x94
   d41e2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d41e6:	f000 be18 	b.w	d4e1a <_ZN5Print11printf_implEbPKcz>
   d41ea:	b025      	add	sp, #148	; 0x94
   d41ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d41f0:	2003e3f0 	.word	0x2003e3f0
   d41f4:	2003e3e8 	.word	0x2003e3e8
   d41f8:	000d637a 	.word	0x000d637a
   d41fc:	2003e3ec 	.word	0x2003e3ec
   d4200:	000d632c 	.word	0x000d632c
   d4204:	000d6346 	.word	0x000d6346
   d4208:	000d635a 	.word	0x000d635a
   d420c:	2003e248 	.word	0x2003e248

000d4210 <loop>:
    startFix = millis();
    gettingFix = true;
}

void loop()
{
   d4210:	b508      	push	{r3, lr}
	while (Serial1.available() > 0) {
   d4212:	f001 f845 	bl	d52a0 <_Z22__fetch_global_Serial1v>
   d4216:	6803      	ldr	r3, [r0, #0]
   d4218:	691b      	ldr	r3, [r3, #16]
   d421a:	4798      	blx	r3
   d421c:	2800      	cmp	r0, #0
   d421e:	dd0d      	ble.n	d423c <loop+0x2c>
		if (gps.encode(Serial1.read())) {
   d4220:	f001 f83e 	bl	d52a0 <_Z22__fetch_global_Serial1v>
   d4224:	6803      	ldr	r3, [r0, #0]
   d4226:	695b      	ldr	r3, [r3, #20]
   d4228:	4798      	blx	r3
   d422a:	b2c1      	uxtb	r1, r0
   d422c:	4804      	ldr	r0, [pc, #16]	; (d4240 <loop+0x30>)
   d422e:	f000 fb55 	bl	d48dc <_ZN11TinyGPSPlus6encodeEc>
   d4232:	2800      	cmp	r0, #0
   d4234:	d0ed      	beq.n	d4212 <loop+0x2>
			displayInfo();
   d4236:	f7ff ff57 	bl	d40e8 <_Z11displayInfov>
   d423a:	e7ea      	b.n	d4212 <loop+0x2>
   d423c:	bd08      	pop	{r3, pc}
   d423e:	bf00      	nop
   d4240:	2003e248 	.word	0x2003e248

000d4244 <_GLOBAL__sub_I_gps>:
				gettingFix = true;
				startFix = millis();
			}
		}
	}
}
   d4244:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4246:	f000 fbb3 	bl	d49b0 <HAL_Pin_Map>
 * GPS Module Connections
 * GPS Unit Rx connects to Argon Pin D9  (UART1_TX)
 * GPS Unit Tx connects to Argon Pin D10 (UART1_RX)
*/

SYSTEM_THREAD(ENABLED);
   d424a:	2001      	movs	r0, #1
   d424c:	2100      	movs	r1, #0
   d424e:	f000 fc7f 	bl	d4b50 <system_thread_set_state>
const unsigned long PUBLISH_PERIOD = 120000;
const unsigned long SERIAL_PERIOD = 5000;
const unsigned long MAX_GPS_AGE_MS = 10000; // GPS location must be newer than this to be considered valid

// The TinyGPS++ object
TinyGPSPlus gps;
   d4252:	4802      	ldr	r0, [pc, #8]	; (d425c <_GLOBAL__sub_I_gps+0x18>)
				gettingFix = true;
				startFix = millis();
			}
		}
	}
}
   d4254:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
const unsigned long PUBLISH_PERIOD = 120000;
const unsigned long SERIAL_PERIOD = 5000;
const unsigned long MAX_GPS_AGE_MS = 10000; // GPS location must be newer than this to be considered valid

// The TinyGPS++ object
TinyGPSPlus gps;
   d4258:	f000 b86e 	b.w	d4338 <_ZN11TinyGPSPlusC1Ev>
   d425c:	2003e248 	.word	0x2003e248

000d4260 <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d4260:	f000 bba6 	b.w	d49b0 <HAL_Pin_Map>

000d4264 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d4264:	f000 bba4 	b.w	d49b0 <HAL_Pin_Map>

000d4268 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4268:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d426a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d426c:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d426e:	b113      	cbz	r3, d4276 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4270:	2203      	movs	r2, #3
   d4272:	4601      	mov	r1, r0
   d4274:	4798      	blx	r3
    }
   d4276:	4620      	mov	r0, r4
   d4278:	bd10      	pop	{r4, pc}
	...

000d427c <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d427c:	4b02      	ldr	r3, [pc, #8]	; (d4288 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0xc>)
   d427e:	2201      	movs	r2, #1
   d4280:	701a      	strb	r2, [r3, #0]
   d4282:	f000 bb95 	b.w	d49b0 <HAL_Pin_Map>
   d4286:	bf00      	nop
   d4288:	2003e3f4 	.word	0x2003e3f4

000d428c <_ZN11TinyGPSDataC1Ev>:
	void invalidate() { valid = false; }

	/**
	 * @brief Constructor
	 */
	TinyGPSLocation() : valid(false), updated(false), lastCommitTime(0)
   d428c:	2200      	movs	r2, #0
   d428e:	7002      	strb	r2, [r0, #0]
   d4290:	7042      	strb	r2, [r0, #1]
{
	uint16_t deg; 			//!< Degree value (0 <= deg < 365)
	uint32_t billionths; 	//!< Billionths of a segree
	bool negative; 			//!< true if negative (south latitude or east longitude)
public:
	RawDegrees() : deg(0), billionths(0), negative(false)
   d4292:	8082      	strh	r2, [r0, #4]
   d4294:	6082      	str	r2, [r0, #8]
   d4296:	7302      	strb	r2, [r0, #12]
   d4298:	8202      	strh	r2, [r0, #16]
   d429a:	6142      	str	r2, [r0, #20]
   d429c:	7602      	strb	r2, [r0, #24]
   d429e:	8382      	strh	r2, [r0, #28]
   d42a0:	6202      	str	r2, [r0, #32]
   d42a2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
   d42a6:	8502      	strh	r2, [r0, #40]	; 0x28
   d42a8:	62c2      	str	r2, [r0, #44]	; 0x2c
   d42aa:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
	void invalidate() { valid = false; }

	/**
	 * @brief Constructor
	 */
	TinyGPSLocation() : valid(false), updated(false), lastCommitTime(0)
   d42ae:	6342      	str	r2, [r0, #52]	; 0x34
	uint8_t day();

	/**
	 * @brief Constructor
	 */
	TinyGPSDate() : valid(false), updated(false), date(0), newDate(0), lastCommitTime(0)
   d42b0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
   d42b4:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
   d42b8:	63c2      	str	r2, [r0, #60]	; 0x3c
   d42ba:	6402      	str	r2, [r0, #64]	; 0x40
   d42bc:	6442      	str	r2, [r0, #68]	; 0x44
	uint8_t centisecond();

	/**
	 * @brief Constructor
	 */
	TinyGPSTime() : valid(false), updated(false), time(0), newTime(0), lastCommitTime(0)
   d42be:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
   d42c2:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
   d42c6:	64c2      	str	r2, [r0, #76]	; 0x4c
   d42c8:	6502      	str	r2, [r0, #80]	; 0x50
   d42ca:	6542      	str	r2, [r0, #84]	; 0x54
	void invalidate() { valid = false; }

	/**
	 * @brief Constructor
	 */
	TinyGPSDecimal() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d42cc:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
   d42d0:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
   d42d4:	65c2      	str	r2, [r0, #92]	; 0x5c
   d42d6:	6602      	str	r2, [r0, #96]	; 0x60
   d42d8:	6642      	str	r2, [r0, #100]	; 0x64
   d42da:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
   d42de:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
   d42e2:	66c2      	str	r2, [r0, #108]	; 0x6c
   d42e4:	6702      	str	r2, [r0, #112]	; 0x70
   d42e6:	6742      	str	r2, [r0, #116]	; 0x74
   d42e8:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
   d42ec:	f880 2079 	strb.w	r2, [r0, #121]	; 0x79
   d42f0:	67c2      	str	r2, [r0, #124]	; 0x7c
   d42f2:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   d42f6:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
   d42fa:	f880 2088 	strb.w	r2, [r0, #136]	; 0x88
   d42fe:	f880 2089 	strb.w	r2, [r0, #137]	; 0x89
   d4302:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
   d4306:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   d430a:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	void invalidate() { valid = false; }

	/**
	 * @brief Constructor
	 */
	TinyGPSInteger() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d430e:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
   d4312:	f880 2099 	strb.w	r2, [r0, #153]	; 0x99
   d4316:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
   d431a:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
   d431e:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	void invalidate() { valid = false; }

	/**
	 * @brief Constructor
	 */
	TinyGPSDecimal() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d4322:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
   d4326:	f880 20a9 	strb.w	r2, [r0, #169]	; 0xa9
   d432a:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
   d432e:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
   d4332:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
 *
 * For best thread safety, you should avoid using fields like location directly and instead should
 * use methods like getLocation() to make a copy of the location data. This will assure that your
 * data is valid and does not change while you are reading it.
 */
class TinyGPSData {
   d4336:	4770      	bx	lr

000d4338 <_ZN11TinyGPSPlusC1Ev>:
	return value * value;
}
#endif
// End

TinyGPSPlus::TinyGPSPlus()
   d4338:	b510      	push	{r4, lr}
   d433a:	4604      	mov	r4, r0
  ,  customElts(0)
  ,  customCandidates(0)
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
   d433c:	f7ff ffa6 	bl	d428c <_ZN11TinyGPSDataC1Ev>
   d4340:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   d4344:	f7ff ffa2 	bl	d428c <_ZN11TinyGPSDataC1Ev>
   d4348:	2300      	movs	r3, #0
   d434a:	2202      	movs	r2, #2
   d434c:	f884 3170 	strb.w	r3, [r4, #368]	; 0x170
   d4350:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
   d4354:	f884 2181 	strb.w	r2, [r4, #385]	; 0x181
   d4358:	f884 3182 	strb.w	r3, [r4, #386]	; 0x182
   d435c:	f884 3183 	strb.w	r3, [r4, #387]	; 0x183
   d4360:	f884 3184 	strb.w	r3, [r4, #388]	; 0x184
   d4364:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
   d4368:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   d436c:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
   d4370:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
   d4374:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
   d4378:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
{
  term[0] = '\0';
   d437c:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
}
   d4380:	4620      	mov	r0, r4
   d4382:	bd10      	pop	{r4, pc}

000d4384 <_ZN11TinyGPSPlus7fromHexEc>:
//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
  if (a >= 'A' && a <= 'F')
   d4384:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   d4388:	2b05      	cmp	r3, #5
   d438a:	d802      	bhi.n	d4392 <_ZN11TinyGPSPlus7fromHexEc+0xe>
    return a - 'A' + 10;
   d438c:	f1a1 0037 	sub.w	r0, r1, #55	; 0x37
   d4390:	4770      	bx	lr
  else if (a >= 'a' && a <= 'f')
   d4392:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   d4396:	2b05      	cmp	r3, #5
    return a - 'a' + 10;
   d4398:	bf94      	ite	ls
   d439a:	f1a1 0057 	subls.w	r0, r1, #87	; 0x57
  else
    return a - '0';
   d439e:	f1a1 0030 	subhi.w	r0, r1, #48	; 0x30
}
   d43a2:	4770      	bx	lr

000d43a4 <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d43a4:	b538      	push	{r3, r4, r5, lr}
  bool negative = *term == '-';
   d43a6:	7805      	ldrb	r5, [r0, #0]
}

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d43a8:	4604      	mov	r4, r0
  bool negative = *term == '-';
  if (negative) ++term;
   d43aa:	2d2d      	cmp	r5, #45	; 0x2d
   d43ac:	bf08      	it	eq
   d43ae:	3401      	addeq	r4, #1
  int32_t ret = 100 * (int32_t)atol(term);
   d43b0:	4620      	mov	r0, r4
   d43b2:	f001 fea5 	bl	d6100 <atol>
   d43b6:	2364      	movs	r3, #100	; 0x64
   d43b8:	4358      	muls	r0, r3
   d43ba:	4622      	mov	r2, r4
  while (isdigit(*term)) ++term;
   d43bc:	f814 3b01 	ldrb.w	r3, [r4], #1
   d43c0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d43c4:	2909      	cmp	r1, #9
   d43c6:	d9f8      	bls.n	d43ba <_ZN11TinyGPSPlus12parseDecimalEPKc+0x16>
  if (*term == '.' && isdigit(term[1]))
   d43c8:	2b2e      	cmp	r3, #46	; 0x2e
   d43ca:	d10b      	bne.n	d43e4 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
   d43cc:	7853      	ldrb	r3, [r2, #1]
   d43ce:	3b30      	subs	r3, #48	; 0x30
   d43d0:	2b09      	cmp	r3, #9
   d43d2:	d807      	bhi.n	d43e4 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
  {
    ret += 10 * (term[1] - '0');
   d43d4:	210a      	movs	r1, #10
   d43d6:	fb01 0003 	mla	r0, r1, r3, r0
    if (isdigit(term[2]))
   d43da:	7893      	ldrb	r3, [r2, #2]
   d43dc:	3b30      	subs	r3, #48	; 0x30
   d43de:	2b09      	cmp	r3, #9
      ret += term[2] - '0';
   d43e0:	bf98      	it	ls
   d43e2:	18c0      	addls	r0, r0, r3
  }
  return negative ? -ret : ret;
   d43e4:	2d2d      	cmp	r5, #45	; 0x2d
   d43e6:	bf08      	it	eq
   d43e8:	4240      	negeq	r0, r0
}
   d43ea:	bd38      	pop	{r3, r4, r5, pc}

000d43ec <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
   d43ec:	b538      	push	{r3, r4, r5, lr}
   d43ee:	4604      	mov	r4, r0
   d43f0:	460d      	mov	r5, r1
  uint32_t leftOfDecimal = (uint32_t)atol(term);
   d43f2:	f001 fe85 	bl	d6100 <atol>
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d43f6:	2364      	movs	r3, #100	; 0x64
   d43f8:	fbb0 f2f3 	udiv	r2, r0, r3
   d43fc:	fb03 0012 	mls	r0, r3, r2, r0
   d4400:	4b11      	ldr	r3, [pc, #68]	; (d4448 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)

  deg.deg = (int16_t)(leftOfDecimal / 100);
   d4402:	802a      	strh	r2, [r5, #0]
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
  uint32_t leftOfDecimal = (uint32_t)atol(term);
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d4404:	4343      	muls	r3, r0
   d4406:	4620      	mov	r0, r4

  deg.deg = (int16_t)(leftOfDecimal / 100);

  while (isdigit(*term))
   d4408:	7802      	ldrb	r2, [r0, #0]
   d440a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   d440e:	2909      	cmp	r1, #9
   d4410:	4604      	mov	r4, r0
   d4412:	f100 0001 	add.w	r0, r0, #1
   d4416:	d9f7      	bls.n	d4408 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x1c>
    ++term;

  if (*term == '.')
   d4418:	2a2e      	cmp	r2, #46	; 0x2e
   d441a:	d10b      	bne.n	d4434 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
   d441c:	490a      	ldr	r1, [pc, #40]	; (d4448 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
    while (isdigit(*++term))
    {
      multiplier /= 10;
   d441e:	200a      	movs	r0, #10

  while (isdigit(*term))
    ++term;

  if (*term == '.')
    while (isdigit(*++term))
   d4420:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   d4424:	3a30      	subs	r2, #48	; 0x30
   d4426:	2a09      	cmp	r2, #9
   d4428:	d804      	bhi.n	d4434 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
    {
      multiplier /= 10;
   d442a:	fbb1 f1f0 	udiv	r1, r1, r0
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
   d442e:	fb01 3302 	mla	r3, r1, r2, r3

  while (isdigit(*term))
    ++term;

  if (*term == '.')
    while (isdigit(*++term))
   d4432:	e7f5      	b.n	d4420 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x34>
    {
      multiplier /= 10;
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
   d4434:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4438:	3301      	adds	r3, #1
   d443a:	2203      	movs	r2, #3
   d443c:	fbb3 f3f2 	udiv	r3, r3, r2
   d4440:	606b      	str	r3, [r5, #4]
  deg.negative = false;
   d4442:	2300      	movs	r3, #0
   d4444:	722b      	strb	r3, [r5, #8]
   d4446:	bd38      	pop	{r3, r4, r5, pc}
   d4448:	00989680 	.word	0x00989680

000d444c <_ZN15TinyGPSLocation6commitEv>:
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d444c:	b510      	push	{r4, lr}
   rawLatData = rawNewLatData;
   d444e:	4603      	mov	r3, r0
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d4450:	4604      	mov	r4, r0
   rawLatData = rawNewLatData;
   d4452:	f853 2f1c 	ldr.w	r2, [r3, #28]!
   d4456:	6042      	str	r2, [r0, #4]
   d4458:	685a      	ldr	r2, [r3, #4]
   d445a:	6082      	str	r2, [r0, #8]
   d445c:	7a1b      	ldrb	r3, [r3, #8]
   d445e:	7303      	strb	r3, [r0, #12]
   rawLngData = rawNewLngData;
   d4460:	4603      	mov	r3, r0
   d4462:	f853 2f28 	ldr.w	r2, [r3, #40]!
   d4466:	6102      	str	r2, [r0, #16]
   d4468:	685a      	ldr	r2, [r3, #4]
   d446a:	6142      	str	r2, [r0, #20]
   d446c:	7a1b      	ldrb	r3, [r3, #8]
   d446e:	7603      	strb	r3, [r0, #24]
   d4470:	f000 faae 	bl	d49d0 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d4474:	2301      	movs	r3, #1

void TinyGPSLocation::commit()
{
   rawLatData = rawNewLatData;
   rawLngData = rawNewLngData;
   lastCommitTime = millis();
   d4476:	6360      	str	r0, [r4, #52]	; 0x34
   valid = updated = true;
   d4478:	7063      	strb	r3, [r4, #1]
   d447a:	7023      	strb	r3, [r4, #0]
   d447c:	bd10      	pop	{r4, pc}
	...

000d4480 <_ZN15TinyGPSLocation3latEv>:
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d4480:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d4482:	2300      	movs	r3, #0
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d4484:	4604      	mov	r4, r0
   updated = false;
   d4486:	7043      	strb	r3, [r0, #1]
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   d4488:	6880      	ldr	r0, [r0, #8]
   d448a:	f001 fb61 	bl	d5b50 <__aeabi_ui2d>
   d448e:	a30e      	add	r3, pc, #56	; (adr r3, d44c8 <_ZN15TinyGPSLocation3latEv+0x48>)
   d4490:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4494:	f001 fcfc 	bl	d5e90 <__aeabi_ddiv>
   d4498:	4606      	mov	r6, r0
   d449a:	88a0      	ldrh	r0, [r4, #4]
   d449c:	460f      	mov	r7, r1
   d449e:	f001 fb67 	bl	d5b70 <__aeabi_i2d>
   d44a2:	460b      	mov	r3, r1
   d44a4:	4602      	mov	r2, r0
   d44a6:	4639      	mov	r1, r7
   d44a8:	4630      	mov	r0, r6
   d44aa:	f001 fa15 	bl	d58d8 <__adddf3>
   return rawLatData.negative ? -ret : ret;
   d44ae:	7b23      	ldrb	r3, [r4, #12]
   d44b0:	b11b      	cbz	r3, d44ba <_ZN15TinyGPSLocation3latEv+0x3a>
   d44b2:	4602      	mov	r2, r0
   d44b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d44b8:	e001      	b.n	d44be <_ZN15TinyGPSLocation3latEv+0x3e>
   d44ba:	4602      	mov	r2, r0
   d44bc:	460b      	mov	r3, r1
}
   d44be:	ec43 2b10 	vmov	d0, r2, r3
   d44c2:	bdd0      	pop	{r4, r6, r7, pc}
   d44c4:	f3af 8000 	nop.w
   d44c8:	00000000 	.word	0x00000000
   d44cc:	41cdcd65 	.word	0x41cdcd65

000d44d0 <_ZN15TinyGPSLocation3lngEv>:

double TinyGPSLocation::lng()
{
   d44d0:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d44d2:	2300      	movs	r3, #0
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   return rawLatData.negative ? -ret : ret;
}

double TinyGPSLocation::lng()
{
   d44d4:	4604      	mov	r4, r0
   updated = false;
   d44d6:	7043      	strb	r3, [r0, #1]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   d44d8:	6940      	ldr	r0, [r0, #20]
   d44da:	f001 fb39 	bl	d5b50 <__aeabi_ui2d>
   d44de:	a30e      	add	r3, pc, #56	; (adr r3, d4518 <_ZN15TinyGPSLocation3lngEv+0x48>)
   d44e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44e4:	f001 fcd4 	bl	d5e90 <__aeabi_ddiv>
   d44e8:	4606      	mov	r6, r0
   d44ea:	8a20      	ldrh	r0, [r4, #16]
   d44ec:	460f      	mov	r7, r1
   d44ee:	f001 fb3f 	bl	d5b70 <__aeabi_i2d>
   d44f2:	460b      	mov	r3, r1
   d44f4:	4602      	mov	r2, r0
   d44f6:	4639      	mov	r1, r7
   d44f8:	4630      	mov	r0, r6
   d44fa:	f001 f9ed 	bl	d58d8 <__adddf3>
   return rawLngData.negative ? -ret : ret;
   d44fe:	7e23      	ldrb	r3, [r4, #24]
   d4500:	b11b      	cbz	r3, d450a <_ZN15TinyGPSLocation3lngEv+0x3a>
   d4502:	4602      	mov	r2, r0
   d4504:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d4508:	e001      	b.n	d450e <_ZN15TinyGPSLocation3lngEv+0x3e>
   d450a:	4602      	mov	r2, r0
   d450c:	460b      	mov	r3, r1
}
   d450e:	ec43 2b10 	vmov	d0, r2, r3
   d4512:	bdd0      	pop	{r4, r6, r7, pc}
   d4514:	f3af 8000 	nop.w
   d4518:	00000000 	.word	0x00000000
   d451c:	41cdcd65 	.word	0x41cdcd65

000d4520 <_ZN11TinyGPSDate6commitEv>:

void TinyGPSDate::commit()
{
   d4520:	b510      	push	{r4, lr}
   date = newDate;
   d4522:	6883      	ldr	r3, [r0, #8]
   d4524:	6043      	str	r3, [r0, #4]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   return rawLngData.negative ? -ret : ret;
}

void TinyGPSDate::commit()
{
   d4526:	4604      	mov	r4, r0
   d4528:	f000 fa52 	bl	d49d0 <HAL_Timer_Get_Milli_Seconds>
   date = newDate;
   lastCommitTime = millis();
   valid = updated = true;
   d452c:	2301      	movs	r3, #1
}

void TinyGPSDate::commit()
{
   date = newDate;
   lastCommitTime = millis();
   d452e:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d4530:	7063      	strb	r3, [r4, #1]
   d4532:	7023      	strb	r3, [r4, #0]
   d4534:	bd10      	pop	{r4, pc}

000d4536 <_ZN11TinyGPSTime6commitEv>:
}

void TinyGPSTime::commit()
{
   d4536:	b510      	push	{r4, lr}
   time = newTime;
   d4538:	6883      	ldr	r3, [r0, #8]
   d453a:	6043      	str	r3, [r0, #4]
   lastCommitTime = millis();
   valid = updated = true;
}

void TinyGPSTime::commit()
{
   d453c:	4604      	mov	r4, r0
   d453e:	f000 fa47 	bl	d49d0 <HAL_Timer_Get_Milli_Seconds>
   time = newTime;
   lastCommitTime = millis();
   valid = updated = true;
   d4542:	2301      	movs	r3, #1
}

void TinyGPSTime::commit()
{
   time = newTime;
   lastCommitTime = millis();
   d4544:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d4546:	7063      	strb	r3, [r4, #1]
   d4548:	7023      	strb	r3, [r4, #0]
   d454a:	bd10      	pop	{r4, pc}

000d454c <_ZN11TinyGPSTime7setTimeEPKc>:
}

void TinyGPSTime::setTime(const char *term)
{
   d454c:	b510      	push	{r4, lr}
   d454e:	4604      	mov	r4, r0
   newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
   d4550:	4608      	mov	r0, r1
   d4552:	f7ff ff27 	bl	d43a4 <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d4556:	60a0      	str	r0, [r4, #8]
   d4558:	bd10      	pop	{r4, pc}

000d455a <_ZN11TinyGPSDate7setDateEPKc>:
}

void TinyGPSDate::setDate(const char *term)
{
   d455a:	b510      	push	{r4, lr}
   d455c:	4604      	mov	r4, r0
   newDate = atol(term);
   d455e:	4608      	mov	r0, r1
   d4560:	f001 fdce 	bl	d6100 <atol>
   d4564:	60a0      	str	r0, [r4, #8]
   d4566:	bd10      	pop	{r4, pc}

000d4568 <_ZN11TinyGPSTime4hourEv>:
   return date / 10000;
}

uint8_t TinyGPSTime::hour()
{
   updated = false;
   d4568:	2300      	movs	r3, #0
   d456a:	7043      	strb	r3, [r0, #1]
   return time / 1000000;
   d456c:	6843      	ldr	r3, [r0, #4]
   d456e:	4802      	ldr	r0, [pc, #8]	; (d4578 <_ZN11TinyGPSTime4hourEv+0x10>)
   d4570:	fbb3 f0f0 	udiv	r0, r3, r0
}
   d4574:	b2c0      	uxtb	r0, r0
   d4576:	4770      	bx	lr
   d4578:	000f4240 	.word	0x000f4240

000d457c <_ZN11TinyGPSTime6minuteEv>:

uint8_t TinyGPSTime::minute()
{
   updated = false;
   d457c:	2300      	movs	r3, #0
   d457e:	7043      	strb	r3, [r0, #1]
   return (time / 10000) % 100;
   d4580:	6843      	ldr	r3, [r0, #4]
   d4582:	f242 7010 	movw	r0, #10000	; 0x2710
   d4586:	fbb3 f3f0 	udiv	r3, r3, r0
   d458a:	2064      	movs	r0, #100	; 0x64
   d458c:	fbb3 f2f0 	udiv	r2, r3, r0
   d4590:	fb00 3012 	mls	r0, r0, r2, r3
}
   d4594:	b2c0      	uxtb	r0, r0
   d4596:	4770      	bx	lr

000d4598 <_ZN11TinyGPSTime6secondEv>:

uint8_t TinyGPSTime::second()
{
   updated = false;
   d4598:	2300      	movs	r3, #0
   d459a:	7043      	strb	r3, [r0, #1]
   return (time / 100) % 100;
   d459c:	6843      	ldr	r3, [r0, #4]
   d459e:	2064      	movs	r0, #100	; 0x64
   d45a0:	fbb3 f3f0 	udiv	r3, r3, r0
   d45a4:	fbb3 f2f0 	udiv	r2, r3, r0
   d45a8:	fb00 3012 	mls	r0, r0, r2, r3
}
   d45ac:	b2c0      	uxtb	r0, r0
   d45ae:	4770      	bx	lr

000d45b0 <_ZN14TinyGPSDecimal6commitEv>:
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d45b0:	b510      	push	{r4, lr}
   val = newval;
   d45b2:	68c3      	ldr	r3, [r0, #12]
   d45b4:	6083      	str	r3, [r0, #8]
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d45b6:	4604      	mov	r4, r0
   d45b8:	f000 fa0a 	bl	d49d0 <HAL_Timer_Get_Milli_Seconds>
   val = newval;
   lastCommitTime = millis();
   valid = updated = true;
   d45bc:	2301      	movs	r3, #1
}

void TinyGPSDecimal::commit()
{
   val = newval;
   lastCommitTime = millis();
   d45be:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d45c0:	7063      	strb	r3, [r4, #1]
   d45c2:	7023      	strb	r3, [r4, #0]
   d45c4:	bd10      	pop	{r4, pc}

000d45c6 <_ZN14TinyGPSDecimal3setEPKc>:
}

void TinyGPSDecimal::set(const char *term)
{
   d45c6:	b510      	push	{r4, lr}
   d45c8:	4604      	mov	r4, r0
   newval = TinyGPSPlus::parseDecimal(term);
   d45ca:	4608      	mov	r0, r1
   d45cc:	f7ff feea 	bl	d43a4 <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d45d0:	60e0      	str	r0, [r4, #12]
   d45d2:	bd10      	pop	{r4, pc}

000d45d4 <_ZN14TinyGPSInteger6commitEv>:
}

void TinyGPSInteger::commit()
{
   d45d4:	b510      	push	{r4, lr}
   val = newval;
   d45d6:	68c3      	ldr	r3, [r0, #12]
   d45d8:	6083      	str	r3, [r0, #8]
{
   newval = TinyGPSPlus::parseDecimal(term);
}

void TinyGPSInteger::commit()
{
   d45da:	4604      	mov	r4, r0
   d45dc:	f000 f9f8 	bl	d49d0 <HAL_Timer_Get_Milli_Seconds>
   val = newval;
   lastCommitTime = millis();
   valid = updated = true;
   d45e0:	2301      	movs	r3, #1
}

void TinyGPSInteger::commit()
{
   val = newval;
   lastCommitTime = millis();
   d45e2:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d45e4:	7063      	strb	r3, [r4, #1]
   d45e6:	7023      	strb	r3, [r4, #0]
   d45e8:	bd10      	pop	{r4, pc}

000d45ea <_ZN14TinyGPSInteger3setEPKc>:
}

void TinyGPSInteger::set(const char *term)
{
   d45ea:	b510      	push	{r4, lr}
   d45ec:	4604      	mov	r4, r0
   newval = atol(term);
   d45ee:	4608      	mov	r0, r1
   d45f0:	f001 fd86 	bl	d6100 <atol>
   d45f4:	60e0      	str	r0, [r4, #12]
   d45f6:	bd10      	pop	{r4, pc}

000d45f8 <_ZN13TinyGPSCustom6commitEv>:
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d45f8:	b510      	push	{r4, lr}
   strcpy(this->buffer, this->stagingBuffer);
   d45fa:	4601      	mov	r1, r0
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d45fc:	4604      	mov	r4, r0
   strcpy(this->buffer, this->stagingBuffer);
   d45fe:	3010      	adds	r0, #16
   d4600:	f001 fdd6 	bl	d61b0 <strcpy>
   d4604:	f000 f9e4 	bl	d49d0 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d4608:	2301      	movs	r3, #1
}

void TinyGPSCustom::commit()
{
   strcpy(this->buffer, this->stagingBuffer);
   lastCommitTime = millis();
   d460a:	6220      	str	r0, [r4, #32]
   valid = updated = true;
   d460c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
   d4610:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d4614:	bd10      	pop	{r4, pc}

000d4616 <_ZN13TinyGPSCustom3setEPKc>:
}

void TinyGPSCustom::set(const char *term)
{
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
   d4616:	2210      	movs	r2, #16
   d4618:	f001 bdda 	b.w	d61d0 <strncpy>

000d461c <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
   d461c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm)
   d461e:	f890 5171 	ldrb.w	r5, [r0, #369]	; 0x171
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
   d4622:	4604      	mov	r4, r0
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm)
   d4624:	2d00      	cmp	r5, #0
   d4626:	f000 808b 	beq.w	d4740 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x124>
  {
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d462a:	f890 1172 	ldrb.w	r1, [r0, #370]	; 0x172
   d462e:	f7ff fea9 	bl	d4384 <_ZN11TinyGPSPlus7fromHexEc>
   d4632:	f894 1173 	ldrb.w	r1, [r4, #371]	; 0x173
   d4636:	4602      	mov	r2, r0
   d4638:	4620      	mov	r0, r4
   d463a:	f7ff fea3 	bl	d4384 <_ZN11TinyGPSPlus7fromHexEc>
    if (checksum == parity)
   d463e:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   d4642:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   d4646:	b2c0      	uxtb	r0, r0
   d4648:	4283      	cmp	r3, r0
   d464a:	d172      	bne.n	d4732 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x116>
    {
      passedChecksumCount++;
   d464c:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
   d4650:	3301      	adds	r3, #1
   d4652:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
      if (sentenceHasFix)
   d4656:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   d465a:	b123      	cbz	r3, d4666 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x4a>
        ++sentencesWithFixCount;
   d465c:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
   d4660:	3301      	adds	r3, #1
   d4662:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194

      switch(curSentenceType)
   d4666:	f894 3181 	ldrb.w	r3, [r4, #385]	; 0x181
   d466a:	b1fb      	cbz	r3, d46ac <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x90>
   d466c:	2b01      	cmp	r3, #1
   d466e:	d14d      	bne.n	d470c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf0>
      {
      case GPS_SENTENCE_GPRMC:
    	tempData.date.commit();
   d4670:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   d4674:	f7ff ff54 	bl	d4520 <_ZN11TinyGPSDate6commitEv>
    	tempData.time.commit();
   d4678:	f504 7080 	add.w	r0, r4, #256	; 0x100
   d467c:	f7ff ff5b 	bl	d4536 <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d4680:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   d4684:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
   d4688:	b14b      	cbz	r3, d469e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x82>
        {
           tempData.location.commit();
   d468a:	4630      	mov	r0, r6
   d468c:	f7ff fede 	bl	d444c <_ZN15TinyGPSLocation6commitEv>
           tempData.speed.commit();
   d4690:	f504 7088 	add.w	r0, r4, #272	; 0x110
   d4694:	f7ff ff8c 	bl	d45b0 <_ZN14TinyGPSDecimal6commitEv>
           tempData.course.commit();
   d4698:	f504 7090 	add.w	r0, r4, #288	; 0x120
   d469c:	e027      	b.n	d46ee <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
	 * @brief Sets the valid flag to false (marks data as invalid)
	 *
	 * This is used internally when we get a valid GPS sentence that does not have a fix.
	 * It can be checked by using the isValid() method.
	 */
	void invalidate() { valid = false; }
   d469e:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
	 * @brief Sets the valid flag to false (marks data as invalid)
	 *
	 * This is used internally when we get a valid GPS sentence that does not have a fix.
	 * It can be checked by using the isValid() method.
	 */
	void invalidate() { valid = false; }
   d46a2:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
   d46a6:	f884 3120 	strb.w	r3, [r4, #288]	; 0x120
   d46aa:	e022      	b.n	d46f2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd6>
        SINGLE_THREADED_BLOCK() {
        	TinyGPSData::operator=(tempData);
        }
        break;
      case GPS_SENTENCE_GPGGA:
        tempData.time.commit();
   d46ac:	f504 7080 	add.w	r0, r4, #256	; 0x100
   d46b0:	f7ff ff41 	bl	d4536 <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d46b4:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   d46b8:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
   d46bc:	b15b      	cbz	r3, d46d6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xba>
        {
          tempData.location.commit();
   d46be:	4630      	mov	r0, r6
   d46c0:	f7ff fec4 	bl	d444c <_ZN15TinyGPSLocation6commitEv>
          tempData.altitude.commit();
   d46c4:	f504 7098 	add.w	r0, r4, #304	; 0x130
   d46c8:	f7ff ff72 	bl	d45b0 <_ZN14TinyGPSDecimal6commitEv>
          tempData.geoidSeparation.commit();
   d46cc:	f504 70a0 	add.w	r0, r4, #320	; 0x140
   d46d0:	f7ff ff6e 	bl	d45b0 <_ZN14TinyGPSDecimal6commitEv>
   d46d4:	e005      	b.n	d46e2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xc6>
	 * @brief Sets the valid flag to false (marks data as invalid)
	 *
	 * This is used internally when we get a valid GPS sentence that does not have a fix.
	 * It can be checked by using the isValid() method.
	 */
	void invalidate() { valid = false; }
   d46d6:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
	 * @brief Sets the valid flag to false (marks data as invalid)
	 *
	 * This is used internally when we get a valid GPS sentence that does not have a fix.
	 * It can be checked by using the isValid() method.
	 */
	void invalidate() { valid = false; }
   d46da:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
   d46de:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
        {
            tempData.location.invalidate();
            tempData.altitude.invalidate();
            tempData.geoidSeparation.invalidate();
        }
        tempData.satellites.commit();
   d46e2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   d46e6:	f7ff ff75 	bl	d45d4 <_ZN14TinyGPSInteger6commitEv>
        tempData.hdop.commit();
   d46ea:	f504 70b0 	add.w	r0, r4, #352	; 0x160
   d46ee:	f7ff ff5f 	bl	d45b0 <_ZN14TinyGPSDecimal6commitEv>
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d46f2:	2100      	movs	r1, #0
   d46f4:	4608      	mov	r0, r1
   d46f6:	f000 f98b 	bl	d4a10 <os_thread_scheduling>
        SINGLE_THREADED_BLOCK() {
        	TinyGPSData::operator=(tempData);
   d46fa:	4631      	mov	r1, r6
   d46fc:	22b8      	movs	r2, #184	; 0xb8
   d46fe:	4620      	mov	r0, r4
   d4700:	f001 fd10 	bl	d6124 <memcpy>
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4704:	2100      	movs	r1, #0
   d4706:	2001      	movs	r0, #1
   d4708:	f000 f982 	bl	d4a10 <os_thread_scheduling>
        }
        break;
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d470c:	f8d4 618c 	ldr.w	r6, [r4, #396]	; 0x18c
   d4710:	2e00      	cmp	r6, #0
   d4712:	f000 80d9 	beq.w	d48c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
   d4716:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   d471a:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d471c:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d471e:	f001 fd3d 	bl	d619c <strcmp>
   d4722:	2800      	cmp	r0, #0
   d4724:	f040 80d0 	bne.w	d48c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
         p->commit();
   d4728:	4630      	mov	r0, r6
   d472a:	f7ff ff65 	bl	d45f8 <_ZN13TinyGPSCustom6commitEv>
        }
        break;
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d472e:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d4730:	e7ee      	b.n	d4710 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf4>
      return true;
    }

    else
    {
      ++failedChecksumCount;
   d4732:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
   d4736:	3301      	adds	r3, #1
   d4738:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
    }

    return false;
   d473c:	2500      	movs	r5, #0
   d473e:	e0c3      	b.n	d48c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
  }

  // the first term determines the sentence type
  if (curTermNumber == 0)
   d4740:	f890 2182 	ldrb.w	r2, [r0, #386]	; 0x182
   d4744:	bb72      	cbnz	r2, d47a4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
  {
    if (!strcmp(term, _GPRMCterm) || !strcmp(term, "GNRMC"))
   d4746:	f500 76b9 	add.w	r6, r0, #370	; 0x172
   d474a:	4960      	ldr	r1, [pc, #384]	; (d48cc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b0>)
   d474c:	4630      	mov	r0, r6
   d474e:	f001 fd25 	bl	d619c <strcmp>
   d4752:	b120      	cbz	r0, d475e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x142>
   d4754:	495e      	ldr	r1, [pc, #376]	; (d48d0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b4>)
   d4756:	4630      	mov	r0, r6
   d4758:	f001 fd20 	bl	d619c <strcmp>
   d475c:	b908      	cbnz	r0, d4762 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x146>
      curSentenceType = GPS_SENTENCE_GPRMC;
   d475e:	2301      	movs	r3, #1
   d4760:	e00c      	b.n	d477c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x160>
    else if (!strcmp(term, _GPGGAterm) ||!strcmp(term, "GNGGA"))
   d4762:	495c      	ldr	r1, [pc, #368]	; (d48d4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b8>)
   d4764:	4630      	mov	r0, r6
   d4766:	f001 fd19 	bl	d619c <strcmp>
   d476a:	b120      	cbz	r0, d4776 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x15a>
   d476c:	495a      	ldr	r1, [pc, #360]	; (d48d8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2bc>)
   d476e:	4630      	mov	r0, r6
   d4770:	f001 fd14 	bl	d619c <strcmp>
   d4774:	b908      	cbnz	r0, d477a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x15e>
      curSentenceType = GPS_SENTENCE_GPGGA;
   d4776:	2300      	movs	r3, #0
   d4778:	e000      	b.n	d477c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x160>
    else
      curSentenceType = GPS_SENTENCE_OTHER;
   d477a:	2302      	movs	r3, #2
   d477c:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
   d4780:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
   d4784:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   d4788:	f8d4 718c 	ldr.w	r7, [r4, #396]	; 0x18c
   d478c:	2f00      	cmp	r7, #0
   d478e:	f000 809b 	beq.w	d48c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
   d4792:	4631      	mov	r1, r6
   d4794:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   d4796:	f001 fd01 	bl	d619c <strcmp>
   d479a:	2800      	cmp	r0, #0
   d479c:	f280 8090 	bge.w	d48c0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2a4>
   d47a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   d47a2:	e7ef      	b.n	d4784 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x168>
       customCandidates = NULL;

    return false;
  }

  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
   d47a4:	f890 1181 	ldrb.w	r1, [r0, #385]	; 0x181
   d47a8:	2902      	cmp	r1, #2
   d47aa:	d071      	beq.n	d4890 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
   d47ac:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
   d47b0:	2b00      	cmp	r3, #0
   d47b2:	d06d      	beq.n	d4890 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    switch(COMBINE(curSentenceType, curTermNumber))
   d47b4:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   d47b8:	3a01      	subs	r2, #1
   d47ba:	2a28      	cmp	r2, #40	; 0x28
   d47bc:	d868      	bhi.n	d4890 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
   d47be:	e8df f002 	tbb	[pc, r2]
   d47c2:	2115      	.short	0x2115
   d47c4:	49322b24 	.word	0x49322b24
   d47c8:	675c5750 	.word	0x675c5750
   d47cc:	67676761 	.word	0x67676761
   d47d0:	67676767 	.word	0x67676767
   d47d4:	67676767 	.word	0x67676767
   d47d8:	67676767 	.word	0x67676767
   d47dc:	67676767 	.word	0x67676767
   d47e0:	1c156767 	.word	0x1c156767
   d47e4:	322b2421 	.word	0x322b2421
   d47e8:	3e39      	.short	0x3e39
   d47ea:	43          	.byte	0x43
   d47eb:	00          	.byte	0x00
  {
    case COMBINE(GPS_SENTENCE_GPRMC, 1): // Time in both sentences
    case COMBINE(GPS_SENTENCE_GPGGA, 1):
	  tempData.time.setTime(term);
   d47ec:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d47f0:	f500 7080 	add.w	r0, r0, #256	; 0x100
   d47f4:	f7ff feaa 	bl	d454c <_ZN11TinyGPSTime7setTimeEPKc>
      break;
   d47f8:	e04a      	b.n	d4890 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPRMC, 2): // GPRMC validity
      sentenceHasFix = term[0] == 'A';
   d47fa:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
   d47fe:	4243      	negs	r3, r0
   d4800:	4143      	adcs	r3, r0
   d4802:	e02b      	b.n	d485c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x240>
   valid = updated = true;
}

void TinyGPSLocation::setLatitude(const char *term)
{
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
   d4804:	f100 01d4 	add.w	r1, r0, #212	; 0xd4
   d4808:	e008      	b.n	d481c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
    case COMBINE(GPS_SENTENCE_GPGGA, 2):
      tempData.location.setLatitude(term);
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 4): // N/S
    case COMBINE(GPS_SENTENCE_GPGGA, 3):
      tempData.location.rawNewLatData.negative = term[0] == 'S';
   d480a:	f1a3 0153 	sub.w	r1, r3, #83	; 0x53
   d480e:	424b      	negs	r3, r1
   d4810:	414b      	adcs	r3, r1
   d4812:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
      break;
   d4816:	e03b      	b.n	d4890 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
}

void TinyGPSLocation::setLongitude(const char *term)
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d4818:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
   d481c:	f504 70b9 	add.w	r0, r4, #370	; 0x172
   d4820:	f7ff fde4 	bl	d43ec <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
   d4824:	e034      	b.n	d4890 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPGGA, 4):
      tempData.location.setLongitude(term);
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 6): // E/W
    case COMBINE(GPS_SENTENCE_GPGGA, 5):
      tempData.location.rawNewLngData.negative = term[0] == 'W';
   d4826:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
   d482a:	4253      	negs	r3, r2
   d482c:	4153      	adcs	r3, r2
   d482e:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
      break;
   d4832:	e02d      	b.n	d4890 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPRMC, 7): // Speed (GPRMC)
	  tempData.speed.set(term);
   d4834:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d4838:	f500 7088 	add.w	r0, r0, #272	; 0x110
   d483c:	e026      	b.n	d488c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x270>
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 8): // Course (GPRMC)
	  tempData.course.set(term);
   d483e:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d4842:	f500 7090 	add.w	r0, r0, #288	; 0x120
   d4846:	e021      	b.n	d488c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x270>
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 9): // Date (GPRMC)
	  tempData.date.setDate(term);
   d4848:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d484c:	30f0      	adds	r0, #240	; 0xf0
   d484e:	f7ff fe84 	bl	d455a <_ZN11TinyGPSDate7setDateEPKc>
      break;
   d4852:	e01d      	b.n	d4890 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPGGA, 6): // Fix data (GPGGA)
      sentenceHasFix = term[0] > '0';
   d4854:	2b30      	cmp	r3, #48	; 0x30
   d4856:	bf94      	ite	ls
   d4858:	2300      	movls	r3, #0
   d485a:	2301      	movhi	r3, #1
   d485c:	f884 3184 	strb.w	r3, [r4, #388]	; 0x184
      break;
   d4860:	e016      	b.n	d4890 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPGGA, 7): // Satellites used (GPGGA)
	  tempData.satellites.set(term);
   d4862:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d4866:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   d486a:	f7ff febe 	bl	d45ea <_ZN14TinyGPSInteger3setEPKc>
      break;
   d486e:	e00f      	b.n	d4890 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPGGA, 8): // HDOP
	  tempData.hdop.set(term);
   d4870:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d4874:	f500 70b0 	add.w	r0, r0, #352	; 0x160
   d4878:	e008      	b.n	d488c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x270>
      break;
    case COMBINE(GPS_SENTENCE_GPGGA, 9): // Altitude (GPGGA)
	  tempData.altitude.set(term);
   d487a:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d487e:	f500 7098 	add.w	r0, r0, #304	; 0x130
   d4882:	e003      	b.n	d488c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x270>
      break;
    case COMBINE(GPS_SENTENCE_GPGGA, 11): // Geoid Separation (GPGGA) (difference between ellipsoid and mean sea level)
	  tempData.geoidSeparation.set(term);
   d4884:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d4888:	f500 70a0 	add.w	r0, r0, #320	; 0x140
   d488c:	f7ff fe9b 	bl	d45c6 <_ZN14TinyGPSDecimal3setEPKc>
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d4890:	f8d4 618c 	ldr.w	r6, [r4, #396]	; 0x18c
    if (p->termNumber == curTermNumber)
         p->set(term);
   d4894:	f504 77b9 	add.w	r7, r4, #370	; 0x172
	  tempData.geoidSeparation.set(term);
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d4898:	b1b6      	cbz	r6, d48c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
   d489a:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   d489e:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d48a0:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d48a2:	f001 fc7b 	bl	d619c <strcmp>
   d48a6:	b978      	cbnz	r0, d48c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
   d48a8:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   d48aa:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
   d48ae:	429a      	cmp	r2, r3
   d48b0:	dc0a      	bgt.n	d48c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
    if (p->termNumber == curTermNumber)
   d48b2:	d103      	bne.n	d48bc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2a0>
         p->set(term);
   d48b4:	4639      	mov	r1, r7
   d48b6:	4630      	mov	r0, r6
   d48b8:	f7ff fead 	bl	d4616 <_ZN13TinyGPSCustom3setEPKc>
	  tempData.geoidSeparation.set(term);
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d48bc:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d48be:	e7eb      	b.n	d4898 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x27c>
    else
      curSentenceType = GPS_SENTENCE_OTHER;

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
   d48c0:	d002      	beq.n	d48c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
       customCandidates = NULL;
   d48c2:	2300      	movs	r3, #0
   d48c4:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
    if (p->termNumber == curTermNumber)
         p->set(term);

  return false;
}
   d48c8:	4628      	mov	r0, r5
   d48ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d48cc:	000d6386 	.word	0x000d6386
   d48d0:	000d638c 	.word	0x000d638c
   d48d4:	000d6392 	.word	0x000d6392
   d48d8:	000d6398 	.word	0x000d6398

000d48dc <_ZN11TinyGPSPlus6encodeEc>:
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
   d48dc:	b538      	push	{r3, r4, r5, lr}
  ++encodedCharCount;
   d48de:	f8d0 3190 	ldr.w	r3, [r0, #400]	; 0x190

  switch(c)
   d48e2:	2924      	cmp	r1, #36	; 0x24
// public methods
//

bool TinyGPSPlus::encode(char c)
{
  ++encodedCharCount;
   d48e4:	f103 0301 	add.w	r3, r3, #1
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
   d48e8:	4604      	mov	r4, r0
   d48ea:	460d      	mov	r5, r1
  ++encodedCharCount;
   d48ec:	f8c0 3190 	str.w	r3, [r0, #400]	; 0x190

  switch(c)
   d48f0:	d02a      	beq.n	d4948 <_ZN11TinyGPSPlus6encodeEc+0x6c>
   d48f2:	f890 3183 	ldrb.w	r3, [r0, #387]	; 0x183
   d48f6:	d804      	bhi.n	d4902 <_ZN11TinyGPSPlus6encodeEc+0x26>
   d48f8:	290a      	cmp	r1, #10
   d48fa:	d00c      	beq.n	d4916 <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d48fc:	290d      	cmp	r1, #13
   d48fe:	d132      	bne.n	d4966 <_ZN11TinyGPSPlus6encodeEc+0x8a>
   d4900:	e009      	b.n	d4916 <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d4902:	292a      	cmp	r1, #42	; 0x2a
   d4904:	d007      	beq.n	d4916 <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d4906:	292c      	cmp	r1, #44	; 0x2c
   d4908:	d12d      	bne.n	d4966 <_ZN11TinyGPSPlus6encodeEc+0x8a>
  {
  case ',': // term terminators
    parity ^= (uint8_t)c;
   d490a:	f890 2170 	ldrb.w	r2, [r0, #368]	; 0x170
   d490e:	f082 022c 	eor.w	r2, r2, #44	; 0x2c
   d4912:	f880 2170 	strb.w	r2, [r0, #368]	; 0x170
  case '\r':
  case '\n':
  case '*':
    {
      bool isValidSentence = false;
      if (curTermOffset < sizeof(term))
   d4916:	2b0e      	cmp	r3, #14
   d4918:	f04f 0000 	mov.w	r0, #0
   d491c:	d805      	bhi.n	d492a <_ZN11TinyGPSPlus6encodeEc+0x4e>
      {
        term[curTermOffset] = 0;
   d491e:	4423      	add	r3, r4
   d4920:	f883 0172 	strb.w	r0, [r3, #370]	; 0x172
        isValidSentence = endOfTermHandler();
   d4924:	4620      	mov	r0, r4
   d4926:	f7ff fe79 	bl	d461c <_ZN11TinyGPSPlus16endOfTermHandlerEv>
      }
      ++curTermNumber;
   d492a:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
   d492e:	3301      	adds	r3, #1
   d4930:	f884 3182 	strb.w	r3, [r4, #386]	; 0x182
      curTermOffset = 0;
   d4934:	2300      	movs	r3, #0
   d4936:	f884 3183 	strb.w	r3, [r4, #387]	; 0x183
      isChecksumTerm = c == '*';
   d493a:	f1a5 032a 	sub.w	r3, r5, #42	; 0x2a
   d493e:	425d      	negs	r5, r3
   d4940:	415d      	adcs	r5, r3
   d4942:	f884 5171 	strb.w	r5, [r4, #369]	; 0x171
      return isValidSentence;
   d4946:	bd38      	pop	{r3, r4, r5, pc}
    }
    break;

  case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
   d4948:	2000      	movs	r0, #0
    parity = 0;
    curSentenceType = GPS_SENTENCE_OTHER;
   d494a:	2302      	movs	r3, #2
      return isValidSentence;
    }
    break;

  case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
   d494c:	f884 0183 	strb.w	r0, [r4, #387]	; 0x183
   d4950:	f884 0182 	strb.w	r0, [r4, #386]	; 0x182
    parity = 0;
   d4954:	f884 0170 	strb.w	r0, [r4, #368]	; 0x170
    curSentenceType = GPS_SENTENCE_OTHER;
   d4958:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
    isChecksumTerm = false;
   d495c:	f884 0171 	strb.w	r0, [r4, #369]	; 0x171
    sentenceHasFix = false;
   d4960:	f884 0184 	strb.w	r0, [r4, #388]	; 0x184
    return false;
   d4964:	bd38      	pop	{r3, r4, r5, pc}

  default: // ordinary characters
    if (curTermOffset < sizeof(term) - 1)
   d4966:	2b0d      	cmp	r3, #13
      term[curTermOffset++] = c;
   d4968:	bf9f      	itttt	ls
   d496a:	1c5a      	addls	r2, r3, #1
   d496c:	191b      	addls	r3, r3, r4
   d496e:	f884 2183 	strbls.w	r2, [r4, #387]	; 0x183
   d4972:	f883 5172 	strbls.w	r5, [r3, #370]	; 0x172
    if (!isChecksumTerm)
   d4976:	f894 0171 	ldrb.w	r0, [r4, #369]	; 0x171
   d497a:	b928      	cbnz	r0, d4988 <_ZN11TinyGPSPlus6encodeEc+0xac>
      parity ^= c;
   d497c:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
   d4980:	404d      	eors	r5, r1
   d4982:	f884 5170 	strb.w	r5, [r4, #368]	; 0x170
   d4986:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   d4988:	2000      	movs	r0, #0
  }

  return false;
}
   d498a:	bd38      	pop	{r3, r4, r5, pc}

000d498c <_GLOBAL__sub_I__Z7radiansd>:
   d498c:	f000 b810 	b.w	d49b0 <HAL_Pin_Map>

000d4990 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4990:	b508      	push	{r3, lr}
   d4992:	4b02      	ldr	r3, [pc, #8]	; (d499c <netdb_freeaddrinfo+0xc>)
   d4994:	681b      	ldr	r3, [r3, #0]
   d4996:	689b      	ldr	r3, [r3, #8]
   d4998:	9301      	str	r3, [sp, #4]
   d499a:	bd08      	pop	{r3, pc}
   d499c:	00030268 	.word	0x00030268

000d49a0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d49a0:	b508      	push	{r3, lr}
   d49a2:	4b02      	ldr	r3, [pc, #8]	; (d49ac <netdb_getaddrinfo+0xc>)
   d49a4:	681b      	ldr	r3, [r3, #0]
   d49a6:	68db      	ldr	r3, [r3, #12]
   d49a8:	9301      	str	r3, [sp, #4]
   d49aa:	bd08      	pop	{r3, pc}
   d49ac:	00030268 	.word	0x00030268

000d49b0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d49b0:	b508      	push	{r3, lr}
   d49b2:	4b02      	ldr	r3, [pc, #8]	; (d49bc <HAL_Pin_Map+0xc>)
   d49b4:	681b      	ldr	r3, [r3, #0]
   d49b6:	681b      	ldr	r3, [r3, #0]
   d49b8:	9301      	str	r3, [sp, #4]
   d49ba:	bd08      	pop	{r3, pc}
   d49bc:	0003022c 	.word	0x0003022c

000d49c0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d49c0:	b508      	push	{r3, lr}
   d49c2:	4b02      	ldr	r3, [pc, #8]	; (d49cc <HAL_RNG_GetRandomNumber+0xc>)
   d49c4:	681b      	ldr	r3, [r3, #0]
   d49c6:	685b      	ldr	r3, [r3, #4]
   d49c8:	9301      	str	r3, [sp, #4]
   d49ca:	bd08      	pop	{r3, pc}
   d49cc:	00030218 	.word	0x00030218

000d49d0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d49d0:	b508      	push	{r3, lr}
   d49d2:	4b02      	ldr	r3, [pc, #8]	; (d49dc <HAL_Timer_Get_Milli_Seconds+0xc>)
   d49d4:	681b      	ldr	r3, [r3, #0]
   d49d6:	695b      	ldr	r3, [r3, #20]
   d49d8:	9301      	str	r3, [sp, #4]
   d49da:	bd08      	pop	{r3, pc}
   d49dc:	00030218 	.word	0x00030218

000d49e0 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d49e0:	b508      	push	{r3, lr}
   d49e2:	4b02      	ldr	r3, [pc, #8]	; (d49ec <os_thread_is_current+0xc>)
   d49e4:	681b      	ldr	r3, [r3, #0]
   d49e6:	689b      	ldr	r3, [r3, #8]
   d49e8:	9301      	str	r3, [sp, #4]
   d49ea:	bd08      	pop	{r3, pc}
   d49ec:	00030248 	.word	0x00030248

000d49f0 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d49f0:	b508      	push	{r3, lr}
   d49f2:	4b02      	ldr	r3, [pc, #8]	; (d49fc <os_thread_join+0xc>)
   d49f4:	681b      	ldr	r3, [r3, #0]
   d49f6:	691b      	ldr	r3, [r3, #16]
   d49f8:	9301      	str	r3, [sp, #4]
   d49fa:	bd08      	pop	{r3, pc}
   d49fc:	00030248 	.word	0x00030248

000d4a00 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4a00:	b508      	push	{r3, lr}
   d4a02:	4b02      	ldr	r3, [pc, #8]	; (d4a0c <os_thread_cleanup+0xc>)
   d4a04:	681b      	ldr	r3, [r3, #0]
   d4a06:	695b      	ldr	r3, [r3, #20]
   d4a08:	9301      	str	r3, [sp, #4]
   d4a0a:	bd08      	pop	{r3, pc}
   d4a0c:	00030248 	.word	0x00030248

000d4a10 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d4a10:	b508      	push	{r3, lr}
   d4a12:	4b02      	ldr	r3, [pc, #8]	; (d4a1c <os_thread_scheduling+0xc>)
   d4a14:	681b      	ldr	r3, [r3, #0]
   d4a16:	69db      	ldr	r3, [r3, #28]
   d4a18:	9301      	str	r3, [sp, #4]
   d4a1a:	bd08      	pop	{r3, pc}
   d4a1c:	00030248 	.word	0x00030248

000d4a20 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4a20:	b508      	push	{r3, lr}
   d4a22:	4b02      	ldr	r3, [pc, #8]	; (d4a2c <os_mutex_recursive_create+0xc>)
   d4a24:	681b      	ldr	r3, [r3, #0]
   d4a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4a28:	9301      	str	r3, [sp, #4]
   d4a2a:	bd08      	pop	{r3, pc}
   d4a2c:	00030248 	.word	0x00030248

000d4a30 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4a30:	b508      	push	{r3, lr}
   d4a32:	4b02      	ldr	r3, [pc, #8]	; (d4a3c <os_mutex_recursive_destroy+0xc>)
   d4a34:	681b      	ldr	r3, [r3, #0]
   d4a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4a38:	9301      	str	r3, [sp, #4]
   d4a3a:	bd08      	pop	{r3, pc}
   d4a3c:	00030248 	.word	0x00030248

000d4a40 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4a40:	b508      	push	{r3, lr}
   d4a42:	4b02      	ldr	r3, [pc, #8]	; (d4a4c <inet_inet_ntop+0xc>)
   d4a44:	681b      	ldr	r3, [r3, #0]
   d4a46:	695b      	ldr	r3, [r3, #20]
   d4a48:	9301      	str	r3, [sp, #4]
   d4a4a:	bd08      	pop	{r3, pc}
   d4a4c:	00030264 	.word	0x00030264

000d4a50 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4a50:	b508      	push	{r3, lr}
   d4a52:	4b02      	ldr	r3, [pc, #8]	; (d4a5c <HAL_USART_Init+0xc>)
   d4a54:	681b      	ldr	r3, [r3, #0]
   d4a56:	681b      	ldr	r3, [r3, #0]
   d4a58:	9301      	str	r3, [sp, #4]
   d4a5a:	bd08      	pop	{r3, pc}
   d4a5c:	0003023c 	.word	0x0003023c

000d4a60 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4a60:	b508      	push	{r3, lr}
   d4a62:	4b02      	ldr	r3, [pc, #8]	; (d4a6c <HAL_USART_Write_Data+0xc>)
   d4a64:	681b      	ldr	r3, [r3, #0]
   d4a66:	68db      	ldr	r3, [r3, #12]
   d4a68:	9301      	str	r3, [sp, #4]
   d4a6a:	bd08      	pop	{r3, pc}
   d4a6c:	0003023c 	.word	0x0003023c

000d4a70 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4a70:	b508      	push	{r3, lr}
   d4a72:	4b02      	ldr	r3, [pc, #8]	; (d4a7c <HAL_USART_Available_Data+0xc>)
   d4a74:	681b      	ldr	r3, [r3, #0]
   d4a76:	691b      	ldr	r3, [r3, #16]
   d4a78:	9301      	str	r3, [sp, #4]
   d4a7a:	bd08      	pop	{r3, pc}
   d4a7c:	0003023c 	.word	0x0003023c

000d4a80 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4a80:	b508      	push	{r3, lr}
   d4a82:	4b02      	ldr	r3, [pc, #8]	; (d4a8c <HAL_USART_Read_Data+0xc>)
   d4a84:	681b      	ldr	r3, [r3, #0]
   d4a86:	695b      	ldr	r3, [r3, #20]
   d4a88:	9301      	str	r3, [sp, #4]
   d4a8a:	bd08      	pop	{r3, pc}
   d4a8c:	0003023c 	.word	0x0003023c

000d4a90 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4a90:	b508      	push	{r3, lr}
   d4a92:	4b02      	ldr	r3, [pc, #8]	; (d4a9c <HAL_USART_Peek_Data+0xc>)
   d4a94:	681b      	ldr	r3, [r3, #0]
   d4a96:	699b      	ldr	r3, [r3, #24]
   d4a98:	9301      	str	r3, [sp, #4]
   d4a9a:	bd08      	pop	{r3, pc}
   d4a9c:	0003023c 	.word	0x0003023c

000d4aa0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4aa0:	b508      	push	{r3, lr}
   d4aa2:	4b02      	ldr	r3, [pc, #8]	; (d4aac <HAL_USART_Flush_Data+0xc>)
   d4aa4:	681b      	ldr	r3, [r3, #0]
   d4aa6:	69db      	ldr	r3, [r3, #28]
   d4aa8:	9301      	str	r3, [sp, #4]
   d4aaa:	bd08      	pop	{r3, pc}
   d4aac:	0003023c 	.word	0x0003023c

000d4ab0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4ab0:	b508      	push	{r3, lr}
   d4ab2:	4b02      	ldr	r3, [pc, #8]	; (d4abc <HAL_USART_Available_Data_For_Write+0xc>)
   d4ab4:	681b      	ldr	r3, [r3, #0]
   d4ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4ab8:	9301      	str	r3, [sp, #4]
   d4aba:	bd08      	pop	{r3, pc}
   d4abc:	0003023c 	.word	0x0003023c

000d4ac0 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d4ac0:	b508      	push	{r3, lr}
   d4ac2:	4b02      	ldr	r3, [pc, #8]	; (d4acc <HAL_USART_BeginConfig+0xc>)
   d4ac4:	681b      	ldr	r3, [r3, #0]
   d4ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4ac8:	9301      	str	r3, [sp, #4]
   d4aca:	bd08      	pop	{r3, pc}
   d4acc:	0003023c 	.word	0x0003023c

000d4ad0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4ad0:	b508      	push	{r3, lr}
   d4ad2:	4b02      	ldr	r3, [pc, #8]	; (d4adc <HAL_USB_USART_Init+0xc>)
   d4ad4:	681b      	ldr	r3, [r3, #0]
   d4ad6:	681b      	ldr	r3, [r3, #0]
   d4ad8:	9301      	str	r3, [sp, #4]
   d4ada:	bd08      	pop	{r3, pc}
   d4adc:	0003024c 	.word	0x0003024c

000d4ae0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4ae0:	b508      	push	{r3, lr}
   d4ae2:	4b02      	ldr	r3, [pc, #8]	; (d4aec <HAL_USB_USART_Begin+0xc>)
   d4ae4:	681b      	ldr	r3, [r3, #0]
   d4ae6:	685b      	ldr	r3, [r3, #4]
   d4ae8:	9301      	str	r3, [sp, #4]
   d4aea:	bd08      	pop	{r3, pc}
   d4aec:	0003024c 	.word	0x0003024c

000d4af0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4af0:	b508      	push	{r3, lr}
   d4af2:	4b02      	ldr	r3, [pc, #8]	; (d4afc <HAL_USB_USART_Available_Data+0xc>)
   d4af4:	681b      	ldr	r3, [r3, #0]
   d4af6:	691b      	ldr	r3, [r3, #16]
   d4af8:	9301      	str	r3, [sp, #4]
   d4afa:	bd08      	pop	{r3, pc}
   d4afc:	0003024c 	.word	0x0003024c

000d4b00 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4b00:	b508      	push	{r3, lr}
   d4b02:	4b02      	ldr	r3, [pc, #8]	; (d4b0c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4b04:	681b      	ldr	r3, [r3, #0]
   d4b06:	695b      	ldr	r3, [r3, #20]
   d4b08:	9301      	str	r3, [sp, #4]
   d4b0a:	bd08      	pop	{r3, pc}
   d4b0c:	0003024c 	.word	0x0003024c

000d4b10 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4b10:	b508      	push	{r3, lr}
   d4b12:	4b02      	ldr	r3, [pc, #8]	; (d4b1c <HAL_USB_USART_Receive_Data+0xc>)
   d4b14:	681b      	ldr	r3, [r3, #0]
   d4b16:	699b      	ldr	r3, [r3, #24]
   d4b18:	9301      	str	r3, [sp, #4]
   d4b1a:	bd08      	pop	{r3, pc}
   d4b1c:	0003024c 	.word	0x0003024c

000d4b20 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4b20:	b508      	push	{r3, lr}
   d4b22:	4b02      	ldr	r3, [pc, #8]	; (d4b2c <HAL_USB_USART_Send_Data+0xc>)
   d4b24:	681b      	ldr	r3, [r3, #0]
   d4b26:	69db      	ldr	r3, [r3, #28]
   d4b28:	9301      	str	r3, [sp, #4]
   d4b2a:	bd08      	pop	{r3, pc}
   d4b2c:	0003024c 	.word	0x0003024c

000d4b30 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4b30:	b508      	push	{r3, lr}
   d4b32:	4b02      	ldr	r3, [pc, #8]	; (d4b3c <HAL_USB_USART_Flush_Data+0xc>)
   d4b34:	681b      	ldr	r3, [r3, #0]
   d4b36:	6a1b      	ldr	r3, [r3, #32]
   d4b38:	9301      	str	r3, [sp, #4]
   d4b3a:	bd08      	pop	{r3, pc}
   d4b3c:	0003024c 	.word	0x0003024c

000d4b40 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4b40:	b508      	push	{r3, lr}
   d4b42:	4b02      	ldr	r3, [pc, #8]	; (d4b4c <set_system_mode+0xc>)
   d4b44:	681b      	ldr	r3, [r3, #0]
   d4b46:	685b      	ldr	r3, [r3, #4]
   d4b48:	9301      	str	r3, [sp, #4]
   d4b4a:	bd08      	pop	{r3, pc}
   d4b4c:	00030220 	.word	0x00030220

000d4b50 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d4b50:	b508      	push	{r3, lr}
   d4b52:	4b02      	ldr	r3, [pc, #8]	; (d4b5c <system_thread_set_state+0xc>)
   d4b54:	681b      	ldr	r3, [r3, #0]
   d4b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4b58:	9301      	str	r3, [sp, #4]
   d4b5a:	bd08      	pop	{r3, pc}
   d4b5c:	00030220 	.word	0x00030220

000d4b60 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4b60:	b508      	push	{r3, lr}
   d4b62:	4b03      	ldr	r3, [pc, #12]	; (d4b70 <system_ctrl_set_app_request_handler+0x10>)
   d4b64:	681b      	ldr	r3, [r3, #0]
   d4b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4b6a:	9301      	str	r3, [sp, #4]
   d4b6c:	bd08      	pop	{r3, pc}
   d4b6e:	0000      	.short	0x0000
   d4b70:	00030220 	.word	0x00030220

000d4b74 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4b74:	b508      	push	{r3, lr}
   d4b76:	4b03      	ldr	r3, [pc, #12]	; (d4b84 <system_ctrl_set_result+0x10>)
   d4b78:	681b      	ldr	r3, [r3, #0]
   d4b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4b7e:	9301      	str	r3, [sp, #4]
   d4b80:	bd08      	pop	{r3, pc}
   d4b82:	0000      	.short	0x0000
   d4b84:	00030220 	.word	0x00030220

000d4b88 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4b88:	b508      	push	{r3, lr}
   d4b8a:	4b02      	ldr	r3, [pc, #8]	; (d4b94 <network_connect+0xc>)
   d4b8c:	681b      	ldr	r3, [r3, #0]
   d4b8e:	685b      	ldr	r3, [r3, #4]
   d4b90:	9301      	str	r3, [sp, #4]
   d4b92:	bd08      	pop	{r3, pc}
   d4b94:	00030240 	.word	0x00030240

000d4b98 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4b98:	b508      	push	{r3, lr}
   d4b9a:	4b02      	ldr	r3, [pc, #8]	; (d4ba4 <network_connecting+0xc>)
   d4b9c:	681b      	ldr	r3, [r3, #0]
   d4b9e:	689b      	ldr	r3, [r3, #8]
   d4ba0:	9301      	str	r3, [sp, #4]
   d4ba2:	bd08      	pop	{r3, pc}
   d4ba4:	00030240 	.word	0x00030240

000d4ba8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4ba8:	b508      	push	{r3, lr}
   d4baa:	4b02      	ldr	r3, [pc, #8]	; (d4bb4 <network_disconnect+0xc>)
   d4bac:	681b      	ldr	r3, [r3, #0]
   d4bae:	68db      	ldr	r3, [r3, #12]
   d4bb0:	9301      	str	r3, [sp, #4]
   d4bb2:	bd08      	pop	{r3, pc}
   d4bb4:	00030240 	.word	0x00030240

000d4bb8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4bb8:	b508      	push	{r3, lr}
   d4bba:	4b02      	ldr	r3, [pc, #8]	; (d4bc4 <network_ready+0xc>)
   d4bbc:	681b      	ldr	r3, [r3, #0]
   d4bbe:	691b      	ldr	r3, [r3, #16]
   d4bc0:	9301      	str	r3, [sp, #4]
   d4bc2:	bd08      	pop	{r3, pc}
   d4bc4:	00030240 	.word	0x00030240

000d4bc8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4bc8:	b508      	push	{r3, lr}
   d4bca:	4b02      	ldr	r3, [pc, #8]	; (d4bd4 <network_on+0xc>)
   d4bcc:	681b      	ldr	r3, [r3, #0]
   d4bce:	695b      	ldr	r3, [r3, #20]
   d4bd0:	9301      	str	r3, [sp, #4]
   d4bd2:	bd08      	pop	{r3, pc}
   d4bd4:	00030240 	.word	0x00030240

000d4bd8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4bd8:	b508      	push	{r3, lr}
   d4bda:	4b02      	ldr	r3, [pc, #8]	; (d4be4 <network_off+0xc>)
   d4bdc:	681b      	ldr	r3, [r3, #0]
   d4bde:	699b      	ldr	r3, [r3, #24]
   d4be0:	9301      	str	r3, [sp, #4]
   d4be2:	bd08      	pop	{r3, pc}
   d4be4:	00030240 	.word	0x00030240

000d4be8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4be8:	b508      	push	{r3, lr}
   d4bea:	4b02      	ldr	r3, [pc, #8]	; (d4bf4 <network_listen+0xc>)
   d4bec:	681b      	ldr	r3, [r3, #0]
   d4bee:	69db      	ldr	r3, [r3, #28]
   d4bf0:	9301      	str	r3, [sp, #4]
   d4bf2:	bd08      	pop	{r3, pc}
   d4bf4:	00030240 	.word	0x00030240

000d4bf8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4bf8:	b508      	push	{r3, lr}
   d4bfa:	4b02      	ldr	r3, [pc, #8]	; (d4c04 <network_listening+0xc>)
   d4bfc:	681b      	ldr	r3, [r3, #0]
   d4bfe:	6a1b      	ldr	r3, [r3, #32]
   d4c00:	9301      	str	r3, [sp, #4]
   d4c02:	bd08      	pop	{r3, pc}
   d4c04:	00030240 	.word	0x00030240

000d4c08 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4c08:	b508      	push	{r3, lr}
   d4c0a:	4b02      	ldr	r3, [pc, #8]	; (d4c14 <network_set_listen_timeout+0xc>)
   d4c0c:	681b      	ldr	r3, [r3, #0]
   d4c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c10:	9301      	str	r3, [sp, #4]
   d4c12:	bd08      	pop	{r3, pc}
   d4c14:	00030240 	.word	0x00030240

000d4c18 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4c18:	b508      	push	{r3, lr}
   d4c1a:	4b02      	ldr	r3, [pc, #8]	; (d4c24 <network_get_listen_timeout+0xc>)
   d4c1c:	681b      	ldr	r3, [r3, #0]
   d4c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c20:	9301      	str	r3, [sp, #4]
   d4c22:	bd08      	pop	{r3, pc}
   d4c24:	00030240 	.word	0x00030240

000d4c28 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4c28:	b508      	push	{r3, lr}
   d4c2a:	4b02      	ldr	r3, [pc, #8]	; (d4c34 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4c2c:	681b      	ldr	r3, [r3, #0]
   d4c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4c30:	9301      	str	r3, [sp, #4]
   d4c32:	bd08      	pop	{r3, pc}
   d4c34:	00030244 	.word	0x00030244

000d4c38 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4c38:	b508      	push	{r3, lr}
   d4c3a:	4b02      	ldr	r3, [pc, #8]	; (d4c44 <malloc+0xc>)
   d4c3c:	681b      	ldr	r3, [r3, #0]
   d4c3e:	681b      	ldr	r3, [r3, #0]
   d4c40:	9301      	str	r3, [sp, #4]
   d4c42:	bd08      	pop	{r3, pc}
   d4c44:	0003021c 	.word	0x0003021c

000d4c48 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4c48:	b508      	push	{r3, lr}
   d4c4a:	4b02      	ldr	r3, [pc, #8]	; (d4c54 <free+0xc>)
   d4c4c:	681b      	ldr	r3, [r3, #0]
   d4c4e:	685b      	ldr	r3, [r3, #4]
   d4c50:	9301      	str	r3, [sp, #4]
   d4c52:	bd08      	pop	{r3, pc}
   d4c54:	0003021c 	.word	0x0003021c

000d4c58 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4c58:	b508      	push	{r3, lr}
   d4c5a:	4b02      	ldr	r3, [pc, #8]	; (d4c64 <vsnprintf+0xc>)
   d4c5c:	681b      	ldr	r3, [r3, #0]
   d4c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4c60:	9301      	str	r3, [sp, #4]
   d4c62:	bd08      	pop	{r3, pc}
   d4c64:	0003021c 	.word	0x0003021c

000d4c68 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4c68:	2200      	movs	r2, #0
   d4c6a:	4611      	mov	r1, r2
   d4c6c:	6840      	ldr	r0, [r0, #4]
   d4c6e:	f7ff bfc3 	b.w	d4bf8 <network_listening>

000d4c72 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4c72:	2200      	movs	r2, #0
   d4c74:	4611      	mov	r1, r2
   d4c76:	6840      	ldr	r0, [r0, #4]
   d4c78:	f7ff bfce 	b.w	d4c18 <network_get_listen_timeout>

000d4c7c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4c7c:	2200      	movs	r2, #0
   d4c7e:	6840      	ldr	r0, [r0, #4]
   d4c80:	f7ff bfc2 	b.w	d4c08 <network_set_listen_timeout>

000d4c84 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4c84:	2200      	movs	r2, #0
   d4c86:	f081 0101 	eor.w	r1, r1, #1
   d4c8a:	6840      	ldr	r0, [r0, #4]
   d4c8c:	f7ff bfac 	b.w	d4be8 <network_listen>

000d4c90 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4c90:	2300      	movs	r3, #0
   d4c92:	461a      	mov	r2, r3
   d4c94:	4619      	mov	r1, r3
   d4c96:	6840      	ldr	r0, [r0, #4]
   d4c98:	f7ff bf9e 	b.w	d4bd8 <network_off>

000d4c9c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4c9c:	2300      	movs	r3, #0
   d4c9e:	461a      	mov	r2, r3
   d4ca0:	4619      	mov	r1, r3
   d4ca2:	6840      	ldr	r0, [r0, #4]
   d4ca4:	f7ff bf90 	b.w	d4bc8 <network_on>

000d4ca8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4ca8:	2200      	movs	r2, #0
   d4caa:	4611      	mov	r1, r2
   d4cac:	6840      	ldr	r0, [r0, #4]
   d4cae:	f7ff bf83 	b.w	d4bb8 <network_ready>

000d4cb2 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4cb2:	2200      	movs	r2, #0
   d4cb4:	4611      	mov	r1, r2
   d4cb6:	6840      	ldr	r0, [r0, #4]
   d4cb8:	f7ff bf6e 	b.w	d4b98 <network_connecting>

000d4cbc <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4cbc:	2200      	movs	r2, #0
   d4cbe:	2102      	movs	r1, #2
   d4cc0:	6840      	ldr	r0, [r0, #4]
   d4cc2:	f7ff bf71 	b.w	d4ba8 <network_disconnect>

000d4cc6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4cc6:	2300      	movs	r3, #0
   d4cc8:	461a      	mov	r2, r3
   d4cca:	6840      	ldr	r0, [r0, #4]
   d4ccc:	f7ff bf5c 	b.w	d4b88 <network_connect>

000d4cd0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4cd0:	4b02      	ldr	r3, [pc, #8]	; (d4cdc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4cd2:	2203      	movs	r2, #3
   d4cd4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4cd6:	4a02      	ldr	r2, [pc, #8]	; (d4ce0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4cd8:	601a      	str	r2, [r3, #0]
   d4cda:	4770      	bx	lr
   d4cdc:	2003e3f8 	.word	0x2003e3f8
   d4ce0:	000d63cc 	.word	0x000d63cc

000d4ce4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4ce4:	b510      	push	{r4, lr}
   d4ce6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4ce8:	6800      	ldr	r0, [r0, #0]
   d4cea:	b118      	cbz	r0, d4cf4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d4cec:	f7ff ffac 	bl	d4c48 <free>
            wakeupSource_ = nullptr;
   d4cf0:	2300      	movs	r3, #0
   d4cf2:	6023      	str	r3, [r4, #0]
   d4cf4:	bd10      	pop	{r4, pc}

000d4cf6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4cf6:	b510      	push	{r4, lr}
   d4cf8:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d4cfa:	f7ff fff3 	bl	d4ce4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4cfe:	4620      	mov	r0, r4
   d4d00:	bd10      	pop	{r4, pc}
	...

000d4d04 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4d04:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4d06:	4c09      	ldr	r4, [pc, #36]	; (d4d2c <_GLOBAL__sub_I_System+0x28>)
   d4d08:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4d0a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4d0e:	6020      	str	r0, [r4, #0]
   d4d10:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4d12:	71a0      	strb	r0, [r4, #6]
   d4d14:	8120      	strh	r0, [r4, #8]
   d4d16:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4d18:	f7ff ff12 	bl	d4b40 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4d1c:	4620      	mov	r0, r4
   d4d1e:	4a04      	ldr	r2, [pc, #16]	; (d4d30 <_GLOBAL__sub_I_System+0x2c>)
   d4d20:	4904      	ldr	r1, [pc, #16]	; (d4d34 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4d26:	f000 bc81 	b.w	d562c <__aeabi_atexit>
   d4d2a:	bf00      	nop
   d4d2c:	2003e400 	.word	0x2003e400
   d4d30:	2003e244 	.word	0x2003e244
   d4d34:	000d4cf7 	.word	0x000d4cf7

000d4d38 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4d38:	b510      	push	{r4, lr}
   d4d3a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4d3c:	6800      	ldr	r0, [r0, #0]
   d4d3e:	b108      	cbz	r0, d4d44 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4d40:	f7ff fe76 	bl	d4a30 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4d44:	4620      	mov	r0, r4
   d4d46:	bd10      	pop	{r4, pc}

000d4d48 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4d48:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4d4a:	4c06      	ldr	r4, [pc, #24]	; (d4d64 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4d4c:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4d4e:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4d50:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4d52:	f7ff fe65 	bl	d4a20 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4d56:	4620      	mov	r0, r4
   d4d58:	4a03      	ldr	r2, [pc, #12]	; (d4d68 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4d5a:	4904      	ldr	r1, [pc, #16]	; (d4d6c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4d60:	f000 bc64 	b.w	d562c <__aeabi_atexit>
   d4d64:	2003e40c 	.word	0x2003e40c
   d4d68:	2003e244 	.word	0x2003e244
   d4d6c:	000d4d39 	.word	0x000d4d39

000d4d70 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4d72:	4606      	mov	r6, r0
   d4d74:	460d      	mov	r5, r1
   d4d76:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4d78:	2400      	movs	r4, #0
  while (size--) {
   d4d7a:	42bd      	cmp	r5, r7
   d4d7c:	d00c      	beq.n	d4d98 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4d7e:	6833      	ldr	r3, [r6, #0]
   d4d80:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4d84:	689b      	ldr	r3, [r3, #8]
   d4d86:	4630      	mov	r0, r6
   d4d88:	4798      	blx	r3
     if (chunk>=0)
   d4d8a:	2800      	cmp	r0, #0
   d4d8c:	db01      	blt.n	d4d92 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4d8e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4d90:	e7f3      	b.n	d4d7a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4d92:	2c00      	cmp	r4, #0
   d4d94:	bf08      	it	eq
   d4d96:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4d98:	4620      	mov	r0, r4
   d4d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d9c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4d9c:	b570      	push	{r4, r5, r6, lr}
   d4d9e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4da0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4da2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4da4:	b149      	cbz	r1, d4dba <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4da6:	f001 fa0b 	bl	d61c0 <strlen>
   d4daa:	682b      	ldr	r3, [r5, #0]
   d4dac:	4602      	mov	r2, r0
   d4dae:	4621      	mov	r1, r4
   d4db0:	4628      	mov	r0, r5
   d4db2:	68db      	ldr	r3, [r3, #12]
    }
   d4db4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4db8:	4718      	bx	r3
    }
   d4dba:	bd70      	pop	{r4, r5, r6, pc}

000d4dbc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4dbc:	6803      	ldr	r3, [r0, #0]
   d4dbe:	689b      	ldr	r3, [r3, #8]
   d4dc0:	4718      	bx	r3

000d4dc2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4dc2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4dc4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4dc6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4dc8:	f7ff fff8 	bl	d4dbc <_ZN5Print5printEc>
  n += print('\n');
   d4dcc:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4dce:	4604      	mov	r4, r0
  n += print('\n');
   d4dd0:	4628      	mov	r0, r5
   d4dd2:	f7ff fff3 	bl	d4dbc <_ZN5Print5printEc>
  return n;
}
   d4dd6:	4420      	add	r0, r4
   d4dd8:	bd38      	pop	{r3, r4, r5, pc}

000d4dda <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4dda:	b530      	push	{r4, r5, lr}
   d4ddc:	b08b      	sub	sp, #44	; 0x2c
   d4dde:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4de0:	2100      	movs	r1, #0
   d4de2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4de6:	2a01      	cmp	r2, #1
   d4de8:	bf98      	it	ls
   d4dea:	220a      	movls	r2, #10
   d4dec:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d4df0:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d4df4:	fb05 3312 	mls	r3, r5, r2, r3
   d4df8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4dfc:	2b09      	cmp	r3, #9
   d4dfe:	bf94      	ite	ls
   d4e00:	3330      	addls	r3, #48	; 0x30
   d4e02:	3337      	addhi	r3, #55	; 0x37
   d4e04:	b2db      	uxtb	r3, r3
   d4e06:	4621      	mov	r1, r4
   d4e08:	f804 3901 	strb.w	r3, [r4], #-1
   d4e0c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4e0e:	2d00      	cmp	r5, #0
   d4e10:	d1ee      	bne.n	d4df0 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4e12:	f7ff ffc3 	bl	d4d9c <_ZN5Print5writeEPKc>
}
   d4e16:	b00b      	add	sp, #44	; 0x2c
   d4e18:	bd30      	pop	{r4, r5, pc}

000d4e1a <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4e1a:	b40c      	push	{r2, r3}
   d4e1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4e20:	b087      	sub	sp, #28
   d4e22:	af00      	add	r7, sp, #0
   d4e24:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d4e28:	4605      	mov	r5, r0
   d4e2a:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d4e2e:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4e30:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d4e32:	4623      	mov	r3, r4
   d4e34:	464a      	mov	r2, r9
   d4e36:	2114      	movs	r1, #20
   d4e38:	1d38      	adds	r0, r7, #4
   d4e3a:	f7ff ff0d 	bl	d4c58 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d4e3e:	2813      	cmp	r0, #19
   d4e40:	d805      	bhi.n	d4e4e <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4e42:	1d39      	adds	r1, r7, #4
   d4e44:	4628      	mov	r0, r5
   d4e46:	f7ff ffa9 	bl	d4d9c <_ZN5Print5writeEPKc>
   d4e4a:	4604      	mov	r4, r0
   d4e4c:	e013      	b.n	d4e76 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4e4e:	f100 0308 	add.w	r3, r0, #8
   d4e52:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d4e56:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4e58:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d4e5c:	1c41      	adds	r1, r0, #1
   d4e5e:	4623      	mov	r3, r4
   d4e60:	464a      	mov	r2, r9
   d4e62:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d4e64:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d4e66:	f7ff fef7 	bl	d4c58 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4e6a:	4669      	mov	r1, sp
   d4e6c:	4628      	mov	r0, r5
   d4e6e:	f7ff ff95 	bl	d4d9c <_ZN5Print5writeEPKc>
   d4e72:	4604      	mov	r4, r0
   d4e74:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d4e76:	b11e      	cbz	r6, d4e80 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d4e78:	4628      	mov	r0, r5
   d4e7a:	f7ff ffa2 	bl	d4dc2 <_ZN5Print7printlnEv>
   d4e7e:	4404      	add	r4, r0
    return n;
}
   d4e80:	4620      	mov	r0, r4
   d4e82:	371c      	adds	r7, #28
   d4e84:	46bd      	mov	sp, r7
   d4e86:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4e8a:	b002      	add	sp, #8
   d4e8c:	4770      	bx	lr
	...

000d4e90 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4e90:	4b01      	ldr	r3, [pc, #4]	; (d4e98 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4e92:	4a02      	ldr	r2, [pc, #8]	; (d4e9c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4e94:	601a      	str	r2, [r3, #0]
   d4e96:	4770      	bx	lr
   d4e98:	2003e410 	.word	0x2003e410
   d4e9c:	000d646b 	.word	0x000d646b

000d4ea0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4ea0:	4b02      	ldr	r3, [pc, #8]	; (d4eac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4ea2:	681a      	ldr	r2, [r3, #0]
   d4ea4:	4b02      	ldr	r3, [pc, #8]	; (d4eb0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4ea6:	601a      	str	r2, [r3, #0]
   d4ea8:	4770      	bx	lr
   d4eaa:	bf00      	nop
   d4eac:	2003e1d8 	.word	0x2003e1d8
   d4eb0:	2003e414 	.word	0x2003e414

000d4eb4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4eb4:	b510      	push	{r4, lr}
   d4eb6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4eb8:	f7ff f9d6 	bl	d4268 <_ZNSt14_Function_baseD1Ev>
   d4ebc:	4620      	mov	r0, r4
   d4ebe:	bd10      	pop	{r4, pc}

000d4ec0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4ec0:	4803      	ldr	r0, [pc, #12]	; (d4ed0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4ec2:	4a04      	ldr	r2, [pc, #16]	; (d4ed4 <_GLOBAL__sub_I_RGB+0x14>)
   d4ec4:	4904      	ldr	r1, [pc, #16]	; (d4ed8 <_GLOBAL__sub_I_RGB+0x18>)
   d4ec6:	2300      	movs	r3, #0
   d4ec8:	6083      	str	r3, [r0, #8]
   d4eca:	f000 bbaf 	b.w	d562c <__aeabi_atexit>
   d4ece:	bf00      	nop
   d4ed0:	2003e418 	.word	0x2003e418
   d4ed4:	2003e244 	.word	0x2003e244
   d4ed8:	000d4eb5 	.word	0x000d4eb5

000d4edc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4edc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4ede:	4b0c      	ldr	r3, [pc, #48]	; (d4f10 <serialEventRun+0x34>)
   d4ee0:	b133      	cbz	r3, d4ef0 <serialEventRun+0x14>
   d4ee2:	f000 f957 	bl	d5194 <_Z16_fetch_usbserialv>
   d4ee6:	6803      	ldr	r3, [r0, #0]
   d4ee8:	691b      	ldr	r3, [r3, #16]
   d4eea:	4798      	blx	r3
   d4eec:	2800      	cmp	r0, #0
   d4eee:	dc09      	bgt.n	d4f04 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4ef0:	4b08      	ldr	r3, [pc, #32]	; (d4f14 <serialEventRun+0x38>)
   d4ef2:	b163      	cbz	r3, d4f0e <serialEventRun+0x32>
   d4ef4:	f000 f9d4 	bl	d52a0 <_Z22__fetch_global_Serial1v>
   d4ef8:	6803      	ldr	r3, [r0, #0]
   d4efa:	691b      	ldr	r3, [r3, #16]
   d4efc:	4798      	blx	r3
   d4efe:	2800      	cmp	r0, #0
   d4f00:	dc03      	bgt.n	d4f0a <serialEventRun+0x2e>
   d4f02:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4f04:	f3af 8000 	nop.w
   d4f08:	e7f2      	b.n	d4ef0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4f0a:	f3af 8000 	nop.w
   d4f0e:	bd08      	pop	{r3, pc}
	...

000d4f18 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4f18:	b508      	push	{r3, lr}
	serialEventRun();
   d4f1a:	f7ff ffdf 	bl	d4edc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4f1e:	f7ff fd57 	bl	d49d0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4f22:	4b01      	ldr	r3, [pc, #4]	; (d4f28 <_post_loop+0x10>)
   d4f24:	6018      	str	r0, [r3, #0]
   d4f26:	bd08      	pop	{r3, pc}
   d4f28:	2003e74c 	.word	0x2003e74c

000d4f2c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4f2c:	4802      	ldr	r0, [pc, #8]	; (d4f38 <_Z33system_initialize_user_backup_ramv+0xc>)
   d4f2e:	4a03      	ldr	r2, [pc, #12]	; (d4f3c <_Z33system_initialize_user_backup_ramv+0x10>)
   d4f30:	4903      	ldr	r1, [pc, #12]	; (d4f40 <_Z33system_initialize_user_backup_ramv+0x14>)
   d4f32:	1a12      	subs	r2, r2, r0
   d4f34:	f001 b8f6 	b.w	d6124 <memcpy>
   d4f38:	2003f400 	.word	0x2003f400
   d4f3c:	2003f404 	.word	0x2003f404
   d4f40:	000d67c0 	.word	0x000d67c0

000d4f44 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4f44:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4f46:	2300      	movs	r3, #0
   d4f48:	9300      	str	r3, [sp, #0]
   d4f4a:	461a      	mov	r2, r3
   d4f4c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4f50:	f7ff fe10 	bl	d4b74 <system_ctrl_set_result>
}
   d4f54:	b003      	add	sp, #12
   d4f56:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4f5c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4f5c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4f5e:	8843      	ldrh	r3, [r0, #2]
   d4f60:	2b0a      	cmp	r3, #10
   d4f62:	d008      	beq.n	d4f76 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4f64:	2b50      	cmp	r3, #80	; 0x50
   d4f66:	d109      	bne.n	d4f7c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4f68:	4b09      	ldr	r3, [pc, #36]	; (d4f90 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4f6a:	681b      	ldr	r3, [r3, #0]
   d4f6c:	b13b      	cbz	r3, d4f7e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4f6e:	b003      	add	sp, #12
   d4f70:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4f74:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4f76:	f7ff ffe5 	bl	d4f44 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4f7a:	e006      	b.n	d4f8a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4f7c:	2300      	movs	r3, #0
   d4f7e:	9300      	str	r3, [sp, #0]
   d4f80:	461a      	mov	r2, r3
   d4f82:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4f86:	f7ff fdf5 	bl	d4b74 <system_ctrl_set_result>
        break;
    }
}
   d4f8a:	b003      	add	sp, #12
   d4f8c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4f90:	2003e428 	.word	0x2003e428

000d4f94 <module_user_init_hook>:

void module_user_init_hook()
{
   d4f94:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4f96:	4c10      	ldr	r4, [pc, #64]	; (d4fd8 <module_user_init_hook+0x44>)
   d4f98:	4d10      	ldr	r5, [pc, #64]	; (d4fdc <module_user_init_hook+0x48>)
   d4f9a:	6823      	ldr	r3, [r4, #0]
   d4f9c:	42ab      	cmp	r3, r5
   d4f9e:	4b10      	ldr	r3, [pc, #64]	; (d4fe0 <module_user_init_hook+0x4c>)
   d4fa0:	bf0c      	ite	eq
   d4fa2:	2201      	moveq	r2, #1
   d4fa4:	2200      	movne	r2, #0
   d4fa6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4fa8:	d002      	beq.n	d4fb0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d4faa:	f7ff ffbf 	bl	d4f2c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4fae:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4fb0:	f7ff fd06 	bl	d49c0 <HAL_RNG_GetRandomNumber>
   d4fb4:	4604      	mov	r4, r0
    srand(seed);
   d4fb6:	f001 f8c9 	bl	d614c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4fba:	4b0a      	ldr	r3, [pc, #40]	; (d4fe4 <module_user_init_hook+0x50>)
   d4fbc:	b113      	cbz	r3, d4fc4 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d4fbe:	4620      	mov	r0, r4
   d4fc0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4fc4:	2100      	movs	r1, #0
   d4fc6:	4807      	ldr	r0, [pc, #28]	; (d4fe4 <module_user_init_hook+0x50>)
   d4fc8:	f7ff fe2e 	bl	d4c28 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4fcc:	2100      	movs	r1, #0
   d4fce:	4806      	ldr	r0, [pc, #24]	; (d4fe8 <module_user_init_hook+0x54>)
}
   d4fd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4fd4:	f7ff bdc4 	b.w	d4b60 <system_ctrl_set_app_request_handler>
   d4fd8:	2003f400 	.word	0x2003f400
   d4fdc:	9a271c1e 	.word	0x9a271c1e
   d4fe0:	2003e42c 	.word	0x2003e42c
   d4fe4:	00000000 	.word	0x00000000
   d4fe8:	000d4f5d 	.word	0x000d4f5d

000d4fec <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4fec:	4770      	bx	lr

000d4fee <_ZN9IPAddressD0Ev>:
   d4fee:	b510      	push	{r4, lr}
   d4ff0:	2118      	movs	r1, #24
   d4ff2:	4604      	mov	r4, r0
   d4ff4:	f000 fb1f 	bl	d5636 <_ZdlPvj>
   d4ff8:	4620      	mov	r0, r4
   d4ffa:	bd10      	pop	{r4, pc}

000d4ffc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4ffe:	7d03      	ldrb	r3, [r0, #20]
   d5000:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5002:	b08d      	sub	sp, #52	; 0x34
   d5004:	460e      	mov	r6, r1
   d5006:	f100 0704 	add.w	r7, r0, #4
   d500a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d500e:	d002      	beq.n	d5016 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5010:	f100 0508 	add.w	r5, r0, #8
   d5014:	e018      	b.n	d5048 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5016:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5018:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d501a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d501e:	232f      	movs	r3, #47	; 0x2f
   d5020:	462a      	mov	r2, r5
   d5022:	200a      	movs	r0, #10
   d5024:	f7ff fd0c 	bl	d4a40 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5028:	4628      	mov	r0, r5
   d502a:	f001 f8c9 	bl	d61c0 <strlen>
   d502e:	6833      	ldr	r3, [r6, #0]
   d5030:	4602      	mov	r2, r0
   d5032:	68db      	ldr	r3, [r3, #12]
   d5034:	4629      	mov	r1, r5
   d5036:	4630      	mov	r0, r6
   d5038:	4798      	blx	r3
   d503a:	e00f      	b.n	d505c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d503c:	b124      	cbz	r4, d5048 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d503e:	212e      	movs	r1, #46	; 0x2e
   d5040:	4630      	mov	r0, r6
   d5042:	f7ff febb 	bl	d4dbc <_ZN5Print5printEc>
   d5046:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5048:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d504c:	220a      	movs	r2, #10
   d504e:	4630      	mov	r0, r6
   d5050:	f7ff fec3 	bl	d4dda <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5054:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5056:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5058:	d1f0      	bne.n	d503c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d505a:	4620      	mov	r0, r4
    }
    return n;
}
   d505c:	b00d      	add	sp, #52	; 0x34
   d505e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5060 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5060:	b510      	push	{r4, lr}
   d5062:	4b05      	ldr	r3, [pc, #20]	; (d5078 <_ZN9IPAddressC1Ev+0x18>)
   d5064:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5066:	2211      	movs	r2, #17
   d5068:	f840 3b04 	str.w	r3, [r0], #4
   d506c:	2100      	movs	r1, #0
   d506e:	f001 f864 	bl	d613a <memset>
{
    clear();
}
   d5072:	4620      	mov	r0, r4
   d5074:	bd10      	pop	{r4, pc}
   d5076:	bf00      	nop
   d5078:	000d650c 	.word	0x000d650c

000d507c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d507c:	4603      	mov	r3, r0
   d507e:	4a07      	ldr	r2, [pc, #28]	; (d509c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5080:	b510      	push	{r4, lr}
   d5082:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5086:	f101 0210 	add.w	r2, r1, #16
   d508a:	f851 4b04 	ldr.w	r4, [r1], #4
   d508e:	f843 4b04 	str.w	r4, [r3], #4
   d5092:	4291      	cmp	r1, r2
   d5094:	d1f9      	bne.n	d508a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5096:	780a      	ldrb	r2, [r1, #0]
   d5098:	701a      	strb	r2, [r3, #0]
}
   d509a:	bd10      	pop	{r4, pc}
   d509c:	000d650c 	.word	0x000d650c

000d50a0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d50a0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d50a2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d50a6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d50aa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d50ae:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d50b2:	2304      	movs	r3, #4
   d50b4:	6041      	str	r1, [r0, #4]
   d50b6:	7503      	strb	r3, [r0, #20]
   d50b8:	bd10      	pop	{r4, pc}

000d50ba <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d50ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d50bc:	780d      	ldrb	r5, [r1, #0]
   d50be:	788b      	ldrb	r3, [r1, #2]
   d50c0:	784a      	ldrb	r2, [r1, #1]
   d50c2:	78c9      	ldrb	r1, [r1, #3]
   d50c4:	9100      	str	r1, [sp, #0]
   d50c6:	4629      	mov	r1, r5
   d50c8:	f7ff ffea 	bl	d50a0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d50cc:	b003      	add	sp, #12
   d50ce:	bd30      	pop	{r4, r5, pc}

000d50d0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d50d0:	7441      	strb	r1, [r0, #17]
   d50d2:	4770      	bx	lr

000d50d4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d50d4:	4770      	bx	lr

000d50d6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d50d6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d50d8:	2100      	movs	r1, #0
   d50da:	7c00      	ldrb	r0, [r0, #16]
   d50dc:	f7ff fd18 	bl	d4b10 <HAL_USB_USART_Receive_Data>
}
   d50e0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d50e4:	bf28      	it	cs
   d50e6:	f04f 30ff 	movcs.w	r0, #4294967295
   d50ea:	bd08      	pop	{r3, pc}

000d50ec <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d50ec:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d50ee:	2101      	movs	r1, #1
   d50f0:	7c00      	ldrb	r0, [r0, #16]
   d50f2:	f7ff fd0d 	bl	d4b10 <HAL_USB_USART_Receive_Data>
}
   d50f6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d50fa:	bf28      	it	cs
   d50fc:	f04f 30ff 	movcs.w	r0, #4294967295
   d5100:	bd08      	pop	{r3, pc}

000d5102 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5102:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5104:	7c00      	ldrb	r0, [r0, #16]
   d5106:	f7ff fcfb 	bl	d4b00 <HAL_USB_USART_Available_Data_For_Write>
}
   d510a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d510e:	bd08      	pop	{r3, pc}

000d5110 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5110:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5112:	7c00      	ldrb	r0, [r0, #16]
   d5114:	f7ff fcec 	bl	d4af0 <HAL_USB_USART_Available_Data>
}
   d5118:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d511c:	bd08      	pop	{r3, pc}

000d511e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d511e:	7c00      	ldrb	r0, [r0, #16]
   d5120:	f7ff bd06 	b.w	d4b30 <HAL_USB_USART_Flush_Data>

000d5124 <_ZN9USBSerialD0Ev>:
   d5124:	b510      	push	{r4, lr}
   d5126:	2114      	movs	r1, #20
   d5128:	4604      	mov	r4, r0
   d512a:	f000 fa84 	bl	d5636 <_ZdlPvj>
   d512e:	4620      	mov	r0, r4
   d5130:	bd10      	pop	{r4, pc}

000d5132 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5132:	b538      	push	{r3, r4, r5, lr}
   d5134:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5136:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5138:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d513a:	f7ff fce1 	bl	d4b00 <HAL_USB_USART_Available_Data_For_Write>
   d513e:	2800      	cmp	r0, #0
   d5140:	dc01      	bgt.n	d5146 <_ZN9USBSerial5writeEh+0x14>
   d5142:	7c60      	ldrb	r0, [r4, #17]
   d5144:	b128      	cbz	r0, d5152 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5146:	4629      	mov	r1, r5
   d5148:	7c20      	ldrb	r0, [r4, #16]
   d514a:	f7ff fce9 	bl	d4b20 <HAL_USB_USART_Send_Data>
   d514e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5152:	bd38      	pop	{r3, r4, r5, pc}

000d5154 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5154:	b510      	push	{r4, lr}
   d5156:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5158:	2300      	movs	r3, #0
   d515a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d515c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5160:	60a3      	str	r3, [r4, #8]
   d5162:	4b05      	ldr	r3, [pc, #20]	; (d5178 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5164:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5166:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5168:	4608      	mov	r0, r1
{
  _serial = serial;
   d516a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d516c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d516e:	4611      	mov	r1, r2
   d5170:	f7ff fcae 	bl	d4ad0 <HAL_USB_USART_Init>
}
   d5174:	4620      	mov	r0, r4
   d5176:	bd10      	pop	{r4, pc}
   d5178:	000d6520 	.word	0x000d6520

000d517c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d517c:	2200      	movs	r2, #0
   d517e:	7c00      	ldrb	r0, [r0, #16]
   d5180:	f7ff bcae 	b.w	d4ae0 <HAL_USB_USART_Begin>

000d5184 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5184:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5186:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5188:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d518a:	2100      	movs	r1, #0
   d518c:	f000 ffd5 	bl	d613a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5190:	4620      	mov	r0, r4
   d5192:	bd10      	pop	{r4, pc}

000d5194 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5194:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5196:	4d0e      	ldr	r5, [pc, #56]	; (d51d0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5198:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d519a:	a801      	add	r0, sp, #4
   d519c:	f7ff fff2 	bl	d5184 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d51a0:	6829      	ldr	r1, [r5, #0]
   d51a2:	f011 0401 	ands.w	r4, r1, #1
   d51a6:	d110      	bne.n	d51ca <_Z16_fetch_usbserialv+0x36>
   d51a8:	4628      	mov	r0, r5
   d51aa:	f7fe ff7a 	bl	d40a2 <__cxa_guard_acquire>
   d51ae:	b160      	cbz	r0, d51ca <_Z16_fetch_usbserialv+0x36>
   d51b0:	aa01      	add	r2, sp, #4
   d51b2:	4621      	mov	r1, r4
   d51b4:	4807      	ldr	r0, [pc, #28]	; (d51d4 <_Z16_fetch_usbserialv+0x40>)
   d51b6:	f7ff ffcd 	bl	d5154 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d51ba:	4628      	mov	r0, r5
   d51bc:	f7fe ff76 	bl	d40ac <__cxa_guard_release>
   d51c0:	4a05      	ldr	r2, [pc, #20]	; (d51d8 <_Z16_fetch_usbserialv+0x44>)
   d51c2:	4906      	ldr	r1, [pc, #24]	; (d51dc <_Z16_fetch_usbserialv+0x48>)
   d51c4:	4803      	ldr	r0, [pc, #12]	; (d51d4 <_Z16_fetch_usbserialv+0x40>)
   d51c6:	f000 fa31 	bl	d562c <__aeabi_atexit>
	return _usbserial;
}
   d51ca:	4802      	ldr	r0, [pc, #8]	; (d51d4 <_Z16_fetch_usbserialv+0x40>)
   d51cc:	b007      	add	sp, #28
   d51ce:	bd30      	pop	{r4, r5, pc}
   d51d0:	2003e430 	.word	0x2003e430
   d51d4:	2003e434 	.word	0x2003e434
   d51d8:	2003e244 	.word	0x2003e244
   d51dc:	000d50d5 	.word	0x000d50d5

000d51e0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d51e0:	4770      	bx	lr

000d51e2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d51e2:	7441      	strb	r1, [r0, #17]
   d51e4:	4770      	bx	lr

000d51e6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d51e6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d51e8:	7c00      	ldrb	r0, [r0, #16]
   d51ea:	f7ff fc61 	bl	d4ab0 <HAL_USART_Available_Data_For_Write>
}
   d51ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d51f2:	bd08      	pop	{r3, pc}

000d51f4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d51f4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d51f6:	7c00      	ldrb	r0, [r0, #16]
   d51f8:	f7ff fc3a 	bl	d4a70 <HAL_USART_Available_Data>
}
   d51fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5200:	bd08      	pop	{r3, pc}

000d5202 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5202:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5204:	7c00      	ldrb	r0, [r0, #16]
   d5206:	f7ff fc43 	bl	d4a90 <HAL_USART_Peek_Data>
}
   d520a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d520e:	bf28      	it	cs
   d5210:	f04f 30ff 	movcs.w	r0, #4294967295
   d5214:	bd08      	pop	{r3, pc}

000d5216 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5216:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5218:	7c00      	ldrb	r0, [r0, #16]
   d521a:	f7ff fc31 	bl	d4a80 <HAL_USART_Read_Data>
}
   d521e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5222:	bf28      	it	cs
   d5224:	f04f 30ff 	movcs.w	r0, #4294967295
   d5228:	bd08      	pop	{r3, pc}

000d522a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d522a:	7c00      	ldrb	r0, [r0, #16]
   d522c:	f7ff bc38 	b.w	d4aa0 <HAL_USART_Flush_Data>

000d5230 <_ZN11USARTSerialD0Ev>:
   d5230:	b510      	push	{r4, lr}
   d5232:	2114      	movs	r1, #20
   d5234:	4604      	mov	r4, r0
   d5236:	f000 f9fe 	bl	d5636 <_ZdlPvj>
   d523a:	4620      	mov	r0, r4
   d523c:	bd10      	pop	{r4, pc}

000d523e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d523e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5240:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5242:	4604      	mov	r4, r0
   d5244:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5246:	b925      	cbnz	r5, d5252 <_ZN11USARTSerial5writeEh+0x14>
   d5248:	7c00      	ldrb	r0, [r0, #16]
   d524a:	f7ff fc31 	bl	d4ab0 <HAL_USART_Available_Data_For_Write>
   d524e:	2800      	cmp	r0, #0
   d5250:	dd05      	ble.n	d525e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5252:	4631      	mov	r1, r6
   d5254:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5256:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d525a:	f7ff bc01 	b.w	d4a60 <HAL_USART_Write_Data>
  }
  return 0;
}
   d525e:	4628      	mov	r0, r5
   d5260:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5264 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5264:	b510      	push	{r4, lr}
   d5266:	4604      	mov	r4, r0
   d5268:	4608      	mov	r0, r1
   d526a:	4611      	mov	r1, r2
   d526c:	2200      	movs	r2, #0
   d526e:	6062      	str	r2, [r4, #4]
   d5270:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5274:	60a2      	str	r2, [r4, #8]
   d5276:	4a05      	ldr	r2, [pc, #20]	; (d528c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5278:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d527a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d527c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d527e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5280:	461a      	mov	r2, r3
   d5282:	f7ff fbe5 	bl	d4a50 <HAL_USART_Init>
}
   d5286:	4620      	mov	r0, r4
   d5288:	bd10      	pop	{r4, pc}
   d528a:	bf00      	nop
   d528c:	000d6550 	.word	0x000d6550

000d5290 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d5290:	2300      	movs	r3, #0
   d5292:	7c00      	ldrb	r0, [r0, #16]
   d5294:	f7ff bc14 	b.w	d4ac0 <HAL_USART_BeginConfig>

000d5298 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d5298:	2200      	movs	r2, #0
   d529a:	f7ff bff9 	b.w	d5290 <_ZN11USARTSerial5beginEmm>
	...

000d52a0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d52a0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d52a2:	4d0c      	ldr	r5, [pc, #48]	; (d52d4 <_Z22__fetch_global_Serial1v+0x34>)
   d52a4:	6829      	ldr	r1, [r5, #0]
   d52a6:	f011 0401 	ands.w	r4, r1, #1
   d52aa:	d111      	bne.n	d52d0 <_Z22__fetch_global_Serial1v+0x30>
   d52ac:	4628      	mov	r0, r5
   d52ae:	f7fe fef8 	bl	d40a2 <__cxa_guard_acquire>
   d52b2:	b168      	cbz	r0, d52d0 <_Z22__fetch_global_Serial1v+0x30>
   d52b4:	4a08      	ldr	r2, [pc, #32]	; (d52d8 <_Z22__fetch_global_Serial1v+0x38>)
   d52b6:	4b09      	ldr	r3, [pc, #36]	; (d52dc <_Z22__fetch_global_Serial1v+0x3c>)
   d52b8:	4809      	ldr	r0, [pc, #36]	; (d52e0 <_Z22__fetch_global_Serial1v+0x40>)
   d52ba:	4621      	mov	r1, r4
   d52bc:	f7ff ffd2 	bl	d5264 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d52c0:	4628      	mov	r0, r5
   d52c2:	f7fe fef3 	bl	d40ac <__cxa_guard_release>
   d52c6:	4a07      	ldr	r2, [pc, #28]	; (d52e4 <_Z22__fetch_global_Serial1v+0x44>)
   d52c8:	4907      	ldr	r1, [pc, #28]	; (d52e8 <_Z22__fetch_global_Serial1v+0x48>)
   d52ca:	4805      	ldr	r0, [pc, #20]	; (d52e0 <_Z22__fetch_global_Serial1v+0x40>)
   d52cc:	f000 f9ae 	bl	d562c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d52d0:	4803      	ldr	r0, [pc, #12]	; (d52e0 <_Z22__fetch_global_Serial1v+0x40>)
   d52d2:	bd38      	pop	{r3, r4, r5, pc}
   d52d4:	2003e4e0 	.word	0x2003e4e0
   d52d8:	2003e4e4 	.word	0x2003e4e4
   d52dc:	2003e45c 	.word	0x2003e45c
   d52e0:	2003e448 	.word	0x2003e448
   d52e4:	2003e244 	.word	0x2003e244
   d52e8:	000d51e1 	.word	0x000d51e1

000d52ec <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d52ec:	2200      	movs	r2, #0
   d52ee:	4611      	mov	r1, r2
   d52f0:	6840      	ldr	r0, [r0, #4]
   d52f2:	f7ff bc81 	b.w	d4bf8 <network_listening>

000d52f6 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d52f6:	2200      	movs	r2, #0
   d52f8:	4611      	mov	r1, r2
   d52fa:	6840      	ldr	r0, [r0, #4]
   d52fc:	f7ff bc8c 	b.w	d4c18 <network_get_listen_timeout>

000d5300 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5300:	2200      	movs	r2, #0
   d5302:	6840      	ldr	r0, [r0, #4]
   d5304:	f7ff bc80 	b.w	d4c08 <network_set_listen_timeout>

000d5308 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5308:	2200      	movs	r2, #0
   d530a:	f081 0101 	eor.w	r1, r1, #1
   d530e:	6840      	ldr	r0, [r0, #4]
   d5310:	f7ff bc6a 	b.w	d4be8 <network_listen>

000d5314 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5314:	2300      	movs	r3, #0
   d5316:	461a      	mov	r2, r3
   d5318:	2101      	movs	r1, #1
   d531a:	6840      	ldr	r0, [r0, #4]
   d531c:	f7ff bc5c 	b.w	d4bd8 <network_off>

000d5320 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5320:	2300      	movs	r3, #0
   d5322:	461a      	mov	r2, r3
   d5324:	4619      	mov	r1, r3
   d5326:	6840      	ldr	r0, [r0, #4]
   d5328:	f7ff bc4e 	b.w	d4bc8 <network_on>

000d532c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d532c:	2200      	movs	r2, #0
   d532e:	4611      	mov	r1, r2
   d5330:	6840      	ldr	r0, [r0, #4]
   d5332:	f7ff bc41 	b.w	d4bb8 <network_ready>

000d5336 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5336:	2200      	movs	r2, #0
   d5338:	4611      	mov	r1, r2
   d533a:	6840      	ldr	r0, [r0, #4]
   d533c:	f7ff bc2c 	b.w	d4b98 <network_connecting>

000d5340 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5340:	2200      	movs	r2, #0
   d5342:	2102      	movs	r1, #2
   d5344:	6840      	ldr	r0, [r0, #4]
   d5346:	f7ff bc2f 	b.w	d4ba8 <network_disconnect>

000d534a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d534a:	2300      	movs	r3, #0
   d534c:	461a      	mov	r2, r3
   d534e:	6840      	ldr	r0, [r0, #4]
   d5350:	f7ff bc1a 	b.w	d4b88 <network_connect>

000d5354 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5354:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5356:	4605      	mov	r5, r0
   d5358:	b188      	cbz	r0, d537e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d535a:	6804      	ldr	r4, [r0, #0]
   d535c:	b14c      	cbz	r4, d5372 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d535e:	68a3      	ldr	r3, [r4, #8]
   d5360:	b11b      	cbz	r3, d536a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5362:	2203      	movs	r2, #3
   d5364:	4621      	mov	r1, r4
   d5366:	4620      	mov	r0, r4
   d5368:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d536a:	2110      	movs	r1, #16
   d536c:	4620      	mov	r0, r4
   d536e:	f000 f962 	bl	d5636 <_ZdlPvj>
   d5372:	4628      	mov	r0, r5
   d5374:	2114      	movs	r1, #20
      }
   d5376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d537a:	f000 b95c 	b.w	d5636 <_ZdlPvj>
   d537e:	bd38      	pop	{r3, r4, r5, pc}

000d5380 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5380:	b110      	cbz	r0, d5388 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5382:	6803      	ldr	r3, [r0, #0]
   d5384:	685b      	ldr	r3, [r3, #4]
   d5386:	4718      	bx	r3
   d5388:	4770      	bx	lr

000d538a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d538a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d538c:	6803      	ldr	r3, [r0, #0]
   d538e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5390:	b1bb      	cbz	r3, d53c2 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5392:	6858      	ldr	r0, [r3, #4]
   d5394:	f7ff fb24 	bl	d49e0 <os_thread_is_current>
   d5398:	b978      	cbnz	r0, d53ba <_ZN6ThreadD1Ev+0x30>
   d539a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d539c:	7c5a      	ldrb	r2, [r3, #17]
   d539e:	b912      	cbnz	r2, d53a6 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d53a0:	6858      	ldr	r0, [r3, #4]
   d53a2:	f7ff fb25 	bl	d49f0 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d53a6:	6823      	ldr	r3, [r4, #0]
   d53a8:	6858      	ldr	r0, [r3, #4]
   d53aa:	f7ff fb29 	bl	d4a00 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53ae:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d53b0:	2300      	movs	r3, #0
   d53b2:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d53b4:	b128      	cbz	r0, d53c2 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d53b6:	f7ff ffcd 	bl	d5354 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d53ba:	6820      	ldr	r0, [r4, #0]
   d53bc:	b108      	cbz	r0, d53c2 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d53be:	f7ff ffc9 	bl	d5354 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d53c2:	4620      	mov	r0, r4
   d53c4:	bd10      	pop	{r4, pc}

000d53c6 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d53c6:	b538      	push	{r3, r4, r5, lr}
   d53c8:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d53ca:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d53ce:	b108      	cbz	r0, d53d4 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d53d0:	f7fe fe65 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d53d4:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d53d8:	b108      	cbz	r0, d53de <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d53da:	f7ff fb29 	bl	d4a30 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d53de:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d53e2:	b135      	cbz	r5, d53f2 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d53e4:	4628      	mov	r0, r5
   d53e6:	f7ff ffd0 	bl	d538a <_ZN6ThreadD1Ev>
   d53ea:	2104      	movs	r1, #4
   d53ec:	4628      	mov	r0, r5
   d53ee:	f000 f922 	bl	d5636 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d53f2:	6820      	ldr	r0, [r4, #0]
   d53f4:	b108      	cbz	r0, d53fa <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d53f6:	f7ff ffc3 	bl	d5380 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d53fa:	4620      	mov	r0, r4
   d53fc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5400 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5400:	b510      	push	{r4, lr}
   d5402:	4b04      	ldr	r3, [pc, #16]	; (d5414 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5404:	4604      	mov	r4, r0
   d5406:	f840 3b08 	str.w	r3, [r0], #8
   d540a:	f7ff ffdc 	bl	d53c6 <_ZN5spark11MeshPublishD1Ev>
   d540e:	4620      	mov	r0, r4
   d5410:	bd10      	pop	{r4, pc}
   d5412:	bf00      	nop
   d5414:	000d6580 	.word	0x000d6580

000d5418 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5418:	b538      	push	{r3, r4, r5, lr}
   d541a:	4c0e      	ldr	r4, [pc, #56]	; (d5454 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d541c:	4b0e      	ldr	r3, [pc, #56]	; (d5458 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d541e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5420:	2500      	movs	r5, #0
   d5422:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5424:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5428:	6063      	str	r3, [r4, #4]
   d542a:	60a5      	str	r5, [r4, #8]
   d542c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5430:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5434:	f7ff faf4 	bl	d4a20 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5438:	4b08      	ldr	r3, [pc, #32]	; (d545c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d543a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d543e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5442:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5444:	4620      	mov	r0, r4
   d5446:	4a06      	ldr	r2, [pc, #24]	; (d5460 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5448:	4906      	ldr	r1, [pc, #24]	; (d5464 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d544a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d544e:	f000 b8ed 	b.w	d562c <__aeabi_atexit>
   d5452:	bf00      	nop
   d5454:	2003e568 	.word	0x2003e568
   d5458:	000d65e8 	.word	0x000d65e8
   d545c:	000d6580 	.word	0x000d6580
   d5460:	2003e244 	.word	0x2003e244
   d5464:	000d5401 	.word	0x000d5401

000d5468 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5468:	2200      	movs	r2, #0
   d546a:	4611      	mov	r1, r2
   d546c:	6840      	ldr	r0, [r0, #4]
   d546e:	f7ff bba3 	b.w	d4bb8 <network_ready>

000d5472 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5472:	2200      	movs	r2, #0
   d5474:	4611      	mov	r1, r2
   d5476:	6840      	ldr	r0, [r0, #4]
   d5478:	f7ff bbbe 	b.w	d4bf8 <network_listening>

000d547c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d547c:	2200      	movs	r2, #0
   d547e:	4611      	mov	r1, r2
   d5480:	6840      	ldr	r0, [r0, #4]
   d5482:	f7ff bbc9 	b.w	d4c18 <network_get_listen_timeout>

000d5486 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5486:	2200      	movs	r2, #0
   d5488:	6840      	ldr	r0, [r0, #4]
   d548a:	f7ff bbbd 	b.w	d4c08 <network_set_listen_timeout>

000d548e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d548e:	2200      	movs	r2, #0
   d5490:	f081 0101 	eor.w	r1, r1, #1
   d5494:	6840      	ldr	r0, [r0, #4]
   d5496:	f7ff bba7 	b.w	d4be8 <network_listen>

000d549a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d549a:	2300      	movs	r3, #0
   d549c:	461a      	mov	r2, r3
   d549e:	4619      	mov	r1, r3
   d54a0:	6840      	ldr	r0, [r0, #4]
   d54a2:	f7ff bb99 	b.w	d4bd8 <network_off>

000d54a6 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d54a6:	2300      	movs	r3, #0
   d54a8:	461a      	mov	r2, r3
   d54aa:	4619      	mov	r1, r3
   d54ac:	6840      	ldr	r0, [r0, #4]
   d54ae:	f7ff bb8b 	b.w	d4bc8 <network_on>

000d54b2 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d54b2:	2200      	movs	r2, #0
   d54b4:	4611      	mov	r1, r2
   d54b6:	6840      	ldr	r0, [r0, #4]
   d54b8:	f7ff bb6e 	b.w	d4b98 <network_connecting>

000d54bc <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d54bc:	2200      	movs	r2, #0
   d54be:	2102      	movs	r1, #2
   d54c0:	6840      	ldr	r0, [r0, #4]
   d54c2:	f7ff bb71 	b.w	d4ba8 <network_disconnect>

000d54c6 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d54c6:	2300      	movs	r3, #0
   d54c8:	461a      	mov	r2, r3
   d54ca:	6840      	ldr	r0, [r0, #4]
   d54cc:	f7ff bb5c 	b.w	d4b88 <network_connect>

000d54d0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d54d0:	4b02      	ldr	r3, [pc, #8]	; (d54dc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d54d2:	2204      	movs	r2, #4
   d54d4:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d54d6:	4a02      	ldr	r2, [pc, #8]	; (d54e0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d54d8:	601a      	str	r2, [r3, #0]
   d54da:	4770      	bx	lr
   d54dc:	2003e73c 	.word	0x2003e73c
   d54e0:	000d65b4 	.word	0x000d65b4

000d54e4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d54e4:	2300      	movs	r3, #0
   d54e6:	461a      	mov	r2, r3
   d54e8:	6840      	ldr	r0, [r0, #4]
   d54ea:	f7ff bb4d 	b.w	d4b88 <network_connect>

000d54ee <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d54ee:	2200      	movs	r2, #0
   d54f0:	2102      	movs	r1, #2
   d54f2:	6840      	ldr	r0, [r0, #4]
   d54f4:	f7ff bb58 	b.w	d4ba8 <network_disconnect>

000d54f8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d54f8:	2200      	movs	r2, #0
   d54fa:	4611      	mov	r1, r2
   d54fc:	6840      	ldr	r0, [r0, #4]
   d54fe:	f7ff bb4b 	b.w	d4b98 <network_connecting>

000d5502 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5502:	2200      	movs	r2, #0
   d5504:	4611      	mov	r1, r2
   d5506:	6840      	ldr	r0, [r0, #4]
   d5508:	f7ff bb56 	b.w	d4bb8 <network_ready>

000d550c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d550c:	2300      	movs	r3, #0
   d550e:	461a      	mov	r2, r3
   d5510:	4619      	mov	r1, r3
   d5512:	6840      	ldr	r0, [r0, #4]
   d5514:	f7ff bb58 	b.w	d4bc8 <network_on>

000d5518 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5518:	2300      	movs	r3, #0
   d551a:	461a      	mov	r2, r3
   d551c:	4619      	mov	r1, r3
   d551e:	6840      	ldr	r0, [r0, #4]
   d5520:	f7ff bb5a 	b.w	d4bd8 <network_off>

000d5524 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5524:	2200      	movs	r2, #0
   d5526:	f081 0101 	eor.w	r1, r1, #1
   d552a:	6840      	ldr	r0, [r0, #4]
   d552c:	f7ff bb5c 	b.w	d4be8 <network_listen>

000d5530 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5530:	2200      	movs	r2, #0
   d5532:	6840      	ldr	r0, [r0, #4]
   d5534:	f7ff bb68 	b.w	d4c08 <network_set_listen_timeout>

000d5538 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5538:	2200      	movs	r2, #0
   d553a:	4611      	mov	r1, r2
   d553c:	6840      	ldr	r0, [r0, #4]
   d553e:	f7ff bb6b 	b.w	d4c18 <network_get_listen_timeout>

000d5542 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5542:	2200      	movs	r2, #0
   d5544:	4611      	mov	r1, r2
   d5546:	6840      	ldr	r0, [r0, #4]
   d5548:	f7ff bb56 	b.w	d4bf8 <network_listening>

000d554c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d554c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5550:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5552:	b095      	sub	sp, #84	; 0x54
   d5554:	4616      	mov	r6, r2
   d5556:	460d      	mov	r5, r1
   d5558:	4607      	mov	r7, r0
    IPAddress addr;
   d555a:	f7ff fd81 	bl	d5060 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d555e:	4621      	mov	r1, r4
   d5560:	2220      	movs	r2, #32
   d5562:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5564:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5566:	f000 fde8 	bl	d613a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d556a:	2340      	movs	r3, #64	; 0x40
   d556c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d556e:	4621      	mov	r1, r4
   d5570:	466b      	mov	r3, sp
   d5572:	aa0c      	add	r2, sp, #48	; 0x30
   d5574:	4630      	mov	r0, r6
   d5576:	f7ff fa13 	bl	d49a0 <netdb_getaddrinfo>
    if (!r) {
   d557a:	4604      	mov	r4, r0
   d557c:	2800      	cmp	r0, #0
   d557e:	d144      	bne.n	d560a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5580:	4602      	mov	r2, r0
   d5582:	2101      	movs	r1, #1
   d5584:	6868      	ldr	r0, [r5, #4]
   d5586:	f7ff fb17 	bl	d4bb8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d558a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d558c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d558e:	4622      	mov	r2, r4
   d5590:	6868      	ldr	r0, [r5, #4]
   d5592:	f7ff fb11 	bl	d4bb8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5596:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5598:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d559a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d559c:	2e00      	cmp	r6, #0
   d559e:	d034      	beq.n	d560a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d55a0:	2900      	cmp	r1, #0
   d55a2:	d132      	bne.n	d560a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d55a4:	6873      	ldr	r3, [r6, #4]
   d55a6:	2b02      	cmp	r3, #2
   d55a8:	d002      	beq.n	d55b0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d55aa:	2b0a      	cmp	r3, #10
   d55ac:	d009      	beq.n	d55c2 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d55ae:	e02a      	b.n	d5606 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d55b0:	f1b8 0f00 	cmp.w	r8, #0
   d55b4:	d027      	beq.n	d5606 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d55b6:	6971      	ldr	r1, [r6, #20]
   d55b8:	4638      	mov	r0, r7
   d55ba:	3104      	adds	r1, #4
   d55bc:	f7ff fd7d 	bl	d50ba <_ZN9IPAddressaSEPKh>
   d55c0:	e020      	b.n	d5604 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d55c2:	f1b9 0f00 	cmp.w	r9, #0
   d55c6:	d01e      	beq.n	d5606 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d55c8:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d55ca:	2211      	movs	r2, #17
   d55cc:	a801      	add	r0, sp, #4
   d55ce:	f000 fdb4 	bl	d613a <memset>
                    a.v = 6;
   d55d2:	2306      	movs	r3, #6
   d55d4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d55d8:	ad01      	add	r5, sp, #4
   d55da:	f104 0308 	add.w	r3, r4, #8
   d55de:	3418      	adds	r4, #24
   d55e0:	6818      	ldr	r0, [r3, #0]
   d55e2:	6859      	ldr	r1, [r3, #4]
   d55e4:	462a      	mov	r2, r5
   d55e6:	c203      	stmia	r2!, {r0, r1}
   d55e8:	3308      	adds	r3, #8
   d55ea:	42a3      	cmp	r3, r4
   d55ec:	4615      	mov	r5, r2
   d55ee:	d1f7      	bne.n	d55e0 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d55f0:	a901      	add	r1, sp, #4
   d55f2:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d55f4:	ad07      	add	r5, sp, #28
   d55f6:	f7ff fd41 	bl	d507c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d55fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d55fc:	1d3c      	adds	r4, r7, #4
   d55fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5600:	682b      	ldr	r3, [r5, #0]
   d5602:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5604:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5606:	69f6      	ldr	r6, [r6, #28]
   d5608:	e7c8      	b.n	d559c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d560a:	9800      	ldr	r0, [sp, #0]
   d560c:	f7ff f9c0 	bl	d4990 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5610:	4638      	mov	r0, r7
   d5612:	b015      	add	sp, #84	; 0x54
   d5614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5618 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5618:	4b02      	ldr	r3, [pc, #8]	; (d5624 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d561a:	4a03      	ldr	r2, [pc, #12]	; (d5628 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d561c:	601a      	str	r2, [r3, #0]
   d561e:	2200      	movs	r2, #0
   d5620:	605a      	str	r2, [r3, #4]
   d5622:	4770      	bx	lr
   d5624:	2003e744 	.word	0x2003e744
   d5628:	000d65e8 	.word	0x000d65e8

000d562c <__aeabi_atexit>:
   d562c:	460b      	mov	r3, r1
   d562e:	4601      	mov	r1, r0
   d5630:	4618      	mov	r0, r3
   d5632:	f000 bd69 	b.w	d6108 <__cxa_atexit>

000d5636 <_ZdlPvj>:
   d5636:	f7fe bd30 	b.w	d409a <_ZdlPv>
	...

000d563c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d563c:	4b18      	ldr	r3, [pc, #96]	; (d56a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d563e:	681a      	ldr	r2, [r3, #0]
   d5640:	07d1      	lsls	r1, r2, #31
   d5642:	bf5c      	itt	pl
   d5644:	2201      	movpl	r2, #1
   d5646:	601a      	strpl	r2, [r3, #0]
   d5648:	4b16      	ldr	r3, [pc, #88]	; (d56a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d564a:	681a      	ldr	r2, [r3, #0]
   d564c:	07d2      	lsls	r2, r2, #31
   d564e:	bf5c      	itt	pl
   d5650:	2201      	movpl	r2, #1
   d5652:	601a      	strpl	r2, [r3, #0]
   d5654:	4b14      	ldr	r3, [pc, #80]	; (d56a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5656:	681a      	ldr	r2, [r3, #0]
   d5658:	07d0      	lsls	r0, r2, #31
   d565a:	bf5c      	itt	pl
   d565c:	2201      	movpl	r2, #1
   d565e:	601a      	strpl	r2, [r3, #0]
   d5660:	4b12      	ldr	r3, [pc, #72]	; (d56ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5662:	681a      	ldr	r2, [r3, #0]
   d5664:	07d1      	lsls	r1, r2, #31
   d5666:	bf5c      	itt	pl
   d5668:	2201      	movpl	r2, #1
   d566a:	601a      	strpl	r2, [r3, #0]
   d566c:	4b10      	ldr	r3, [pc, #64]	; (d56b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d566e:	681a      	ldr	r2, [r3, #0]
   d5670:	07d2      	lsls	r2, r2, #31
   d5672:	bf5c      	itt	pl
   d5674:	2201      	movpl	r2, #1
   d5676:	601a      	strpl	r2, [r3, #0]
   d5678:	4b0e      	ldr	r3, [pc, #56]	; (d56b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d567a:	681a      	ldr	r2, [r3, #0]
   d567c:	07d0      	lsls	r0, r2, #31
   d567e:	bf5c      	itt	pl
   d5680:	2201      	movpl	r2, #1
   d5682:	601a      	strpl	r2, [r3, #0]
   d5684:	4b0c      	ldr	r3, [pc, #48]	; (d56b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5686:	681a      	ldr	r2, [r3, #0]
   d5688:	07d1      	lsls	r1, r2, #31
   d568a:	bf5c      	itt	pl
   d568c:	2201      	movpl	r2, #1
   d568e:	601a      	strpl	r2, [r3, #0]
   d5690:	4b0a      	ldr	r3, [pc, #40]	; (d56bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5692:	681a      	ldr	r2, [r3, #0]
   d5694:	07d2      	lsls	r2, r2, #31
   d5696:	bf5c      	itt	pl
   d5698:	2201      	movpl	r2, #1
   d569a:	601a      	strpl	r2, [r3, #0]
   d569c:	4770      	bx	lr
   d569e:	bf00      	nop
   d56a0:	2003e76c 	.word	0x2003e76c
   d56a4:	2003e768 	.word	0x2003e768
   d56a8:	2003e764 	.word	0x2003e764
   d56ac:	2003e760 	.word	0x2003e760
   d56b0:	2003e75c 	.word	0x2003e75c
   d56b4:	2003e758 	.word	0x2003e758
   d56b8:	2003e754 	.word	0x2003e754
   d56bc:	2003e750 	.word	0x2003e750

000d56c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d56c0:	4b24      	ldr	r3, [pc, #144]	; (d5754 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d56c2:	681a      	ldr	r2, [r3, #0]
   d56c4:	07d0      	lsls	r0, r2, #31
   d56c6:	bf5c      	itt	pl
   d56c8:	2201      	movpl	r2, #1
   d56ca:	601a      	strpl	r2, [r3, #0]
   d56cc:	4b22      	ldr	r3, [pc, #136]	; (d5758 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d56ce:	681a      	ldr	r2, [r3, #0]
   d56d0:	07d1      	lsls	r1, r2, #31
   d56d2:	bf5c      	itt	pl
   d56d4:	2201      	movpl	r2, #1
   d56d6:	601a      	strpl	r2, [r3, #0]
   d56d8:	4b20      	ldr	r3, [pc, #128]	; (d575c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d56da:	681a      	ldr	r2, [r3, #0]
   d56dc:	07d2      	lsls	r2, r2, #31
   d56de:	bf5c      	itt	pl
   d56e0:	2201      	movpl	r2, #1
   d56e2:	601a      	strpl	r2, [r3, #0]
   d56e4:	4b1e      	ldr	r3, [pc, #120]	; (d5760 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d56e6:	681a      	ldr	r2, [r3, #0]
   d56e8:	07d0      	lsls	r0, r2, #31
   d56ea:	bf5c      	itt	pl
   d56ec:	2201      	movpl	r2, #1
   d56ee:	601a      	strpl	r2, [r3, #0]
   d56f0:	4b1c      	ldr	r3, [pc, #112]	; (d5764 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d56f2:	681a      	ldr	r2, [r3, #0]
   d56f4:	07d1      	lsls	r1, r2, #31
   d56f6:	bf5c      	itt	pl
   d56f8:	2201      	movpl	r2, #1
   d56fa:	601a      	strpl	r2, [r3, #0]
   d56fc:	4b1a      	ldr	r3, [pc, #104]	; (d5768 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d56fe:	681a      	ldr	r2, [r3, #0]
   d5700:	07d2      	lsls	r2, r2, #31
   d5702:	bf5c      	itt	pl
   d5704:	2201      	movpl	r2, #1
   d5706:	601a      	strpl	r2, [r3, #0]
   d5708:	4b18      	ldr	r3, [pc, #96]	; (d576c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d570a:	681a      	ldr	r2, [r3, #0]
   d570c:	07d0      	lsls	r0, r2, #31
   d570e:	bf5c      	itt	pl
   d5710:	2201      	movpl	r2, #1
   d5712:	601a      	strpl	r2, [r3, #0]
   d5714:	4b16      	ldr	r3, [pc, #88]	; (d5770 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5716:	681a      	ldr	r2, [r3, #0]
   d5718:	07d1      	lsls	r1, r2, #31
   d571a:	bf5c      	itt	pl
   d571c:	2201      	movpl	r2, #1
   d571e:	601a      	strpl	r2, [r3, #0]
   d5720:	4b14      	ldr	r3, [pc, #80]	; (d5774 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5722:	681a      	ldr	r2, [r3, #0]
   d5724:	07d2      	lsls	r2, r2, #31
   d5726:	bf5c      	itt	pl
   d5728:	2201      	movpl	r2, #1
   d572a:	601a      	strpl	r2, [r3, #0]
   d572c:	4b12      	ldr	r3, [pc, #72]	; (d5778 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d572e:	681a      	ldr	r2, [r3, #0]
   d5730:	07d0      	lsls	r0, r2, #31
   d5732:	bf5c      	itt	pl
   d5734:	2201      	movpl	r2, #1
   d5736:	601a      	strpl	r2, [r3, #0]
   d5738:	4b10      	ldr	r3, [pc, #64]	; (d577c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d573a:	681a      	ldr	r2, [r3, #0]
   d573c:	07d1      	lsls	r1, r2, #31
   d573e:	bf5c      	itt	pl
   d5740:	2201      	movpl	r2, #1
   d5742:	601a      	strpl	r2, [r3, #0]
   d5744:	4b0e      	ldr	r3, [pc, #56]	; (d5780 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5746:	681a      	ldr	r2, [r3, #0]
   d5748:	07d2      	lsls	r2, r2, #31
   d574a:	bf5c      	itt	pl
   d574c:	2201      	movpl	r2, #1
   d574e:	601a      	strpl	r2, [r3, #0]
   d5750:	4770      	bx	lr
   d5752:	bf00      	nop
   d5754:	2003e79c 	.word	0x2003e79c
   d5758:	2003e798 	.word	0x2003e798
   d575c:	2003e794 	.word	0x2003e794
   d5760:	2003e790 	.word	0x2003e790
   d5764:	2003e78c 	.word	0x2003e78c
   d5768:	2003e788 	.word	0x2003e788
   d576c:	2003e784 	.word	0x2003e784
   d5770:	2003e780 	.word	0x2003e780
   d5774:	2003e77c 	.word	0x2003e77c
   d5778:	2003e778 	.word	0x2003e778
   d577c:	2003e774 	.word	0x2003e774
   d5780:	2003e770 	.word	0x2003e770

000d5784 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5784:	4b24      	ldr	r3, [pc, #144]	; (d5818 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5786:	681a      	ldr	r2, [r3, #0]
   d5788:	07d0      	lsls	r0, r2, #31
   d578a:	bf5c      	itt	pl
   d578c:	2201      	movpl	r2, #1
   d578e:	601a      	strpl	r2, [r3, #0]
   d5790:	4b22      	ldr	r3, [pc, #136]	; (d581c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5792:	681a      	ldr	r2, [r3, #0]
   d5794:	07d1      	lsls	r1, r2, #31
   d5796:	bf5c      	itt	pl
   d5798:	2201      	movpl	r2, #1
   d579a:	601a      	strpl	r2, [r3, #0]
   d579c:	4b20      	ldr	r3, [pc, #128]	; (d5820 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d579e:	681a      	ldr	r2, [r3, #0]
   d57a0:	07d2      	lsls	r2, r2, #31
   d57a2:	bf5c      	itt	pl
   d57a4:	2201      	movpl	r2, #1
   d57a6:	601a      	strpl	r2, [r3, #0]
   d57a8:	4b1e      	ldr	r3, [pc, #120]	; (d5824 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d57aa:	681a      	ldr	r2, [r3, #0]
   d57ac:	07d0      	lsls	r0, r2, #31
   d57ae:	bf5c      	itt	pl
   d57b0:	2201      	movpl	r2, #1
   d57b2:	601a      	strpl	r2, [r3, #0]
   d57b4:	4b1c      	ldr	r3, [pc, #112]	; (d5828 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d57b6:	681a      	ldr	r2, [r3, #0]
   d57b8:	07d1      	lsls	r1, r2, #31
   d57ba:	bf5c      	itt	pl
   d57bc:	2201      	movpl	r2, #1
   d57be:	601a      	strpl	r2, [r3, #0]
   d57c0:	4b1a      	ldr	r3, [pc, #104]	; (d582c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d57c2:	681a      	ldr	r2, [r3, #0]
   d57c4:	07d2      	lsls	r2, r2, #31
   d57c6:	bf5c      	itt	pl
   d57c8:	2201      	movpl	r2, #1
   d57ca:	601a      	strpl	r2, [r3, #0]
   d57cc:	4b18      	ldr	r3, [pc, #96]	; (d5830 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d57ce:	681a      	ldr	r2, [r3, #0]
   d57d0:	07d0      	lsls	r0, r2, #31
   d57d2:	bf5c      	itt	pl
   d57d4:	2201      	movpl	r2, #1
   d57d6:	601a      	strpl	r2, [r3, #0]
   d57d8:	4b16      	ldr	r3, [pc, #88]	; (d5834 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d57da:	681a      	ldr	r2, [r3, #0]
   d57dc:	07d1      	lsls	r1, r2, #31
   d57de:	bf5c      	itt	pl
   d57e0:	2201      	movpl	r2, #1
   d57e2:	601a      	strpl	r2, [r3, #0]
   d57e4:	4b14      	ldr	r3, [pc, #80]	; (d5838 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d57e6:	681a      	ldr	r2, [r3, #0]
   d57e8:	07d2      	lsls	r2, r2, #31
   d57ea:	bf5c      	itt	pl
   d57ec:	2201      	movpl	r2, #1
   d57ee:	601a      	strpl	r2, [r3, #0]
   d57f0:	4b12      	ldr	r3, [pc, #72]	; (d583c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d57f2:	681a      	ldr	r2, [r3, #0]
   d57f4:	07d0      	lsls	r0, r2, #31
   d57f6:	bf5c      	itt	pl
   d57f8:	2201      	movpl	r2, #1
   d57fa:	601a      	strpl	r2, [r3, #0]
   d57fc:	4b10      	ldr	r3, [pc, #64]	; (d5840 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d57fe:	681a      	ldr	r2, [r3, #0]
   d5800:	07d1      	lsls	r1, r2, #31
   d5802:	bf5c      	itt	pl
   d5804:	2201      	movpl	r2, #1
   d5806:	601a      	strpl	r2, [r3, #0]
   d5808:	4b0e      	ldr	r3, [pc, #56]	; (d5844 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d580a:	681a      	ldr	r2, [r3, #0]
   d580c:	07d2      	lsls	r2, r2, #31
   d580e:	bf5c      	itt	pl
   d5810:	2201      	movpl	r2, #1
   d5812:	601a      	strpl	r2, [r3, #0]
   d5814:	4770      	bx	lr
   d5816:	bf00      	nop
   d5818:	2003e7cc 	.word	0x2003e7cc
   d581c:	2003e7c8 	.word	0x2003e7c8
   d5820:	2003e7c4 	.word	0x2003e7c4
   d5824:	2003e7c0 	.word	0x2003e7c0
   d5828:	2003e7bc 	.word	0x2003e7bc
   d582c:	2003e7b8 	.word	0x2003e7b8
   d5830:	2003e7b4 	.word	0x2003e7b4
   d5834:	2003e7b0 	.word	0x2003e7b0
   d5838:	2003e7ac 	.word	0x2003e7ac
   d583c:	2003e7a8 	.word	0x2003e7a8
   d5840:	2003e7a4 	.word	0x2003e7a4
   d5844:	2003e7a0 	.word	0x2003e7a0

000d5848 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5848:	4b18      	ldr	r3, [pc, #96]	; (d58ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d584a:	681a      	ldr	r2, [r3, #0]
   d584c:	07d1      	lsls	r1, r2, #31
   d584e:	bf5c      	itt	pl
   d5850:	2201      	movpl	r2, #1
   d5852:	601a      	strpl	r2, [r3, #0]
   d5854:	4b16      	ldr	r3, [pc, #88]	; (d58b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5856:	681a      	ldr	r2, [r3, #0]
   d5858:	07d2      	lsls	r2, r2, #31
   d585a:	bf5c      	itt	pl
   d585c:	2201      	movpl	r2, #1
   d585e:	601a      	strpl	r2, [r3, #0]
   d5860:	4b14      	ldr	r3, [pc, #80]	; (d58b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5862:	681a      	ldr	r2, [r3, #0]
   d5864:	07d0      	lsls	r0, r2, #31
   d5866:	bf5c      	itt	pl
   d5868:	2201      	movpl	r2, #1
   d586a:	601a      	strpl	r2, [r3, #0]
   d586c:	4b12      	ldr	r3, [pc, #72]	; (d58b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d586e:	681a      	ldr	r2, [r3, #0]
   d5870:	07d1      	lsls	r1, r2, #31
   d5872:	bf5c      	itt	pl
   d5874:	2201      	movpl	r2, #1
   d5876:	601a      	strpl	r2, [r3, #0]
   d5878:	4b10      	ldr	r3, [pc, #64]	; (d58bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d587a:	681a      	ldr	r2, [r3, #0]
   d587c:	07d2      	lsls	r2, r2, #31
   d587e:	bf5c      	itt	pl
   d5880:	2201      	movpl	r2, #1
   d5882:	601a      	strpl	r2, [r3, #0]
   d5884:	4b0e      	ldr	r3, [pc, #56]	; (d58c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5886:	681a      	ldr	r2, [r3, #0]
   d5888:	07d0      	lsls	r0, r2, #31
   d588a:	bf5c      	itt	pl
   d588c:	2201      	movpl	r2, #1
   d588e:	601a      	strpl	r2, [r3, #0]
   d5890:	4b0c      	ldr	r3, [pc, #48]	; (d58c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5892:	681a      	ldr	r2, [r3, #0]
   d5894:	07d1      	lsls	r1, r2, #31
   d5896:	bf5c      	itt	pl
   d5898:	2201      	movpl	r2, #1
   d589a:	601a      	strpl	r2, [r3, #0]
   d589c:	4b0a      	ldr	r3, [pc, #40]	; (d58c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d589e:	681a      	ldr	r2, [r3, #0]
   d58a0:	07d2      	lsls	r2, r2, #31
   d58a2:	bf5c      	itt	pl
   d58a4:	2201      	movpl	r2, #1
   d58a6:	601a      	strpl	r2, [r3, #0]
   d58a8:	4770      	bx	lr
   d58aa:	bf00      	nop
   d58ac:	2003e7ec 	.word	0x2003e7ec
   d58b0:	2003e7e8 	.word	0x2003e7e8
   d58b4:	2003e7e4 	.word	0x2003e7e4
   d58b8:	2003e7e0 	.word	0x2003e7e0
   d58bc:	2003e7dc 	.word	0x2003e7dc
   d58c0:	2003e7d8 	.word	0x2003e7d8
   d58c4:	2003e7d4 	.word	0x2003e7d4
   d58c8:	2003e7d0 	.word	0x2003e7d0

000d58cc <__aeabi_drsub>:
   d58cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d58d0:	e002      	b.n	d58d8 <__adddf3>
   d58d2:	bf00      	nop

000d58d4 <__aeabi_dsub>:
   d58d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d58d8 <__adddf3>:
   d58d8:	b530      	push	{r4, r5, lr}
   d58da:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d58de:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d58e2:	ea94 0f05 	teq	r4, r5
   d58e6:	bf08      	it	eq
   d58e8:	ea90 0f02 	teqeq	r0, r2
   d58ec:	bf1f      	itttt	ne
   d58ee:	ea54 0c00 	orrsne.w	ip, r4, r0
   d58f2:	ea55 0c02 	orrsne.w	ip, r5, r2
   d58f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d58fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d58fe:	f000 80e2 	beq.w	d5ac6 <__adddf3+0x1ee>
   d5902:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5906:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d590a:	bfb8      	it	lt
   d590c:	426d      	neglt	r5, r5
   d590e:	dd0c      	ble.n	d592a <__adddf3+0x52>
   d5910:	442c      	add	r4, r5
   d5912:	ea80 0202 	eor.w	r2, r0, r2
   d5916:	ea81 0303 	eor.w	r3, r1, r3
   d591a:	ea82 0000 	eor.w	r0, r2, r0
   d591e:	ea83 0101 	eor.w	r1, r3, r1
   d5922:	ea80 0202 	eor.w	r2, r0, r2
   d5926:	ea81 0303 	eor.w	r3, r1, r3
   d592a:	2d36      	cmp	r5, #54	; 0x36
   d592c:	bf88      	it	hi
   d592e:	bd30      	pophi	{r4, r5, pc}
   d5930:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5934:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5938:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d593c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5940:	d002      	beq.n	d5948 <__adddf3+0x70>
   d5942:	4240      	negs	r0, r0
   d5944:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5948:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d594c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5950:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5954:	d002      	beq.n	d595c <__adddf3+0x84>
   d5956:	4252      	negs	r2, r2
   d5958:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d595c:	ea94 0f05 	teq	r4, r5
   d5960:	f000 80a7 	beq.w	d5ab2 <__adddf3+0x1da>
   d5964:	f1a4 0401 	sub.w	r4, r4, #1
   d5968:	f1d5 0e20 	rsbs	lr, r5, #32
   d596c:	db0d      	blt.n	d598a <__adddf3+0xb2>
   d596e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5972:	fa22 f205 	lsr.w	r2, r2, r5
   d5976:	1880      	adds	r0, r0, r2
   d5978:	f141 0100 	adc.w	r1, r1, #0
   d597c:	fa03 f20e 	lsl.w	r2, r3, lr
   d5980:	1880      	adds	r0, r0, r2
   d5982:	fa43 f305 	asr.w	r3, r3, r5
   d5986:	4159      	adcs	r1, r3
   d5988:	e00e      	b.n	d59a8 <__adddf3+0xd0>
   d598a:	f1a5 0520 	sub.w	r5, r5, #32
   d598e:	f10e 0e20 	add.w	lr, lr, #32
   d5992:	2a01      	cmp	r2, #1
   d5994:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5998:	bf28      	it	cs
   d599a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d599e:	fa43 f305 	asr.w	r3, r3, r5
   d59a2:	18c0      	adds	r0, r0, r3
   d59a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d59a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d59ac:	d507      	bpl.n	d59be <__adddf3+0xe6>
   d59ae:	f04f 0e00 	mov.w	lr, #0
   d59b2:	f1dc 0c00 	rsbs	ip, ip, #0
   d59b6:	eb7e 0000 	sbcs.w	r0, lr, r0
   d59ba:	eb6e 0101 	sbc.w	r1, lr, r1
   d59be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d59c2:	d31b      	bcc.n	d59fc <__adddf3+0x124>
   d59c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d59c8:	d30c      	bcc.n	d59e4 <__adddf3+0x10c>
   d59ca:	0849      	lsrs	r1, r1, #1
   d59cc:	ea5f 0030 	movs.w	r0, r0, rrx
   d59d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d59d4:	f104 0401 	add.w	r4, r4, #1
   d59d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d59dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d59e0:	f080 809a 	bcs.w	d5b18 <__adddf3+0x240>
   d59e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d59e8:	bf08      	it	eq
   d59ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d59ee:	f150 0000 	adcs.w	r0, r0, #0
   d59f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d59f6:	ea41 0105 	orr.w	r1, r1, r5
   d59fa:	bd30      	pop	{r4, r5, pc}
   d59fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5a00:	4140      	adcs	r0, r0
   d5a02:	eb41 0101 	adc.w	r1, r1, r1
   d5a06:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5a0a:	f1a4 0401 	sub.w	r4, r4, #1
   d5a0e:	d1e9      	bne.n	d59e4 <__adddf3+0x10c>
   d5a10:	f091 0f00 	teq	r1, #0
   d5a14:	bf04      	itt	eq
   d5a16:	4601      	moveq	r1, r0
   d5a18:	2000      	moveq	r0, #0
   d5a1a:	fab1 f381 	clz	r3, r1
   d5a1e:	bf08      	it	eq
   d5a20:	3320      	addeq	r3, #32
   d5a22:	f1a3 030b 	sub.w	r3, r3, #11
   d5a26:	f1b3 0220 	subs.w	r2, r3, #32
   d5a2a:	da0c      	bge.n	d5a46 <__adddf3+0x16e>
   d5a2c:	320c      	adds	r2, #12
   d5a2e:	dd08      	ble.n	d5a42 <__adddf3+0x16a>
   d5a30:	f102 0c14 	add.w	ip, r2, #20
   d5a34:	f1c2 020c 	rsb	r2, r2, #12
   d5a38:	fa01 f00c 	lsl.w	r0, r1, ip
   d5a3c:	fa21 f102 	lsr.w	r1, r1, r2
   d5a40:	e00c      	b.n	d5a5c <__adddf3+0x184>
   d5a42:	f102 0214 	add.w	r2, r2, #20
   d5a46:	bfd8      	it	le
   d5a48:	f1c2 0c20 	rsble	ip, r2, #32
   d5a4c:	fa01 f102 	lsl.w	r1, r1, r2
   d5a50:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5a54:	bfdc      	itt	le
   d5a56:	ea41 010c 	orrle.w	r1, r1, ip
   d5a5a:	4090      	lslle	r0, r2
   d5a5c:	1ae4      	subs	r4, r4, r3
   d5a5e:	bfa2      	ittt	ge
   d5a60:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5a64:	4329      	orrge	r1, r5
   d5a66:	bd30      	popge	{r4, r5, pc}
   d5a68:	ea6f 0404 	mvn.w	r4, r4
   d5a6c:	3c1f      	subs	r4, #31
   d5a6e:	da1c      	bge.n	d5aaa <__adddf3+0x1d2>
   d5a70:	340c      	adds	r4, #12
   d5a72:	dc0e      	bgt.n	d5a92 <__adddf3+0x1ba>
   d5a74:	f104 0414 	add.w	r4, r4, #20
   d5a78:	f1c4 0220 	rsb	r2, r4, #32
   d5a7c:	fa20 f004 	lsr.w	r0, r0, r4
   d5a80:	fa01 f302 	lsl.w	r3, r1, r2
   d5a84:	ea40 0003 	orr.w	r0, r0, r3
   d5a88:	fa21 f304 	lsr.w	r3, r1, r4
   d5a8c:	ea45 0103 	orr.w	r1, r5, r3
   d5a90:	bd30      	pop	{r4, r5, pc}
   d5a92:	f1c4 040c 	rsb	r4, r4, #12
   d5a96:	f1c4 0220 	rsb	r2, r4, #32
   d5a9a:	fa20 f002 	lsr.w	r0, r0, r2
   d5a9e:	fa01 f304 	lsl.w	r3, r1, r4
   d5aa2:	ea40 0003 	orr.w	r0, r0, r3
   d5aa6:	4629      	mov	r1, r5
   d5aa8:	bd30      	pop	{r4, r5, pc}
   d5aaa:	fa21 f004 	lsr.w	r0, r1, r4
   d5aae:	4629      	mov	r1, r5
   d5ab0:	bd30      	pop	{r4, r5, pc}
   d5ab2:	f094 0f00 	teq	r4, #0
   d5ab6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5aba:	bf06      	itte	eq
   d5abc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5ac0:	3401      	addeq	r4, #1
   d5ac2:	3d01      	subne	r5, #1
   d5ac4:	e74e      	b.n	d5964 <__adddf3+0x8c>
   d5ac6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5aca:	bf18      	it	ne
   d5acc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5ad0:	d029      	beq.n	d5b26 <__adddf3+0x24e>
   d5ad2:	ea94 0f05 	teq	r4, r5
   d5ad6:	bf08      	it	eq
   d5ad8:	ea90 0f02 	teqeq	r0, r2
   d5adc:	d005      	beq.n	d5aea <__adddf3+0x212>
   d5ade:	ea54 0c00 	orrs.w	ip, r4, r0
   d5ae2:	bf04      	itt	eq
   d5ae4:	4619      	moveq	r1, r3
   d5ae6:	4610      	moveq	r0, r2
   d5ae8:	bd30      	pop	{r4, r5, pc}
   d5aea:	ea91 0f03 	teq	r1, r3
   d5aee:	bf1e      	ittt	ne
   d5af0:	2100      	movne	r1, #0
   d5af2:	2000      	movne	r0, #0
   d5af4:	bd30      	popne	{r4, r5, pc}
   d5af6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5afa:	d105      	bne.n	d5b08 <__adddf3+0x230>
   d5afc:	0040      	lsls	r0, r0, #1
   d5afe:	4149      	adcs	r1, r1
   d5b00:	bf28      	it	cs
   d5b02:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5b06:	bd30      	pop	{r4, r5, pc}
   d5b08:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5b0c:	bf3c      	itt	cc
   d5b0e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5b12:	bd30      	popcc	{r4, r5, pc}
   d5b14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5b18:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5b1c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5b20:	f04f 0000 	mov.w	r0, #0
   d5b24:	bd30      	pop	{r4, r5, pc}
   d5b26:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5b2a:	bf1a      	itte	ne
   d5b2c:	4619      	movne	r1, r3
   d5b2e:	4610      	movne	r0, r2
   d5b30:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5b34:	bf1c      	itt	ne
   d5b36:	460b      	movne	r3, r1
   d5b38:	4602      	movne	r2, r0
   d5b3a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5b3e:	bf06      	itte	eq
   d5b40:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5b44:	ea91 0f03 	teqeq	r1, r3
   d5b48:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5b4c:	bd30      	pop	{r4, r5, pc}
   d5b4e:	bf00      	nop

000d5b50 <__aeabi_ui2d>:
   d5b50:	f090 0f00 	teq	r0, #0
   d5b54:	bf04      	itt	eq
   d5b56:	2100      	moveq	r1, #0
   d5b58:	4770      	bxeq	lr
   d5b5a:	b530      	push	{r4, r5, lr}
   d5b5c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5b60:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5b64:	f04f 0500 	mov.w	r5, #0
   d5b68:	f04f 0100 	mov.w	r1, #0
   d5b6c:	e750      	b.n	d5a10 <__adddf3+0x138>
   d5b6e:	bf00      	nop

000d5b70 <__aeabi_i2d>:
   d5b70:	f090 0f00 	teq	r0, #0
   d5b74:	bf04      	itt	eq
   d5b76:	2100      	moveq	r1, #0
   d5b78:	4770      	bxeq	lr
   d5b7a:	b530      	push	{r4, r5, lr}
   d5b7c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5b80:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5b84:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5b88:	bf48      	it	mi
   d5b8a:	4240      	negmi	r0, r0
   d5b8c:	f04f 0100 	mov.w	r1, #0
   d5b90:	e73e      	b.n	d5a10 <__adddf3+0x138>
   d5b92:	bf00      	nop

000d5b94 <__aeabi_f2d>:
   d5b94:	0042      	lsls	r2, r0, #1
   d5b96:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5b9a:	ea4f 0131 	mov.w	r1, r1, rrx
   d5b9e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5ba2:	bf1f      	itttt	ne
   d5ba4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5ba8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5bac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5bb0:	4770      	bxne	lr
   d5bb2:	f092 0f00 	teq	r2, #0
   d5bb6:	bf14      	ite	ne
   d5bb8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5bbc:	4770      	bxeq	lr
   d5bbe:	b530      	push	{r4, r5, lr}
   d5bc0:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5bc4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5bc8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5bcc:	e720      	b.n	d5a10 <__adddf3+0x138>
   d5bce:	bf00      	nop

000d5bd0 <__aeabi_ul2d>:
   d5bd0:	ea50 0201 	orrs.w	r2, r0, r1
   d5bd4:	bf08      	it	eq
   d5bd6:	4770      	bxeq	lr
   d5bd8:	b530      	push	{r4, r5, lr}
   d5bda:	f04f 0500 	mov.w	r5, #0
   d5bde:	e00a      	b.n	d5bf6 <__aeabi_l2d+0x16>

000d5be0 <__aeabi_l2d>:
   d5be0:	ea50 0201 	orrs.w	r2, r0, r1
   d5be4:	bf08      	it	eq
   d5be6:	4770      	bxeq	lr
   d5be8:	b530      	push	{r4, r5, lr}
   d5bea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5bee:	d502      	bpl.n	d5bf6 <__aeabi_l2d+0x16>
   d5bf0:	4240      	negs	r0, r0
   d5bf2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5bf6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5bfa:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5bfe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5c02:	f43f aedc 	beq.w	d59be <__adddf3+0xe6>
   d5c06:	f04f 0203 	mov.w	r2, #3
   d5c0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5c0e:	bf18      	it	ne
   d5c10:	3203      	addne	r2, #3
   d5c12:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5c16:	bf18      	it	ne
   d5c18:	3203      	addne	r2, #3
   d5c1a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5c1e:	f1c2 0320 	rsb	r3, r2, #32
   d5c22:	fa00 fc03 	lsl.w	ip, r0, r3
   d5c26:	fa20 f002 	lsr.w	r0, r0, r2
   d5c2a:	fa01 fe03 	lsl.w	lr, r1, r3
   d5c2e:	ea40 000e 	orr.w	r0, r0, lr
   d5c32:	fa21 f102 	lsr.w	r1, r1, r2
   d5c36:	4414      	add	r4, r2
   d5c38:	e6c1      	b.n	d59be <__adddf3+0xe6>
   d5c3a:	bf00      	nop

000d5c3c <__aeabi_dmul>:
   d5c3c:	b570      	push	{r4, r5, r6, lr}
   d5c3e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5c42:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5c46:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5c4a:	bf1d      	ittte	ne
   d5c4c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5c50:	ea94 0f0c 	teqne	r4, ip
   d5c54:	ea95 0f0c 	teqne	r5, ip
   d5c58:	f000 f8de 	bleq	d5e18 <__aeabi_dmul+0x1dc>
   d5c5c:	442c      	add	r4, r5
   d5c5e:	ea81 0603 	eor.w	r6, r1, r3
   d5c62:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d5c66:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d5c6a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5c6e:	bf18      	it	ne
   d5c70:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5c74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5c78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5c7c:	d038      	beq.n	d5cf0 <__aeabi_dmul+0xb4>
   d5c7e:	fba0 ce02 	umull	ip, lr, r0, r2
   d5c82:	f04f 0500 	mov.w	r5, #0
   d5c86:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5c8a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5c8e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5c92:	f04f 0600 	mov.w	r6, #0
   d5c96:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5c9a:	f09c 0f00 	teq	ip, #0
   d5c9e:	bf18      	it	ne
   d5ca0:	f04e 0e01 	orrne.w	lr, lr, #1
   d5ca4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5ca8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5cac:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5cb0:	d204      	bcs.n	d5cbc <__aeabi_dmul+0x80>
   d5cb2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5cb6:	416d      	adcs	r5, r5
   d5cb8:	eb46 0606 	adc.w	r6, r6, r6
   d5cbc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d5cc0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5cc4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d5cc8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5ccc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d5cd0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5cd4:	bf88      	it	hi
   d5cd6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5cda:	d81e      	bhi.n	d5d1a <__aeabi_dmul+0xde>
   d5cdc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5ce0:	bf08      	it	eq
   d5ce2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d5ce6:	f150 0000 	adcs.w	r0, r0, #0
   d5cea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5cee:	bd70      	pop	{r4, r5, r6, pc}
   d5cf0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5cf4:	ea46 0101 	orr.w	r1, r6, r1
   d5cf8:	ea40 0002 	orr.w	r0, r0, r2
   d5cfc:	ea81 0103 	eor.w	r1, r1, r3
   d5d00:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5d04:	bfc2      	ittt	gt
   d5d06:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5d0a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5d0e:	bd70      	popgt	{r4, r5, r6, pc}
   d5d10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5d14:	f04f 0e00 	mov.w	lr, #0
   d5d18:	3c01      	subs	r4, #1
   d5d1a:	f300 80ab 	bgt.w	d5e74 <__aeabi_dmul+0x238>
   d5d1e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d5d22:	bfde      	ittt	le
   d5d24:	2000      	movle	r0, #0
   d5d26:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d5d2a:	bd70      	pople	{r4, r5, r6, pc}
   d5d2c:	f1c4 0400 	rsb	r4, r4, #0
   d5d30:	3c20      	subs	r4, #32
   d5d32:	da35      	bge.n	d5da0 <__aeabi_dmul+0x164>
   d5d34:	340c      	adds	r4, #12
   d5d36:	dc1b      	bgt.n	d5d70 <__aeabi_dmul+0x134>
   d5d38:	f104 0414 	add.w	r4, r4, #20
   d5d3c:	f1c4 0520 	rsb	r5, r4, #32
   d5d40:	fa00 f305 	lsl.w	r3, r0, r5
   d5d44:	fa20 f004 	lsr.w	r0, r0, r4
   d5d48:	fa01 f205 	lsl.w	r2, r1, r5
   d5d4c:	ea40 0002 	orr.w	r0, r0, r2
   d5d50:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d5d54:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5d58:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5d5c:	fa21 f604 	lsr.w	r6, r1, r4
   d5d60:	eb42 0106 	adc.w	r1, r2, r6
   d5d64:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5d68:	bf08      	it	eq
   d5d6a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5d6e:	bd70      	pop	{r4, r5, r6, pc}
   d5d70:	f1c4 040c 	rsb	r4, r4, #12
   d5d74:	f1c4 0520 	rsb	r5, r4, #32
   d5d78:	fa00 f304 	lsl.w	r3, r0, r4
   d5d7c:	fa20 f005 	lsr.w	r0, r0, r5
   d5d80:	fa01 f204 	lsl.w	r2, r1, r4
   d5d84:	ea40 0002 	orr.w	r0, r0, r2
   d5d88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5d8c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5d90:	f141 0100 	adc.w	r1, r1, #0
   d5d94:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5d98:	bf08      	it	eq
   d5d9a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5d9e:	bd70      	pop	{r4, r5, r6, pc}
   d5da0:	f1c4 0520 	rsb	r5, r4, #32
   d5da4:	fa00 f205 	lsl.w	r2, r0, r5
   d5da8:	ea4e 0e02 	orr.w	lr, lr, r2
   d5dac:	fa20 f304 	lsr.w	r3, r0, r4
   d5db0:	fa01 f205 	lsl.w	r2, r1, r5
   d5db4:	ea43 0302 	orr.w	r3, r3, r2
   d5db8:	fa21 f004 	lsr.w	r0, r1, r4
   d5dbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5dc0:	fa21 f204 	lsr.w	r2, r1, r4
   d5dc4:	ea20 0002 	bic.w	r0, r0, r2
   d5dc8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d5dcc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5dd0:	bf08      	it	eq
   d5dd2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5dd6:	bd70      	pop	{r4, r5, r6, pc}
   d5dd8:	f094 0f00 	teq	r4, #0
   d5ddc:	d10f      	bne.n	d5dfe <__aeabi_dmul+0x1c2>
   d5dde:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d5de2:	0040      	lsls	r0, r0, #1
   d5de4:	eb41 0101 	adc.w	r1, r1, r1
   d5de8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5dec:	bf08      	it	eq
   d5dee:	3c01      	subeq	r4, #1
   d5df0:	d0f7      	beq.n	d5de2 <__aeabi_dmul+0x1a6>
   d5df2:	ea41 0106 	orr.w	r1, r1, r6
   d5df6:	f095 0f00 	teq	r5, #0
   d5dfa:	bf18      	it	ne
   d5dfc:	4770      	bxne	lr
   d5dfe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d5e02:	0052      	lsls	r2, r2, #1
   d5e04:	eb43 0303 	adc.w	r3, r3, r3
   d5e08:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d5e0c:	bf08      	it	eq
   d5e0e:	3d01      	subeq	r5, #1
   d5e10:	d0f7      	beq.n	d5e02 <__aeabi_dmul+0x1c6>
   d5e12:	ea43 0306 	orr.w	r3, r3, r6
   d5e16:	4770      	bx	lr
   d5e18:	ea94 0f0c 	teq	r4, ip
   d5e1c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5e20:	bf18      	it	ne
   d5e22:	ea95 0f0c 	teqne	r5, ip
   d5e26:	d00c      	beq.n	d5e42 <__aeabi_dmul+0x206>
   d5e28:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5e2c:	bf18      	it	ne
   d5e2e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5e32:	d1d1      	bne.n	d5dd8 <__aeabi_dmul+0x19c>
   d5e34:	ea81 0103 	eor.w	r1, r1, r3
   d5e38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5e3c:	f04f 0000 	mov.w	r0, #0
   d5e40:	bd70      	pop	{r4, r5, r6, pc}
   d5e42:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5e46:	bf06      	itte	eq
   d5e48:	4610      	moveq	r0, r2
   d5e4a:	4619      	moveq	r1, r3
   d5e4c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5e50:	d019      	beq.n	d5e86 <__aeabi_dmul+0x24a>
   d5e52:	ea94 0f0c 	teq	r4, ip
   d5e56:	d102      	bne.n	d5e5e <__aeabi_dmul+0x222>
   d5e58:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d5e5c:	d113      	bne.n	d5e86 <__aeabi_dmul+0x24a>
   d5e5e:	ea95 0f0c 	teq	r5, ip
   d5e62:	d105      	bne.n	d5e70 <__aeabi_dmul+0x234>
   d5e64:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d5e68:	bf1c      	itt	ne
   d5e6a:	4610      	movne	r0, r2
   d5e6c:	4619      	movne	r1, r3
   d5e6e:	d10a      	bne.n	d5e86 <__aeabi_dmul+0x24a>
   d5e70:	ea81 0103 	eor.w	r1, r1, r3
   d5e74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5e78:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5e7c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5e80:	f04f 0000 	mov.w	r0, #0
   d5e84:	bd70      	pop	{r4, r5, r6, pc}
   d5e86:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5e8a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d5e8e:	bd70      	pop	{r4, r5, r6, pc}

000d5e90 <__aeabi_ddiv>:
   d5e90:	b570      	push	{r4, r5, r6, lr}
   d5e92:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5e96:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5e9a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5e9e:	bf1d      	ittte	ne
   d5ea0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5ea4:	ea94 0f0c 	teqne	r4, ip
   d5ea8:	ea95 0f0c 	teqne	r5, ip
   d5eac:	f000 f8a7 	bleq	d5ffe <__aeabi_ddiv+0x16e>
   d5eb0:	eba4 0405 	sub.w	r4, r4, r5
   d5eb4:	ea81 0e03 	eor.w	lr, r1, r3
   d5eb8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5ebc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5ec0:	f000 8088 	beq.w	d5fd4 <__aeabi_ddiv+0x144>
   d5ec4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5ec8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d5ecc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d5ed0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d5ed4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d5ed8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d5edc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d5ee0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d5ee4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d5ee8:	429d      	cmp	r5, r3
   d5eea:	bf08      	it	eq
   d5eec:	4296      	cmpeq	r6, r2
   d5eee:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d5ef2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d5ef6:	d202      	bcs.n	d5efe <__aeabi_ddiv+0x6e>
   d5ef8:	085b      	lsrs	r3, r3, #1
   d5efa:	ea4f 0232 	mov.w	r2, r2, rrx
   d5efe:	1ab6      	subs	r6, r6, r2
   d5f00:	eb65 0503 	sbc.w	r5, r5, r3
   d5f04:	085b      	lsrs	r3, r3, #1
   d5f06:	ea4f 0232 	mov.w	r2, r2, rrx
   d5f0a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d5f0e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d5f12:	ebb6 0e02 	subs.w	lr, r6, r2
   d5f16:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5f1a:	bf22      	ittt	cs
   d5f1c:	1ab6      	subcs	r6, r6, r2
   d5f1e:	4675      	movcs	r5, lr
   d5f20:	ea40 000c 	orrcs.w	r0, r0, ip
   d5f24:	085b      	lsrs	r3, r3, #1
   d5f26:	ea4f 0232 	mov.w	r2, r2, rrx
   d5f2a:	ebb6 0e02 	subs.w	lr, r6, r2
   d5f2e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5f32:	bf22      	ittt	cs
   d5f34:	1ab6      	subcs	r6, r6, r2
   d5f36:	4675      	movcs	r5, lr
   d5f38:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d5f3c:	085b      	lsrs	r3, r3, #1
   d5f3e:	ea4f 0232 	mov.w	r2, r2, rrx
   d5f42:	ebb6 0e02 	subs.w	lr, r6, r2
   d5f46:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5f4a:	bf22      	ittt	cs
   d5f4c:	1ab6      	subcs	r6, r6, r2
   d5f4e:	4675      	movcs	r5, lr
   d5f50:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d5f54:	085b      	lsrs	r3, r3, #1
   d5f56:	ea4f 0232 	mov.w	r2, r2, rrx
   d5f5a:	ebb6 0e02 	subs.w	lr, r6, r2
   d5f5e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5f62:	bf22      	ittt	cs
   d5f64:	1ab6      	subcs	r6, r6, r2
   d5f66:	4675      	movcs	r5, lr
   d5f68:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d5f6c:	ea55 0e06 	orrs.w	lr, r5, r6
   d5f70:	d018      	beq.n	d5fa4 <__aeabi_ddiv+0x114>
   d5f72:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d5f76:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d5f7a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d5f7e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d5f82:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d5f86:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d5f8a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d5f8e:	d1c0      	bne.n	d5f12 <__aeabi_ddiv+0x82>
   d5f90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5f94:	d10b      	bne.n	d5fae <__aeabi_ddiv+0x11e>
   d5f96:	ea41 0100 	orr.w	r1, r1, r0
   d5f9a:	f04f 0000 	mov.w	r0, #0
   d5f9e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d5fa2:	e7b6      	b.n	d5f12 <__aeabi_ddiv+0x82>
   d5fa4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5fa8:	bf04      	itt	eq
   d5faa:	4301      	orreq	r1, r0
   d5fac:	2000      	moveq	r0, #0
   d5fae:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5fb2:	bf88      	it	hi
   d5fb4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5fb8:	f63f aeaf 	bhi.w	d5d1a <__aeabi_dmul+0xde>
   d5fbc:	ebb5 0c03 	subs.w	ip, r5, r3
   d5fc0:	bf04      	itt	eq
   d5fc2:	ebb6 0c02 	subseq.w	ip, r6, r2
   d5fc6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5fca:	f150 0000 	adcs.w	r0, r0, #0
   d5fce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5fd2:	bd70      	pop	{r4, r5, r6, pc}
   d5fd4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d5fd8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d5fdc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d5fe0:	bfc2      	ittt	gt
   d5fe2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5fe6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5fea:	bd70      	popgt	{r4, r5, r6, pc}
   d5fec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5ff0:	f04f 0e00 	mov.w	lr, #0
   d5ff4:	3c01      	subs	r4, #1
   d5ff6:	e690      	b.n	d5d1a <__aeabi_dmul+0xde>
   d5ff8:	ea45 0e06 	orr.w	lr, r5, r6
   d5ffc:	e68d      	b.n	d5d1a <__aeabi_dmul+0xde>
   d5ffe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6002:	ea94 0f0c 	teq	r4, ip
   d6006:	bf08      	it	eq
   d6008:	ea95 0f0c 	teqeq	r5, ip
   d600c:	f43f af3b 	beq.w	d5e86 <__aeabi_dmul+0x24a>
   d6010:	ea94 0f0c 	teq	r4, ip
   d6014:	d10a      	bne.n	d602c <__aeabi_ddiv+0x19c>
   d6016:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d601a:	f47f af34 	bne.w	d5e86 <__aeabi_dmul+0x24a>
   d601e:	ea95 0f0c 	teq	r5, ip
   d6022:	f47f af25 	bne.w	d5e70 <__aeabi_dmul+0x234>
   d6026:	4610      	mov	r0, r2
   d6028:	4619      	mov	r1, r3
   d602a:	e72c      	b.n	d5e86 <__aeabi_dmul+0x24a>
   d602c:	ea95 0f0c 	teq	r5, ip
   d6030:	d106      	bne.n	d6040 <__aeabi_ddiv+0x1b0>
   d6032:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6036:	f43f aefd 	beq.w	d5e34 <__aeabi_dmul+0x1f8>
   d603a:	4610      	mov	r0, r2
   d603c:	4619      	mov	r1, r3
   d603e:	e722      	b.n	d5e86 <__aeabi_dmul+0x24a>
   d6040:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6044:	bf18      	it	ne
   d6046:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d604a:	f47f aec5 	bne.w	d5dd8 <__aeabi_dmul+0x19c>
   d604e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6052:	f47f af0d 	bne.w	d5e70 <__aeabi_dmul+0x234>
   d6056:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d605a:	f47f aeeb 	bne.w	d5e34 <__aeabi_dmul+0x1f8>
   d605e:	e712      	b.n	d5e86 <__aeabi_dmul+0x24a>

000d6060 <__aeabi_d2f>:
   d6060:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6064:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6068:	bf24      	itt	cs
   d606a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d606e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d6072:	d90d      	bls.n	d6090 <__aeabi_d2f+0x30>
   d6074:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6078:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d607c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6080:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6084:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6088:	bf08      	it	eq
   d608a:	f020 0001 	biceq.w	r0, r0, #1
   d608e:	4770      	bx	lr
   d6090:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6094:	d121      	bne.n	d60da <__aeabi_d2f+0x7a>
   d6096:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d609a:	bfbc      	itt	lt
   d609c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d60a0:	4770      	bxlt	lr
   d60a2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d60a6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d60aa:	f1c2 0218 	rsb	r2, r2, #24
   d60ae:	f1c2 0c20 	rsb	ip, r2, #32
   d60b2:	fa10 f30c 	lsls.w	r3, r0, ip
   d60b6:	fa20 f002 	lsr.w	r0, r0, r2
   d60ba:	bf18      	it	ne
   d60bc:	f040 0001 	orrne.w	r0, r0, #1
   d60c0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d60c4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d60c8:	fa03 fc0c 	lsl.w	ip, r3, ip
   d60cc:	ea40 000c 	orr.w	r0, r0, ip
   d60d0:	fa23 f302 	lsr.w	r3, r3, r2
   d60d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d60d8:	e7cc      	b.n	d6074 <__aeabi_d2f+0x14>
   d60da:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d60de:	d107      	bne.n	d60f0 <__aeabi_d2f+0x90>
   d60e0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d60e4:	bf1e      	ittt	ne
   d60e6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d60ea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d60ee:	4770      	bxne	lr
   d60f0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d60f4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d60f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d60fc:	4770      	bx	lr
   d60fe:	bf00      	nop

000d6100 <atol>:
   d6100:	220a      	movs	r2, #10
   d6102:	2100      	movs	r1, #0
   d6104:	f000 b8fe 	b.w	d6304 <strtol>

000d6108 <__cxa_atexit>:
   d6108:	b510      	push	{r4, lr}
   d610a:	4c05      	ldr	r4, [pc, #20]	; (d6120 <__cxa_atexit+0x18>)
   d610c:	4613      	mov	r3, r2
   d610e:	b12c      	cbz	r4, d611c <__cxa_atexit+0x14>
   d6110:	460a      	mov	r2, r1
   d6112:	4601      	mov	r1, r0
   d6114:	2002      	movs	r0, #2
   d6116:	f3af 8000 	nop.w
   d611a:	bd10      	pop	{r4, pc}
   d611c:	4620      	mov	r0, r4
   d611e:	bd10      	pop	{r4, pc}
   d6120:	00000000 	.word	0x00000000

000d6124 <memcpy>:
   d6124:	b510      	push	{r4, lr}
   d6126:	1e43      	subs	r3, r0, #1
   d6128:	440a      	add	r2, r1
   d612a:	4291      	cmp	r1, r2
   d612c:	d004      	beq.n	d6138 <memcpy+0x14>
   d612e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6132:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6136:	e7f8      	b.n	d612a <memcpy+0x6>
   d6138:	bd10      	pop	{r4, pc}

000d613a <memset>:
   d613a:	4402      	add	r2, r0
   d613c:	4603      	mov	r3, r0
   d613e:	4293      	cmp	r3, r2
   d6140:	d002      	beq.n	d6148 <memset+0xe>
   d6142:	f803 1b01 	strb.w	r1, [r3], #1
   d6146:	e7fa      	b.n	d613e <memset+0x4>
   d6148:	4770      	bx	lr
	...

000d614c <srand>:
   d614c:	b538      	push	{r3, r4, r5, lr}
   d614e:	4b12      	ldr	r3, [pc, #72]	; (d6198 <srand+0x4c>)
   d6150:	681c      	ldr	r4, [r3, #0]
   d6152:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6154:	4605      	mov	r5, r0
   d6156:	b9d3      	cbnz	r3, d618e <srand+0x42>
   d6158:	2018      	movs	r0, #24
   d615a:	f7fe fd6d 	bl	d4c38 <malloc>
   d615e:	f243 330e 	movw	r3, #13070	; 0x330e
   d6162:	63a0      	str	r0, [r4, #56]	; 0x38
   d6164:	8003      	strh	r3, [r0, #0]
   d6166:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d616a:	8043      	strh	r3, [r0, #2]
   d616c:	f241 2334 	movw	r3, #4660	; 0x1234
   d6170:	8083      	strh	r3, [r0, #4]
   d6172:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6176:	80c3      	strh	r3, [r0, #6]
   d6178:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d617c:	8103      	strh	r3, [r0, #8]
   d617e:	2305      	movs	r3, #5
   d6180:	8143      	strh	r3, [r0, #10]
   d6182:	230b      	movs	r3, #11
   d6184:	8183      	strh	r3, [r0, #12]
   d6186:	2201      	movs	r2, #1
   d6188:	2300      	movs	r3, #0
   d618a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d618e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6190:	2200      	movs	r2, #0
   d6192:	611d      	str	r5, [r3, #16]
   d6194:	615a      	str	r2, [r3, #20]
   d6196:	bd38      	pop	{r3, r4, r5, pc}
   d6198:	2003e240 	.word	0x2003e240

000d619c <strcmp>:
   d619c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d61a0:	f811 3b01 	ldrb.w	r3, [r1], #1
   d61a4:	2a01      	cmp	r2, #1
   d61a6:	bf28      	it	cs
   d61a8:	429a      	cmpcs	r2, r3
   d61aa:	d0f7      	beq.n	d619c <strcmp>
   d61ac:	1ad0      	subs	r0, r2, r3
   d61ae:	4770      	bx	lr

000d61b0 <strcpy>:
   d61b0:	4603      	mov	r3, r0
   d61b2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d61b6:	f803 2b01 	strb.w	r2, [r3], #1
   d61ba:	2a00      	cmp	r2, #0
   d61bc:	d1f9      	bne.n	d61b2 <strcpy+0x2>
   d61be:	4770      	bx	lr

000d61c0 <strlen>:
   d61c0:	4603      	mov	r3, r0
   d61c2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d61c6:	2a00      	cmp	r2, #0
   d61c8:	d1fb      	bne.n	d61c2 <strlen+0x2>
   d61ca:	1a18      	subs	r0, r3, r0
   d61cc:	3801      	subs	r0, #1
   d61ce:	4770      	bx	lr

000d61d0 <strncpy>:
   d61d0:	b510      	push	{r4, lr}
   d61d2:	4603      	mov	r3, r0
   d61d4:	b142      	cbz	r2, d61e8 <strncpy+0x18>
   d61d6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d61da:	f803 4b01 	strb.w	r4, [r3], #1
   d61de:	3a01      	subs	r2, #1
   d61e0:	2c00      	cmp	r4, #0
   d61e2:	d1f7      	bne.n	d61d4 <strncpy+0x4>
   d61e4:	441a      	add	r2, r3
   d61e6:	e000      	b.n	d61ea <strncpy+0x1a>
   d61e8:	bd10      	pop	{r4, pc}
   d61ea:	4293      	cmp	r3, r2
   d61ec:	d002      	beq.n	d61f4 <strncpy+0x24>
   d61ee:	f803 4b01 	strb.w	r4, [r3], #1
   d61f2:	e7fa      	b.n	d61ea <strncpy+0x1a>
   d61f4:	bd10      	pop	{r4, pc}
	...

000d61f8 <_strtol_r>:
   d61f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d61fc:	4680      	mov	r8, r0
   d61fe:	4840      	ldr	r0, [pc, #256]	; (d6300 <_strtol_r+0x108>)
   d6200:	f8d0 9000 	ldr.w	r9, [r0]
   d6204:	460f      	mov	r7, r1
   d6206:	463d      	mov	r5, r7
   d6208:	f815 4b01 	ldrb.w	r4, [r5], #1
   d620c:	eb09 0004 	add.w	r0, r9, r4
   d6210:	7840      	ldrb	r0, [r0, #1]
   d6212:	f000 0008 	and.w	r0, r0, #8
   d6216:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d621a:	b108      	cbz	r0, d6220 <_strtol_r+0x28>
   d621c:	462f      	mov	r7, r5
   d621e:	e7f2      	b.n	d6206 <_strtol_r+0xe>
   d6220:	2c2d      	cmp	r4, #45	; 0x2d
   d6222:	d103      	bne.n	d622c <_strtol_r+0x34>
   d6224:	1cbd      	adds	r5, r7, #2
   d6226:	787c      	ldrb	r4, [r7, #1]
   d6228:	2601      	movs	r6, #1
   d622a:	e003      	b.n	d6234 <_strtol_r+0x3c>
   d622c:	2c2b      	cmp	r4, #43	; 0x2b
   d622e:	bf04      	itt	eq
   d6230:	787c      	ldrbeq	r4, [r7, #1]
   d6232:	1cbd      	addeq	r5, r7, #2
   d6234:	b113      	cbz	r3, d623c <_strtol_r+0x44>
   d6236:	2b10      	cmp	r3, #16
   d6238:	d10a      	bne.n	d6250 <_strtol_r+0x58>
   d623a:	e05b      	b.n	d62f4 <_strtol_r+0xfc>
   d623c:	2c30      	cmp	r4, #48	; 0x30
   d623e:	d157      	bne.n	d62f0 <_strtol_r+0xf8>
   d6240:	7828      	ldrb	r0, [r5, #0]
   d6242:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d6246:	2858      	cmp	r0, #88	; 0x58
   d6248:	d14d      	bne.n	d62e6 <_strtol_r+0xee>
   d624a:	786c      	ldrb	r4, [r5, #1]
   d624c:	2310      	movs	r3, #16
   d624e:	3502      	adds	r5, #2
   d6250:	2e00      	cmp	r6, #0
   d6252:	bf14      	ite	ne
   d6254:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d6258:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d625c:	2700      	movs	r7, #0
   d625e:	fbbc faf3 	udiv	sl, ip, r3
   d6262:	4638      	mov	r0, r7
   d6264:	fb03 cc1a 	mls	ip, r3, sl, ip
   d6268:	eb09 0e04 	add.w	lr, r9, r4
   d626c:	f89e e001 	ldrb.w	lr, [lr, #1]
   d6270:	f01e 0f04 	tst.w	lr, #4
   d6274:	d001      	beq.n	d627a <_strtol_r+0x82>
   d6276:	3c30      	subs	r4, #48	; 0x30
   d6278:	e00b      	b.n	d6292 <_strtol_r+0x9a>
   d627a:	f01e 0e03 	ands.w	lr, lr, #3
   d627e:	d01b      	beq.n	d62b8 <_strtol_r+0xc0>
   d6280:	f1be 0f01 	cmp.w	lr, #1
   d6284:	bf0c      	ite	eq
   d6286:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d628a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d628e:	ebce 0404 	rsb	r4, lr, r4
   d6292:	42a3      	cmp	r3, r4
   d6294:	dd10      	ble.n	d62b8 <_strtol_r+0xc0>
   d6296:	f1b7 3fff 	cmp.w	r7, #4294967295
   d629a:	d00a      	beq.n	d62b2 <_strtol_r+0xba>
   d629c:	4550      	cmp	r0, sl
   d629e:	d806      	bhi.n	d62ae <_strtol_r+0xb6>
   d62a0:	d101      	bne.n	d62a6 <_strtol_r+0xae>
   d62a2:	4564      	cmp	r4, ip
   d62a4:	dc03      	bgt.n	d62ae <_strtol_r+0xb6>
   d62a6:	fb03 4000 	mla	r0, r3, r0, r4
   d62aa:	2701      	movs	r7, #1
   d62ac:	e001      	b.n	d62b2 <_strtol_r+0xba>
   d62ae:	f04f 37ff 	mov.w	r7, #4294967295
   d62b2:	f815 4b01 	ldrb.w	r4, [r5], #1
   d62b6:	e7d7      	b.n	d6268 <_strtol_r+0x70>
   d62b8:	1c7b      	adds	r3, r7, #1
   d62ba:	d10c      	bne.n	d62d6 <_strtol_r+0xde>
   d62bc:	2e00      	cmp	r6, #0
   d62be:	f04f 0322 	mov.w	r3, #34	; 0x22
   d62c2:	bf14      	ite	ne
   d62c4:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d62c8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d62cc:	f8c8 3000 	str.w	r3, [r8]
   d62d0:	b92a      	cbnz	r2, d62de <_strtol_r+0xe6>
   d62d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d62d6:	b106      	cbz	r6, d62da <_strtol_r+0xe2>
   d62d8:	4240      	negs	r0, r0
   d62da:	b172      	cbz	r2, d62fa <_strtol_r+0x102>
   d62dc:	b107      	cbz	r7, d62e0 <_strtol_r+0xe8>
   d62de:	1e69      	subs	r1, r5, #1
   d62e0:	6011      	str	r1, [r2, #0]
   d62e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d62e6:	2430      	movs	r4, #48	; 0x30
   d62e8:	2b00      	cmp	r3, #0
   d62ea:	d1b1      	bne.n	d6250 <_strtol_r+0x58>
   d62ec:	2308      	movs	r3, #8
   d62ee:	e7af      	b.n	d6250 <_strtol_r+0x58>
   d62f0:	230a      	movs	r3, #10
   d62f2:	e7ad      	b.n	d6250 <_strtol_r+0x58>
   d62f4:	2c30      	cmp	r4, #48	; 0x30
   d62f6:	d0a3      	beq.n	d6240 <_strtol_r+0x48>
   d62f8:	e7aa      	b.n	d6250 <_strtol_r+0x58>
   d62fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d62fe:	bf00      	nop
   d6300:	2003e1dc 	.word	0x2003e1dc

000d6304 <strtol>:
   d6304:	4613      	mov	r3, r2
   d6306:	460a      	mov	r2, r1
   d6308:	4601      	mov	r1, r0
   d630a:	4802      	ldr	r0, [pc, #8]	; (d6314 <strtol+0x10>)
   d630c:	6800      	ldr	r0, [r0, #0]
   d630e:	f7ff bf73 	b.w	d61f8 <_strtol_r>
   d6312:	bf00      	nop
   d6314:	2003e240 	.word	0x2003e240

000d6318 <dynalib_user>:
   d6318:	000d4021 000d405d 000d4089 000d408d     !@..]@...@...@..
   d6328:	00000000 656d6954 3025203a 253a6932     ....Time: %02i:%
   d6338:	3a693230 69323025 2d2d2d20 616c0020     02i:%02i --- .la
   d6348:	25203a74 6c202c66 3a676e6f 20662520     t: %f, long: %f 
   d6358:	6c25000a 696d2075 73696c6c 6e6f6365     ..%lu millisecon
   d6368:	74207364 6567206f 50472074 69662053     ds to get GPS fi
   d6378:	6f6e0078 636f6c20 6f697461 5047006e     x.no location.GP
   d6388:	00434d52 4d524e47 50470043 00414747     RMC.GNRMC.GPGGA.
   d6398:	47474e47 004e0041 00454e4e 00454e45     GNGGA.N.NNE.ENE.
   d63a8:	00455345 00455353 53530053 53570057     ESE.SSE.S.SSW.WS
   d63b8:	4e570057 4e4e0057 00000057              W.WNW.NNW...

000d63c4 <_ZTVN5spark13EthernetClassE>:
	...
   d63cc:	000d4cc7 000d4cbd 000d4cb3 000d4ca9     .L...L...L...L..
   d63dc:	000d4c9d 000d4c91 000d4c85 000d4c7d     .L...L...L..}L..
   d63ec:	000d4c73 000d4c69 000d554d 64756162     sL..iL..MU..baud
   d63fc:	72655300 006c6169 69726553 00316c61     .Serial.Serial1.
   d640c:	65707974 72617000 63006d61 6900646d     type.param.cmd.i
   d641c:	6e680064 74730064 66006d72 00746c69     d.hnd.strm.filt.
   d642c:	006c766c 48646461 6c646e61 72007265     lvl.addHandler.r
   d643c:	766f6d65 6e614865 72656c64 756e6500     emoveHandler.enu
   d644c:	6e61486d 72656c64 534a0073 74534e4f     mHandlers.JSONSt
   d645c:	6d616572 48676f4c 6c646e61 61007265     reamLogHandler.a
   d646c:	25007070 75303130 205d0020 00642500     pp.%010u .] .%d.
   d647c:	2800202c 00203a29 63005b20 2065646f     , .(): . [.code 
   d648c:	2500203d 65640069 6c696174 203d2073     = .%i.details = 
   d649c:	000a0d00 6e6c0066 006e6600 65646f63     ....f.ln.fn.code
   d64ac:	74656400 006c6961 656e6f6e 61727400     .detail.none.tra
   d64bc:	69006563 006f666e 6e726177 72726500     ce.info.warn.err
   d64cc:	7000726f 63696e61 6c6c6100 25005a00     or.panic.all.Z.%
   d64dc:	6433302b 3230253a 59250075 2d6d252d     +03d:%02u.%Y-%m-
   d64ec:	25546425 4d253a48 2553253a 7361007a     %dT%H:%M:%S%z.as
   d64fc:	6d697463 00000065                       ctime...

000d6504 <_ZTV9IPAddress>:
	...
   d650c:	000d4ffd 000d4fed 000d4fef              .O...O...O..

000d6518 <_ZTV9USBSerial>:
	...
   d6520:	000d50d5 000d5125 000d5133 000d4d71     .P..%Q..3Q..qM..
   d6530:	000d5111 000d50d7 000d50ed 000d511f     .Q...P...P...Q..
   d6540:	000d5103 000d50d1                       .Q...P..

000d6548 <_ZTV11USARTSerial>:
	...
   d6550:	000d51e1 000d5231 000d523f 000d4d71     .Q..1R..?R..qM..
   d6560:	000d51f5 000d5217 000d5203 000d522b     .Q...R...R..+R..
   d6570:	000d51e3 000d51e7                       .Q...Q..

000d6578 <_ZTVN5spark9MeshClassE>:
	...
   d6580:	000d534b 000d5341 000d5337 000d532d     KS..AS..7S..-S..
   d6590:	000d5321 000d5315 000d5309 000d5301     !S...S...S...S..
   d65a0:	000d52f7 000d52ed 000d554d              .R...R..MU..

000d65ac <_ZTVN5spark9WiFiClassE>:
	...
   d65b4:	000d54c7 000d54bd 000d54b3 000d5469     .T...T...T..iT..
   d65c4:	000d54a7 000d549b 000d548f 000d5487     .T...T...T...T..
   d65d4:	000d547d 000d5473 000d554d              }T..sT..MU..

000d65e0 <_ZTVN5spark12NetworkClassE>:
	...
   d65e8:	000d54e5 000d54ef 000d54f9 000d5503     .T...T...T...U..
   d65f8:	000d550d 000d5519 000d5525 000d5531     .U...U..%U..1U..
   d6608:	000d5539 000d5543 000d554d              9U..CU..MU..

000d6614 <_ctype_>:
   d6614:	20202000 20202020 28282020 20282828     .         ((((( 
   d6624:	20202020 20202020 20202020 20202020                     
   d6634:	10108820 10101010 10101010 10101010      ...............
   d6644:	04040410 04040404 10040404 10101010     ................
   d6654:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d6664:	01010101 01010101 01010101 10101010     ................
   d6674:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d6684:	02020202 02020202 02020202 10101010     ................
   d6694:	00000020 00000000 00000000 00000000      ...............
	...

000d6718 <__sf_fake_stdin>:
	...

000d6738 <__sf_fake_stdout>:
	...

000d6758 <__sf_fake_stderr>:
	...

000d6778 <link_const_variable_data_end>:
   d6778:	000d4245 	.word	0x000d4245
   d677c:	000d4261 	.word	0x000d4261
   d6780:	000d4265 	.word	0x000d4265
   d6784:	000d427d 	.word	0x000d427d
   d6788:	000d498d 	.word	0x000d498d
   d678c:	000d4cd1 	.word	0x000d4cd1
   d6790:	000d4d05 	.word	0x000d4d05
   d6794:	000d4d49 	.word	0x000d4d49
   d6798:	000d4e91 	.word	0x000d4e91
   d679c:	000d4ea1 	.word	0x000d4ea1
   d67a0:	000d4ec1 	.word	0x000d4ec1
   d67a4:	000d5419 	.word	0x000d5419
   d67a8:	000d54d1 	.word	0x000d54d1
   d67ac:	000d5619 	.word	0x000d5619
   d67b0:	000d563d 	.word	0x000d563d
   d67b4:	000d56c1 	.word	0x000d56c1
   d67b8:	000d5785 	.word	0x000d5785
   d67bc:	000d5849 	.word	0x000d5849
