
/home/brian/Particle/TMG39931/target/1.5.0/argon/TMG39931.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000024b4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d64d0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e370  000d64d4  0001e370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000418  2003e3d8  2003e3d8  0002e3d8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d653c  000d653c  0002653c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6564  000d6564  00026564  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c2716  00000000  00000000  00026568  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000e5d3  00000000  00000000  000e8c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002028  00000000  00000000  000f7251  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00030a1b  00000000  00000000  000f9279  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0002162f  00000000  00000000  00129c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00103284  00000000  00000000  0014b2c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001a8b7  00000000  00000000  0024e547  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003f90  00000000  00000000  00268dfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000bea0  00000000  00000000  0026cd90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 f823 	bl	d6078 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 f828 	bl	d608e <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e370 	.word	0x2003e370
   d4048:	000d64d4 	.word	0x000d64d4
   d404c:	2003e3d8 	.word	0x2003e3d8
   d4050:	2003e3d8 	.word	0x2003e3d8
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 fec5 	bl	d4de8 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d64c8 	.word	0x000d64c8
   d4080:	000d6490 	.word	0x000d6490

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b96c 	b.w	d4360 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f815 	bl	d40b8 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 be6b 	b.w	d4d6c <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 bb19 	b.w	d46cc <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 bb17 	b.w	d46cc <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d40ae:	6803      	ldr	r3, [r0, #0]
   d40b0:	b2c9      	uxtb	r1, r1
   d40b2:	689b      	ldr	r3, [r3, #8]
   d40b4:	4718      	bx	r3
	...

000d40b8 <loop>:
  tmgInit();
  delay(1000);
}

void loop()
{
   d40b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d40bc:	b085      	sub	sp, #20
  unsigned int data[9];
  
  // Start I2C Transmission, Select Data Register, Stop I2C Transmission
  Wire.beginTransmission(Addr);
   d40be:	f001 f93d 	bl	d533c <_Z19__fetch_global_Wirev>
   d40c2:	2139      	movs	r1, #57	; 0x39
   d40c4:	f000 fd23 	bl	d4b0e <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x94);
   d40c8:	f001 f938 	bl	d533c <_Z19__fetch_global_Wirev>
   d40cc:	2194      	movs	r1, #148	; 0x94
   d40ce:	f7ff ffee 	bl	d40ae <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d40d2:	f001 f933 	bl	d533c <_Z19__fetch_global_Wirev>
   d40d6:	f000 fd21 	bl	d4b1c <_ZN7TwoWire15endTransmissionEv>
  
  // Request 9 bytes of data
  Wire.requestFrom(Addr, 9);
   d40da:	f001 f92f 	bl	d533c <_Z19__fetch_global_Wirev>
   d40de:	2209      	movs	r2, #9
   d40e0:	2139      	movs	r1, #57	; 0x39
   d40e2:	f000 fd0d 	bl	d4b00 <_ZN7TwoWire11requestFromEhj>
   
  // Read the 9 bytes of data
  // cData channel LSB, cData channel MSB, Red channel LSB, Red channel MSB
  // Green channel LSB, Green channel MSB, Blue channel LSB, Blue channel MSB, proximity
  if(Wire.available() == 9) 
   d40e6:	f001 f929 	bl	d533c <_Z19__fetch_global_Wirev>
   d40ea:	6803      	ldr	r3, [r0, #0]
   d40ec:	691b      	ldr	r3, [r3, #16]
   d40ee:	4798      	blx	r3
   d40f0:	2809      	cmp	r0, #9
   d40f2:	d135      	bne.n	d4160 <loop+0xa8>
  {
    data[0] = Wire.read();
   d40f4:	f001 f922 	bl	d533c <_Z19__fetch_global_Wirev>
   d40f8:	6803      	ldr	r3, [r0, #0]
   d40fa:	695b      	ldr	r3, [r3, #20]
   d40fc:	4798      	blx	r3
   d40fe:	9003      	str	r0, [sp, #12]
    data[1] = Wire.read();
   d4100:	f001 f91c 	bl	d533c <_Z19__fetch_global_Wirev>
   d4104:	6803      	ldr	r3, [r0, #0]
   d4106:	695b      	ldr	r3, [r3, #20]
   d4108:	4798      	blx	r3
   d410a:	9002      	str	r0, [sp, #8]
    data[2] = Wire.read();
   d410c:	f001 f916 	bl	d533c <_Z19__fetch_global_Wirev>
   d4110:	6803      	ldr	r3, [r0, #0]
   d4112:	695b      	ldr	r3, [r3, #20]
   d4114:	4798      	blx	r3
   d4116:	4680      	mov	r8, r0
    data[3] = Wire.read();
   d4118:	f001 f910 	bl	d533c <_Z19__fetch_global_Wirev>
   d411c:	6803      	ldr	r3, [r0, #0]
   d411e:	695b      	ldr	r3, [r3, #20]
   d4120:	4798      	blx	r3
   d4122:	4681      	mov	r9, r0
    data[4] = Wire.read();
   d4124:	f001 f90a 	bl	d533c <_Z19__fetch_global_Wirev>
   d4128:	6803      	ldr	r3, [r0, #0]
   d412a:	695b      	ldr	r3, [r3, #20]
   d412c:	4798      	blx	r3
   d412e:	4683      	mov	fp, r0
    data[5] = Wire.read();
   d4130:	f001 f904 	bl	d533c <_Z19__fetch_global_Wirev>
   d4134:	6803      	ldr	r3, [r0, #0]
   d4136:	695b      	ldr	r3, [r3, #20]
   d4138:	4798      	blx	r3
   d413a:	4606      	mov	r6, r0
    data[6] = Wire.read();
   d413c:	f001 f8fe 	bl	d533c <_Z19__fetch_global_Wirev>
   d4140:	6803      	ldr	r3, [r0, #0]
   d4142:	695b      	ldr	r3, [r3, #20]
   d4144:	4798      	blx	r3
   d4146:	4604      	mov	r4, r0
    data[7] = Wire.read();
   d4148:	f001 f8f8 	bl	d533c <_Z19__fetch_global_Wirev>
   d414c:	6803      	ldr	r3, [r0, #0]
   d414e:	695b      	ldr	r3, [r3, #20]
   d4150:	4798      	blx	r3
   d4152:	4605      	mov	r5, r0
    data[8] = Wire.read();
   d4154:	f001 f8f2 	bl	d533c <_Z19__fetch_global_Wirev>
   d4158:	6803      	ldr	r3, [r0, #0]
   d415a:	695b      	ldr	r3, [r3, #20]
   d415c:	4798      	blx	r3
   d415e:	9001      	str	r0, [sp, #4]
  float red = data[3] * 256.0 + data[2];
  float green = data[5] * 256.0 + data[4];
  float blue = data[7] * 256.0 + data[6];
  
  // Output data to serial monitor       
  Serial.print("Green Color Luminance : ");
   d4160:	f000 fd42 	bl	d4be8 <_Z16_fetch_usbserialv>
   d4164:	494d      	ldr	r1, [pc, #308]	; (d429c <loop+0x1e4>)
   d4166:	f000 feb7 	bl	d4ed8 <_ZN5Print5printEPKc>
  Serial.println(green);
   d416a:	f000 fd3d 	bl	d4be8 <_Z16_fetch_usbserialv>
   d416e:	4682      	mov	sl, r0
   d4170:	4630      	mov	r0, r6
   d4172:	f001 fbb5 	bl	d58e0 <__aeabi_ui2d>
   d4176:	2200      	movs	r2, #0
   d4178:	4b49      	ldr	r3, [pc, #292]	; (d42a0 <loop+0x1e8>)
   d417a:	f001 fc27 	bl	d59cc <__aeabi_dmul>
   d417e:	4606      	mov	r6, r0
   d4180:	4658      	mov	r0, fp
   d4182:	460f      	mov	r7, r1
   d4184:	f001 fbac 	bl	d58e0 <__aeabi_ui2d>
   d4188:	4602      	mov	r2, r0
   d418a:	460b      	mov	r3, r1
   d418c:	4630      	mov	r0, r6
   d418e:	4639      	mov	r1, r7
   d4190:	f001 fa6a 	bl	d5668 <__adddf3>
   d4194:	f001 ff12 	bl	d5fbc <__aeabi_d2f>
   d4198:	2102      	movs	r1, #2
   d419a:	ee00 0a10 	vmov	s0, r0
   d419e:	4650      	mov	r0, sl
   d41a0:	f000 ffa1 	bl	d50e6 <_ZN5Print7printlnEfi>
  Serial.print("Red Color Luminance : ");
   d41a4:	f000 fd20 	bl	d4be8 <_Z16_fetch_usbserialv>
   d41a8:	493e      	ldr	r1, [pc, #248]	; (d42a4 <loop+0x1ec>)
   d41aa:	f000 fe95 	bl	d4ed8 <_ZN5Print5printEPKc>
  Serial.println(red)  ;
   d41ae:	f000 fd1b 	bl	d4be8 <_Z16_fetch_usbserialv>
   d41b2:	4682      	mov	sl, r0
   d41b4:	4648      	mov	r0, r9
   d41b6:	f001 fb93 	bl	d58e0 <__aeabi_ui2d>
   d41ba:	2200      	movs	r2, #0
   d41bc:	4b38      	ldr	r3, [pc, #224]	; (d42a0 <loop+0x1e8>)
   d41be:	f001 fc05 	bl	d59cc <__aeabi_dmul>
   d41c2:	4606      	mov	r6, r0
   d41c4:	4640      	mov	r0, r8
   d41c6:	460f      	mov	r7, r1
   d41c8:	f001 fb8a 	bl	d58e0 <__aeabi_ui2d>
   d41cc:	4602      	mov	r2, r0
   d41ce:	460b      	mov	r3, r1
   d41d0:	4630      	mov	r0, r6
   d41d2:	4639      	mov	r1, r7
   d41d4:	f001 fa48 	bl	d5668 <__adddf3>
   d41d8:	f001 fef0 	bl	d5fbc <__aeabi_d2f>
   d41dc:	2102      	movs	r1, #2
   d41de:	ee00 0a10 	vmov	s0, r0
   d41e2:	4650      	mov	r0, sl
   d41e4:	f000 ff7f 	bl	d50e6 <_ZN5Print7printlnEfi>
  Serial.print("Blue Color Luminance : ");
   d41e8:	f000 fcfe 	bl	d4be8 <_Z16_fetch_usbserialv>
   d41ec:	492e      	ldr	r1, [pc, #184]	; (d42a8 <loop+0x1f0>)
   d41ee:	f000 fe73 	bl	d4ed8 <_ZN5Print5printEPKc>
  Serial.println(blue) ;
   d41f2:	f000 fcf9 	bl	d4be8 <_Z16_fetch_usbserialv>
   d41f6:	4680      	mov	r8, r0
   d41f8:	4628      	mov	r0, r5
   d41fa:	f001 fb71 	bl	d58e0 <__aeabi_ui2d>
   d41fe:	2200      	movs	r2, #0
   d4200:	4b27      	ldr	r3, [pc, #156]	; (d42a0 <loop+0x1e8>)
   d4202:	f001 fbe3 	bl	d59cc <__aeabi_dmul>
   d4206:	4606      	mov	r6, r0
   d4208:	4620      	mov	r0, r4
   d420a:	460f      	mov	r7, r1
   d420c:	f001 fb68 	bl	d58e0 <__aeabi_ui2d>
   d4210:	4602      	mov	r2, r0
   d4212:	460b      	mov	r3, r1
   d4214:	4630      	mov	r0, r6
   d4216:	4639      	mov	r1, r7
   d4218:	f001 fa26 	bl	d5668 <__adddf3>
   d421c:	f001 fece 	bl	d5fbc <__aeabi_d2f>
   d4220:	2102      	movs	r1, #2
   d4222:	ee00 0a10 	vmov	s0, r0
   d4226:	4640      	mov	r0, r8
   d4228:	f000 ff5d 	bl	d50e6 <_ZN5Print7printlnEfi>
  Serial.print("InfraRed Luminance : ");
   d422c:	f000 fcdc 	bl	d4be8 <_Z16_fetch_usbserialv>
   d4230:	491e      	ldr	r1, [pc, #120]	; (d42ac <loop+0x1f4>)
   d4232:	f000 fe51 	bl	d4ed8 <_ZN5Print5printEPKc>
  Serial.println(cData) ;
   d4236:	f000 fcd7 	bl	d4be8 <_Z16_fetch_usbserialv>
   d423a:	4604      	mov	r4, r0
   d423c:	9802      	ldr	r0, [sp, #8]
   d423e:	f001 fb4f 	bl	d58e0 <__aeabi_ui2d>
   d4242:	2200      	movs	r2, #0
   d4244:	4b16      	ldr	r3, [pc, #88]	; (d42a0 <loop+0x1e8>)
   d4246:	f001 fbc1 	bl	d59cc <__aeabi_dmul>
   d424a:	4606      	mov	r6, r0
   d424c:	9803      	ldr	r0, [sp, #12]
   d424e:	460f      	mov	r7, r1
   d4250:	f001 fb46 	bl	d58e0 <__aeabi_ui2d>
   d4254:	460b      	mov	r3, r1
   d4256:	4602      	mov	r2, r0
   d4258:	4639      	mov	r1, r7
   d425a:	4630      	mov	r0, r6
   d425c:	f001 fa04 	bl	d5668 <__adddf3>
   d4260:	f001 feac 	bl	d5fbc <__aeabi_d2f>
   d4264:	2102      	movs	r1, #2
   d4266:	ee00 0a10 	vmov	s0, r0
   d426a:	4620      	mov	r0, r4
   d426c:	f000 ff3b 	bl	d50e6 <_ZN5Print7printlnEfi>
  Serial.print("Proximity of the device : ");
   d4270:	f000 fcba 	bl	d4be8 <_Z16_fetch_usbserialv>
   d4274:	490e      	ldr	r1, [pc, #56]	; (d42b0 <loop+0x1f8>)
   d4276:	f000 fe2f 	bl	d4ed8 <_ZN5Print5printEPKc>
  Serial.println(data[8]);
   d427a:	f000 fcb5 	bl	d4be8 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d427e:	220a      	movs	r2, #10
   d4280:	4604      	mov	r4, r0
   d4282:	9901      	ldr	r1, [sp, #4]
   d4284:	f000 fe45 	bl	d4f12 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4288:	4620      	mov	r0, r4
   d428a:	f000 fe2c 	bl	d4ee6 <_ZN5Print7printlnEv>
  delay(5000);
   d428e:	f241 3088 	movw	r0, #5000	; 0x1388
}
   d4292:	b005      	add	sp, #20
   d4294:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Serial.println(blue) ;
  Serial.print("InfraRed Luminance : ");
  Serial.println(cData) ;
  Serial.print("Proximity of the device : ");
  Serial.println(data[8]);
  delay(5000);
   d4298:	f000 bd47 	b.w	d4d2a <delay>
   d429c:	000d6114 	.word	0x000d6114
   d42a0:	40700000 	.word	0x40700000
   d42a4:	000d612d 	.word	0x000d612d
   d42a8:	000d6144 	.word	0x000d6144
   d42ac:	000d615c 	.word	0x000d615c
   d42b0:	000d6172 	.word	0x000d6172

000d42b4 <_Z7tmgInitv>:
}

void tmgInit() {
   d42b4:	b508      	push	{r3, lr}
  Serial.println("Initializing TMG3993");
   d42b6:	f000 fc97 	bl	d4be8 <_Z16_fetch_usbserialv>
   d42ba:	4928      	ldr	r1, [pc, #160]	; (d435c <_Z7tmgInitv+0xa8>)
   d42bc:	f000 fe1f 	bl	d4efe <_ZN5Print7printlnEPKc>
  // Start I2C Transmission
  Wire.beginTransmission(Addr);
   d42c0:	f001 f83c 	bl	d533c <_Z19__fetch_global_Wirev>
   d42c4:	2139      	movs	r1, #57	; 0x39
   d42c6:	f000 fc22 	bl	d4b0e <_ZN7TwoWire17beginTransmissionEi>
  // Select Enable register
  Wire.write(0x80);
   d42ca:	f001 f837 	bl	d533c <_Z19__fetch_global_Wirev>
   d42ce:	2180      	movs	r1, #128	; 0x80
   d42d0:	f7ff feed 	bl	d40ae <_ZN7TwoWire5writeEi>
  // Power ON, ALS enable, Proximity enable, Wait enable
  Wire.write(0x0F);
   d42d4:	f001 f832 	bl	d533c <_Z19__fetch_global_Wirev>
   d42d8:	210f      	movs	r1, #15
   d42da:	f7ff fee8 	bl	d40ae <_ZN7TwoWire5writeEi>
  // Stop I2C transmission
  Wire.endTransmission();
   d42de:	f001 f82d 	bl	d533c <_Z19__fetch_global_Wirev>
   d42e2:	f000 fc1b 	bl	d4b1c <_ZN7TwoWire15endTransmissionEv>

  // Start I2C Transmission
  Wire.beginTransmission(Addr);
   d42e6:	f001 f829 	bl	d533c <_Z19__fetch_global_Wirev>
   d42ea:	2139      	movs	r1, #57	; 0x39
   d42ec:	f000 fc0f 	bl	d4b0e <_ZN7TwoWire17beginTransmissionEi>
  // Select ADC integration time register
  Wire.write(0x81);
   d42f0:	f001 f824 	bl	d533c <_Z19__fetch_global_Wirev>
   d42f4:	2181      	movs	r1, #129	; 0x81
   d42f6:	f7ff feda 	bl	d40ae <_ZN7TwoWire5writeEi>
  // ATIME : 712ms, Max count = 65535 cycles
  Wire.write(0x00);
   d42fa:	f001 f81f 	bl	d533c <_Z19__fetch_global_Wirev>
   d42fe:	2100      	movs	r1, #0
   d4300:	f7ff fed5 	bl	d40ae <_ZN7TwoWire5writeEi>
  // Stop I2C transmission
  Wire.endTransmission();
   d4304:	f001 f81a 	bl	d533c <_Z19__fetch_global_Wirev>
   d4308:	f000 fc08 	bl	d4b1c <_ZN7TwoWire15endTransmissionEv>

  // Start I2C Transmission
  Wire.beginTransmission(Addr);
   d430c:	f001 f816 	bl	d533c <_Z19__fetch_global_Wirev>
   d4310:	2139      	movs	r1, #57	; 0x39
   d4312:	f000 fbfc 	bl	d4b0e <_ZN7TwoWire17beginTransmissionEi>
  // Select Wait time register
  Wire.write(0x83);
   d4316:	f001 f811 	bl	d533c <_Z19__fetch_global_Wirev>
   d431a:	2183      	movs	r1, #131	; 0x83
   d431c:	f7ff fec7 	bl	d40ae <_ZN7TwoWire5writeEi>
  // WTIME : 2.78ms
  Wire.write(0xFF);
   d4320:	f001 f80c 	bl	d533c <_Z19__fetch_global_Wirev>
   d4324:	21ff      	movs	r1, #255	; 0xff
   d4326:	f7ff fec2 	bl	d40ae <_ZN7TwoWire5writeEi>
  // Stop I2C transmission
  Wire.endTransmission();
   d432a:	f001 f807 	bl	d533c <_Z19__fetch_global_Wirev>
   d432e:	f000 fbf5 	bl	d4b1c <_ZN7TwoWire15endTransmissionEv>

  // Start I2C Transmission
  Wire.beginTransmission(Addr);
   d4332:	f001 f803 	bl	d533c <_Z19__fetch_global_Wirev>
   d4336:	2139      	movs	r1, #57	; 0x39
   d4338:	f000 fbe9 	bl	d4b0e <_ZN7TwoWire17beginTransmissionEi>
  // Select control register
  Wire.write(0x8F);
   d433c:	f000 fffe 	bl	d533c <_Z19__fetch_global_Wirev>
   d4340:	218f      	movs	r1, #143	; 0x8f
   d4342:	f7ff feb4 	bl	d40ae <_ZN7TwoWire5writeEi>
  // AGAIN is 1x
  Wire.write(0x00);
   d4346:	f000 fff9 	bl	d533c <_Z19__fetch_global_Wirev>
   d434a:	2100      	movs	r1, #0
   d434c:	f7ff feaf 	bl	d40ae <_ZN7TwoWire5writeEi>
  // Stop I2C transmission
  Wire.endTransmission();
   d4350:	f000 fff4 	bl	d533c <_Z19__fetch_global_Wirev>
   d4354:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  // Select control register
  Wire.write(0x8F);
  // AGAIN is 1x
  Wire.write(0x00);
  // Stop I2C transmission
  Wire.endTransmission();
   d4358:	f000 bbe0 	b.w	d4b1c <_ZN7TwoWire15endTransmissionEv>
   d435c:	000d618d 	.word	0x000d618d

000d4360 <setup>:

// TMG39931 I2C address is 0x39(57)
#define Addr 0x39
  
void setup()
{
   d4360:	b508      	push	{r3, lr}
  Wire.begin();
   d4362:	f000 ffeb 	bl	d533c <_Z19__fetch_global_Wirev>
   d4366:	f000 fb97 	bl	d4a98 <_ZN7TwoWire5beginEv>
  Serial.begin(9600);
   d436a:	f000 fc3d 	bl	d4be8 <_Z16_fetch_usbserialv>
   d436e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4372:	f000 fc2d 	bl	d4bd0 <_ZN9USBSerial5beginEl>
  delay(500);
   d4376:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d437a:	f000 fcd6 	bl	d4d2a <delay>
  tmgInit();
   d437e:	f7ff ff99 	bl	d42b4 <_Z7tmgInitv>
  delay(1000);
   d4382:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
   d4386:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  Wire.begin();
  Serial.begin(9600);
  delay(500);
  tmgInit();
  delay(1000);
   d438a:	f000 bcce 	b.w	d4d2a <delay>

000d438e <_GLOBAL__sub_I_setup>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d438e:	f000 b901 	b.w	d4594 <HAL_Pin_Map>
	...

000d4394 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4394:	b508      	push	{r3, lr}
   d4396:	4b02      	ldr	r3, [pc, #8]	; (d43a0 <HAL_USB_USART_Init+0xc>)
   d4398:	681b      	ldr	r3, [r3, #0]
   d439a:	681b      	ldr	r3, [r3, #0]
   d439c:	9301      	str	r3, [sp, #4]
   d439e:	bd08      	pop	{r3, pc}
   d43a0:	0003024c 	.word	0x0003024c

000d43a4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d43a4:	b508      	push	{r3, lr}
   d43a6:	4b02      	ldr	r3, [pc, #8]	; (d43b0 <HAL_USB_USART_Begin+0xc>)
   d43a8:	681b      	ldr	r3, [r3, #0]
   d43aa:	685b      	ldr	r3, [r3, #4]
   d43ac:	9301      	str	r3, [sp, #4]
   d43ae:	bd08      	pop	{r3, pc}
   d43b0:	0003024c 	.word	0x0003024c

000d43b4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d43b4:	b508      	push	{r3, lr}
   d43b6:	4b02      	ldr	r3, [pc, #8]	; (d43c0 <HAL_USB_USART_Available_Data+0xc>)
   d43b8:	681b      	ldr	r3, [r3, #0]
   d43ba:	691b      	ldr	r3, [r3, #16]
   d43bc:	9301      	str	r3, [sp, #4]
   d43be:	bd08      	pop	{r3, pc}
   d43c0:	0003024c 	.word	0x0003024c

000d43c4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d43c4:	b508      	push	{r3, lr}
   d43c6:	4b02      	ldr	r3, [pc, #8]	; (d43d0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d43c8:	681b      	ldr	r3, [r3, #0]
   d43ca:	695b      	ldr	r3, [r3, #20]
   d43cc:	9301      	str	r3, [sp, #4]
   d43ce:	bd08      	pop	{r3, pc}
   d43d0:	0003024c 	.word	0x0003024c

000d43d4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d43d4:	b508      	push	{r3, lr}
   d43d6:	4b02      	ldr	r3, [pc, #8]	; (d43e0 <HAL_USB_USART_Receive_Data+0xc>)
   d43d8:	681b      	ldr	r3, [r3, #0]
   d43da:	699b      	ldr	r3, [r3, #24]
   d43dc:	9301      	str	r3, [sp, #4]
   d43de:	bd08      	pop	{r3, pc}
   d43e0:	0003024c 	.word	0x0003024c

000d43e4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d43e4:	b508      	push	{r3, lr}
   d43e6:	4b02      	ldr	r3, [pc, #8]	; (d43f0 <HAL_USB_USART_Send_Data+0xc>)
   d43e8:	681b      	ldr	r3, [r3, #0]
   d43ea:	69db      	ldr	r3, [r3, #28]
   d43ec:	9301      	str	r3, [sp, #4]
   d43ee:	bd08      	pop	{r3, pc}
   d43f0:	0003024c 	.word	0x0003024c

000d43f4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d43f4:	b508      	push	{r3, lr}
   d43f6:	4b02      	ldr	r3, [pc, #8]	; (d4400 <HAL_USB_USART_Flush_Data+0xc>)
   d43f8:	681b      	ldr	r3, [r3, #0]
   d43fa:	6a1b      	ldr	r3, [r3, #32]
   d43fc:	9301      	str	r3, [sp, #4]
   d43fe:	bd08      	pop	{r3, pc}
   d4400:	0003024c 	.word	0x0003024c

000d4404 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4404:	b508      	push	{r3, lr}
   d4406:	4b02      	ldr	r3, [pc, #8]	; (d4410 <HAL_I2C_Begin+0xc>)
   d4408:	681b      	ldr	r3, [r3, #0]
   d440a:	68db      	ldr	r3, [r3, #12]
   d440c:	9301      	str	r3, [sp, #4]
   d440e:	bd08      	pop	{r3, pc}
   d4410:	00030228 	.word	0x00030228

000d4414 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d4414:	b508      	push	{r3, lr}
   d4416:	4b02      	ldr	r3, [pc, #8]	; (d4420 <HAL_I2C_Begin_Transmission+0xc>)
   d4418:	681b      	ldr	r3, [r3, #0]
   d441a:	699b      	ldr	r3, [r3, #24]
   d441c:	9301      	str	r3, [sp, #4]
   d441e:	bd08      	pop	{r3, pc}
   d4420:	00030228 	.word	0x00030228

000d4424 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4424:	b508      	push	{r3, lr}
   d4426:	4b02      	ldr	r3, [pc, #8]	; (d4430 <HAL_I2C_End_Transmission+0xc>)
   d4428:	681b      	ldr	r3, [r3, #0]
   d442a:	69db      	ldr	r3, [r3, #28]
   d442c:	9301      	str	r3, [sp, #4]
   d442e:	bd08      	pop	{r3, pc}
   d4430:	00030228 	.word	0x00030228

000d4434 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4434:	b508      	push	{r3, lr}
   d4436:	4b02      	ldr	r3, [pc, #8]	; (d4440 <HAL_I2C_Write_Data+0xc>)
   d4438:	681b      	ldr	r3, [r3, #0]
   d443a:	6a1b      	ldr	r3, [r3, #32]
   d443c:	9301      	str	r3, [sp, #4]
   d443e:	bd08      	pop	{r3, pc}
   d4440:	00030228 	.word	0x00030228

000d4444 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4444:	b508      	push	{r3, lr}
   d4446:	4b02      	ldr	r3, [pc, #8]	; (d4450 <HAL_I2C_Available_Data+0xc>)
   d4448:	681b      	ldr	r3, [r3, #0]
   d444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d444c:	9301      	str	r3, [sp, #4]
   d444e:	bd08      	pop	{r3, pc}
   d4450:	00030228 	.word	0x00030228

000d4454 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4454:	b508      	push	{r3, lr}
   d4456:	4b02      	ldr	r3, [pc, #8]	; (d4460 <HAL_I2C_Read_Data+0xc>)
   d4458:	681b      	ldr	r3, [r3, #0]
   d445a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d445c:	9301      	str	r3, [sp, #4]
   d445e:	bd08      	pop	{r3, pc}
   d4460:	00030228 	.word	0x00030228

000d4464 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4464:	b508      	push	{r3, lr}
   d4466:	4b02      	ldr	r3, [pc, #8]	; (d4470 <HAL_I2C_Peek_Data+0xc>)
   d4468:	681b      	ldr	r3, [r3, #0]
   d446a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d446c:	9301      	str	r3, [sp, #4]
   d446e:	bd08      	pop	{r3, pc}
   d4470:	00030228 	.word	0x00030228

000d4474 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4474:	b508      	push	{r3, lr}
   d4476:	4b02      	ldr	r3, [pc, #8]	; (d4480 <HAL_I2C_Flush_Data+0xc>)
   d4478:	681b      	ldr	r3, [r3, #0]
   d447a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d447c:	9301      	str	r3, [sp, #4]
   d447e:	bd08      	pop	{r3, pc}
   d4480:	00030228 	.word	0x00030228

000d4484 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4484:	b508      	push	{r3, lr}
   d4486:	4b02      	ldr	r3, [pc, #8]	; (d4490 <HAL_I2C_Init+0xc>)
   d4488:	681b      	ldr	r3, [r3, #0]
   d448a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d448c:	9301      	str	r3, [sp, #4]
   d448e:	bd08      	pop	{r3, pc}
   d4490:	00030228 	.word	0x00030228

000d4494 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d4494:	b508      	push	{r3, lr}
   d4496:	4b02      	ldr	r3, [pc, #8]	; (d44a0 <HAL_I2C_Request_Data_Ex+0xc>)
   d4498:	681b      	ldr	r3, [r3, #0]
   d449a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d449c:	9301      	str	r3, [sp, #4]
   d449e:	bd08      	pop	{r3, pc}
   d44a0:	00030228 	.word	0x00030228

000d44a4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d44a4:	b508      	push	{r3, lr}
   d44a6:	4b02      	ldr	r3, [pc, #8]	; (d44b0 <HAL_USART_Init+0xc>)
   d44a8:	681b      	ldr	r3, [r3, #0]
   d44aa:	681b      	ldr	r3, [r3, #0]
   d44ac:	9301      	str	r3, [sp, #4]
   d44ae:	bd08      	pop	{r3, pc}
   d44b0:	0003023c 	.word	0x0003023c

000d44b4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d44b4:	b508      	push	{r3, lr}
   d44b6:	4b02      	ldr	r3, [pc, #8]	; (d44c0 <HAL_USART_Write_Data+0xc>)
   d44b8:	681b      	ldr	r3, [r3, #0]
   d44ba:	68db      	ldr	r3, [r3, #12]
   d44bc:	9301      	str	r3, [sp, #4]
   d44be:	bd08      	pop	{r3, pc}
   d44c0:	0003023c 	.word	0x0003023c

000d44c4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <HAL_USART_Available_Data+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	691b      	ldr	r3, [r3, #16]
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	0003023c 	.word	0x0003023c

000d44d4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <HAL_USART_Read_Data+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	695b      	ldr	r3, [r3, #20]
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	0003023c 	.word	0x0003023c

000d44e4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <HAL_USART_Peek_Data+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	699b      	ldr	r3, [r3, #24]
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	0003023c 	.word	0x0003023c

000d44f4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b02      	ldr	r3, [pc, #8]	; (d4500 <HAL_USART_Flush_Data+0xc>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	69db      	ldr	r3, [r3, #28]
   d44fc:	9301      	str	r3, [sp, #4]
   d44fe:	bd08      	pop	{r3, pc}
   d4500:	0003023c 	.word	0x0003023c

000d4504 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b02      	ldr	r3, [pc, #8]	; (d4510 <HAL_USART_Available_Data_For_Write+0xc>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d450c:	9301      	str	r3, [sp, #4]
   d450e:	bd08      	pop	{r3, pc}
   d4510:	0003023c 	.word	0x0003023c

000d4514 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4514:	b508      	push	{r3, lr}
   d4516:	4b02      	ldr	r3, [pc, #8]	; (d4520 <inet_inet_ntop+0xc>)
   d4518:	681b      	ldr	r3, [r3, #0]
   d451a:	695b      	ldr	r3, [r3, #20]
   d451c:	9301      	str	r3, [sp, #4]
   d451e:	bd08      	pop	{r3, pc}
   d4520:	00030264 	.word	0x00030264

000d4524 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4524:	b508      	push	{r3, lr}
   d4526:	4b02      	ldr	r3, [pc, #8]	; (d4530 <os_thread_is_current+0xc>)
   d4528:	681b      	ldr	r3, [r3, #0]
   d452a:	689b      	ldr	r3, [r3, #8]
   d452c:	9301      	str	r3, [sp, #4]
   d452e:	bd08      	pop	{r3, pc}
   d4530:	00030248 	.word	0x00030248

000d4534 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4534:	b508      	push	{r3, lr}
   d4536:	4b02      	ldr	r3, [pc, #8]	; (d4540 <os_thread_join+0xc>)
   d4538:	681b      	ldr	r3, [r3, #0]
   d453a:	691b      	ldr	r3, [r3, #16]
   d453c:	9301      	str	r3, [sp, #4]
   d453e:	bd08      	pop	{r3, pc}
   d4540:	00030248 	.word	0x00030248

000d4544 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4544:	b508      	push	{r3, lr}
   d4546:	4b02      	ldr	r3, [pc, #8]	; (d4550 <os_thread_cleanup+0xc>)
   d4548:	681b      	ldr	r3, [r3, #0]
   d454a:	695b      	ldr	r3, [r3, #20]
   d454c:	9301      	str	r3, [sp, #4]
   d454e:	bd08      	pop	{r3, pc}
   d4550:	00030248 	.word	0x00030248

000d4554 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4554:	b508      	push	{r3, lr}
   d4556:	4b02      	ldr	r3, [pc, #8]	; (d4560 <os_mutex_recursive_create+0xc>)
   d4558:	681b      	ldr	r3, [r3, #0]
   d455a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d455c:	9301      	str	r3, [sp, #4]
   d455e:	bd08      	pop	{r3, pc}
   d4560:	00030248 	.word	0x00030248

000d4564 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4564:	b508      	push	{r3, lr}
   d4566:	4b02      	ldr	r3, [pc, #8]	; (d4570 <os_mutex_recursive_destroy+0xc>)
   d4568:	681b      	ldr	r3, [r3, #0]
   d456a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d456c:	9301      	str	r3, [sp, #4]
   d456e:	bd08      	pop	{r3, pc}
   d4570:	00030248 	.word	0x00030248

000d4574 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4574:	b508      	push	{r3, lr}
   d4576:	4b02      	ldr	r3, [pc, #8]	; (d4580 <HAL_RNG_GetRandomNumber+0xc>)
   d4578:	681b      	ldr	r3, [r3, #0]
   d457a:	685b      	ldr	r3, [r3, #4]
   d457c:	9301      	str	r3, [sp, #4]
   d457e:	bd08      	pop	{r3, pc}
   d4580:	00030218 	.word	0x00030218

000d4584 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4584:	b508      	push	{r3, lr}
   d4586:	4b02      	ldr	r3, [pc, #8]	; (d4590 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4588:	681b      	ldr	r3, [r3, #0]
   d458a:	695b      	ldr	r3, [r3, #20]
   d458c:	9301      	str	r3, [sp, #4]
   d458e:	bd08      	pop	{r3, pc}
   d4590:	00030218 	.word	0x00030218

000d4594 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4594:	b508      	push	{r3, lr}
   d4596:	4b02      	ldr	r3, [pc, #8]	; (d45a0 <HAL_Pin_Map+0xc>)
   d4598:	681b      	ldr	r3, [r3, #0]
   d459a:	681b      	ldr	r3, [r3, #0]
   d459c:	9301      	str	r3, [sp, #4]
   d459e:	bd08      	pop	{r3, pc}
   d45a0:	0003022c 	.word	0x0003022c

000d45a4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d45a4:	b508      	push	{r3, lr}
   d45a6:	4b02      	ldr	r3, [pc, #8]	; (d45b0 <netdb_freeaddrinfo+0xc>)
   d45a8:	681b      	ldr	r3, [r3, #0]
   d45aa:	689b      	ldr	r3, [r3, #8]
   d45ac:	9301      	str	r3, [sp, #4]
   d45ae:	bd08      	pop	{r3, pc}
   d45b0:	00030268 	.word	0x00030268

000d45b4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d45b4:	b508      	push	{r3, lr}
   d45b6:	4b02      	ldr	r3, [pc, #8]	; (d45c0 <netdb_getaddrinfo+0xc>)
   d45b8:	681b      	ldr	r3, [r3, #0]
   d45ba:	68db      	ldr	r3, [r3, #12]
   d45bc:	9301      	str	r3, [sp, #4]
   d45be:	bd08      	pop	{r3, pc}
   d45c0:	00030268 	.word	0x00030268

000d45c4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d45c4:	b508      	push	{r3, lr}
   d45c6:	4b02      	ldr	r3, [pc, #8]	; (d45d0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d45c8:	681b      	ldr	r3, [r3, #0]
   d45ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d45cc:	9301      	str	r3, [sp, #4]
   d45ce:	bd08      	pop	{r3, pc}
   d45d0:	00030244 	.word	0x00030244

000d45d4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d45d4:	b508      	push	{r3, lr}
   d45d6:	4b02      	ldr	r3, [pc, #8]	; (d45e0 <network_connect+0xc>)
   d45d8:	681b      	ldr	r3, [r3, #0]
   d45da:	685b      	ldr	r3, [r3, #4]
   d45dc:	9301      	str	r3, [sp, #4]
   d45de:	bd08      	pop	{r3, pc}
   d45e0:	00030240 	.word	0x00030240

000d45e4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d45e4:	b508      	push	{r3, lr}
   d45e6:	4b02      	ldr	r3, [pc, #8]	; (d45f0 <network_connecting+0xc>)
   d45e8:	681b      	ldr	r3, [r3, #0]
   d45ea:	689b      	ldr	r3, [r3, #8]
   d45ec:	9301      	str	r3, [sp, #4]
   d45ee:	bd08      	pop	{r3, pc}
   d45f0:	00030240 	.word	0x00030240

000d45f4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d45f4:	b508      	push	{r3, lr}
   d45f6:	4b02      	ldr	r3, [pc, #8]	; (d4600 <network_disconnect+0xc>)
   d45f8:	681b      	ldr	r3, [r3, #0]
   d45fa:	68db      	ldr	r3, [r3, #12]
   d45fc:	9301      	str	r3, [sp, #4]
   d45fe:	bd08      	pop	{r3, pc}
   d4600:	00030240 	.word	0x00030240

000d4604 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4604:	b508      	push	{r3, lr}
   d4606:	4b02      	ldr	r3, [pc, #8]	; (d4610 <network_ready+0xc>)
   d4608:	681b      	ldr	r3, [r3, #0]
   d460a:	691b      	ldr	r3, [r3, #16]
   d460c:	9301      	str	r3, [sp, #4]
   d460e:	bd08      	pop	{r3, pc}
   d4610:	00030240 	.word	0x00030240

000d4614 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4614:	b508      	push	{r3, lr}
   d4616:	4b02      	ldr	r3, [pc, #8]	; (d4620 <network_on+0xc>)
   d4618:	681b      	ldr	r3, [r3, #0]
   d461a:	695b      	ldr	r3, [r3, #20]
   d461c:	9301      	str	r3, [sp, #4]
   d461e:	bd08      	pop	{r3, pc}
   d4620:	00030240 	.word	0x00030240

000d4624 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4624:	b508      	push	{r3, lr}
   d4626:	4b02      	ldr	r3, [pc, #8]	; (d4630 <network_off+0xc>)
   d4628:	681b      	ldr	r3, [r3, #0]
   d462a:	699b      	ldr	r3, [r3, #24]
   d462c:	9301      	str	r3, [sp, #4]
   d462e:	bd08      	pop	{r3, pc}
   d4630:	00030240 	.word	0x00030240

000d4634 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4634:	b508      	push	{r3, lr}
   d4636:	4b02      	ldr	r3, [pc, #8]	; (d4640 <network_listen+0xc>)
   d4638:	681b      	ldr	r3, [r3, #0]
   d463a:	69db      	ldr	r3, [r3, #28]
   d463c:	9301      	str	r3, [sp, #4]
   d463e:	bd08      	pop	{r3, pc}
   d4640:	00030240 	.word	0x00030240

000d4644 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4644:	b508      	push	{r3, lr}
   d4646:	4b02      	ldr	r3, [pc, #8]	; (d4650 <network_listening+0xc>)
   d4648:	681b      	ldr	r3, [r3, #0]
   d464a:	6a1b      	ldr	r3, [r3, #32]
   d464c:	9301      	str	r3, [sp, #4]
   d464e:	bd08      	pop	{r3, pc}
   d4650:	00030240 	.word	0x00030240

000d4654 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b02      	ldr	r3, [pc, #8]	; (d4660 <network_set_listen_timeout+0xc>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d465c:	9301      	str	r3, [sp, #4]
   d465e:	bd08      	pop	{r3, pc}
   d4660:	00030240 	.word	0x00030240

000d4664 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4664:	b508      	push	{r3, lr}
   d4666:	4b02      	ldr	r3, [pc, #8]	; (d4670 <network_get_listen_timeout+0xc>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d466c:	9301      	str	r3, [sp, #4]
   d466e:	bd08      	pop	{r3, pc}
   d4670:	00030240 	.word	0x00030240

000d4674 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b02      	ldr	r3, [pc, #8]	; (d4680 <set_system_mode+0xc>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	685b      	ldr	r3, [r3, #4]
   d467c:	9301      	str	r3, [sp, #4]
   d467e:	bd08      	pop	{r3, pc}
   d4680:	00030220 	.word	0x00030220

000d4684 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b02      	ldr	r3, [pc, #8]	; (d4690 <system_delay_ms+0xc>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	695b      	ldr	r3, [r3, #20]
   d468c:	9301      	str	r3, [sp, #4]
   d468e:	bd08      	pop	{r3, pc}
   d4690:	00030220 	.word	0x00030220

000d4694 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4694:	b508      	push	{r3, lr}
   d4696:	4b03      	ldr	r3, [pc, #12]	; (d46a4 <system_ctrl_set_app_request_handler+0x10>)
   d4698:	681b      	ldr	r3, [r3, #0]
   d469a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d469e:	9301      	str	r3, [sp, #4]
   d46a0:	bd08      	pop	{r3, pc}
   d46a2:	0000      	.short	0x0000
   d46a4:	00030220 	.word	0x00030220

000d46a8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d46a8:	b508      	push	{r3, lr}
   d46aa:	4b03      	ldr	r3, [pc, #12]	; (d46b8 <system_ctrl_set_result+0x10>)
   d46ac:	681b      	ldr	r3, [r3, #0]
   d46ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d46b2:	9301      	str	r3, [sp, #4]
   d46b4:	bd08      	pop	{r3, pc}
   d46b6:	0000      	.short	0x0000
   d46b8:	00030220 	.word	0x00030220

000d46bc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d46bc:	b508      	push	{r3, lr}
   d46be:	4b02      	ldr	r3, [pc, #8]	; (d46c8 <malloc+0xc>)
   d46c0:	681b      	ldr	r3, [r3, #0]
   d46c2:	681b      	ldr	r3, [r3, #0]
   d46c4:	9301      	str	r3, [sp, #4]
   d46c6:	bd08      	pop	{r3, pc}
   d46c8:	0003021c 	.word	0x0003021c

000d46cc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d46cc:	b508      	push	{r3, lr}
   d46ce:	4b02      	ldr	r3, [pc, #8]	; (d46d8 <free+0xc>)
   d46d0:	681b      	ldr	r3, [r3, #0]
   d46d2:	685b      	ldr	r3, [r3, #4]
   d46d4:	9301      	str	r3, [sp, #4]
   d46d6:	bd08      	pop	{r3, pc}
   d46d8:	0003021c 	.word	0x0003021c

000d46dc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d46dc:	2300      	movs	r3, #0
   d46de:	461a      	mov	r2, r3
   d46e0:	6840      	ldr	r0, [r0, #4]
   d46e2:	f7ff bf77 	b.w	d45d4 <network_connect>

000d46e6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d46e6:	2200      	movs	r2, #0
   d46e8:	2102      	movs	r1, #2
   d46ea:	6840      	ldr	r0, [r0, #4]
   d46ec:	f7ff bf82 	b.w	d45f4 <network_disconnect>

000d46f0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d46f0:	2200      	movs	r2, #0
   d46f2:	4611      	mov	r1, r2
   d46f4:	6840      	ldr	r0, [r0, #4]
   d46f6:	f7ff bf75 	b.w	d45e4 <network_connecting>

000d46fa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d46fa:	2200      	movs	r2, #0
   d46fc:	4611      	mov	r1, r2
   d46fe:	6840      	ldr	r0, [r0, #4]
   d4700:	f7ff bf80 	b.w	d4604 <network_ready>

000d4704 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4704:	2300      	movs	r3, #0
   d4706:	461a      	mov	r2, r3
   d4708:	4619      	mov	r1, r3
   d470a:	6840      	ldr	r0, [r0, #4]
   d470c:	f7ff bf82 	b.w	d4614 <network_on>

000d4710 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4710:	2300      	movs	r3, #0
   d4712:	461a      	mov	r2, r3
   d4714:	4619      	mov	r1, r3
   d4716:	6840      	ldr	r0, [r0, #4]
   d4718:	f7ff bf84 	b.w	d4624 <network_off>

000d471c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d471c:	2200      	movs	r2, #0
   d471e:	f081 0101 	eor.w	r1, r1, #1
   d4722:	6840      	ldr	r0, [r0, #4]
   d4724:	f7ff bf86 	b.w	d4634 <network_listen>

000d4728 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4728:	2200      	movs	r2, #0
   d472a:	6840      	ldr	r0, [r0, #4]
   d472c:	f7ff bf92 	b.w	d4654 <network_set_listen_timeout>

000d4730 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4730:	2200      	movs	r2, #0
   d4732:	4611      	mov	r1, r2
   d4734:	6840      	ldr	r0, [r0, #4]
   d4736:	f7ff bf95 	b.w	d4664 <network_get_listen_timeout>

000d473a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d473a:	2200      	movs	r2, #0
   d473c:	4611      	mov	r1, r2
   d473e:	6840      	ldr	r0, [r0, #4]
   d4740:	f7ff bf80 	b.w	d4644 <network_listening>

000d4744 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4744:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4748:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d474a:	b095      	sub	sp, #84	; 0x54
   d474c:	4616      	mov	r6, r2
   d474e:	460d      	mov	r5, r1
   d4750:	4607      	mov	r7, r0
    IPAddress addr;
   d4752:	f000 faa9 	bl	d4ca8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d4756:	4621      	mov	r1, r4
   d4758:	2220      	movs	r2, #32
   d475a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d475c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d475e:	f001 fc96 	bl	d608e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4762:	2340      	movs	r3, #64	; 0x40
   d4764:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4766:	4621      	mov	r1, r4
   d4768:	466b      	mov	r3, sp
   d476a:	aa0c      	add	r2, sp, #48	; 0x30
   d476c:	4630      	mov	r0, r6
   d476e:	f7ff ff21 	bl	d45b4 <netdb_getaddrinfo>
    if (!r) {
   d4772:	4604      	mov	r4, r0
   d4774:	2800      	cmp	r0, #0
   d4776:	d144      	bne.n	d4802 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4778:	4602      	mov	r2, r0
   d477a:	2101      	movs	r1, #1
   d477c:	6868      	ldr	r0, [r5, #4]
   d477e:	f7ff ff41 	bl	d4604 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4782:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4784:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4786:	4622      	mov	r2, r4
   d4788:	6868      	ldr	r0, [r5, #4]
   d478a:	f7ff ff3b 	bl	d4604 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d478e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4790:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d4792:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4794:	2e00      	cmp	r6, #0
   d4796:	d034      	beq.n	d4802 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d4798:	2900      	cmp	r1, #0
   d479a:	d132      	bne.n	d4802 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d479c:	6873      	ldr	r3, [r6, #4]
   d479e:	2b02      	cmp	r3, #2
   d47a0:	d002      	beq.n	d47a8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d47a2:	2b0a      	cmp	r3, #10
   d47a4:	d009      	beq.n	d47ba <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d47a6:	e02a      	b.n	d47fe <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d47a8:	f1b8 0f00 	cmp.w	r8, #0
   d47ac:	d027      	beq.n	d47fe <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d47ae:	6971      	ldr	r1, [r6, #20]
   d47b0:	4638      	mov	r0, r7
   d47b2:	3104      	adds	r1, #4
   d47b4:	f000 faa5 	bl	d4d02 <_ZN9IPAddressaSEPKh>
   d47b8:	e020      	b.n	d47fc <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d47ba:	f1b9 0f00 	cmp.w	r9, #0
   d47be:	d01e      	beq.n	d47fe <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d47c0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d47c2:	2211      	movs	r2, #17
   d47c4:	a801      	add	r0, sp, #4
   d47c6:	f001 fc62 	bl	d608e <memset>
                    a.v = 6;
   d47ca:	2306      	movs	r3, #6
   d47cc:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d47d0:	ad01      	add	r5, sp, #4
   d47d2:	f104 0308 	add.w	r3, r4, #8
   d47d6:	3418      	adds	r4, #24
   d47d8:	6818      	ldr	r0, [r3, #0]
   d47da:	6859      	ldr	r1, [r3, #4]
   d47dc:	462a      	mov	r2, r5
   d47de:	c203      	stmia	r2!, {r0, r1}
   d47e0:	3308      	adds	r3, #8
   d47e2:	42a3      	cmp	r3, r4
   d47e4:	4615      	mov	r5, r2
   d47e6:	d1f7      	bne.n	d47d8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d47e8:	a901      	add	r1, sp, #4
   d47ea:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d47ec:	ad07      	add	r5, sp, #28
   d47ee:	f000 fa69 	bl	d4cc4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d47f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d47f4:	1d3c      	adds	r4, r7, #4
   d47f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d47f8:	682b      	ldr	r3, [r5, #0]
   d47fa:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d47fc:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d47fe:	69f6      	ldr	r6, [r6, #28]
   d4800:	e7c8      	b.n	d4794 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4802:	9800      	ldr	r0, [sp, #0]
   d4804:	f7ff fece 	bl	d45a4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4808:	4638      	mov	r0, r7
   d480a:	b015      	add	sp, #84	; 0x54
   d480c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4810 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4810:	4b02      	ldr	r3, [pc, #8]	; (d481c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4812:	4a03      	ldr	r2, [pc, #12]	; (d4820 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4814:	601a      	str	r2, [r3, #0]
   d4816:	2200      	movs	r2, #0
   d4818:	605a      	str	r2, [r3, #4]
   d481a:	4770      	bx	lr
   d481c:	2003e3dc 	.word	0x2003e3dc
   d4820:	000d61ac 	.word	0x000d61ac

000d4824 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4824:	2200      	movs	r2, #0
   d4826:	4611      	mov	r1, r2
   d4828:	6840      	ldr	r0, [r0, #4]
   d482a:	f7ff beeb 	b.w	d4604 <network_ready>

000d482e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d482e:	2200      	movs	r2, #0
   d4830:	4611      	mov	r1, r2
   d4832:	6840      	ldr	r0, [r0, #4]
   d4834:	f7ff bf06 	b.w	d4644 <network_listening>

000d4838 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4838:	2200      	movs	r2, #0
   d483a:	4611      	mov	r1, r2
   d483c:	6840      	ldr	r0, [r0, #4]
   d483e:	f7ff bf11 	b.w	d4664 <network_get_listen_timeout>

000d4842 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4842:	2200      	movs	r2, #0
   d4844:	6840      	ldr	r0, [r0, #4]
   d4846:	f7ff bf05 	b.w	d4654 <network_set_listen_timeout>

000d484a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d484a:	2200      	movs	r2, #0
   d484c:	f081 0101 	eor.w	r1, r1, #1
   d4850:	6840      	ldr	r0, [r0, #4]
   d4852:	f7ff beef 	b.w	d4634 <network_listen>

000d4856 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d4856:	2300      	movs	r3, #0
   d4858:	461a      	mov	r2, r3
   d485a:	4619      	mov	r1, r3
   d485c:	6840      	ldr	r0, [r0, #4]
   d485e:	f7ff bee1 	b.w	d4624 <network_off>

000d4862 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d4862:	2300      	movs	r3, #0
   d4864:	461a      	mov	r2, r3
   d4866:	4619      	mov	r1, r3
   d4868:	6840      	ldr	r0, [r0, #4]
   d486a:	f7ff bed3 	b.w	d4614 <network_on>

000d486e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d486e:	2200      	movs	r2, #0
   d4870:	4611      	mov	r1, r2
   d4872:	6840      	ldr	r0, [r0, #4]
   d4874:	f7ff beb6 	b.w	d45e4 <network_connecting>

000d4878 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4878:	2200      	movs	r2, #0
   d487a:	2102      	movs	r1, #2
   d487c:	6840      	ldr	r0, [r0, #4]
   d487e:	f7ff beb9 	b.w	d45f4 <network_disconnect>

000d4882 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4882:	2300      	movs	r3, #0
   d4884:	461a      	mov	r2, r3
   d4886:	6840      	ldr	r0, [r0, #4]
   d4888:	f7ff bea4 	b.w	d45d4 <network_connect>

000d488c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d488c:	4b02      	ldr	r3, [pc, #8]	; (d4898 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d488e:	2204      	movs	r2, #4
   d4890:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d4892:	4a02      	ldr	r2, [pc, #8]	; (d489c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d4894:	601a      	str	r2, [r3, #0]
   d4896:	4770      	bx	lr
   d4898:	2003e3e4 	.word	0x2003e3e4
   d489c:	000d61e0 	.word	0x000d61e0

000d48a0 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d48a0:	2200      	movs	r2, #0
   d48a2:	4611      	mov	r1, r2
   d48a4:	6840      	ldr	r0, [r0, #4]
   d48a6:	f7ff becd 	b.w	d4644 <network_listening>

000d48aa <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d48aa:	2200      	movs	r2, #0
   d48ac:	4611      	mov	r1, r2
   d48ae:	6840      	ldr	r0, [r0, #4]
   d48b0:	f7ff bed8 	b.w	d4664 <network_get_listen_timeout>

000d48b4 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d48b4:	2200      	movs	r2, #0
   d48b6:	6840      	ldr	r0, [r0, #4]
   d48b8:	f7ff becc 	b.w	d4654 <network_set_listen_timeout>

000d48bc <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d48bc:	2200      	movs	r2, #0
   d48be:	f081 0101 	eor.w	r1, r1, #1
   d48c2:	6840      	ldr	r0, [r0, #4]
   d48c4:	f7ff beb6 	b.w	d4634 <network_listen>

000d48c8 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d48c8:	2300      	movs	r3, #0
   d48ca:	461a      	mov	r2, r3
   d48cc:	2101      	movs	r1, #1
   d48ce:	6840      	ldr	r0, [r0, #4]
   d48d0:	f7ff bea8 	b.w	d4624 <network_off>

000d48d4 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d48d4:	2300      	movs	r3, #0
   d48d6:	461a      	mov	r2, r3
   d48d8:	4619      	mov	r1, r3
   d48da:	6840      	ldr	r0, [r0, #4]
   d48dc:	f7ff be9a 	b.w	d4614 <network_on>

000d48e0 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d48e0:	2200      	movs	r2, #0
   d48e2:	4611      	mov	r1, r2
   d48e4:	6840      	ldr	r0, [r0, #4]
   d48e6:	f7ff be8d 	b.w	d4604 <network_ready>

000d48ea <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d48ea:	2200      	movs	r2, #0
   d48ec:	4611      	mov	r1, r2
   d48ee:	6840      	ldr	r0, [r0, #4]
   d48f0:	f7ff be78 	b.w	d45e4 <network_connecting>

000d48f4 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d48f4:	2200      	movs	r2, #0
   d48f6:	2102      	movs	r1, #2
   d48f8:	6840      	ldr	r0, [r0, #4]
   d48fa:	f7ff be7b 	b.w	d45f4 <network_disconnect>

000d48fe <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d48fe:	2300      	movs	r3, #0
   d4900:	461a      	mov	r2, r3
   d4902:	6840      	ldr	r0, [r0, #4]
   d4904:	f7ff be66 	b.w	d45d4 <network_connect>

000d4908 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4908:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d490a:	4605      	mov	r5, r0
   d490c:	b188      	cbz	r0, d4932 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d490e:	6804      	ldr	r4, [r0, #0]
   d4910:	b14c      	cbz	r4, d4926 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4912:	68a3      	ldr	r3, [r4, #8]
   d4914:	b11b      	cbz	r3, d491e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4916:	2203      	movs	r2, #3
   d4918:	4621      	mov	r1, r4
   d491a:	4620      	mov	r0, r4
   d491c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d491e:	2110      	movs	r1, #16
   d4920:	4620      	mov	r0, r4
   d4922:	f000 fd3f 	bl	d53a4 <_ZdlPvj>
   d4926:	4628      	mov	r0, r5
   d4928:	2114      	movs	r1, #20
      }
   d492a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d492e:	f000 bd39 	b.w	d53a4 <_ZdlPvj>
   d4932:	bd38      	pop	{r3, r4, r5, pc}

000d4934 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4934:	b110      	cbz	r0, d493c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d4936:	6803      	ldr	r3, [r0, #0]
   d4938:	685b      	ldr	r3, [r3, #4]
   d493a:	4718      	bx	r3
   d493c:	4770      	bx	lr

000d493e <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d493e:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4940:	6803      	ldr	r3, [r0, #0]
   d4942:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4944:	b1bb      	cbz	r3, d4976 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4946:	6858      	ldr	r0, [r3, #4]
   d4948:	f7ff fdec 	bl	d4524 <os_thread_is_current>
   d494c:	b978      	cbnz	r0, d496e <_ZN6ThreadD1Ev+0x30>
   d494e:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4950:	7c5a      	ldrb	r2, [r3, #17]
   d4952:	b912      	cbnz	r2, d495a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4954:	6858      	ldr	r0, [r3, #4]
   d4956:	f7ff fded 	bl	d4534 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d495a:	6823      	ldr	r3, [r4, #0]
   d495c:	6858      	ldr	r0, [r3, #4]
   d495e:	f7ff fdf1 	bl	d4544 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4962:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4964:	2300      	movs	r3, #0
   d4966:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4968:	b128      	cbz	r0, d4976 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d496a:	f7ff ffcd 	bl	d4908 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d496e:	6820      	ldr	r0, [r4, #0]
   d4970:	b108      	cbz	r0, d4976 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4972:	f7ff ffc9 	bl	d4908 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d4976:	4620      	mov	r0, r4
   d4978:	bd10      	pop	{r4, pc}

000d497a <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d497a:	b538      	push	{r3, r4, r5, lr}
   d497c:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d497e:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d4982:	b108      	cbz	r0, d4988 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4984:	f7ff fb89 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4988:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d498c:	b108      	cbz	r0, d4992 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d498e:	f7ff fde9 	bl	d4564 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4992:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d4996:	b135      	cbz	r5, d49a6 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4998:	4628      	mov	r0, r5
   d499a:	f7ff ffd0 	bl	d493e <_ZN6ThreadD1Ev>
   d499e:	2104      	movs	r1, #4
   d49a0:	4628      	mov	r0, r5
   d49a2:	f000 fcff 	bl	d53a4 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d49a6:	6820      	ldr	r0, [r4, #0]
   d49a8:	b108      	cbz	r0, d49ae <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d49aa:	f7ff ffc3 	bl	d4934 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d49ae:	4620      	mov	r0, r4
   d49b0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d49b4 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d49b4:	b510      	push	{r4, lr}
   d49b6:	4b04      	ldr	r3, [pc, #16]	; (d49c8 <_ZN5spark9MeshClassD1Ev+0x14>)
   d49b8:	4604      	mov	r4, r0
   d49ba:	f840 3b08 	str.w	r3, [r0], #8
   d49be:	f7ff ffdc 	bl	d497a <_ZN5spark11MeshPublishD1Ev>
   d49c2:	4620      	mov	r0, r4
   d49c4:	bd10      	pop	{r4, pc}
   d49c6:	bf00      	nop
   d49c8:	000d6214 	.word	0x000d6214

000d49cc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d49cc:	b538      	push	{r3, r4, r5, lr}
   d49ce:	4c0e      	ldr	r4, [pc, #56]	; (d4a08 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d49d0:	4b0e      	ldr	r3, [pc, #56]	; (d4a0c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d49d2:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d49d4:	2500      	movs	r5, #0
   d49d6:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d49d8:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d49dc:	6063      	str	r3, [r4, #4]
   d49de:	60a5      	str	r5, [r4, #8]
   d49e0:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d49e4:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d49e8:	f7ff fdb4 	bl	d4554 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d49ec:	4b08      	ldr	r3, [pc, #32]	; (d4a10 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d49ee:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d49f2:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d49f6:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d49f8:	4620      	mov	r0, r4
   d49fa:	4a06      	ldr	r2, [pc, #24]	; (d4a14 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d49fc:	4906      	ldr	r1, [pc, #24]	; (d4a18 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d49fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4a02:	f000 bcc1 	b.w	d5388 <__aeabi_atexit>
   d4a06:	bf00      	nop
   d4a08:	2003e3ec 	.word	0x2003e3ec
   d4a0c:	000d61ac 	.word	0x000d61ac
   d4a10:	000d6214 	.word	0x000d6214
   d4a14:	2003e3d8 	.word	0x2003e3d8
   d4a18:	000d49b5 	.word	0x000d49b5

000d4a1c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d4a1c:	4770      	bx	lr

000d4a1e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4a1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4a20:	4606      	mov	r6, r0
   d4a22:	4615      	mov	r5, r2
   d4a24:	460c      	mov	r4, r1
   d4a26:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4a28:	42bc      	cmp	r4, r7
   d4a2a:	d006      	beq.n	d4a3a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4a2c:	6833      	ldr	r3, [r6, #0]
   d4a2e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4a32:	689b      	ldr	r3, [r3, #8]
   d4a34:	4630      	mov	r0, r6
   d4a36:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4a38:	e7f6      	b.n	d4a28 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4a3a:	4628      	mov	r0, r5
   d4a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4a3e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4a3e:	2200      	movs	r2, #0
   d4a40:	7c00      	ldrb	r0, [r0, #16]
   d4a42:	f7ff bcf7 	b.w	d4434 <HAL_I2C_Write_Data>

000d4a46 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4a46:	2100      	movs	r1, #0
   d4a48:	7c00      	ldrb	r0, [r0, #16]
   d4a4a:	f7ff bcfb 	b.w	d4444 <HAL_I2C_Available_Data>

000d4a4e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4a4e:	2100      	movs	r1, #0
   d4a50:	7c00      	ldrb	r0, [r0, #16]
   d4a52:	f7ff bcff 	b.w	d4454 <HAL_I2C_Read_Data>

000d4a56 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4a56:	2100      	movs	r1, #0
   d4a58:	7c00      	ldrb	r0, [r0, #16]
   d4a5a:	f7ff bd03 	b.w	d4464 <HAL_I2C_Peek_Data>

000d4a5e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4a5e:	2100      	movs	r1, #0
   d4a60:	7c00      	ldrb	r0, [r0, #16]
   d4a62:	f7ff bd07 	b.w	d4474 <HAL_I2C_Flush_Data>

000d4a66 <_ZN7TwoWireD0Ev>:
   d4a66:	b510      	push	{r4, lr}
   d4a68:	2114      	movs	r1, #20
   d4a6a:	4604      	mov	r4, r0
   d4a6c:	f000 fc9a 	bl	d53a4 <_ZdlPvj>
   d4a70:	4620      	mov	r0, r4
   d4a72:	bd10      	pop	{r4, pc}

000d4a74 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4a74:	b510      	push	{r4, lr}
   d4a76:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4a78:	2300      	movs	r3, #0
   d4a7a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4a7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4a80:	60a3      	str	r3, [r4, #8]
   d4a82:	4b04      	ldr	r3, [pc, #16]	; (d4a94 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d4a84:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4a86:	4608      	mov	r0, r1
   d4a88:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d4a8a:	4611      	mov	r1, r2
   d4a8c:	f7ff fcfa 	bl	d4484 <HAL_I2C_Init>
}
   d4a90:	4620      	mov	r0, r4
   d4a92:	bd10      	pop	{r4, pc}
   d4a94:	000d6248 	.word	0x000d6248

000d4a98 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d4a98:	2300      	movs	r3, #0
   d4a9a:	461a      	mov	r2, r3
   d4a9c:	4619      	mov	r1, r3
   d4a9e:	7c00      	ldrb	r0, [r0, #16]
   d4aa0:	f7ff bcb0 	b.w	d4404 <HAL_I2C_Begin>

000d4aa4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d4aa4:	b570      	push	{r4, r5, r6, lr}
   d4aa6:	460c      	mov	r4, r1
   d4aa8:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d4aaa:	2514      	movs	r5, #20
   d4aac:	4606      	mov	r6, r0
   d4aae:	462a      	mov	r2, r5
   d4ab0:	2100      	movs	r1, #0
   d4ab2:	a801      	add	r0, sp, #4
   d4ab4:	f001 faeb 	bl	d608e <memset>
   d4ab8:	7823      	ldrb	r3, [r4, #0]
   d4aba:	f88d 3008 	strb.w	r3, [sp, #8]
   d4abe:	6863      	ldr	r3, [r4, #4]
   d4ac0:	9303      	str	r3, [sp, #12]
   d4ac2:	68e3      	ldr	r3, [r4, #12]
   d4ac4:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d4ac6:	2200      	movs	r2, #0
   d4ac8:	7a23      	ldrb	r3, [r4, #8]
   d4aca:	7c30      	ldrb	r0, [r6, #16]
   d4acc:	f8ad 5004 	strh.w	r5, [sp, #4]
   d4ad0:	a901      	add	r1, sp, #4
   d4ad2:	9305      	str	r3, [sp, #20]
   d4ad4:	f7ff fcde 	bl	d4494 <HAL_I2C_Request_Data_Ex>
}
   d4ad8:	b006      	add	sp, #24
   d4ada:	bd70      	pop	{r4, r5, r6, pc}

000d4adc <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d4adc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d4ade:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d4ae0:	f88d 1000 	strb.w	r1, [sp]
   d4ae4:	f04f 0164 	mov.w	r1, #100	; 0x64
   d4ae8:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d4aea:	bf18      	it	ne
   d4aec:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d4aee:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d4af0:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d4af2:	f88d 3008 	strb.w	r3, [sp, #8]
   d4af6:	f7ff ffd5 	bl	d4aa4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d4afa:	b005      	add	sp, #20
   d4afc:	f85d fb04 	ldr.w	pc, [sp], #4

000d4b00 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d4b00:	2301      	movs	r3, #1
   d4b02:	f7ff bfeb 	b.w	d4adc <_ZN7TwoWire11requestFromEhjh>

000d4b06 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d4b06:	2200      	movs	r2, #0
   d4b08:	7c00      	ldrb	r0, [r0, #16]
   d4b0a:	f7ff bc83 	b.w	d4414 <HAL_I2C_Begin_Transmission>

000d4b0e <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d4b0e:	b2c9      	uxtb	r1, r1
   d4b10:	f7ff bff9 	b.w	d4b06 <_ZN7TwoWire17beginTransmissionEh>

000d4b14 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d4b14:	2200      	movs	r2, #0
   d4b16:	7c00      	ldrb	r0, [r0, #16]
   d4b18:	f7ff bc84 	b.w	d4424 <HAL_I2C_End_Transmission>

000d4b1c <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d4b1c:	2101      	movs	r1, #1
   d4b1e:	f7ff bff9 	b.w	d4b14 <_ZN7TwoWire15endTransmissionEh>

000d4b22 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4b22:	7441      	strb	r1, [r0, #17]
   d4b24:	4770      	bx	lr

000d4b26 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4b26:	4770      	bx	lr

000d4b28 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4b28:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4b2a:	2100      	movs	r1, #0
   d4b2c:	7c00      	ldrb	r0, [r0, #16]
   d4b2e:	f7ff fc51 	bl	d43d4 <HAL_USB_USART_Receive_Data>
}
   d4b32:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4b36:	bf28      	it	cs
   d4b38:	f04f 30ff 	movcs.w	r0, #4294967295
   d4b3c:	bd08      	pop	{r3, pc}

000d4b3e <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4b3e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4b40:	2101      	movs	r1, #1
   d4b42:	7c00      	ldrb	r0, [r0, #16]
   d4b44:	f7ff fc46 	bl	d43d4 <HAL_USB_USART_Receive_Data>
}
   d4b48:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4b4c:	bf28      	it	cs
   d4b4e:	f04f 30ff 	movcs.w	r0, #4294967295
   d4b52:	bd08      	pop	{r3, pc}

000d4b54 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4b54:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4b56:	7c00      	ldrb	r0, [r0, #16]
   d4b58:	f7ff fc34 	bl	d43c4 <HAL_USB_USART_Available_Data_For_Write>
}
   d4b5c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4b60:	bd08      	pop	{r3, pc}

000d4b62 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4b62:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4b64:	7c00      	ldrb	r0, [r0, #16]
   d4b66:	f7ff fc25 	bl	d43b4 <HAL_USB_USART_Available_Data>
}
   d4b6a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4b6e:	bd08      	pop	{r3, pc}

000d4b70 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4b70:	7c00      	ldrb	r0, [r0, #16]
   d4b72:	f7ff bc3f 	b.w	d43f4 <HAL_USB_USART_Flush_Data>

000d4b76 <_ZN9USBSerialD0Ev>:
   d4b76:	b510      	push	{r4, lr}
   d4b78:	2114      	movs	r1, #20
   d4b7a:	4604      	mov	r4, r0
   d4b7c:	f000 fc12 	bl	d53a4 <_ZdlPvj>
   d4b80:	4620      	mov	r0, r4
   d4b82:	bd10      	pop	{r4, pc}

000d4b84 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4b84:	b538      	push	{r3, r4, r5, lr}
   d4b86:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4b88:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4b8a:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4b8c:	f7ff fc1a 	bl	d43c4 <HAL_USB_USART_Available_Data_For_Write>
   d4b90:	2800      	cmp	r0, #0
   d4b92:	dc01      	bgt.n	d4b98 <_ZN9USBSerial5writeEh+0x14>
   d4b94:	7c60      	ldrb	r0, [r4, #17]
   d4b96:	b128      	cbz	r0, d4ba4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4b98:	4629      	mov	r1, r5
   d4b9a:	7c20      	ldrb	r0, [r4, #16]
   d4b9c:	f7ff fc22 	bl	d43e4 <HAL_USB_USART_Send_Data>
   d4ba0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4ba4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4ba8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4ba8:	b510      	push	{r4, lr}
   d4baa:	4604      	mov	r4, r0
   d4bac:	2300      	movs	r3, #0
   d4bae:	6063      	str	r3, [r4, #4]
   d4bb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4bb4:	60a3      	str	r3, [r4, #8]
   d4bb6:	4b05      	ldr	r3, [pc, #20]	; (d4bcc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4bb8:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4bba:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4bbc:	4608      	mov	r0, r1
{
  _serial = serial;
   d4bbe:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4bc0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4bc2:	4611      	mov	r1, r2
   d4bc4:	f7ff fbe6 	bl	d4394 <HAL_USB_USART_Init>
}
   d4bc8:	4620      	mov	r0, r4
   d4bca:	bd10      	pop	{r4, pc}
   d4bcc:	000d6270 	.word	0x000d6270

000d4bd0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4bd0:	2200      	movs	r2, #0
   d4bd2:	7c00      	ldrb	r0, [r0, #16]
   d4bd4:	f7ff bbe6 	b.w	d43a4 <HAL_USB_USART_Begin>

000d4bd8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4bd8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4bda:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4bdc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4bde:	2100      	movs	r1, #0
   d4be0:	f001 fa55 	bl	d608e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4be4:	4620      	mov	r0, r4
   d4be6:	bd10      	pop	{r4, pc}

000d4be8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4be8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4bea:	4d0e      	ldr	r5, [pc, #56]	; (d4c24 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4bec:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4bee:	a801      	add	r0, sp, #4
   d4bf0:	f7ff fff2 	bl	d4bd8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4bf4:	6829      	ldr	r1, [r5, #0]
   d4bf6:	f011 0401 	ands.w	r4, r1, #1
   d4bfa:	d110      	bne.n	d4c1e <_Z16_fetch_usbserialv+0x36>
   d4bfc:	4628      	mov	r0, r5
   d4bfe:	f7ff fa4e 	bl	d409e <__cxa_guard_acquire>
   d4c02:	b160      	cbz	r0, d4c1e <_Z16_fetch_usbserialv+0x36>
   d4c04:	aa01      	add	r2, sp, #4
   d4c06:	4621      	mov	r1, r4
   d4c08:	4807      	ldr	r0, [pc, #28]	; (d4c28 <_Z16_fetch_usbserialv+0x40>)
   d4c0a:	f7ff ffcd 	bl	d4ba8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4c0e:	4628      	mov	r0, r5
   d4c10:	f7ff fa4a 	bl	d40a8 <__cxa_guard_release>
   d4c14:	4a05      	ldr	r2, [pc, #20]	; (d4c2c <_Z16_fetch_usbserialv+0x44>)
   d4c16:	4906      	ldr	r1, [pc, #24]	; (d4c30 <_Z16_fetch_usbserialv+0x48>)
   d4c18:	4803      	ldr	r0, [pc, #12]	; (d4c28 <_Z16_fetch_usbserialv+0x40>)
   d4c1a:	f000 fbb5 	bl	d5388 <__aeabi_atexit>
	return _usbserial;
}
   d4c1e:	4802      	ldr	r0, [pc, #8]	; (d4c28 <_Z16_fetch_usbserialv+0x40>)
   d4c20:	b007      	add	sp, #28
   d4c22:	bd30      	pop	{r4, r5, pc}
   d4c24:	2003e5c0 	.word	0x2003e5c0
   d4c28:	2003e5c4 	.word	0x2003e5c4
   d4c2c:	2003e3d8 	.word	0x2003e3d8
   d4c30:	000d4b27 	.word	0x000d4b27

000d4c34 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4c34:	4770      	bx	lr

000d4c36 <_ZN9IPAddressD0Ev>:
   d4c36:	b510      	push	{r4, lr}
   d4c38:	2118      	movs	r1, #24
   d4c3a:	4604      	mov	r4, r0
   d4c3c:	f000 fbb2 	bl	d53a4 <_ZdlPvj>
   d4c40:	4620      	mov	r0, r4
   d4c42:	bd10      	pop	{r4, pc}

000d4c44 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4c44:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4c46:	7d03      	ldrb	r3, [r0, #20]
   d4c48:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4c4a:	b08d      	sub	sp, #52	; 0x34
   d4c4c:	460e      	mov	r6, r1
   d4c4e:	f100 0704 	add.w	r7, r0, #4
   d4c52:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4c56:	d002      	beq.n	d4c5e <_ZNK9IPAddress7printToER5Print+0x1a>
   d4c58:	f100 0508 	add.w	r5, r0, #8
   d4c5c:	e018      	b.n	d4c90 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4c5e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4c60:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4c62:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4c66:	232f      	movs	r3, #47	; 0x2f
   d4c68:	462a      	mov	r2, r5
   d4c6a:	200a      	movs	r0, #10
   d4c6c:	f7ff fc52 	bl	d4514 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4c70:	4628      	mov	r0, r5
   d4c72:	f001 fa3d 	bl	d60f0 <strlen>
   d4c76:	6833      	ldr	r3, [r6, #0]
   d4c78:	4602      	mov	r2, r0
   d4c7a:	68db      	ldr	r3, [r3, #12]
   d4c7c:	4629      	mov	r1, r5
   d4c7e:	4630      	mov	r0, r6
   d4c80:	4798      	blx	r3
   d4c82:	e00f      	b.n	d4ca4 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4c84:	b124      	cbz	r4, d4c90 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4c86:	212e      	movs	r1, #46	; 0x2e
   d4c88:	4630      	mov	r0, r6
   d4c8a:	f000 f929 	bl	d4ee0 <_ZN5Print5printEc>
   d4c8e:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4c90:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4c94:	220a      	movs	r2, #10
   d4c96:	4630      	mov	r0, r6
   d4c98:	f000 f93b 	bl	d4f12 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4c9c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4c9e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4ca0:	d1f0      	bne.n	d4c84 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4ca2:	4620      	mov	r0, r4
    }
    return n;
}
   d4ca4:	b00d      	add	sp, #52	; 0x34
   d4ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4ca8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4ca8:	b510      	push	{r4, lr}
   d4caa:	4b05      	ldr	r3, [pc, #20]	; (d4cc0 <_ZN9IPAddressC1Ev+0x18>)
   d4cac:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4cae:	2211      	movs	r2, #17
   d4cb0:	f840 3b04 	str.w	r3, [r0], #4
   d4cb4:	2100      	movs	r1, #0
   d4cb6:	f001 f9ea 	bl	d608e <memset>
{
    clear();
}
   d4cba:	4620      	mov	r0, r4
   d4cbc:	bd10      	pop	{r4, pc}
   d4cbe:	bf00      	nop
   d4cc0:	000d62a0 	.word	0x000d62a0

000d4cc4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4cc4:	4603      	mov	r3, r0
   d4cc6:	4a07      	ldr	r2, [pc, #28]	; (d4ce4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4cc8:	b510      	push	{r4, lr}
   d4cca:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4cce:	f101 0210 	add.w	r2, r1, #16
   d4cd2:	f851 4b04 	ldr.w	r4, [r1], #4
   d4cd6:	f843 4b04 	str.w	r4, [r3], #4
   d4cda:	4291      	cmp	r1, r2
   d4cdc:	d1f9      	bne.n	d4cd2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4cde:	780a      	ldrb	r2, [r1, #0]
   d4ce0:	701a      	strb	r2, [r3, #0]
}
   d4ce2:	bd10      	pop	{r4, pc}
   d4ce4:	000d62a0 	.word	0x000d62a0

000d4ce8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4ce8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4cea:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4cee:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4cf2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4cf6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4cfa:	2304      	movs	r3, #4
   d4cfc:	6041      	str	r1, [r0, #4]
   d4cfe:	7503      	strb	r3, [r0, #20]
   d4d00:	bd10      	pop	{r4, pc}

000d4d02 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4d02:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4d04:	780d      	ldrb	r5, [r1, #0]
   d4d06:	788b      	ldrb	r3, [r1, #2]
   d4d08:	784a      	ldrb	r2, [r1, #1]
   d4d0a:	78c9      	ldrb	r1, [r1, #3]
   d4d0c:	9100      	str	r1, [sp, #0]
   d4d0e:	4629      	mov	r1, r5
   d4d10:	f7ff ffea 	bl	d4ce8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4d14:	b003      	add	sp, #12
   d4d16:	bd30      	pop	{r4, r5, pc}

000d4d18 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4d18:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4d1a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4d1c:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4d1e:	b113      	cbz	r3, d4d26 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4d20:	2203      	movs	r2, #3
   d4d22:	4601      	mov	r1, r0
   d4d24:	4798      	blx	r3
    }
   d4d26:	4620      	mov	r0, r4
   d4d28:	bd10      	pop	{r4, pc}

000d4d2a <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4d2a:	2100      	movs	r1, #0
   d4d2c:	f7ff bcaa 	b.w	d4684 <system_delay_ms>

000d4d30 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4d30:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4d32:	4b0c      	ldr	r3, [pc, #48]	; (d4d64 <serialEventRun+0x34>)
   d4d34:	b133      	cbz	r3, d4d44 <serialEventRun+0x14>
   d4d36:	f7ff ff57 	bl	d4be8 <_Z16_fetch_usbserialv>
   d4d3a:	6803      	ldr	r3, [r0, #0]
   d4d3c:	691b      	ldr	r3, [r3, #16]
   d4d3e:	4798      	blx	r3
   d4d40:	2800      	cmp	r0, #0
   d4d42:	dc09      	bgt.n	d4d58 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4d44:	4b08      	ldr	r3, [pc, #32]	; (d4d68 <serialEventRun+0x38>)
   d4d46:	b163      	cbz	r3, d4d62 <serialEventRun+0x32>
   d4d48:	f000 fa50 	bl	d51ec <_Z22__fetch_global_Serial1v>
   d4d4c:	6803      	ldr	r3, [r0, #0]
   d4d4e:	691b      	ldr	r3, [r3, #16]
   d4d50:	4798      	blx	r3
   d4d52:	2800      	cmp	r0, #0
   d4d54:	dc03      	bgt.n	d4d5e <serialEventRun+0x2e>
   d4d56:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4d58:	f3af 8000 	nop.w
   d4d5c:	e7f2      	b.n	d4d44 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4d5e:	f3af 8000 	nop.w
   d4d62:	bd08      	pop	{r3, pc}
	...

000d4d6c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4d6c:	b508      	push	{r3, lr}
	serialEventRun();
   d4d6e:	f7ff ffdf 	bl	d4d30 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4d72:	f7ff fc07 	bl	d4584 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4d76:	4b01      	ldr	r3, [pc, #4]	; (d4d7c <_post_loop+0x10>)
   d4d78:	6018      	str	r0, [r3, #0]
   d4d7a:	bd08      	pop	{r3, pc}
   d4d7c:	2003e748 	.word	0x2003e748

000d4d80 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4d80:	4802      	ldr	r0, [pc, #8]	; (d4d8c <_Z33system_initialize_user_backup_ramv+0xc>)
   d4d82:	4a03      	ldr	r2, [pc, #12]	; (d4d90 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4d84:	4903      	ldr	r1, [pc, #12]	; (d4d94 <_Z33system_initialize_user_backup_ramv+0x14>)
   d4d86:	1a12      	subs	r2, r2, r0
   d4d88:	f001 b976 	b.w	d6078 <memcpy>
   d4d8c:	2003f400 	.word	0x2003f400
   d4d90:	2003f404 	.word	0x2003f404
   d4d94:	000d64d0 	.word	0x000d64d0

000d4d98 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4d98:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4d9a:	2300      	movs	r3, #0
   d4d9c:	9300      	str	r3, [sp, #0]
   d4d9e:	461a      	mov	r2, r3
   d4da0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4da4:	f7ff fc80 	bl	d46a8 <system_ctrl_set_result>
}
   d4da8:	b003      	add	sp, #12
   d4daa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4db0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4db0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4db2:	8843      	ldrh	r3, [r0, #2]
   d4db4:	2b0a      	cmp	r3, #10
   d4db6:	d008      	beq.n	d4dca <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4db8:	2b50      	cmp	r3, #80	; 0x50
   d4dba:	d109      	bne.n	d4dd0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4dbc:	4b09      	ldr	r3, [pc, #36]	; (d4de4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4dbe:	681b      	ldr	r3, [r3, #0]
   d4dc0:	b13b      	cbz	r3, d4dd2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4dc2:	b003      	add	sp, #12
   d4dc4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4dc8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4dca:	f7ff ffe5 	bl	d4d98 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4dce:	e006      	b.n	d4dde <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4dd0:	2300      	movs	r3, #0
   d4dd2:	9300      	str	r3, [sp, #0]
   d4dd4:	461a      	mov	r2, r3
   d4dd6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4dda:	f7ff fc65 	bl	d46a8 <system_ctrl_set_result>
        break;
    }
}
   d4dde:	b003      	add	sp, #12
   d4de0:	f85d fb04 	ldr.w	pc, [sp], #4
   d4de4:	2003e5d8 	.word	0x2003e5d8

000d4de8 <module_user_init_hook>:

void module_user_init_hook()
{
   d4de8:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4dea:	4c10      	ldr	r4, [pc, #64]	; (d4e2c <module_user_init_hook+0x44>)
   d4dec:	4d10      	ldr	r5, [pc, #64]	; (d4e30 <module_user_init_hook+0x48>)
   d4dee:	6823      	ldr	r3, [r4, #0]
   d4df0:	42ab      	cmp	r3, r5
   d4df2:	4b10      	ldr	r3, [pc, #64]	; (d4e34 <module_user_init_hook+0x4c>)
   d4df4:	bf0c      	ite	eq
   d4df6:	2201      	moveq	r2, #1
   d4df8:	2200      	movne	r2, #0
   d4dfa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4dfc:	d002      	beq.n	d4e04 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d4dfe:	f7ff ffbf 	bl	d4d80 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4e02:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4e04:	f7ff fbb6 	bl	d4574 <HAL_RNG_GetRandomNumber>
   d4e08:	4604      	mov	r4, r0
    srand(seed);
   d4e0a:	f001 f949 	bl	d60a0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4e0e:	4b0a      	ldr	r3, [pc, #40]	; (d4e38 <module_user_init_hook+0x50>)
   d4e10:	b113      	cbz	r3, d4e18 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d4e12:	4620      	mov	r0, r4
   d4e14:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4e18:	2100      	movs	r1, #0
   d4e1a:	4807      	ldr	r0, [pc, #28]	; (d4e38 <module_user_init_hook+0x50>)
   d4e1c:	f7ff fbd2 	bl	d45c4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4e20:	2100      	movs	r1, #0
   d4e22:	4806      	ldr	r0, [pc, #24]	; (d4e3c <module_user_init_hook+0x54>)
}
   d4e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4e28:	f7ff bc34 	b.w	d4694 <system_ctrl_set_app_request_handler>
   d4e2c:	2003f400 	.word	0x2003f400
   d4e30:	9a271c1e 	.word	0x9a271c1e
   d4e34:	2003e5dc 	.word	0x2003e5dc
   d4e38:	00000000 	.word	0x00000000
   d4e3c:	000d4db1 	.word	0x000d4db1

000d4e40 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4e40:	b510      	push	{r4, lr}
   d4e42:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4e44:	f7ff ff68 	bl	d4d18 <_ZNSt14_Function_baseD1Ev>
   d4e48:	4620      	mov	r0, r4
   d4e4a:	bd10      	pop	{r4, pc}

000d4e4c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4e4c:	4803      	ldr	r0, [pc, #12]	; (d4e5c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4e4e:	4a04      	ldr	r2, [pc, #16]	; (d4e60 <_GLOBAL__sub_I_RGB+0x14>)
   d4e50:	4904      	ldr	r1, [pc, #16]	; (d4e64 <_GLOBAL__sub_I_RGB+0x18>)
   d4e52:	2300      	movs	r3, #0
   d4e54:	6083      	str	r3, [r0, #8]
   d4e56:	f000 ba97 	b.w	d5388 <__aeabi_atexit>
   d4e5a:	bf00      	nop
   d4e5c:	2003e5e0 	.word	0x2003e5e0
   d4e60:	2003e3d8 	.word	0x2003e3d8
   d4e64:	000d4e41 	.word	0x000d4e41

000d4e68 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4e68:	4b02      	ldr	r3, [pc, #8]	; (d4e74 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4e6a:	681a      	ldr	r2, [r3, #0]
   d4e6c:	4b02      	ldr	r3, [pc, #8]	; (d4e78 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4e6e:	601a      	str	r2, [r3, #0]
   d4e70:	4770      	bx	lr
   d4e72:	bf00      	nop
   d4e74:	2003e370 	.word	0x2003e370
   d4e78:	2003e5f0 	.word	0x2003e5f0

000d4e7c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4e7c:	4b01      	ldr	r3, [pc, #4]	; (d4e84 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4e7e:	4a02      	ldr	r2, [pc, #8]	; (d4e88 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4e80:	601a      	str	r2, [r3, #0]
   d4e82:	4770      	bx	lr
   d4e84:	2003e5f4 	.word	0x2003e5f4
   d4e88:	000d6348 	.word	0x000d6348

000d4e8c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4e8e:	4606      	mov	r6, r0
   d4e90:	460d      	mov	r5, r1
   d4e92:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4e94:	2400      	movs	r4, #0
  while (size--) {
   d4e96:	42bd      	cmp	r5, r7
   d4e98:	d00c      	beq.n	d4eb4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4e9a:	6833      	ldr	r3, [r6, #0]
   d4e9c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4ea0:	689b      	ldr	r3, [r3, #8]
   d4ea2:	4630      	mov	r0, r6
   d4ea4:	4798      	blx	r3
     if (chunk>=0)
   d4ea6:	2800      	cmp	r0, #0
   d4ea8:	db01      	blt.n	d4eae <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4eaa:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4eac:	e7f3      	b.n	d4e96 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4eae:	2c00      	cmp	r4, #0
   d4eb0:	bf08      	it	eq
   d4eb2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4eb4:	4620      	mov	r0, r4
   d4eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4eb8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4eb8:	b570      	push	{r4, r5, r6, lr}
   d4eba:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4ebc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4ebe:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4ec0:	b149      	cbz	r1, d4ed6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4ec2:	f001 f915 	bl	d60f0 <strlen>
   d4ec6:	682b      	ldr	r3, [r5, #0]
   d4ec8:	4602      	mov	r2, r0
   d4eca:	4621      	mov	r1, r4
   d4ecc:	4628      	mov	r0, r5
   d4ece:	68db      	ldr	r3, [r3, #12]
    }
   d4ed0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4ed4:	4718      	bx	r3
    }
   d4ed6:	bd70      	pop	{r4, r5, r6, pc}

000d4ed8 <_ZN5Print5printEPKc>:
   d4ed8:	b508      	push	{r3, lr}
   d4eda:	f7ff ffed 	bl	d4eb8 <_ZN5Print5writeEPKc>
   d4ede:	bd08      	pop	{r3, pc}

000d4ee0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4ee0:	6803      	ldr	r3, [r0, #0]
   d4ee2:	689b      	ldr	r3, [r3, #8]
   d4ee4:	4718      	bx	r3

000d4ee6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4ee6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4ee8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4eea:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4eec:	f7ff fff8 	bl	d4ee0 <_ZN5Print5printEc>
  n += print('\n');
   d4ef0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4ef2:	4604      	mov	r4, r0
  n += print('\n');
   d4ef4:	4628      	mov	r0, r5
   d4ef6:	f7ff fff3 	bl	d4ee0 <_ZN5Print5printEc>
  return n;
}
   d4efa:	4420      	add	r0, r4
   d4efc:	bd38      	pop	{r3, r4, r5, pc}

000d4efe <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4efe:	b538      	push	{r3, r4, r5, lr}
   d4f00:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4f02:	f7ff ffd9 	bl	d4eb8 <_ZN5Print5writeEPKc>
   d4f06:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d4f08:	4628      	mov	r0, r5
   d4f0a:	f7ff ffec 	bl	d4ee6 <_ZN5Print7printlnEv>
  return n;
}
   d4f0e:	4420      	add	r0, r4
   d4f10:	bd38      	pop	{r3, r4, r5, pc}

000d4f12 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4f12:	b530      	push	{r4, r5, lr}
   d4f14:	b08b      	sub	sp, #44	; 0x2c
   d4f16:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4f18:	2100      	movs	r1, #0
   d4f1a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4f1e:	2a01      	cmp	r2, #1
   d4f20:	bf98      	it	ls
   d4f22:	220a      	movls	r2, #10
   d4f24:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d4f28:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d4f2c:	fb05 3312 	mls	r3, r5, r2, r3
   d4f30:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4f34:	2b09      	cmp	r3, #9
   d4f36:	bf94      	ite	ls
   d4f38:	3330      	addls	r3, #48	; 0x30
   d4f3a:	3337      	addhi	r3, #55	; 0x37
   d4f3c:	b2db      	uxtb	r3, r3
   d4f3e:	4621      	mov	r1, r4
   d4f40:	f804 3901 	strb.w	r3, [r4], #-1
   d4f44:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4f46:	2d00      	cmp	r5, #0
   d4f48:	d1ee      	bne.n	d4f28 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4f4a:	f7ff ffb5 	bl	d4eb8 <_ZN5Print5writeEPKc>
}
   d4f4e:	b00b      	add	sp, #44	; 0x2c
   d4f50:	bd30      	pop	{r4, r5, pc}
	...

000d4f54 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d4f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4f58:	ec57 6b10 	vmov	r6, r7, d0
   d4f5c:	4682      	mov	sl, r0
   d4f5e:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d4f60:	ee10 2a10 	vmov	r2, s0
   d4f64:	463b      	mov	r3, r7
   d4f66:	ee10 0a10 	vmov	r0, s0
   d4f6a:	4639      	mov	r1, r7
   d4f6c:	f000 ffc8 	bl	d5f00 <__aeabi_dcmpun>
   d4f70:	b108      	cbz	r0, d4f76 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4f72:	494e      	ldr	r1, [pc, #312]	; (d50ac <_ZN5Print10printFloatEdh+0x158>)
   d4f74:	e012      	b.n	d4f9c <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d4f76:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d4f7a:	f04f 32ff 	mov.w	r2, #4294967295
   d4f7e:	4b4c      	ldr	r3, [pc, #304]	; (d50b0 <_ZN5Print10printFloatEdh+0x15c>)
   d4f80:	4630      	mov	r0, r6
   d4f82:	4649      	mov	r1, r9
   d4f84:	f000 ffbc 	bl	d5f00 <__aeabi_dcmpun>
   d4f88:	b968      	cbnz	r0, d4fa6 <_ZN5Print10printFloatEdh+0x52>
   d4f8a:	f04f 32ff 	mov.w	r2, #4294967295
   d4f8e:	4b48      	ldr	r3, [pc, #288]	; (d50b0 <_ZN5Print10printFloatEdh+0x15c>)
   d4f90:	4630      	mov	r0, r6
   d4f92:	4649      	mov	r1, r9
   d4f94:	f000 ff96 	bl	d5ec4 <__aeabi_dcmple>
   d4f98:	b928      	cbnz	r0, d4fa6 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4f9a:	4946      	ldr	r1, [pc, #280]	; (d50b4 <_ZN5Print10printFloatEdh+0x160>)
   d4f9c:	4650      	mov	r0, sl
   d4f9e:	f7ff ff8b 	bl	d4eb8 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d4fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d4fa6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4faa:	4b43      	ldr	r3, [pc, #268]	; (d50b8 <_ZN5Print10printFloatEdh+0x164>)
   d4fac:	4630      	mov	r0, r6
   d4fae:	4639      	mov	r1, r7
   d4fb0:	f000 ff9c 	bl	d5eec <__aeabi_dcmpgt>
   d4fb4:	b108      	cbz	r0, d4fba <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4fb6:	4941      	ldr	r1, [pc, #260]	; (d50bc <_ZN5Print10printFloatEdh+0x168>)
   d4fb8:	e7f0      	b.n	d4f9c <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d4fba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4fbe:	4b40      	ldr	r3, [pc, #256]	; (d50c0 <_ZN5Print10printFloatEdh+0x16c>)
   d4fc0:	4630      	mov	r0, r6
   d4fc2:	4639      	mov	r1, r7
   d4fc4:	f000 ff74 	bl	d5eb0 <__aeabi_dcmplt>
   d4fc8:	2800      	cmp	r0, #0
   d4fca:	d1f4      	bne.n	d4fb6 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d4fcc:	2200      	movs	r2, #0
   d4fce:	2300      	movs	r3, #0
   d4fd0:	4630      	mov	r0, r6
   d4fd2:	4639      	mov	r1, r7
   d4fd4:	f000 ff6c 	bl	d5eb0 <__aeabi_dcmplt>
   d4fd8:	b140      	cbz	r0, d4fec <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d4fda:	212d      	movs	r1, #45	; 0x2d
   d4fdc:	4650      	mov	r0, sl
   d4fde:	f7ff ff7f 	bl	d4ee0 <_ZN5Print5printEc>
     number = -number;
   d4fe2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d4fe6:	4604      	mov	r4, r0
     number = -number;
   d4fe8:	461f      	mov	r7, r3
   d4fea:	e000      	b.n	d4fee <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4fec:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d4fee:	4935      	ldr	r1, [pc, #212]	; (d50c4 <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4ff0:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d4ff4:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d4ff6:	fa5f f388 	uxtb.w	r3, r8
   d4ffa:	429d      	cmp	r5, r3
   d4ffc:	d906      	bls.n	d500c <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d4ffe:	2200      	movs	r2, #0
   d5000:	4b31      	ldr	r3, [pc, #196]	; (d50c8 <_ZN5Print10printFloatEdh+0x174>)
   d5002:	f000 fe0d 	bl	d5c20 <__aeabi_ddiv>
   d5006:	f108 0801 	add.w	r8, r8, #1
   d500a:	e7f4      	b.n	d4ff6 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d500c:	4632      	mov	r2, r6
   d500e:	463b      	mov	r3, r7
   d5010:	f000 fb2a 	bl	d5668 <__adddf3>
   d5014:	460f      	mov	r7, r1
   d5016:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d5018:	f000 ffb0 	bl	d5f7c <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d501c:	220a      	movs	r2, #10
   d501e:	4601      	mov	r1, r0
   d5020:	4680      	mov	r8, r0
   d5022:	4650      	mov	r0, sl
   d5024:	f7ff ff75 	bl	d4f12 <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d5028:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d502a:	b3e5      	cbz	r5, d50a6 <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d502c:	4640      	mov	r0, r8
   d502e:	f000 fc57 	bl	d58e0 <__aeabi_ui2d>
   d5032:	4602      	mov	r2, r0
   d5034:	460b      	mov	r3, r1
   d5036:	4630      	mov	r0, r6
   d5038:	4639      	mov	r1, r7
   d503a:	f000 fb13 	bl	d5664 <__aeabi_dsub>
   d503e:	4606      	mov	r6, r0
   d5040:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5042:	4650      	mov	r0, sl
   d5044:	4921      	ldr	r1, [pc, #132]	; (d50cc <_ZN5Print10printFloatEdh+0x178>)
   d5046:	f7ff ff37 	bl	d4eb8 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d504a:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d504c:	2200      	movs	r2, #0
   d504e:	4b1e      	ldr	r3, [pc, #120]	; (d50c8 <_ZN5Print10printFloatEdh+0x174>)
   d5050:	4630      	mov	r0, r6
   d5052:	4639      	mov	r1, r7
   d5054:	f000 fcba 	bl	d59cc <__aeabi_dmul>
   d5058:	4606      	mov	r6, r0
   d505a:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d505c:	f000 ff66 	bl	d5f2c <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d5060:	f1b0 0900 	subs.w	r9, r0, #0
   d5064:	da07      	bge.n	d5076 <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d5066:	212d      	movs	r1, #45	; 0x2d
   d5068:	4650      	mov	r0, sl
   d506a:	f7ff ff39 	bl	d4ee0 <_ZN5Print5printEc>
            val = -n;
   d506e:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d5072:	4680      	mov	r8, r0
   d5074:	e002      	b.n	d507c <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d5076:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d5078:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d507c:	220a      	movs	r2, #10
   d507e:	4650      	mov	r0, sl
   d5080:	f7ff ff47 	bl	d4f12 <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d5084:	4440      	add	r0, r8
   d5086:	4404      	add	r4, r0
    remainder -= toPrint;
   d5088:	4648      	mov	r0, r9
   d508a:	f000 fc39 	bl	d5900 <__aeabi_i2d>
   d508e:	4602      	mov	r2, r0
   d5090:	460b      	mov	r3, r1
   d5092:	4630      	mov	r0, r6
   d5094:	4639      	mov	r1, r7
   d5096:	f000 fae5 	bl	d5664 <__aeabi_dsub>
   d509a:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d509c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d50a0:	4606      	mov	r6, r0
   d50a2:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d50a4:	d1d2      	bne.n	d504c <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d50a6:	4620      	mov	r0, r4
   d50a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d50ac:	000d63b4 	.word	0x000d63b4
   d50b0:	7fefffff 	.word	0x7fefffff
   d50b4:	000d63be 	.word	0x000d63be
   d50b8:	41efffff 	.word	0x41efffff
   d50bc:	000d63b8 	.word	0x000d63b8
   d50c0:	c1efffff 	.word	0xc1efffff
   d50c4:	3fe00000 	.word	0x3fe00000
   d50c8:	40240000 	.word	0x40240000
   d50cc:	000d63bc 	.word	0x000d63bc

000d50d0 <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d50d0:	b538      	push	{r3, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d50d2:	b2c9      	uxtb	r1, r1
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d50d4:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d50d6:	f7ff ff3d 	bl	d4f54 <_ZN5Print10printFloatEdh>
   d50da:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d50dc:	4628      	mov	r0, r5
   d50de:	f7ff ff02 	bl	d4ee6 <_ZN5Print7printlnEv>
  return n;
}
   d50e2:	4420      	add	r0, r4
   d50e4:	bd38      	pop	{r3, r4, r5, pc}

000d50e6 <_ZN5Print7printlnEfi>:
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d50e6:	b538      	push	{r3, r4, r5, lr}
   d50e8:	4604      	mov	r4, r0
    return println((double)num, digits);
   d50ea:	ee10 0a10 	vmov	r0, s0
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d50ee:	460d      	mov	r5, r1
    return println((double)num, digits);
   d50f0:	f000 fc18 	bl	d5924 <__aeabi_f2d>
   d50f4:	ec41 0b10 	vmov	d0, r0, r1
   d50f8:	4629      	mov	r1, r5
   d50fa:	4620      	mov	r0, r4
}
   d50fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return n;
}

size_t Print::println(float num, int digits)
{
    return println((double)num, digits);
   d5100:	f7ff bfe6 	b.w	d50d0 <_ZN5Print7printlnEdi>

000d5104 <_ZN14RecursiveMutexD1Ev>:
    }

    ~RecursiveMutex() {
   d5104:	b510      	push	{r4, lr}
   d5106:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5108:	6800      	ldr	r0, [r0, #0]
   d510a:	b108      	cbz	r0, d5110 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d510c:	f7ff fa2a 	bl	d4564 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d5110:	4620      	mov	r0, r4
   d5112:	bd10      	pop	{r4, pc}

000d5114 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5114:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5116:	4c06      	ldr	r4, [pc, #24]	; (d5130 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5118:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d511a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d511c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d511e:	f7ff fa19 	bl	d4554 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5122:	4620      	mov	r0, r4
   d5124:	4a03      	ldr	r2, [pc, #12]	; (d5134 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5126:	4904      	ldr	r1, [pc, #16]	; (d5138 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d512c:	f000 b92c 	b.w	d5388 <__aeabi_atexit>
   d5130:	2003e5f8 	.word	0x2003e5f8
   d5134:	2003e3d8 	.word	0x2003e3d8
   d5138:	000d5105 	.word	0x000d5105

000d513c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d513c:	4770      	bx	lr

000d513e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d513e:	7441      	strb	r1, [r0, #17]
   d5140:	4770      	bx	lr

000d5142 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5142:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5144:	7c00      	ldrb	r0, [r0, #16]
   d5146:	f7ff f9dd 	bl	d4504 <HAL_USART_Available_Data_For_Write>
}
   d514a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d514e:	bd08      	pop	{r3, pc}

000d5150 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5150:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5152:	7c00      	ldrb	r0, [r0, #16]
   d5154:	f7ff f9b6 	bl	d44c4 <HAL_USART_Available_Data>
}
   d5158:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d515c:	bd08      	pop	{r3, pc}

000d515e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d515e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5160:	7c00      	ldrb	r0, [r0, #16]
   d5162:	f7ff f9bf 	bl	d44e4 <HAL_USART_Peek_Data>
}
   d5166:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d516a:	bf28      	it	cs
   d516c:	f04f 30ff 	movcs.w	r0, #4294967295
   d5170:	bd08      	pop	{r3, pc}

000d5172 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5172:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5174:	7c00      	ldrb	r0, [r0, #16]
   d5176:	f7ff f9ad 	bl	d44d4 <HAL_USART_Read_Data>
}
   d517a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d517e:	bf28      	it	cs
   d5180:	f04f 30ff 	movcs.w	r0, #4294967295
   d5184:	bd08      	pop	{r3, pc}

000d5186 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5186:	7c00      	ldrb	r0, [r0, #16]
   d5188:	f7ff b9b4 	b.w	d44f4 <HAL_USART_Flush_Data>

000d518c <_ZN11USARTSerialD0Ev>:
   d518c:	b510      	push	{r4, lr}
   d518e:	2114      	movs	r1, #20
   d5190:	4604      	mov	r4, r0
   d5192:	f000 f907 	bl	d53a4 <_ZdlPvj>
   d5196:	4620      	mov	r0, r4
   d5198:	bd10      	pop	{r4, pc}

000d519a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d519a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d519c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d519e:	4604      	mov	r4, r0
   d51a0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d51a2:	b925      	cbnz	r5, d51ae <_ZN11USARTSerial5writeEh+0x14>
   d51a4:	7c00      	ldrb	r0, [r0, #16]
   d51a6:	f7ff f9ad 	bl	d4504 <HAL_USART_Available_Data_For_Write>
   d51aa:	2800      	cmp	r0, #0
   d51ac:	dd05      	ble.n	d51ba <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d51ae:	4631      	mov	r1, r6
   d51b0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d51b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d51b6:	f7ff b97d 	b.w	d44b4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d51ba:	4628      	mov	r0, r5
   d51bc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d51c0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d51c0:	b510      	push	{r4, lr}
   d51c2:	4604      	mov	r4, r0
   d51c4:	4608      	mov	r0, r1
   d51c6:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d51c8:	2200      	movs	r2, #0
   d51ca:	6062      	str	r2, [r4, #4]
   d51cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d51d0:	60a2      	str	r2, [r4, #8]
   d51d2:	4a05      	ldr	r2, [pc, #20]	; (d51e8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d51d4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d51d6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d51d8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d51da:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d51dc:	461a      	mov	r2, r3
   d51de:	f7ff f961 	bl	d44a4 <HAL_USART_Init>
}
   d51e2:	4620      	mov	r0, r4
   d51e4:	bd10      	pop	{r4, pc}
   d51e6:	bf00      	nop
   d51e8:	000d63cc 	.word	0x000d63cc

000d51ec <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d51ec:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d51ee:	4d0c      	ldr	r5, [pc, #48]	; (d5220 <_Z22__fetch_global_Serial1v+0x34>)
   d51f0:	6829      	ldr	r1, [r5, #0]
   d51f2:	f011 0401 	ands.w	r4, r1, #1
   d51f6:	d111      	bne.n	d521c <_Z22__fetch_global_Serial1v+0x30>
   d51f8:	4628      	mov	r0, r5
   d51fa:	f7fe ff50 	bl	d409e <__cxa_guard_acquire>
   d51fe:	b168      	cbz	r0, d521c <_Z22__fetch_global_Serial1v+0x30>
   d5200:	4a08      	ldr	r2, [pc, #32]	; (d5224 <_Z22__fetch_global_Serial1v+0x38>)
   d5202:	4b09      	ldr	r3, [pc, #36]	; (d5228 <_Z22__fetch_global_Serial1v+0x3c>)
   d5204:	4809      	ldr	r0, [pc, #36]	; (d522c <_Z22__fetch_global_Serial1v+0x40>)
   d5206:	4621      	mov	r1, r4
   d5208:	f7ff ffda 	bl	d51c0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d520c:	4628      	mov	r0, r5
   d520e:	f7fe ff4b 	bl	d40a8 <__cxa_guard_release>
   d5212:	4a07      	ldr	r2, [pc, #28]	; (d5230 <_Z22__fetch_global_Serial1v+0x44>)
   d5214:	4907      	ldr	r1, [pc, #28]	; (d5234 <_Z22__fetch_global_Serial1v+0x48>)
   d5216:	4805      	ldr	r0, [pc, #20]	; (d522c <_Z22__fetch_global_Serial1v+0x40>)
   d5218:	f000 f8b6 	bl	d5388 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d521c:	4803      	ldr	r0, [pc, #12]	; (d522c <_Z22__fetch_global_Serial1v+0x40>)
   d521e:	bd38      	pop	{r3, r4, r5, pc}
   d5220:	2003e694 	.word	0x2003e694
   d5224:	2003e698 	.word	0x2003e698
   d5228:	2003e610 	.word	0x2003e610
   d522c:	2003e5fc 	.word	0x2003e5fc
   d5230:	2003e3d8 	.word	0x2003e3d8
   d5234:	000d513d 	.word	0x000d513d

000d5238 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5238:	b510      	push	{r4, lr}
   d523a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d523c:	6800      	ldr	r0, [r0, #0]
   d523e:	b118      	cbz	r0, d5248 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d5240:	f7ff fa44 	bl	d46cc <free>
            wakeupSource_ = nullptr;
   d5244:	2300      	movs	r3, #0
   d5246:	6023      	str	r3, [r4, #0]
   d5248:	bd10      	pop	{r4, pc}

000d524a <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d524a:	b510      	push	{r4, lr}
   d524c:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d524e:	f7ff fff3 	bl	d5238 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5252:	4620      	mov	r0, r4
   d5254:	bd10      	pop	{r4, pc}
	...

000d5258 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5258:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d525a:	4c09      	ldr	r4, [pc, #36]	; (d5280 <_GLOBAL__sub_I_System+0x28>)
   d525c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d525e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5262:	6020      	str	r0, [r4, #0]
   d5264:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5266:	71a0      	strb	r0, [r4, #6]
   d5268:	8120      	strh	r0, [r4, #8]
   d526a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d526c:	f7ff fa02 	bl	d4674 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5270:	4620      	mov	r0, r4
   d5272:	4a04      	ldr	r2, [pc, #16]	; (d5284 <_GLOBAL__sub_I_System+0x2c>)
   d5274:	4904      	ldr	r1, [pc, #16]	; (d5288 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d527a:	f000 b885 	b.w	d5388 <__aeabi_atexit>
   d527e:	bf00      	nop
   d5280:	2003e71c 	.word	0x2003e71c
   d5284:	2003e3d8 	.word	0x2003e3d8
   d5288:	000d524b 	.word	0x000d524b

000d528c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d528c:	2200      	movs	r2, #0
   d528e:	4611      	mov	r1, r2
   d5290:	6840      	ldr	r0, [r0, #4]
   d5292:	f7ff b9d7 	b.w	d4644 <network_listening>

000d5296 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5296:	2200      	movs	r2, #0
   d5298:	4611      	mov	r1, r2
   d529a:	6840      	ldr	r0, [r0, #4]
   d529c:	f7ff b9e2 	b.w	d4664 <network_get_listen_timeout>

000d52a0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d52a0:	2200      	movs	r2, #0
   d52a2:	6840      	ldr	r0, [r0, #4]
   d52a4:	f7ff b9d6 	b.w	d4654 <network_set_listen_timeout>

000d52a8 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d52a8:	2200      	movs	r2, #0
   d52aa:	f081 0101 	eor.w	r1, r1, #1
   d52ae:	6840      	ldr	r0, [r0, #4]
   d52b0:	f7ff b9c0 	b.w	d4634 <network_listen>

000d52b4 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d52b4:	2300      	movs	r3, #0
   d52b6:	461a      	mov	r2, r3
   d52b8:	4619      	mov	r1, r3
   d52ba:	6840      	ldr	r0, [r0, #4]
   d52bc:	f7ff b9b2 	b.w	d4624 <network_off>

000d52c0 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d52c0:	2300      	movs	r3, #0
   d52c2:	461a      	mov	r2, r3
   d52c4:	4619      	mov	r1, r3
   d52c6:	6840      	ldr	r0, [r0, #4]
   d52c8:	f7ff b9a4 	b.w	d4614 <network_on>

000d52cc <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d52cc:	2200      	movs	r2, #0
   d52ce:	4611      	mov	r1, r2
   d52d0:	6840      	ldr	r0, [r0, #4]
   d52d2:	f7ff b997 	b.w	d4604 <network_ready>

000d52d6 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d52d6:	2200      	movs	r2, #0
   d52d8:	4611      	mov	r1, r2
   d52da:	6840      	ldr	r0, [r0, #4]
   d52dc:	f7ff b982 	b.w	d45e4 <network_connecting>

000d52e0 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d52e0:	2200      	movs	r2, #0
   d52e2:	2102      	movs	r1, #2
   d52e4:	6840      	ldr	r0, [r0, #4]
   d52e6:	f7ff b985 	b.w	d45f4 <network_disconnect>

000d52ea <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d52ea:	2300      	movs	r3, #0
   d52ec:	461a      	mov	r2, r3
   d52ee:	6840      	ldr	r0, [r0, #4]
   d52f0:	f7ff b970 	b.w	d45d4 <network_connect>

000d52f4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d52f4:	4b02      	ldr	r3, [pc, #8]	; (d5300 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d52f6:	2203      	movs	r2, #3
   d52f8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d52fa:	4a02      	ldr	r2, [pc, #8]	; (d5304 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d52fc:	601a      	str	r2, [r3, #0]
   d52fe:	4770      	bx	lr
   d5300:	2003e728 	.word	0x2003e728
   d5304:	000d63fc 	.word	0x000d63fc

000d5308 <_Z17acquireWireBufferv>:
   d5308:	b570      	push	{r4, r5, r6, lr}
   d530a:	4604      	mov	r4, r0
   d530c:	2514      	movs	r5, #20
   d530e:	462a      	mov	r2, r5
   d5310:	4e09      	ldr	r6, [pc, #36]	; (d5338 <_Z17acquireWireBufferv+0x30>)
   d5312:	2100      	movs	r1, #0
   d5314:	f000 febb 	bl	d608e <memset>
   d5318:	8025      	strh	r5, [r4, #0]
   d531a:	2520      	movs	r5, #32
   d531c:	4631      	mov	r1, r6
   d531e:	60a5      	str	r5, [r4, #8]
   d5320:	6125      	str	r5, [r4, #16]
   d5322:	4628      	mov	r0, r5
   d5324:	f000 f840 	bl	d53a8 <_ZnajRKSt9nothrow_t>
   d5328:	4631      	mov	r1, r6
   d532a:	6060      	str	r0, [r4, #4]
   d532c:	4628      	mov	r0, r5
   d532e:	f000 f83b 	bl	d53a8 <_ZnajRKSt9nothrow_t>
   d5332:	60e0      	str	r0, [r4, #12]
   d5334:	4620      	mov	r0, r4
   d5336:	bd70      	pop	{r4, r5, r6, pc}
   d5338:	000d6428 	.word	0x000d6428

000d533c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d533c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d533e:	4d0e      	ldr	r5, [pc, #56]	; (d5378 <_Z19__fetch_global_Wirev+0x3c>)
   d5340:	6829      	ldr	r1, [r5, #0]
   d5342:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5346:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5348:	d113      	bne.n	d5372 <_Z19__fetch_global_Wirev+0x36>
   d534a:	4628      	mov	r0, r5
   d534c:	f7fe fea7 	bl	d409e <__cxa_guard_acquire>
   d5350:	b178      	cbz	r0, d5372 <_Z19__fetch_global_Wirev+0x36>
   d5352:	a801      	add	r0, sp, #4
   d5354:	f7ff ffd8 	bl	d5308 <_Z17acquireWireBufferv>
   d5358:	aa01      	add	r2, sp, #4
   d535a:	4621      	mov	r1, r4
   d535c:	4807      	ldr	r0, [pc, #28]	; (d537c <_Z19__fetch_global_Wirev+0x40>)
   d535e:	f7ff fb89 	bl	d4a74 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d5362:	4628      	mov	r0, r5
   d5364:	f7fe fea0 	bl	d40a8 <__cxa_guard_release>
   d5368:	4a05      	ldr	r2, [pc, #20]	; (d5380 <_Z19__fetch_global_Wirev+0x44>)
   d536a:	4906      	ldr	r1, [pc, #24]	; (d5384 <_Z19__fetch_global_Wirev+0x48>)
   d536c:	4803      	ldr	r0, [pc, #12]	; (d537c <_Z19__fetch_global_Wirev+0x40>)
   d536e:	f000 f80b 	bl	d5388 <__aeabi_atexit>
	return wire;
}
   d5372:	4802      	ldr	r0, [pc, #8]	; (d537c <_Z19__fetch_global_Wirev+0x40>)
   d5374:	b007      	add	sp, #28
   d5376:	bd30      	pop	{r4, r5, pc}
   d5378:	2003e730 	.word	0x2003e730
   d537c:	2003e734 	.word	0x2003e734
   d5380:	2003e3d8 	.word	0x2003e3d8
   d5384:	000d4a1d 	.word	0x000d4a1d

000d5388 <__aeabi_atexit>:
   d5388:	460b      	mov	r3, r1
   d538a:	4601      	mov	r1, r0
   d538c:	4618      	mov	r0, r3
   d538e:	f000 be65 	b.w	d605c <__cxa_atexit>
	...

000d5394 <_ZSt15get_new_handlerv>:
   d5394:	4b02      	ldr	r3, [pc, #8]	; (d53a0 <_ZSt15get_new_handlerv+0xc>)
   d5396:	6818      	ldr	r0, [r3, #0]
   d5398:	f3bf 8f5f 	dmb	sy
   d539c:	4770      	bx	lr
   d539e:	bf00      	nop
   d53a0:	2003e74c 	.word	0x2003e74c

000d53a4 <_ZdlPvj>:
   d53a4:	f7fe be77 	b.w	d4096 <_ZdlPv>

000d53a8 <_ZnajRKSt9nothrow_t>:
   d53a8:	f000 b800 	b.w	d53ac <_ZnwjRKSt9nothrow_t>

000d53ac <_ZnwjRKSt9nothrow_t>:
   d53ac:	b510      	push	{r4, lr}
   d53ae:	2800      	cmp	r0, #0
   d53b0:	bf14      	ite	ne
   d53b2:	4604      	movne	r4, r0
   d53b4:	2401      	moveq	r4, #1
   d53b6:	4620      	mov	r0, r4
   d53b8:	f7ff f980 	bl	d46bc <malloc>
   d53bc:	b920      	cbnz	r0, d53c8 <_ZnwjRKSt9nothrow_t+0x1c>
   d53be:	f7ff ffe9 	bl	d5394 <_ZSt15get_new_handlerv>
   d53c2:	b108      	cbz	r0, d53c8 <_ZnwjRKSt9nothrow_t+0x1c>
   d53c4:	4780      	blx	r0
   d53c6:	e7f6      	b.n	d53b6 <_ZnwjRKSt9nothrow_t+0xa>
   d53c8:	bd10      	pop	{r4, pc}
	...

000d53cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d53cc:	4b18      	ldr	r3, [pc, #96]	; (d5430 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d53ce:	681a      	ldr	r2, [r3, #0]
   d53d0:	07d1      	lsls	r1, r2, #31
   d53d2:	bf5c      	itt	pl
   d53d4:	2201      	movpl	r2, #1
   d53d6:	601a      	strpl	r2, [r3, #0]
   d53d8:	4b16      	ldr	r3, [pc, #88]	; (d5434 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d53da:	681a      	ldr	r2, [r3, #0]
   d53dc:	07d2      	lsls	r2, r2, #31
   d53de:	bf5c      	itt	pl
   d53e0:	2201      	movpl	r2, #1
   d53e2:	601a      	strpl	r2, [r3, #0]
   d53e4:	4b14      	ldr	r3, [pc, #80]	; (d5438 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d53e6:	681a      	ldr	r2, [r3, #0]
   d53e8:	07d0      	lsls	r0, r2, #31
   d53ea:	bf5c      	itt	pl
   d53ec:	2201      	movpl	r2, #1
   d53ee:	601a      	strpl	r2, [r3, #0]
   d53f0:	4b12      	ldr	r3, [pc, #72]	; (d543c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d53f2:	681a      	ldr	r2, [r3, #0]
   d53f4:	07d1      	lsls	r1, r2, #31
   d53f6:	bf5c      	itt	pl
   d53f8:	2201      	movpl	r2, #1
   d53fa:	601a      	strpl	r2, [r3, #0]
   d53fc:	4b10      	ldr	r3, [pc, #64]	; (d5440 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d53fe:	681a      	ldr	r2, [r3, #0]
   d5400:	07d2      	lsls	r2, r2, #31
   d5402:	bf5c      	itt	pl
   d5404:	2201      	movpl	r2, #1
   d5406:	601a      	strpl	r2, [r3, #0]
   d5408:	4b0e      	ldr	r3, [pc, #56]	; (d5444 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d540a:	681a      	ldr	r2, [r3, #0]
   d540c:	07d0      	lsls	r0, r2, #31
   d540e:	bf5c      	itt	pl
   d5410:	2201      	movpl	r2, #1
   d5412:	601a      	strpl	r2, [r3, #0]
   d5414:	4b0c      	ldr	r3, [pc, #48]	; (d5448 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5416:	681a      	ldr	r2, [r3, #0]
   d5418:	07d1      	lsls	r1, r2, #31
   d541a:	bf5c      	itt	pl
   d541c:	2201      	movpl	r2, #1
   d541e:	601a      	strpl	r2, [r3, #0]
   d5420:	4b0a      	ldr	r3, [pc, #40]	; (d544c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5422:	681a      	ldr	r2, [r3, #0]
   d5424:	07d2      	lsls	r2, r2, #31
   d5426:	bf5c      	itt	pl
   d5428:	2201      	movpl	r2, #1
   d542a:	601a      	strpl	r2, [r3, #0]
   d542c:	4770      	bx	lr
   d542e:	bf00      	nop
   d5430:	2003e76c 	.word	0x2003e76c
   d5434:	2003e768 	.word	0x2003e768
   d5438:	2003e764 	.word	0x2003e764
   d543c:	2003e760 	.word	0x2003e760
   d5440:	2003e75c 	.word	0x2003e75c
   d5444:	2003e758 	.word	0x2003e758
   d5448:	2003e754 	.word	0x2003e754
   d544c:	2003e750 	.word	0x2003e750

000d5450 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5450:	4b24      	ldr	r3, [pc, #144]	; (d54e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5452:	681a      	ldr	r2, [r3, #0]
   d5454:	07d0      	lsls	r0, r2, #31
   d5456:	bf5c      	itt	pl
   d5458:	2201      	movpl	r2, #1
   d545a:	601a      	strpl	r2, [r3, #0]
   d545c:	4b22      	ldr	r3, [pc, #136]	; (d54e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d545e:	681a      	ldr	r2, [r3, #0]
   d5460:	07d1      	lsls	r1, r2, #31
   d5462:	bf5c      	itt	pl
   d5464:	2201      	movpl	r2, #1
   d5466:	601a      	strpl	r2, [r3, #0]
   d5468:	4b20      	ldr	r3, [pc, #128]	; (d54ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d546a:	681a      	ldr	r2, [r3, #0]
   d546c:	07d2      	lsls	r2, r2, #31
   d546e:	bf5c      	itt	pl
   d5470:	2201      	movpl	r2, #1
   d5472:	601a      	strpl	r2, [r3, #0]
   d5474:	4b1e      	ldr	r3, [pc, #120]	; (d54f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5476:	681a      	ldr	r2, [r3, #0]
   d5478:	07d0      	lsls	r0, r2, #31
   d547a:	bf5c      	itt	pl
   d547c:	2201      	movpl	r2, #1
   d547e:	601a      	strpl	r2, [r3, #0]
   d5480:	4b1c      	ldr	r3, [pc, #112]	; (d54f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5482:	681a      	ldr	r2, [r3, #0]
   d5484:	07d1      	lsls	r1, r2, #31
   d5486:	bf5c      	itt	pl
   d5488:	2201      	movpl	r2, #1
   d548a:	601a      	strpl	r2, [r3, #0]
   d548c:	4b1a      	ldr	r3, [pc, #104]	; (d54f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d548e:	681a      	ldr	r2, [r3, #0]
   d5490:	07d2      	lsls	r2, r2, #31
   d5492:	bf5c      	itt	pl
   d5494:	2201      	movpl	r2, #1
   d5496:	601a      	strpl	r2, [r3, #0]
   d5498:	4b18      	ldr	r3, [pc, #96]	; (d54fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d549a:	681a      	ldr	r2, [r3, #0]
   d549c:	07d0      	lsls	r0, r2, #31
   d549e:	bf5c      	itt	pl
   d54a0:	2201      	movpl	r2, #1
   d54a2:	601a      	strpl	r2, [r3, #0]
   d54a4:	4b16      	ldr	r3, [pc, #88]	; (d5500 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d54a6:	681a      	ldr	r2, [r3, #0]
   d54a8:	07d1      	lsls	r1, r2, #31
   d54aa:	bf5c      	itt	pl
   d54ac:	2201      	movpl	r2, #1
   d54ae:	601a      	strpl	r2, [r3, #0]
   d54b0:	4b14      	ldr	r3, [pc, #80]	; (d5504 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d54b2:	681a      	ldr	r2, [r3, #0]
   d54b4:	07d2      	lsls	r2, r2, #31
   d54b6:	bf5c      	itt	pl
   d54b8:	2201      	movpl	r2, #1
   d54ba:	601a      	strpl	r2, [r3, #0]
   d54bc:	4b12      	ldr	r3, [pc, #72]	; (d5508 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d54be:	681a      	ldr	r2, [r3, #0]
   d54c0:	07d0      	lsls	r0, r2, #31
   d54c2:	bf5c      	itt	pl
   d54c4:	2201      	movpl	r2, #1
   d54c6:	601a      	strpl	r2, [r3, #0]
   d54c8:	4b10      	ldr	r3, [pc, #64]	; (d550c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d54ca:	681a      	ldr	r2, [r3, #0]
   d54cc:	07d1      	lsls	r1, r2, #31
   d54ce:	bf5c      	itt	pl
   d54d0:	2201      	movpl	r2, #1
   d54d2:	601a      	strpl	r2, [r3, #0]
   d54d4:	4b0e      	ldr	r3, [pc, #56]	; (d5510 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d54d6:	681a      	ldr	r2, [r3, #0]
   d54d8:	07d2      	lsls	r2, r2, #31
   d54da:	bf5c      	itt	pl
   d54dc:	2201      	movpl	r2, #1
   d54de:	601a      	strpl	r2, [r3, #0]
   d54e0:	4770      	bx	lr
   d54e2:	bf00      	nop
   d54e4:	2003e79c 	.word	0x2003e79c
   d54e8:	2003e798 	.word	0x2003e798
   d54ec:	2003e794 	.word	0x2003e794
   d54f0:	2003e790 	.word	0x2003e790
   d54f4:	2003e78c 	.word	0x2003e78c
   d54f8:	2003e788 	.word	0x2003e788
   d54fc:	2003e784 	.word	0x2003e784
   d5500:	2003e780 	.word	0x2003e780
   d5504:	2003e77c 	.word	0x2003e77c
   d5508:	2003e778 	.word	0x2003e778
   d550c:	2003e774 	.word	0x2003e774
   d5510:	2003e770 	.word	0x2003e770

000d5514 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5514:	4b24      	ldr	r3, [pc, #144]	; (d55a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5516:	681a      	ldr	r2, [r3, #0]
   d5518:	07d0      	lsls	r0, r2, #31
   d551a:	bf5c      	itt	pl
   d551c:	2201      	movpl	r2, #1
   d551e:	601a      	strpl	r2, [r3, #0]
   d5520:	4b22      	ldr	r3, [pc, #136]	; (d55ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5522:	681a      	ldr	r2, [r3, #0]
   d5524:	07d1      	lsls	r1, r2, #31
   d5526:	bf5c      	itt	pl
   d5528:	2201      	movpl	r2, #1
   d552a:	601a      	strpl	r2, [r3, #0]
   d552c:	4b20      	ldr	r3, [pc, #128]	; (d55b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d552e:	681a      	ldr	r2, [r3, #0]
   d5530:	07d2      	lsls	r2, r2, #31
   d5532:	bf5c      	itt	pl
   d5534:	2201      	movpl	r2, #1
   d5536:	601a      	strpl	r2, [r3, #0]
   d5538:	4b1e      	ldr	r3, [pc, #120]	; (d55b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d553a:	681a      	ldr	r2, [r3, #0]
   d553c:	07d0      	lsls	r0, r2, #31
   d553e:	bf5c      	itt	pl
   d5540:	2201      	movpl	r2, #1
   d5542:	601a      	strpl	r2, [r3, #0]
   d5544:	4b1c      	ldr	r3, [pc, #112]	; (d55b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5546:	681a      	ldr	r2, [r3, #0]
   d5548:	07d1      	lsls	r1, r2, #31
   d554a:	bf5c      	itt	pl
   d554c:	2201      	movpl	r2, #1
   d554e:	601a      	strpl	r2, [r3, #0]
   d5550:	4b1a      	ldr	r3, [pc, #104]	; (d55bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5552:	681a      	ldr	r2, [r3, #0]
   d5554:	07d2      	lsls	r2, r2, #31
   d5556:	bf5c      	itt	pl
   d5558:	2201      	movpl	r2, #1
   d555a:	601a      	strpl	r2, [r3, #0]
   d555c:	4b18      	ldr	r3, [pc, #96]	; (d55c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d555e:	681a      	ldr	r2, [r3, #0]
   d5560:	07d0      	lsls	r0, r2, #31
   d5562:	bf5c      	itt	pl
   d5564:	2201      	movpl	r2, #1
   d5566:	601a      	strpl	r2, [r3, #0]
   d5568:	4b16      	ldr	r3, [pc, #88]	; (d55c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d556a:	681a      	ldr	r2, [r3, #0]
   d556c:	07d1      	lsls	r1, r2, #31
   d556e:	bf5c      	itt	pl
   d5570:	2201      	movpl	r2, #1
   d5572:	601a      	strpl	r2, [r3, #0]
   d5574:	4b14      	ldr	r3, [pc, #80]	; (d55c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5576:	681a      	ldr	r2, [r3, #0]
   d5578:	07d2      	lsls	r2, r2, #31
   d557a:	bf5c      	itt	pl
   d557c:	2201      	movpl	r2, #1
   d557e:	601a      	strpl	r2, [r3, #0]
   d5580:	4b12      	ldr	r3, [pc, #72]	; (d55cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5582:	681a      	ldr	r2, [r3, #0]
   d5584:	07d0      	lsls	r0, r2, #31
   d5586:	bf5c      	itt	pl
   d5588:	2201      	movpl	r2, #1
   d558a:	601a      	strpl	r2, [r3, #0]
   d558c:	4b10      	ldr	r3, [pc, #64]	; (d55d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d558e:	681a      	ldr	r2, [r3, #0]
   d5590:	07d1      	lsls	r1, r2, #31
   d5592:	bf5c      	itt	pl
   d5594:	2201      	movpl	r2, #1
   d5596:	601a      	strpl	r2, [r3, #0]
   d5598:	4b0e      	ldr	r3, [pc, #56]	; (d55d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d559a:	681a      	ldr	r2, [r3, #0]
   d559c:	07d2      	lsls	r2, r2, #31
   d559e:	bf5c      	itt	pl
   d55a0:	2201      	movpl	r2, #1
   d55a2:	601a      	strpl	r2, [r3, #0]
   d55a4:	4770      	bx	lr
   d55a6:	bf00      	nop
   d55a8:	2003e7cc 	.word	0x2003e7cc
   d55ac:	2003e7c8 	.word	0x2003e7c8
   d55b0:	2003e7c4 	.word	0x2003e7c4
   d55b4:	2003e7c0 	.word	0x2003e7c0
   d55b8:	2003e7bc 	.word	0x2003e7bc
   d55bc:	2003e7b8 	.word	0x2003e7b8
   d55c0:	2003e7b4 	.word	0x2003e7b4
   d55c4:	2003e7b0 	.word	0x2003e7b0
   d55c8:	2003e7ac 	.word	0x2003e7ac
   d55cc:	2003e7a8 	.word	0x2003e7a8
   d55d0:	2003e7a4 	.word	0x2003e7a4
   d55d4:	2003e7a0 	.word	0x2003e7a0

000d55d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d55d8:	4b18      	ldr	r3, [pc, #96]	; (d563c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d55da:	681a      	ldr	r2, [r3, #0]
   d55dc:	07d1      	lsls	r1, r2, #31
   d55de:	bf5c      	itt	pl
   d55e0:	2201      	movpl	r2, #1
   d55e2:	601a      	strpl	r2, [r3, #0]
   d55e4:	4b16      	ldr	r3, [pc, #88]	; (d5640 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d55e6:	681a      	ldr	r2, [r3, #0]
   d55e8:	07d2      	lsls	r2, r2, #31
   d55ea:	bf5c      	itt	pl
   d55ec:	2201      	movpl	r2, #1
   d55ee:	601a      	strpl	r2, [r3, #0]
   d55f0:	4b14      	ldr	r3, [pc, #80]	; (d5644 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d55f2:	681a      	ldr	r2, [r3, #0]
   d55f4:	07d0      	lsls	r0, r2, #31
   d55f6:	bf5c      	itt	pl
   d55f8:	2201      	movpl	r2, #1
   d55fa:	601a      	strpl	r2, [r3, #0]
   d55fc:	4b12      	ldr	r3, [pc, #72]	; (d5648 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d55fe:	681a      	ldr	r2, [r3, #0]
   d5600:	07d1      	lsls	r1, r2, #31
   d5602:	bf5c      	itt	pl
   d5604:	2201      	movpl	r2, #1
   d5606:	601a      	strpl	r2, [r3, #0]
   d5608:	4b10      	ldr	r3, [pc, #64]	; (d564c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d560a:	681a      	ldr	r2, [r3, #0]
   d560c:	07d2      	lsls	r2, r2, #31
   d560e:	bf5c      	itt	pl
   d5610:	2201      	movpl	r2, #1
   d5612:	601a      	strpl	r2, [r3, #0]
   d5614:	4b0e      	ldr	r3, [pc, #56]	; (d5650 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5616:	681a      	ldr	r2, [r3, #0]
   d5618:	07d0      	lsls	r0, r2, #31
   d561a:	bf5c      	itt	pl
   d561c:	2201      	movpl	r2, #1
   d561e:	601a      	strpl	r2, [r3, #0]
   d5620:	4b0c      	ldr	r3, [pc, #48]	; (d5654 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5622:	681a      	ldr	r2, [r3, #0]
   d5624:	07d1      	lsls	r1, r2, #31
   d5626:	bf5c      	itt	pl
   d5628:	2201      	movpl	r2, #1
   d562a:	601a      	strpl	r2, [r3, #0]
   d562c:	4b0a      	ldr	r3, [pc, #40]	; (d5658 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d562e:	681a      	ldr	r2, [r3, #0]
   d5630:	07d2      	lsls	r2, r2, #31
   d5632:	bf5c      	itt	pl
   d5634:	2201      	movpl	r2, #1
   d5636:	601a      	strpl	r2, [r3, #0]
   d5638:	4770      	bx	lr
   d563a:	bf00      	nop
   d563c:	2003e7ec 	.word	0x2003e7ec
   d5640:	2003e7e8 	.word	0x2003e7e8
   d5644:	2003e7e4 	.word	0x2003e7e4
   d5648:	2003e7e0 	.word	0x2003e7e0
   d564c:	2003e7dc 	.word	0x2003e7dc
   d5650:	2003e7d8 	.word	0x2003e7d8
   d5654:	2003e7d4 	.word	0x2003e7d4
   d5658:	2003e7d0 	.word	0x2003e7d0

000d565c <__aeabi_drsub>:
   d565c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5660:	e002      	b.n	d5668 <__adddf3>
   d5662:	bf00      	nop

000d5664 <__aeabi_dsub>:
   d5664:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5668 <__adddf3>:
   d5668:	b530      	push	{r4, r5, lr}
   d566a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d566e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5672:	ea94 0f05 	teq	r4, r5
   d5676:	bf08      	it	eq
   d5678:	ea90 0f02 	teqeq	r0, r2
   d567c:	bf1f      	itttt	ne
   d567e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5682:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5686:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d568a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d568e:	f000 80e2 	beq.w	d5856 <__adddf3+0x1ee>
   d5692:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5696:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d569a:	bfb8      	it	lt
   d569c:	426d      	neglt	r5, r5
   d569e:	dd0c      	ble.n	d56ba <__adddf3+0x52>
   d56a0:	442c      	add	r4, r5
   d56a2:	ea80 0202 	eor.w	r2, r0, r2
   d56a6:	ea81 0303 	eor.w	r3, r1, r3
   d56aa:	ea82 0000 	eor.w	r0, r2, r0
   d56ae:	ea83 0101 	eor.w	r1, r3, r1
   d56b2:	ea80 0202 	eor.w	r2, r0, r2
   d56b6:	ea81 0303 	eor.w	r3, r1, r3
   d56ba:	2d36      	cmp	r5, #54	; 0x36
   d56bc:	bf88      	it	hi
   d56be:	bd30      	pophi	{r4, r5, pc}
   d56c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d56c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d56c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d56cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d56d0:	d002      	beq.n	d56d8 <__adddf3+0x70>
   d56d2:	4240      	negs	r0, r0
   d56d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d56d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d56dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d56e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d56e4:	d002      	beq.n	d56ec <__adddf3+0x84>
   d56e6:	4252      	negs	r2, r2
   d56e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d56ec:	ea94 0f05 	teq	r4, r5
   d56f0:	f000 80a7 	beq.w	d5842 <__adddf3+0x1da>
   d56f4:	f1a4 0401 	sub.w	r4, r4, #1
   d56f8:	f1d5 0e20 	rsbs	lr, r5, #32
   d56fc:	db0d      	blt.n	d571a <__adddf3+0xb2>
   d56fe:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5702:	fa22 f205 	lsr.w	r2, r2, r5
   d5706:	1880      	adds	r0, r0, r2
   d5708:	f141 0100 	adc.w	r1, r1, #0
   d570c:	fa03 f20e 	lsl.w	r2, r3, lr
   d5710:	1880      	adds	r0, r0, r2
   d5712:	fa43 f305 	asr.w	r3, r3, r5
   d5716:	4159      	adcs	r1, r3
   d5718:	e00e      	b.n	d5738 <__adddf3+0xd0>
   d571a:	f1a5 0520 	sub.w	r5, r5, #32
   d571e:	f10e 0e20 	add.w	lr, lr, #32
   d5722:	2a01      	cmp	r2, #1
   d5724:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5728:	bf28      	it	cs
   d572a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d572e:	fa43 f305 	asr.w	r3, r3, r5
   d5732:	18c0      	adds	r0, r0, r3
   d5734:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5738:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d573c:	d507      	bpl.n	d574e <__adddf3+0xe6>
   d573e:	f04f 0e00 	mov.w	lr, #0
   d5742:	f1dc 0c00 	rsbs	ip, ip, #0
   d5746:	eb7e 0000 	sbcs.w	r0, lr, r0
   d574a:	eb6e 0101 	sbc.w	r1, lr, r1
   d574e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5752:	d31b      	bcc.n	d578c <__adddf3+0x124>
   d5754:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5758:	d30c      	bcc.n	d5774 <__adddf3+0x10c>
   d575a:	0849      	lsrs	r1, r1, #1
   d575c:	ea5f 0030 	movs.w	r0, r0, rrx
   d5760:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5764:	f104 0401 	add.w	r4, r4, #1
   d5768:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d576c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5770:	f080 809a 	bcs.w	d58a8 <__adddf3+0x240>
   d5774:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5778:	bf08      	it	eq
   d577a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d577e:	f150 0000 	adcs.w	r0, r0, #0
   d5782:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5786:	ea41 0105 	orr.w	r1, r1, r5
   d578a:	bd30      	pop	{r4, r5, pc}
   d578c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5790:	4140      	adcs	r0, r0
   d5792:	eb41 0101 	adc.w	r1, r1, r1
   d5796:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d579a:	f1a4 0401 	sub.w	r4, r4, #1
   d579e:	d1e9      	bne.n	d5774 <__adddf3+0x10c>
   d57a0:	f091 0f00 	teq	r1, #0
   d57a4:	bf04      	itt	eq
   d57a6:	4601      	moveq	r1, r0
   d57a8:	2000      	moveq	r0, #0
   d57aa:	fab1 f381 	clz	r3, r1
   d57ae:	bf08      	it	eq
   d57b0:	3320      	addeq	r3, #32
   d57b2:	f1a3 030b 	sub.w	r3, r3, #11
   d57b6:	f1b3 0220 	subs.w	r2, r3, #32
   d57ba:	da0c      	bge.n	d57d6 <__adddf3+0x16e>
   d57bc:	320c      	adds	r2, #12
   d57be:	dd08      	ble.n	d57d2 <__adddf3+0x16a>
   d57c0:	f102 0c14 	add.w	ip, r2, #20
   d57c4:	f1c2 020c 	rsb	r2, r2, #12
   d57c8:	fa01 f00c 	lsl.w	r0, r1, ip
   d57cc:	fa21 f102 	lsr.w	r1, r1, r2
   d57d0:	e00c      	b.n	d57ec <__adddf3+0x184>
   d57d2:	f102 0214 	add.w	r2, r2, #20
   d57d6:	bfd8      	it	le
   d57d8:	f1c2 0c20 	rsble	ip, r2, #32
   d57dc:	fa01 f102 	lsl.w	r1, r1, r2
   d57e0:	fa20 fc0c 	lsr.w	ip, r0, ip
   d57e4:	bfdc      	itt	le
   d57e6:	ea41 010c 	orrle.w	r1, r1, ip
   d57ea:	4090      	lslle	r0, r2
   d57ec:	1ae4      	subs	r4, r4, r3
   d57ee:	bfa2      	ittt	ge
   d57f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d57f4:	4329      	orrge	r1, r5
   d57f6:	bd30      	popge	{r4, r5, pc}
   d57f8:	ea6f 0404 	mvn.w	r4, r4
   d57fc:	3c1f      	subs	r4, #31
   d57fe:	da1c      	bge.n	d583a <__adddf3+0x1d2>
   d5800:	340c      	adds	r4, #12
   d5802:	dc0e      	bgt.n	d5822 <__adddf3+0x1ba>
   d5804:	f104 0414 	add.w	r4, r4, #20
   d5808:	f1c4 0220 	rsb	r2, r4, #32
   d580c:	fa20 f004 	lsr.w	r0, r0, r4
   d5810:	fa01 f302 	lsl.w	r3, r1, r2
   d5814:	ea40 0003 	orr.w	r0, r0, r3
   d5818:	fa21 f304 	lsr.w	r3, r1, r4
   d581c:	ea45 0103 	orr.w	r1, r5, r3
   d5820:	bd30      	pop	{r4, r5, pc}
   d5822:	f1c4 040c 	rsb	r4, r4, #12
   d5826:	f1c4 0220 	rsb	r2, r4, #32
   d582a:	fa20 f002 	lsr.w	r0, r0, r2
   d582e:	fa01 f304 	lsl.w	r3, r1, r4
   d5832:	ea40 0003 	orr.w	r0, r0, r3
   d5836:	4629      	mov	r1, r5
   d5838:	bd30      	pop	{r4, r5, pc}
   d583a:	fa21 f004 	lsr.w	r0, r1, r4
   d583e:	4629      	mov	r1, r5
   d5840:	bd30      	pop	{r4, r5, pc}
   d5842:	f094 0f00 	teq	r4, #0
   d5846:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d584a:	bf06      	itte	eq
   d584c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5850:	3401      	addeq	r4, #1
   d5852:	3d01      	subne	r5, #1
   d5854:	e74e      	b.n	d56f4 <__adddf3+0x8c>
   d5856:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d585a:	bf18      	it	ne
   d585c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5860:	d029      	beq.n	d58b6 <__adddf3+0x24e>
   d5862:	ea94 0f05 	teq	r4, r5
   d5866:	bf08      	it	eq
   d5868:	ea90 0f02 	teqeq	r0, r2
   d586c:	d005      	beq.n	d587a <__adddf3+0x212>
   d586e:	ea54 0c00 	orrs.w	ip, r4, r0
   d5872:	bf04      	itt	eq
   d5874:	4619      	moveq	r1, r3
   d5876:	4610      	moveq	r0, r2
   d5878:	bd30      	pop	{r4, r5, pc}
   d587a:	ea91 0f03 	teq	r1, r3
   d587e:	bf1e      	ittt	ne
   d5880:	2100      	movne	r1, #0
   d5882:	2000      	movne	r0, #0
   d5884:	bd30      	popne	{r4, r5, pc}
   d5886:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d588a:	d105      	bne.n	d5898 <__adddf3+0x230>
   d588c:	0040      	lsls	r0, r0, #1
   d588e:	4149      	adcs	r1, r1
   d5890:	bf28      	it	cs
   d5892:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5896:	bd30      	pop	{r4, r5, pc}
   d5898:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d589c:	bf3c      	itt	cc
   d589e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d58a2:	bd30      	popcc	{r4, r5, pc}
   d58a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d58a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d58ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d58b0:	f04f 0000 	mov.w	r0, #0
   d58b4:	bd30      	pop	{r4, r5, pc}
   d58b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d58ba:	bf1a      	itte	ne
   d58bc:	4619      	movne	r1, r3
   d58be:	4610      	movne	r0, r2
   d58c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d58c4:	bf1c      	itt	ne
   d58c6:	460b      	movne	r3, r1
   d58c8:	4602      	movne	r2, r0
   d58ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d58ce:	bf06      	itte	eq
   d58d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d58d4:	ea91 0f03 	teqeq	r1, r3
   d58d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d58dc:	bd30      	pop	{r4, r5, pc}
   d58de:	bf00      	nop

000d58e0 <__aeabi_ui2d>:
   d58e0:	f090 0f00 	teq	r0, #0
   d58e4:	bf04      	itt	eq
   d58e6:	2100      	moveq	r1, #0
   d58e8:	4770      	bxeq	lr
   d58ea:	b530      	push	{r4, r5, lr}
   d58ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d58f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d58f4:	f04f 0500 	mov.w	r5, #0
   d58f8:	f04f 0100 	mov.w	r1, #0
   d58fc:	e750      	b.n	d57a0 <__adddf3+0x138>
   d58fe:	bf00      	nop

000d5900 <__aeabi_i2d>:
   d5900:	f090 0f00 	teq	r0, #0
   d5904:	bf04      	itt	eq
   d5906:	2100      	moveq	r1, #0
   d5908:	4770      	bxeq	lr
   d590a:	b530      	push	{r4, r5, lr}
   d590c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5910:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5914:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5918:	bf48      	it	mi
   d591a:	4240      	negmi	r0, r0
   d591c:	f04f 0100 	mov.w	r1, #0
   d5920:	e73e      	b.n	d57a0 <__adddf3+0x138>
   d5922:	bf00      	nop

000d5924 <__aeabi_f2d>:
   d5924:	0042      	lsls	r2, r0, #1
   d5926:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d592a:	ea4f 0131 	mov.w	r1, r1, rrx
   d592e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5932:	bf1f      	itttt	ne
   d5934:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5938:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d593c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5940:	4770      	bxne	lr
   d5942:	f092 0f00 	teq	r2, #0
   d5946:	bf14      	ite	ne
   d5948:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d594c:	4770      	bxeq	lr
   d594e:	b530      	push	{r4, r5, lr}
   d5950:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5954:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5958:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d595c:	e720      	b.n	d57a0 <__adddf3+0x138>
   d595e:	bf00      	nop

000d5960 <__aeabi_ul2d>:
   d5960:	ea50 0201 	orrs.w	r2, r0, r1
   d5964:	bf08      	it	eq
   d5966:	4770      	bxeq	lr
   d5968:	b530      	push	{r4, r5, lr}
   d596a:	f04f 0500 	mov.w	r5, #0
   d596e:	e00a      	b.n	d5986 <__aeabi_l2d+0x16>

000d5970 <__aeabi_l2d>:
   d5970:	ea50 0201 	orrs.w	r2, r0, r1
   d5974:	bf08      	it	eq
   d5976:	4770      	bxeq	lr
   d5978:	b530      	push	{r4, r5, lr}
   d597a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d597e:	d502      	bpl.n	d5986 <__aeabi_l2d+0x16>
   d5980:	4240      	negs	r0, r0
   d5982:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5986:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d598a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d598e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5992:	f43f aedc 	beq.w	d574e <__adddf3+0xe6>
   d5996:	f04f 0203 	mov.w	r2, #3
   d599a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d599e:	bf18      	it	ne
   d59a0:	3203      	addne	r2, #3
   d59a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d59a6:	bf18      	it	ne
   d59a8:	3203      	addne	r2, #3
   d59aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d59ae:	f1c2 0320 	rsb	r3, r2, #32
   d59b2:	fa00 fc03 	lsl.w	ip, r0, r3
   d59b6:	fa20 f002 	lsr.w	r0, r0, r2
   d59ba:	fa01 fe03 	lsl.w	lr, r1, r3
   d59be:	ea40 000e 	orr.w	r0, r0, lr
   d59c2:	fa21 f102 	lsr.w	r1, r1, r2
   d59c6:	4414      	add	r4, r2
   d59c8:	e6c1      	b.n	d574e <__adddf3+0xe6>
   d59ca:	bf00      	nop

000d59cc <__aeabi_dmul>:
   d59cc:	b570      	push	{r4, r5, r6, lr}
   d59ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d59d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d59d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d59da:	bf1d      	ittte	ne
   d59dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d59e0:	ea94 0f0c 	teqne	r4, ip
   d59e4:	ea95 0f0c 	teqne	r5, ip
   d59e8:	f000 f8de 	bleq	d5ba8 <__aeabi_dmul+0x1dc>
   d59ec:	442c      	add	r4, r5
   d59ee:	ea81 0603 	eor.w	r6, r1, r3
   d59f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d59f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d59fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d59fe:	bf18      	it	ne
   d5a00:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5a04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5a08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5a0c:	d038      	beq.n	d5a80 <__aeabi_dmul+0xb4>
   d5a0e:	fba0 ce02 	umull	ip, lr, r0, r2
   d5a12:	f04f 0500 	mov.w	r5, #0
   d5a16:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5a1a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5a1e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5a22:	f04f 0600 	mov.w	r6, #0
   d5a26:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5a2a:	f09c 0f00 	teq	ip, #0
   d5a2e:	bf18      	it	ne
   d5a30:	f04e 0e01 	orrne.w	lr, lr, #1
   d5a34:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5a38:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5a3c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5a40:	d204      	bcs.n	d5a4c <__aeabi_dmul+0x80>
   d5a42:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5a46:	416d      	adcs	r5, r5
   d5a48:	eb46 0606 	adc.w	r6, r6, r6
   d5a4c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d5a50:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5a54:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d5a58:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5a5c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d5a60:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5a64:	bf88      	it	hi
   d5a66:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5a6a:	d81e      	bhi.n	d5aaa <__aeabi_dmul+0xde>
   d5a6c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5a70:	bf08      	it	eq
   d5a72:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d5a76:	f150 0000 	adcs.w	r0, r0, #0
   d5a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5a7e:	bd70      	pop	{r4, r5, r6, pc}
   d5a80:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5a84:	ea46 0101 	orr.w	r1, r6, r1
   d5a88:	ea40 0002 	orr.w	r0, r0, r2
   d5a8c:	ea81 0103 	eor.w	r1, r1, r3
   d5a90:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5a94:	bfc2      	ittt	gt
   d5a96:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5a9a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5a9e:	bd70      	popgt	{r4, r5, r6, pc}
   d5aa0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5aa4:	f04f 0e00 	mov.w	lr, #0
   d5aa8:	3c01      	subs	r4, #1
   d5aaa:	f300 80ab 	bgt.w	d5c04 <__aeabi_dmul+0x238>
   d5aae:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d5ab2:	bfde      	ittt	le
   d5ab4:	2000      	movle	r0, #0
   d5ab6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d5aba:	bd70      	pople	{r4, r5, r6, pc}
   d5abc:	f1c4 0400 	rsb	r4, r4, #0
   d5ac0:	3c20      	subs	r4, #32
   d5ac2:	da35      	bge.n	d5b30 <__aeabi_dmul+0x164>
   d5ac4:	340c      	adds	r4, #12
   d5ac6:	dc1b      	bgt.n	d5b00 <__aeabi_dmul+0x134>
   d5ac8:	f104 0414 	add.w	r4, r4, #20
   d5acc:	f1c4 0520 	rsb	r5, r4, #32
   d5ad0:	fa00 f305 	lsl.w	r3, r0, r5
   d5ad4:	fa20 f004 	lsr.w	r0, r0, r4
   d5ad8:	fa01 f205 	lsl.w	r2, r1, r5
   d5adc:	ea40 0002 	orr.w	r0, r0, r2
   d5ae0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d5ae4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5ae8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5aec:	fa21 f604 	lsr.w	r6, r1, r4
   d5af0:	eb42 0106 	adc.w	r1, r2, r6
   d5af4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5af8:	bf08      	it	eq
   d5afa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5afe:	bd70      	pop	{r4, r5, r6, pc}
   d5b00:	f1c4 040c 	rsb	r4, r4, #12
   d5b04:	f1c4 0520 	rsb	r5, r4, #32
   d5b08:	fa00 f304 	lsl.w	r3, r0, r4
   d5b0c:	fa20 f005 	lsr.w	r0, r0, r5
   d5b10:	fa01 f204 	lsl.w	r2, r1, r4
   d5b14:	ea40 0002 	orr.w	r0, r0, r2
   d5b18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5b1c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5b20:	f141 0100 	adc.w	r1, r1, #0
   d5b24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5b28:	bf08      	it	eq
   d5b2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5b2e:	bd70      	pop	{r4, r5, r6, pc}
   d5b30:	f1c4 0520 	rsb	r5, r4, #32
   d5b34:	fa00 f205 	lsl.w	r2, r0, r5
   d5b38:	ea4e 0e02 	orr.w	lr, lr, r2
   d5b3c:	fa20 f304 	lsr.w	r3, r0, r4
   d5b40:	fa01 f205 	lsl.w	r2, r1, r5
   d5b44:	ea43 0302 	orr.w	r3, r3, r2
   d5b48:	fa21 f004 	lsr.w	r0, r1, r4
   d5b4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5b50:	fa21 f204 	lsr.w	r2, r1, r4
   d5b54:	ea20 0002 	bic.w	r0, r0, r2
   d5b58:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d5b5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5b60:	bf08      	it	eq
   d5b62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5b66:	bd70      	pop	{r4, r5, r6, pc}
   d5b68:	f094 0f00 	teq	r4, #0
   d5b6c:	d10f      	bne.n	d5b8e <__aeabi_dmul+0x1c2>
   d5b6e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d5b72:	0040      	lsls	r0, r0, #1
   d5b74:	eb41 0101 	adc.w	r1, r1, r1
   d5b78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5b7c:	bf08      	it	eq
   d5b7e:	3c01      	subeq	r4, #1
   d5b80:	d0f7      	beq.n	d5b72 <__aeabi_dmul+0x1a6>
   d5b82:	ea41 0106 	orr.w	r1, r1, r6
   d5b86:	f095 0f00 	teq	r5, #0
   d5b8a:	bf18      	it	ne
   d5b8c:	4770      	bxne	lr
   d5b8e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d5b92:	0052      	lsls	r2, r2, #1
   d5b94:	eb43 0303 	adc.w	r3, r3, r3
   d5b98:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d5b9c:	bf08      	it	eq
   d5b9e:	3d01      	subeq	r5, #1
   d5ba0:	d0f7      	beq.n	d5b92 <__aeabi_dmul+0x1c6>
   d5ba2:	ea43 0306 	orr.w	r3, r3, r6
   d5ba6:	4770      	bx	lr
   d5ba8:	ea94 0f0c 	teq	r4, ip
   d5bac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5bb0:	bf18      	it	ne
   d5bb2:	ea95 0f0c 	teqne	r5, ip
   d5bb6:	d00c      	beq.n	d5bd2 <__aeabi_dmul+0x206>
   d5bb8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5bbc:	bf18      	it	ne
   d5bbe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5bc2:	d1d1      	bne.n	d5b68 <__aeabi_dmul+0x19c>
   d5bc4:	ea81 0103 	eor.w	r1, r1, r3
   d5bc8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5bcc:	f04f 0000 	mov.w	r0, #0
   d5bd0:	bd70      	pop	{r4, r5, r6, pc}
   d5bd2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5bd6:	bf06      	itte	eq
   d5bd8:	4610      	moveq	r0, r2
   d5bda:	4619      	moveq	r1, r3
   d5bdc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5be0:	d019      	beq.n	d5c16 <__aeabi_dmul+0x24a>
   d5be2:	ea94 0f0c 	teq	r4, ip
   d5be6:	d102      	bne.n	d5bee <__aeabi_dmul+0x222>
   d5be8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d5bec:	d113      	bne.n	d5c16 <__aeabi_dmul+0x24a>
   d5bee:	ea95 0f0c 	teq	r5, ip
   d5bf2:	d105      	bne.n	d5c00 <__aeabi_dmul+0x234>
   d5bf4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d5bf8:	bf1c      	itt	ne
   d5bfa:	4610      	movne	r0, r2
   d5bfc:	4619      	movne	r1, r3
   d5bfe:	d10a      	bne.n	d5c16 <__aeabi_dmul+0x24a>
   d5c00:	ea81 0103 	eor.w	r1, r1, r3
   d5c04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5c08:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5c0c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5c10:	f04f 0000 	mov.w	r0, #0
   d5c14:	bd70      	pop	{r4, r5, r6, pc}
   d5c16:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5c1a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d5c1e:	bd70      	pop	{r4, r5, r6, pc}

000d5c20 <__aeabi_ddiv>:
   d5c20:	b570      	push	{r4, r5, r6, lr}
   d5c22:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5c26:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5c2a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5c2e:	bf1d      	ittte	ne
   d5c30:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5c34:	ea94 0f0c 	teqne	r4, ip
   d5c38:	ea95 0f0c 	teqne	r5, ip
   d5c3c:	f000 f8a7 	bleq	d5d8e <__aeabi_ddiv+0x16e>
   d5c40:	eba4 0405 	sub.w	r4, r4, r5
   d5c44:	ea81 0e03 	eor.w	lr, r1, r3
   d5c48:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5c4c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5c50:	f000 8088 	beq.w	d5d64 <__aeabi_ddiv+0x144>
   d5c54:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5c58:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d5c5c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d5c60:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d5c64:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d5c68:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d5c6c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d5c70:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d5c74:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d5c78:	429d      	cmp	r5, r3
   d5c7a:	bf08      	it	eq
   d5c7c:	4296      	cmpeq	r6, r2
   d5c7e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d5c82:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d5c86:	d202      	bcs.n	d5c8e <__aeabi_ddiv+0x6e>
   d5c88:	085b      	lsrs	r3, r3, #1
   d5c8a:	ea4f 0232 	mov.w	r2, r2, rrx
   d5c8e:	1ab6      	subs	r6, r6, r2
   d5c90:	eb65 0503 	sbc.w	r5, r5, r3
   d5c94:	085b      	lsrs	r3, r3, #1
   d5c96:	ea4f 0232 	mov.w	r2, r2, rrx
   d5c9a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d5c9e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d5ca2:	ebb6 0e02 	subs.w	lr, r6, r2
   d5ca6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5caa:	bf22      	ittt	cs
   d5cac:	1ab6      	subcs	r6, r6, r2
   d5cae:	4675      	movcs	r5, lr
   d5cb0:	ea40 000c 	orrcs.w	r0, r0, ip
   d5cb4:	085b      	lsrs	r3, r3, #1
   d5cb6:	ea4f 0232 	mov.w	r2, r2, rrx
   d5cba:	ebb6 0e02 	subs.w	lr, r6, r2
   d5cbe:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5cc2:	bf22      	ittt	cs
   d5cc4:	1ab6      	subcs	r6, r6, r2
   d5cc6:	4675      	movcs	r5, lr
   d5cc8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d5ccc:	085b      	lsrs	r3, r3, #1
   d5cce:	ea4f 0232 	mov.w	r2, r2, rrx
   d5cd2:	ebb6 0e02 	subs.w	lr, r6, r2
   d5cd6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5cda:	bf22      	ittt	cs
   d5cdc:	1ab6      	subcs	r6, r6, r2
   d5cde:	4675      	movcs	r5, lr
   d5ce0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d5ce4:	085b      	lsrs	r3, r3, #1
   d5ce6:	ea4f 0232 	mov.w	r2, r2, rrx
   d5cea:	ebb6 0e02 	subs.w	lr, r6, r2
   d5cee:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5cf2:	bf22      	ittt	cs
   d5cf4:	1ab6      	subcs	r6, r6, r2
   d5cf6:	4675      	movcs	r5, lr
   d5cf8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d5cfc:	ea55 0e06 	orrs.w	lr, r5, r6
   d5d00:	d018      	beq.n	d5d34 <__aeabi_ddiv+0x114>
   d5d02:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d5d06:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d5d0a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d5d0e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d5d12:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d5d16:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d5d1a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d5d1e:	d1c0      	bne.n	d5ca2 <__aeabi_ddiv+0x82>
   d5d20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5d24:	d10b      	bne.n	d5d3e <__aeabi_ddiv+0x11e>
   d5d26:	ea41 0100 	orr.w	r1, r1, r0
   d5d2a:	f04f 0000 	mov.w	r0, #0
   d5d2e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d5d32:	e7b6      	b.n	d5ca2 <__aeabi_ddiv+0x82>
   d5d34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5d38:	bf04      	itt	eq
   d5d3a:	4301      	orreq	r1, r0
   d5d3c:	2000      	moveq	r0, #0
   d5d3e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5d42:	bf88      	it	hi
   d5d44:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5d48:	f63f aeaf 	bhi.w	d5aaa <__aeabi_dmul+0xde>
   d5d4c:	ebb5 0c03 	subs.w	ip, r5, r3
   d5d50:	bf04      	itt	eq
   d5d52:	ebb6 0c02 	subseq.w	ip, r6, r2
   d5d56:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5d5a:	f150 0000 	adcs.w	r0, r0, #0
   d5d5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5d62:	bd70      	pop	{r4, r5, r6, pc}
   d5d64:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d5d68:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d5d6c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d5d70:	bfc2      	ittt	gt
   d5d72:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5d76:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5d7a:	bd70      	popgt	{r4, r5, r6, pc}
   d5d7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5d80:	f04f 0e00 	mov.w	lr, #0
   d5d84:	3c01      	subs	r4, #1
   d5d86:	e690      	b.n	d5aaa <__aeabi_dmul+0xde>
   d5d88:	ea45 0e06 	orr.w	lr, r5, r6
   d5d8c:	e68d      	b.n	d5aaa <__aeabi_dmul+0xde>
   d5d8e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5d92:	ea94 0f0c 	teq	r4, ip
   d5d96:	bf08      	it	eq
   d5d98:	ea95 0f0c 	teqeq	r5, ip
   d5d9c:	f43f af3b 	beq.w	d5c16 <__aeabi_dmul+0x24a>
   d5da0:	ea94 0f0c 	teq	r4, ip
   d5da4:	d10a      	bne.n	d5dbc <__aeabi_ddiv+0x19c>
   d5da6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5daa:	f47f af34 	bne.w	d5c16 <__aeabi_dmul+0x24a>
   d5dae:	ea95 0f0c 	teq	r5, ip
   d5db2:	f47f af25 	bne.w	d5c00 <__aeabi_dmul+0x234>
   d5db6:	4610      	mov	r0, r2
   d5db8:	4619      	mov	r1, r3
   d5dba:	e72c      	b.n	d5c16 <__aeabi_dmul+0x24a>
   d5dbc:	ea95 0f0c 	teq	r5, ip
   d5dc0:	d106      	bne.n	d5dd0 <__aeabi_ddiv+0x1b0>
   d5dc2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5dc6:	f43f aefd 	beq.w	d5bc4 <__aeabi_dmul+0x1f8>
   d5dca:	4610      	mov	r0, r2
   d5dcc:	4619      	mov	r1, r3
   d5dce:	e722      	b.n	d5c16 <__aeabi_dmul+0x24a>
   d5dd0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5dd4:	bf18      	it	ne
   d5dd6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5dda:	f47f aec5 	bne.w	d5b68 <__aeabi_dmul+0x19c>
   d5dde:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d5de2:	f47f af0d 	bne.w	d5c00 <__aeabi_dmul+0x234>
   d5de6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d5dea:	f47f aeeb 	bne.w	d5bc4 <__aeabi_dmul+0x1f8>
   d5dee:	e712      	b.n	d5c16 <__aeabi_dmul+0x24a>

000d5df0 <__gedf2>:
   d5df0:	f04f 3cff 	mov.w	ip, #4294967295
   d5df4:	e006      	b.n	d5e04 <__cmpdf2+0x4>
   d5df6:	bf00      	nop

000d5df8 <__ledf2>:
   d5df8:	f04f 0c01 	mov.w	ip, #1
   d5dfc:	e002      	b.n	d5e04 <__cmpdf2+0x4>
   d5dfe:	bf00      	nop

000d5e00 <__cmpdf2>:
   d5e00:	f04f 0c01 	mov.w	ip, #1
   d5e04:	f84d cd04 	str.w	ip, [sp, #-4]!
   d5e08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5e0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5e10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5e14:	bf18      	it	ne
   d5e16:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d5e1a:	d01b      	beq.n	d5e54 <__cmpdf2+0x54>
   d5e1c:	b001      	add	sp, #4
   d5e1e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d5e22:	bf0c      	ite	eq
   d5e24:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d5e28:	ea91 0f03 	teqne	r1, r3
   d5e2c:	bf02      	ittt	eq
   d5e2e:	ea90 0f02 	teqeq	r0, r2
   d5e32:	2000      	moveq	r0, #0
   d5e34:	4770      	bxeq	lr
   d5e36:	f110 0f00 	cmn.w	r0, #0
   d5e3a:	ea91 0f03 	teq	r1, r3
   d5e3e:	bf58      	it	pl
   d5e40:	4299      	cmppl	r1, r3
   d5e42:	bf08      	it	eq
   d5e44:	4290      	cmpeq	r0, r2
   d5e46:	bf2c      	ite	cs
   d5e48:	17d8      	asrcs	r0, r3, #31
   d5e4a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d5e4e:	f040 0001 	orr.w	r0, r0, #1
   d5e52:	4770      	bx	lr
   d5e54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5e58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5e5c:	d102      	bne.n	d5e64 <__cmpdf2+0x64>
   d5e5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d5e62:	d107      	bne.n	d5e74 <__cmpdf2+0x74>
   d5e64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5e68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5e6c:	d1d6      	bne.n	d5e1c <__cmpdf2+0x1c>
   d5e6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d5e72:	d0d3      	beq.n	d5e1c <__cmpdf2+0x1c>
   d5e74:	f85d 0b04 	ldr.w	r0, [sp], #4
   d5e78:	4770      	bx	lr
   d5e7a:	bf00      	nop

000d5e7c <__aeabi_cdrcmple>:
   d5e7c:	4684      	mov	ip, r0
   d5e7e:	4610      	mov	r0, r2
   d5e80:	4662      	mov	r2, ip
   d5e82:	468c      	mov	ip, r1
   d5e84:	4619      	mov	r1, r3
   d5e86:	4663      	mov	r3, ip
   d5e88:	e000      	b.n	d5e8c <__aeabi_cdcmpeq>
   d5e8a:	bf00      	nop

000d5e8c <__aeabi_cdcmpeq>:
   d5e8c:	b501      	push	{r0, lr}
   d5e8e:	f7ff ffb7 	bl	d5e00 <__cmpdf2>
   d5e92:	2800      	cmp	r0, #0
   d5e94:	bf48      	it	mi
   d5e96:	f110 0f00 	cmnmi.w	r0, #0
   d5e9a:	bd01      	pop	{r0, pc}

000d5e9c <__aeabi_dcmpeq>:
   d5e9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5ea0:	f7ff fff4 	bl	d5e8c <__aeabi_cdcmpeq>
   d5ea4:	bf0c      	ite	eq
   d5ea6:	2001      	moveq	r0, #1
   d5ea8:	2000      	movne	r0, #0
   d5eaa:	f85d fb08 	ldr.w	pc, [sp], #8
   d5eae:	bf00      	nop

000d5eb0 <__aeabi_dcmplt>:
   d5eb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5eb4:	f7ff ffea 	bl	d5e8c <__aeabi_cdcmpeq>
   d5eb8:	bf34      	ite	cc
   d5eba:	2001      	movcc	r0, #1
   d5ebc:	2000      	movcs	r0, #0
   d5ebe:	f85d fb08 	ldr.w	pc, [sp], #8
   d5ec2:	bf00      	nop

000d5ec4 <__aeabi_dcmple>:
   d5ec4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5ec8:	f7ff ffe0 	bl	d5e8c <__aeabi_cdcmpeq>
   d5ecc:	bf94      	ite	ls
   d5ece:	2001      	movls	r0, #1
   d5ed0:	2000      	movhi	r0, #0
   d5ed2:	f85d fb08 	ldr.w	pc, [sp], #8
   d5ed6:	bf00      	nop

000d5ed8 <__aeabi_dcmpge>:
   d5ed8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5edc:	f7ff ffce 	bl	d5e7c <__aeabi_cdrcmple>
   d5ee0:	bf94      	ite	ls
   d5ee2:	2001      	movls	r0, #1
   d5ee4:	2000      	movhi	r0, #0
   d5ee6:	f85d fb08 	ldr.w	pc, [sp], #8
   d5eea:	bf00      	nop

000d5eec <__aeabi_dcmpgt>:
   d5eec:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5ef0:	f7ff ffc4 	bl	d5e7c <__aeabi_cdrcmple>
   d5ef4:	bf34      	ite	cc
   d5ef6:	2001      	movcc	r0, #1
   d5ef8:	2000      	movcs	r0, #0
   d5efa:	f85d fb08 	ldr.w	pc, [sp], #8
   d5efe:	bf00      	nop

000d5f00 <__aeabi_dcmpun>:
   d5f00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5f04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5f08:	d102      	bne.n	d5f10 <__aeabi_dcmpun+0x10>
   d5f0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d5f0e:	d10a      	bne.n	d5f26 <__aeabi_dcmpun+0x26>
   d5f10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5f14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5f18:	d102      	bne.n	d5f20 <__aeabi_dcmpun+0x20>
   d5f1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d5f1e:	d102      	bne.n	d5f26 <__aeabi_dcmpun+0x26>
   d5f20:	f04f 0000 	mov.w	r0, #0
   d5f24:	4770      	bx	lr
   d5f26:	f04f 0001 	mov.w	r0, #1
   d5f2a:	4770      	bx	lr

000d5f2c <__aeabi_d2iz>:
   d5f2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d5f30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d5f34:	d215      	bcs.n	d5f62 <__aeabi_d2iz+0x36>
   d5f36:	d511      	bpl.n	d5f5c <__aeabi_d2iz+0x30>
   d5f38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d5f3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d5f40:	d912      	bls.n	d5f68 <__aeabi_d2iz+0x3c>
   d5f42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d5f46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d5f4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d5f4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5f52:	fa23 f002 	lsr.w	r0, r3, r2
   d5f56:	bf18      	it	ne
   d5f58:	4240      	negne	r0, r0
   d5f5a:	4770      	bx	lr
   d5f5c:	f04f 0000 	mov.w	r0, #0
   d5f60:	4770      	bx	lr
   d5f62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d5f66:	d105      	bne.n	d5f74 <__aeabi_d2iz+0x48>
   d5f68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d5f6c:	bf08      	it	eq
   d5f6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d5f72:	4770      	bx	lr
   d5f74:	f04f 0000 	mov.w	r0, #0
   d5f78:	4770      	bx	lr
   d5f7a:	bf00      	nop

000d5f7c <__aeabi_d2uiz>:
   d5f7c:	004a      	lsls	r2, r1, #1
   d5f7e:	d211      	bcs.n	d5fa4 <__aeabi_d2uiz+0x28>
   d5f80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d5f84:	d211      	bcs.n	d5faa <__aeabi_d2uiz+0x2e>
   d5f86:	d50d      	bpl.n	d5fa4 <__aeabi_d2uiz+0x28>
   d5f88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d5f8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d5f90:	d40e      	bmi.n	d5fb0 <__aeabi_d2uiz+0x34>
   d5f92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d5f96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d5f9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d5f9e:	fa23 f002 	lsr.w	r0, r3, r2
   d5fa2:	4770      	bx	lr
   d5fa4:	f04f 0000 	mov.w	r0, #0
   d5fa8:	4770      	bx	lr
   d5faa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d5fae:	d102      	bne.n	d5fb6 <__aeabi_d2uiz+0x3a>
   d5fb0:	f04f 30ff 	mov.w	r0, #4294967295
   d5fb4:	4770      	bx	lr
   d5fb6:	f04f 0000 	mov.w	r0, #0
   d5fba:	4770      	bx	lr

000d5fbc <__aeabi_d2f>:
   d5fbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d5fc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d5fc4:	bf24      	itt	cs
   d5fc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d5fca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d5fce:	d90d      	bls.n	d5fec <__aeabi_d2f+0x30>
   d5fd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d5fd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d5fd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d5fdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d5fe0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d5fe4:	bf08      	it	eq
   d5fe6:	f020 0001 	biceq.w	r0, r0, #1
   d5fea:	4770      	bx	lr
   d5fec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d5ff0:	d121      	bne.n	d6036 <__aeabi_d2f+0x7a>
   d5ff2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d5ff6:	bfbc      	itt	lt
   d5ff8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d5ffc:	4770      	bxlt	lr
   d5ffe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6002:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d6006:	f1c2 0218 	rsb	r2, r2, #24
   d600a:	f1c2 0c20 	rsb	ip, r2, #32
   d600e:	fa10 f30c 	lsls.w	r3, r0, ip
   d6012:	fa20 f002 	lsr.w	r0, r0, r2
   d6016:	bf18      	it	ne
   d6018:	f040 0001 	orrne.w	r0, r0, #1
   d601c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6020:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6024:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6028:	ea40 000c 	orr.w	r0, r0, ip
   d602c:	fa23 f302 	lsr.w	r3, r3, r2
   d6030:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6034:	e7cc      	b.n	d5fd0 <__aeabi_d2f+0x14>
   d6036:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d603a:	d107      	bne.n	d604c <__aeabi_d2f+0x90>
   d603c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6040:	bf1e      	ittt	ne
   d6042:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6046:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d604a:	4770      	bxne	lr
   d604c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6050:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6054:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6058:	4770      	bx	lr
   d605a:	bf00      	nop

000d605c <__cxa_atexit>:
   d605c:	b510      	push	{r4, lr}
   d605e:	4c05      	ldr	r4, [pc, #20]	; (d6074 <__cxa_atexit+0x18>)
   d6060:	4613      	mov	r3, r2
   d6062:	b12c      	cbz	r4, d6070 <__cxa_atexit+0x14>
   d6064:	460a      	mov	r2, r1
   d6066:	4601      	mov	r1, r0
   d6068:	2002      	movs	r0, #2
   d606a:	f3af 8000 	nop.w
   d606e:	bd10      	pop	{r4, pc}
   d6070:	4620      	mov	r0, r4
   d6072:	bd10      	pop	{r4, pc}
   d6074:	00000000 	.word	0x00000000

000d6078 <memcpy>:
   d6078:	b510      	push	{r4, lr}
   d607a:	1e43      	subs	r3, r0, #1
   d607c:	440a      	add	r2, r1
   d607e:	4291      	cmp	r1, r2
   d6080:	d004      	beq.n	d608c <memcpy+0x14>
   d6082:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6086:	f803 4f01 	strb.w	r4, [r3, #1]!
   d608a:	e7f8      	b.n	d607e <memcpy+0x6>
   d608c:	bd10      	pop	{r4, pc}

000d608e <memset>:
   d608e:	4402      	add	r2, r0
   d6090:	4603      	mov	r3, r0
   d6092:	4293      	cmp	r3, r2
   d6094:	d002      	beq.n	d609c <memset+0xe>
   d6096:	f803 1b01 	strb.w	r1, [r3], #1
   d609a:	e7fa      	b.n	d6092 <memset+0x4>
   d609c:	4770      	bx	lr
	...

000d60a0 <srand>:
   d60a0:	b538      	push	{r3, r4, r5, lr}
   d60a2:	4b12      	ldr	r3, [pc, #72]	; (d60ec <srand+0x4c>)
   d60a4:	681c      	ldr	r4, [r3, #0]
   d60a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d60a8:	4605      	mov	r5, r0
   d60aa:	b9d3      	cbnz	r3, d60e2 <srand+0x42>
   d60ac:	2018      	movs	r0, #24
   d60ae:	f7fe fb05 	bl	d46bc <malloc>
   d60b2:	f243 330e 	movw	r3, #13070	; 0x330e
   d60b6:	63a0      	str	r0, [r4, #56]	; 0x38
   d60b8:	8003      	strh	r3, [r0, #0]
   d60ba:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d60be:	8043      	strh	r3, [r0, #2]
   d60c0:	f241 2334 	movw	r3, #4660	; 0x1234
   d60c4:	8083      	strh	r3, [r0, #4]
   d60c6:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d60ca:	80c3      	strh	r3, [r0, #6]
   d60cc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d60d0:	8103      	strh	r3, [r0, #8]
   d60d2:	2305      	movs	r3, #5
   d60d4:	8143      	strh	r3, [r0, #10]
   d60d6:	230b      	movs	r3, #11
   d60d8:	8183      	strh	r3, [r0, #12]
   d60da:	2201      	movs	r2, #1
   d60dc:	2300      	movs	r3, #0
   d60de:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d60e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d60e4:	2200      	movs	r2, #0
   d60e6:	611d      	str	r5, [r3, #16]
   d60e8:	615a      	str	r2, [r3, #20]
   d60ea:	bd38      	pop	{r3, r4, r5, pc}
   d60ec:	2003e3d4 	.word	0x2003e3d4

000d60f0 <strlen>:
   d60f0:	4603      	mov	r3, r0
   d60f2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d60f6:	2a00      	cmp	r2, #0
   d60f8:	d1fb      	bne.n	d60f2 <strlen+0x2>
   d60fa:	1a18      	subs	r0, r3, r0
   d60fc:	3801      	subs	r0, #1
   d60fe:	4770      	bx	lr

000d6100 <dynalib_user>:
   d6100:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6110:	0000 0000 7247 6565 206e 6f43 6f6c 2072     ....Green Color 
   d6120:	754c 696d 616e 636e 2065 203a 5200 6465     Luminance : .Red
   d6130:	4320 6c6f 726f 4c20 6d75 6e69 6e61 6563      Color Luminance
   d6140:	3a20 0020 6c42 6575 4320 6c6f 726f 4c20      : .Blue Color L
   d6150:	6d75 6e69 6e61 6563 3a20 0020 6e49 7266     uminance : .Infr
   d6160:	5261 6465 4c20 6d75 6e69 6e61 6563 3a20     aRed Luminance :
   d6170:	0020 7250 786f 6d69 7469 2079 666f 7420      .Proximity of t
   d6180:	6568 6420 7665 6369 2065 203a 4900 696e     he device : .Ini
   d6190:	6974 6c61 7a69 6e69 2067 4d54 3347 3939     tializing TMG399
   d61a0:	0033 0000                                   3...

000d61a4 <_ZTVN5spark12NetworkClassE>:
	...
   d61ac:	46dd 000d 46e7 000d 46f1 000d 46fb 000d     .F...F...F...F..
   d61bc:	4705 000d 4711 000d 471d 000d 4729 000d     .G...G...G..)G..
   d61cc:	4731 000d 473b 000d 4745 000d               1G..;G..EG..

000d61d8 <_ZTVN5spark9WiFiClassE>:
	...
   d61e0:	4883 000d 4879 000d 486f 000d 4825 000d     .H..yH..oH..%H..
   d61f0:	4863 000d 4857 000d 484b 000d 4843 000d     cH..WH..KH..CH..
   d6200:	4839 000d 482f 000d 4745 000d               9H../H..EG..

000d620c <_ZTVN5spark9MeshClassE>:
	...
   d6214:	48ff 000d 48f5 000d 48eb 000d 48e1 000d     .H...H...H...H..
   d6224:	48d5 000d 48c9 000d 48bd 000d 48b5 000d     .H...H...H...H..
   d6234:	48ab 000d 48a1 000d 4745 000d               .H...H..EG..

000d6240 <_ZTV7TwoWire>:
	...
   d6248:	4a1d 000d 4a67 000d 4a3f 000d 4a1f 000d     .J..gJ..?J...J..
   d6258:	4a47 000d 4a4f 000d 4a57 000d 4a5f 000d     GJ..OJ..WJ.._J..

000d6268 <_ZTV9USBSerial>:
	...
   d6270:	4b27 000d 4b77 000d 4b85 000d 4e8d 000d     'K..wK...K...N..
   d6280:	4b63 000d 4b29 000d 4b3f 000d 4b71 000d     cK..)K..?K..qK..
   d6290:	4b55 000d 4b23 000d                         UK..#K..

000d6298 <_ZTV9IPAddress>:
	...
   d62a0:	4c45 000d 4c35 000d 4c37 000d 005a 2b25     EL..5L..7L..Z.%+
   d62b0:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
   d62c0:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
   d62d0:	6974 656d 6200 7561 0064 6553 6972 6c61     time.baud.Serial
   d62e0:	5300 7265 6169 316c 7400 7079 0065 6170     .Serial1.type.pa
   d62f0:	6172 006d 6d63 0064 6469 6800 646e 7300     ram.cmd.id.hnd.s
   d6300:	7274 006d 6966 746c 6c00 6c76 6100 6464     trm.filt.lvl.add
   d6310:	6148 646e 656c 0072 6572 6f6d 6576 6148     Handler.removeHa
   d6320:	646e 656c 0072 6e65 6d75 6148 646e 656c     ndler.enumHandle
   d6330:	7372 4a00 4f53 534e 7274 6165 4c6d 676f     rs.JSONStreamLog
   d6340:	6148 646e 656c 0072 7061 0070 3025 3031     Handler.app.%010
   d6350:	2075 5d00 0020 6425 2c00 0020 2928 203a     u .] .%d., .(): 
   d6360:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
   d6370:	7465 6961 736c 3d20 0020 0a0d 6c00 006e     etails = ....ln.
   d6380:	6e66 6300 646f 0065 6564 6174 6c69 6e00     fn.code.detail.n
   d6390:	6e6f 0065 7274 6361 0065 6e69 6f66 7700     one.trace.info.w
   d63a0:	7261 006e 7265 6f72 0072 6170 696e 0063     arn.error.panic.
   d63b0:	6c61 006c 616e 006e 766f 0066 002e 6e69     all.nan.ovf...in
   d63c0:	0066 0000                                   f...

000d63c4 <_ZTV11USARTSerial>:
	...
   d63cc:	513d 000d 518d 000d 519b 000d 4e8d 000d     =Q...Q...Q...N..
   d63dc:	5151 000d 5173 000d 515f 000d 5187 000d     QQ..sQ.._Q...Q..
   d63ec:	513f 000d 5143 000d                         ?Q..CQ..

000d63f4 <_ZTVN5spark13EthernetClassE>:
	...
   d63fc:	52eb 000d 52e1 000d 52d7 000d 52cd 000d     .R...R...R...R..
   d640c:	52c1 000d 52b5 000d 52a9 000d 52a1 000d     .R...R...R...R..
   d641c:	5297 000d 528d 000d 4745 000d               .R...R..EG..

000d6428 <_ZSt7nothrow>:
   d6428:	0000 0000                                   ....

000d642c <__sf_fake_stdin>:
	...

000d644c <__sf_fake_stdout>:
	...

000d646c <__sf_fake_stderr>:
	...
   d648c:	0043                                        C.

000d648e <link_const_variable_data_end>:
	...

000d6490 <link_constructors_location>:
   d6490:	000d438f 	.word	0x000d438f
   d6494:	000d4811 	.word	0x000d4811
   d6498:	000d488d 	.word	0x000d488d
   d649c:	000d49cd 	.word	0x000d49cd
   d64a0:	000d4e4d 	.word	0x000d4e4d
   d64a4:	000d4e69 	.word	0x000d4e69
   d64a8:	000d4e7d 	.word	0x000d4e7d
   d64ac:	000d5115 	.word	0x000d5115
   d64b0:	000d5259 	.word	0x000d5259
   d64b4:	000d52f5 	.word	0x000d52f5
   d64b8:	000d53cd 	.word	0x000d53cd
   d64bc:	000d5451 	.word	0x000d5451
   d64c0:	000d5515 	.word	0x000d5515
   d64c4:	000d55d9 	.word	0x000d55d9

000d64c8 <link_constructors_end>:
	...
