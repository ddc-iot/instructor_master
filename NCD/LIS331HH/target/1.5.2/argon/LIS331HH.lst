
c:/Users/IoT_Instructor/Documents/IoT/instructor_master/NCD/LIS331HH/target/1.5.2/argon/LIS331HH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000024f0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6510  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e34c  000d6514  0001e34c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000438  2003e3b8  2003e3b8  0002e3b8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6580  000d6580  00026580  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d65a8  000d65a8  000265a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000b04f9  00000000  00000000  000265ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000d6bf  00000000  00000000  000d6aa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00018257  00000000  00000000  000e4164  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001f08  00000000  00000000  000fc3bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003b90  00000000  00000000  000fe2c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002fdd1  00000000  00000000  00101e53  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00020472  00000000  00000000  00131c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000fe60e  00000000  00000000  00152096  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000bbbc  00000000  00000000  002506a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 f837 	bl	d60a4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 f83c 	bl	d60ba <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e34c 	.word	0x2003e34c
   d404c:	000d6514 	.word	0x000d6514
   d4050:	2003e3b8 	.word	0x2003e3b8
   d4054:	2003e3b8 	.word	0x2003e3b8
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f000 fcb9 	bl	d49d4 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d6504 	.word	0x000d6504
   d4084:	000d64cc 	.word	0x000d64cc

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b817 	b.w	d40ba <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f85b 	bl	d4148 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f000 bc5f 	b.w	d4958 <_post_loop>

000d409a <_ZdlPv>:
   d409a:	f000 bae1 	b.w	d4660 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 badf 	b.w	d4660 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d40b2:	6803      	ldr	r3, [r0, #0]
   d40b4:	b2c9      	uxtb	r1, r1
   d40b6:	689b      	ldr	r3, [r3, #8]
   d40b8:	4718      	bx	r3

000d40ba <setup>:
float yG;
float zG;
float tG;

void setup()
{
   d40ba:	b508      	push	{r3, lr}

  Wire.begin();
   d40bc:	f001 f86a 	bl	d5194 <_Z19__fetch_global_Wirev>
   d40c0:	f000 fe6a 	bl	d4d98 <_ZN7TwoWire5beginEv>
  Serial.begin(9600);
   d40c4:	f000 fd86 	bl	d4bd4 <_Z16_fetch_usbserialv>
   d40c8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40cc:	f000 fd76 	bl	d4bbc <_ZN9USBSerial5beginEl>

  // Start I2C Transmission
  Wire.beginTransmission(Addr);
   d40d0:	f001 f860 	bl	d5194 <_Z19__fetch_global_Wirev>
   d40d4:	2118      	movs	r1, #24
   d40d6:	f000 fe9a 	bl	d4e0e <_ZN7TwoWire17beginTransmissionEi>
  // Select control register 1
  Wire.write(0x20);
   d40da:	f001 f85b 	bl	d5194 <_Z19__fetch_global_Wirev>
   d40de:	2120      	movs	r1, #32
   d40e0:	f7ff ffe7 	bl	d40b2 <_ZN7TwoWire5writeEi>
  // Enable X, Y, Z axis, power on mode, data rate selection = 50Hz
  Wire.write(0x27);
   d40e4:	f001 f856 	bl	d5194 <_Z19__fetch_global_Wirev>
   d40e8:	2127      	movs	r1, #39	; 0x27
   d40ea:	f7ff ffe2 	bl	d40b2 <_ZN7TwoWire5writeEi>
  // Stop I2C Transmission
  Wire.endTransmission();
   d40ee:	f001 f851 	bl	d5194 <_Z19__fetch_global_Wirev>
   d40f2:	f000 fe93 	bl	d4e1c <_ZN7TwoWire15endTransmissionEv>

  // Start I2C Transmission
  Wire.beginTransmission(Addr);
   d40f6:	f001 f84d 	bl	d5194 <_Z19__fetch_global_Wirev>
   d40fa:	2118      	movs	r1, #24
   d40fc:	f000 fe87 	bl	d4e0e <_ZN7TwoWire17beginTransmissionEi>
  // Select control register 4
  Wire.write(0x23);
   d4100:	f001 f848 	bl	d5194 <_Z19__fetch_global_Wirev>
   d4104:	2123      	movs	r1, #35	; 0x23
   d4106:	f7ff ffd4 	bl	d40b2 <_ZN7TwoWire5writeEi>
  // Set Continuos update, +/- 6g, self-test enabled
  Wire.write(0x00);
   d410a:	f001 f843 	bl	d5194 <_Z19__fetch_global_Wirev>
   d410e:	2100      	movs	r1, #0
   d4110:	f7ff ffcf 	bl	d40b2 <_ZN7TwoWire5writeEi>
  // Stop I2C Transmission
  Wire.endTransmission();
   d4114:	f001 f83e 	bl	d5194 <_Z19__fetch_global_Wirev>
   d4118:	f000 fe80 	bl	d4e1c <_ZN7TwoWire15endTransmissionEv>
  delay(300);
   d411c:	f44f 7096 	mov.w	r0, #300	; 0x12c
}
   d4120:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Wire.write(0x23);
  // Set Continuos update, +/- 6g, self-test enabled
  Wire.write(0x00);
  // Stop I2C Transmission
  Wire.endTransmission();
  delay(300);
   d4124:	f000 bbda 	b.w	d48dc <delay>

000d4128 <_ZN5Print6printfIIfEEEjPKcDpT_>:
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
   d4128:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d412a:	4604      	mov	r4, r0
    {
        return this->printf_impl(false, format, args...);
   d412c:	ee10 0a10 	vmov	r0, s0
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
   d4130:	460d      	mov	r5, r1
    {
        return this->printf_impl(false, format, args...);
   d4132:	f001 fc55 	bl	d59e0 <__aeabi_f2d>
   d4136:	462a      	mov	r2, r5
   d4138:	e9cd 0100 	strd	r0, r1, [sp]
   d413c:	2100      	movs	r1, #0
   d413e:	4620      	mov	r0, r4
   d4140:	f000 fb7f 	bl	d4842 <_ZN5Print11printf_implEbPKcz>
    }
   d4144:	b003      	add	sp, #12
   d4146:	bd30      	pop	{r4, r5, pc}

000d4148 <loop>:
}

void loop()
{
   d4148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

    // Read 6 bytes of data
    // xAccl lsb, xAccl msb, yAccl lsb, yAccl msb, zAccl lsb, zAccl msb
    if (Wire.available() == 1)
    {
      data[i] = Wire.read();
   d414c:	4d68      	ldr	r5, [pc, #416]	; (d42f0 <loop+0x1a8>)
  Wire.endTransmission();
  delay(300);
}

void loop()
{
   d414e:	2428      	movs	r4, #40	; 0x28
  for (int i = 0; i < 6; i++)
  {
    // Start I2C Transmission, Select data register, Stop I2C Transmission
    Wire.beginTransmission(Addr);
   d4150:	f001 f820 	bl	d5194 <_Z19__fetch_global_Wirev>
   d4154:	2118      	movs	r1, #24
   d4156:	f000 fe5a 	bl	d4e0e <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((40 + i));
   d415a:	f001 f81b 	bl	d5194 <_Z19__fetch_global_Wirev>
   d415e:	4621      	mov	r1, r4
   d4160:	f7ff ffa7 	bl	d40b2 <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
   d4164:	f001 f816 	bl	d5194 <_Z19__fetch_global_Wirev>
   d4168:	f000 fe58 	bl	d4e1c <_ZN7TwoWire15endTransmissionEv>

    // Request 1 byte of data
    Wire.requestFrom(Addr, 1);
   d416c:	f001 f812 	bl	d5194 <_Z19__fetch_global_Wirev>
   d4170:	2201      	movs	r2, #1
   d4172:	2118      	movs	r1, #24
   d4174:	f000 fe44 	bl	d4e00 <_ZN7TwoWire11requestFromEhj>

    // Read 6 bytes of data
    // xAccl lsb, xAccl msb, yAccl lsb, yAccl msb, zAccl lsb, zAccl msb
    if (Wire.available() == 1)
   d4178:	f001 f80c 	bl	d5194 <_Z19__fetch_global_Wirev>
   d417c:	6803      	ldr	r3, [r0, #0]
   d417e:	691b      	ldr	r3, [r3, #16]
   d4180:	4798      	blx	r3
   d4182:	2801      	cmp	r0, #1
   d4184:	d107      	bne.n	d4196 <loop+0x4e>
    {
      data[i] = Wire.read();
   d4186:	f001 f805 	bl	d5194 <_Z19__fetch_global_Wirev>
   d418a:	6803      	ldr	r3, [r0, #0]
   d418c:	695b      	ldr	r3, [r3, #20]
   d418e:	4798      	blx	r3
   d4190:	192b      	adds	r3, r5, r4
   d4192:	f803 0c28 	strb.w	r0, [r3, #-40]
    }
    delay(300);
   d4196:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d419a:	3401      	adds	r4, #1
   d419c:	f000 fb9e 	bl	d48dc <delay>
  delay(300);
}

void loop()
{
  for (int i = 0; i < 6; i++)
   d41a0:	2c2e      	cmp	r4, #46	; 0x2e
   d41a2:	d1d5      	bne.n	d4150 <loop+0x8>
      data[i] = Wire.read();
    }
    delay(300);
  }

  xAccl = data[1]<<8 | data[0];
   d41a4:	4a52      	ldr	r2, [pc, #328]	; (d42f0 <loop+0x1a8>)
  yAccl = data[3]<<8 | data[2];
  zAccl = data[5]<<8 | data[4];

  // Convert to G's (Gravity = 1G = 9.8m/s^2)
  xG = xAccl/5250.0;
   d41a6:	4e53      	ldr	r6, [pc, #332]	; (d42f4 <loop+0x1ac>)
      data[i] = Wire.read();
    }
    delay(300);
  }

  xAccl = data[1]<<8 | data[0];
   d41a8:	7813      	ldrb	r3, [r2, #0]
   d41aa:	7850      	ldrb	r0, [r2, #1]
  yAccl = data[3]<<8 | data[2];
   d41ac:	78d5      	ldrb	r5, [r2, #3]
  zAccl = data[5]<<8 | data[4];
   d41ae:	7954      	ldrb	r4, [r2, #5]
      data[i] = Wire.read();
    }
    delay(300);
  }

  xAccl = data[1]<<8 | data[0];
   d41b0:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d41b4:	4b50      	ldr	r3, [pc, #320]	; (d42f8 <loop+0x1b0>)
   d41b6:	b200      	sxth	r0, r0
   d41b8:	8018      	strh	r0, [r3, #0]
  yAccl = data[3]<<8 | data[2];
   d41ba:	7893      	ldrb	r3, [r2, #2]
   d41bc:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
   d41c0:	4b4e      	ldr	r3, [pc, #312]	; (d42fc <loop+0x1b4>)
   d41c2:	b22d      	sxth	r5, r5
   d41c4:	801d      	strh	r5, [r3, #0]
  zAccl = data[5]<<8 | data[4];
   d41c6:	7913      	ldrb	r3, [r2, #4]
   d41c8:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
   d41cc:	4b4c      	ldr	r3, [pc, #304]	; (d4300 <loop+0x1b8>)
   d41ce:	b224      	sxth	r4, r4
   d41d0:	801c      	strh	r4, [r3, #0]

  // Convert to G's (Gravity = 1G = 9.8m/s^2)
  xG = xAccl/5250.0;
   d41d2:	f001 fbf3 	bl	d59bc <__aeabi_i2d>
   d41d6:	a344      	add	r3, pc, #272	; (adr r3, d42e8 <loop+0x1a0>)
   d41d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41dc:	f001 fd7e 	bl	d5cdc <__aeabi_ddiv>
   d41e0:	f001 ff02 	bl	d5fe8 <__aeabi_d2f>
   d41e4:	4680      	mov	r8, r0
   d41e6:	6030      	str	r0, [r6, #0]
  yG = yAccl/5250.0;
   d41e8:	4628      	mov	r0, r5
   d41ea:	f001 fbe7 	bl	d59bc <__aeabi_i2d>
   d41ee:	a33e      	add	r3, pc, #248	; (adr r3, d42e8 <loop+0x1a0>)
   d41f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41f4:	f001 fd72 	bl	d5cdc <__aeabi_ddiv>
   d41f8:	f001 fef6 	bl	d5fe8 <__aeabi_d2f>
   d41fc:	4d41      	ldr	r5, [pc, #260]	; (d4304 <loop+0x1bc>)
   d41fe:	4682      	mov	sl, r0
   d4200:	6028      	str	r0, [r5, #0]
  zG = zAccl/5250.0;
   d4202:	4620      	mov	r0, r4
   d4204:	f001 fbda 	bl	d59bc <__aeabi_i2d>
   d4208:	a337      	add	r3, pc, #220	; (adr r3, d42e8 <loop+0x1a0>)
   d420a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d420e:	f001 fd65 	bl	d5cdc <__aeabi_ddiv>
   d4212:	f001 fee9 	bl	d5fe8 <__aeabi_d2f>
   d4216:	4c3c      	ldr	r4, [pc, #240]	; (d4308 <loop+0x1c0>)
   d4218:	4607      	mov	r7, r0
   d421a:	6020      	str	r0, [r4, #0]

  tG = sqrt(pow(xG,2)+pow(yG,2)+pow(zG,2));
   d421c:	4640      	mov	r0, r8
   d421e:	f001 fbdf 	bl	d59e0 <__aeabi_f2d>
   d4222:	4680      	mov	r8, r0
   d4224:	4650      	mov	r0, sl
   d4226:	4689      	mov	r9, r1
   d4228:	f001 fbda 	bl	d59e0 <__aeabi_f2d>
   d422c:	4682      	mov	sl, r0
   d422e:	4638      	mov	r0, r7
   d4230:	468b      	mov	fp, r1
   d4232:	f001 fbd5 	bl	d59e0 <__aeabi_f2d>
   d4236:	4642      	mov	r2, r8
   d4238:	e9cd 0100 	strd	r0, r1, [sp]
   d423c:	464b      	mov	r3, r9
   d423e:	4640      	mov	r0, r8
   d4240:	4649      	mov	r1, r9
   d4242:	f001 fc21 	bl	d5a88 <__aeabi_dmul>
   d4246:	4652      	mov	r2, sl
   d4248:	4680      	mov	r8, r0
   d424a:	4689      	mov	r9, r1
   d424c:	465b      	mov	r3, fp
   d424e:	4650      	mov	r0, sl
   d4250:	4659      	mov	r1, fp
   d4252:	f001 fc19 	bl	d5a88 <__aeabi_dmul>
   d4256:	4602      	mov	r2, r0
   d4258:	460b      	mov	r3, r1
   d425a:	4640      	mov	r0, r8
   d425c:	4649      	mov	r1, r9
   d425e:	f001 fa61 	bl	d5724 <__adddf3>
   d4262:	e9dd 2300 	ldrd	r2, r3, [sp]
   d4266:	4680      	mov	r8, r0
   d4268:	4689      	mov	r9, r1
   d426a:	4610      	mov	r0, r2
   d426c:	4619      	mov	r1, r3
   d426e:	f001 fc0b 	bl	d5a88 <__aeabi_dmul>
   d4272:	460b      	mov	r3, r1
   d4274:	4602      	mov	r2, r0
   d4276:	4649      	mov	r1, r9
   d4278:	4640      	mov	r0, r8
   d427a:	f001 fa53 	bl	d5724 <__adddf3>
   d427e:	ec41 0b10 	vmov	d0, r0, r1
   d4282:	f001 f917 	bl	d54b4 <sqrt>
   d4286:	ec51 0b10 	vmov	r0, r1, d0
   d428a:	f001 fead 	bl	d5fe8 <__aeabi_d2f>
   d428e:	4f1f      	ldr	r7, [pc, #124]	; (d430c <loop+0x1c4>)
   d4290:	6038      	str	r0, [r7, #0]
  
  // Output data to dashboard
  Serial.printf("-----------Acceleration---------------\n");
   d4292:	f000 fc9f 	bl	d4bd4 <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4296:	4a1e      	ldr	r2, [pc, #120]	; (d4310 <loop+0x1c8>)
   d4298:	2100      	movs	r1, #0
   d429a:	f000 fad2 	bl	d4842 <_ZN5Print11printf_implEbPKcz>
  Serial.printf("Acceleration in X-Axis: %0.2f \n", xG);
   d429e:	f000 fc99 	bl	d4bd4 <_Z16_fetch_usbserialv>
   d42a2:	ed96 0a00 	vldr	s0, [r6]
   d42a6:	491b      	ldr	r1, [pc, #108]	; (d4314 <loop+0x1cc>)
   d42a8:	f7ff ff3e 	bl	d4128 <_ZN5Print6printfIIfEEEjPKcDpT_>
  Serial.printf("Acceleration in Y-Axis: %0.2f \n", yG);
   d42ac:	f000 fc92 	bl	d4bd4 <_Z16_fetch_usbserialv>
   d42b0:	ed95 0a00 	vldr	s0, [r5]
   d42b4:	4918      	ldr	r1, [pc, #96]	; (d4318 <loop+0x1d0>)
   d42b6:	f7ff ff37 	bl	d4128 <_ZN5Print6printfIIfEEEjPKcDpT_>
  Serial.printf("Acceleration in Z-Axis: %0.2f \n", zG);
   d42ba:	f000 fc8b 	bl	d4bd4 <_Z16_fetch_usbserialv>
   d42be:	ed94 0a00 	vldr	s0, [r4]
   d42c2:	4916      	ldr	r1, [pc, #88]	; (d431c <loop+0x1d4>)
   d42c4:	f7ff ff30 	bl	d4128 <_ZN5Print6printfIIfEEEjPKcDpT_>
  Serial.printf("Total Acceleration: %0.2f \n", tG);
   d42c8:	f000 fc84 	bl	d4bd4 <_Z16_fetch_usbserialv>
   d42cc:	ed97 0a00 	vldr	s0, [r7]
   d42d0:	4913      	ldr	r1, [pc, #76]	; (d4320 <loop+0x1d8>)
   d42d2:	f7ff ff29 	bl	d4128 <_ZN5Print6printfIIfEEEjPKcDpT_>
  delay(250);
   d42d6:	20fa      	movs	r0, #250	; 0xfa
   d42d8:	b003      	add	sp, #12
   d42da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Serial.printf("-----------Acceleration---------------\n");
  Serial.printf("Acceleration in X-Axis: %0.2f \n", xG);
  Serial.printf("Acceleration in Y-Axis: %0.2f \n", yG);
  Serial.printf("Acceleration in Z-Axis: %0.2f \n", zG);
  Serial.printf("Total Acceleration: %0.2f \n", tG);
  delay(250);
   d42de:	f000 bafd 	b.w	d48dc <delay>
   d42e2:	bf00      	nop
   d42e4:	f3af 8000 	nop.w
   d42e8:	00000000 	.word	0x00000000
   d42ec:	40b48200 	.word	0x40b48200
   d42f0:	2003e3c4 	.word	0x2003e3c4
   d42f4:	2003e3c0 	.word	0x2003e3c0
   d42f8:	2003e3bc 	.word	0x2003e3bc
   d42fc:	2003e3ca 	.word	0x2003e3ca
   d4300:	2003e3d0 	.word	0x2003e3d0
   d4304:	2003e3cc 	.word	0x2003e3cc
   d4308:	2003e3d4 	.word	0x2003e3d4
   d430c:	2003e3d8 	.word	0x2003e3d8
   d4310:	000d6140 	.word	0x000d6140
   d4314:	000d6168 	.word	0x000d6168
   d4318:	000d6188 	.word	0x000d6188
   d431c:	000d61a8 	.word	0x000d61a8
   d4320:	000d61c8 	.word	0x000d61c8

000d4324 <_GLOBAL__sub_I_data>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4324:	f000 b810 	b.w	d4348 <HAL_Pin_Map>

000d4328 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4328:	b508      	push	{r3, lr}
   d432a:	4b02      	ldr	r3, [pc, #8]	; (d4334 <netdb_freeaddrinfo+0xc>)
   d432c:	681b      	ldr	r3, [r3, #0]
   d432e:	689b      	ldr	r3, [r3, #8]
   d4330:	9301      	str	r3, [sp, #4]
   d4332:	bd08      	pop	{r3, pc}
   d4334:	00030268 	.word	0x00030268

000d4338 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4338:	b508      	push	{r3, lr}
   d433a:	4b02      	ldr	r3, [pc, #8]	; (d4344 <netdb_getaddrinfo+0xc>)
   d433c:	681b      	ldr	r3, [r3, #0]
   d433e:	68db      	ldr	r3, [r3, #12]
   d4340:	9301      	str	r3, [sp, #4]
   d4342:	bd08      	pop	{r3, pc}
   d4344:	00030268 	.word	0x00030268

000d4348 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4348:	b508      	push	{r3, lr}
   d434a:	4b02      	ldr	r3, [pc, #8]	; (d4354 <HAL_Pin_Map+0xc>)
   d434c:	681b      	ldr	r3, [r3, #0]
   d434e:	681b      	ldr	r3, [r3, #0]
   d4350:	9301      	str	r3, [sp, #4]
   d4352:	bd08      	pop	{r3, pc}
   d4354:	0003022c 	.word	0x0003022c

000d4358 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4358:	b508      	push	{r3, lr}
   d435a:	4b02      	ldr	r3, [pc, #8]	; (d4364 <HAL_RNG_GetRandomNumber+0xc>)
   d435c:	681b      	ldr	r3, [r3, #0]
   d435e:	685b      	ldr	r3, [r3, #4]
   d4360:	9301      	str	r3, [sp, #4]
   d4362:	bd08      	pop	{r3, pc}
   d4364:	00030218 	.word	0x00030218

000d4368 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4368:	b508      	push	{r3, lr}
   d436a:	4b02      	ldr	r3, [pc, #8]	; (d4374 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d436c:	681b      	ldr	r3, [r3, #0]
   d436e:	695b      	ldr	r3, [r3, #20]
   d4370:	9301      	str	r3, [sp, #4]
   d4372:	bd08      	pop	{r3, pc}
   d4374:	00030218 	.word	0x00030218

000d4378 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4378:	b508      	push	{r3, lr}
   d437a:	4b02      	ldr	r3, [pc, #8]	; (d4384 <os_thread_is_current+0xc>)
   d437c:	681b      	ldr	r3, [r3, #0]
   d437e:	689b      	ldr	r3, [r3, #8]
   d4380:	9301      	str	r3, [sp, #4]
   d4382:	bd08      	pop	{r3, pc}
   d4384:	00030248 	.word	0x00030248

000d4388 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4388:	b508      	push	{r3, lr}
   d438a:	4b02      	ldr	r3, [pc, #8]	; (d4394 <os_thread_join+0xc>)
   d438c:	681b      	ldr	r3, [r3, #0]
   d438e:	691b      	ldr	r3, [r3, #16]
   d4390:	9301      	str	r3, [sp, #4]
   d4392:	bd08      	pop	{r3, pc}
   d4394:	00030248 	.word	0x00030248

000d4398 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4398:	b508      	push	{r3, lr}
   d439a:	4b02      	ldr	r3, [pc, #8]	; (d43a4 <os_thread_cleanup+0xc>)
   d439c:	681b      	ldr	r3, [r3, #0]
   d439e:	695b      	ldr	r3, [r3, #20]
   d43a0:	9301      	str	r3, [sp, #4]
   d43a2:	bd08      	pop	{r3, pc}
   d43a4:	00030248 	.word	0x00030248

000d43a8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d43a8:	b508      	push	{r3, lr}
   d43aa:	4b02      	ldr	r3, [pc, #8]	; (d43b4 <os_mutex_recursive_create+0xc>)
   d43ac:	681b      	ldr	r3, [r3, #0]
   d43ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d43b0:	9301      	str	r3, [sp, #4]
   d43b2:	bd08      	pop	{r3, pc}
   d43b4:	00030248 	.word	0x00030248

000d43b8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d43b8:	b508      	push	{r3, lr}
   d43ba:	4b02      	ldr	r3, [pc, #8]	; (d43c4 <os_mutex_recursive_destroy+0xc>)
   d43bc:	681b      	ldr	r3, [r3, #0]
   d43be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d43c0:	9301      	str	r3, [sp, #4]
   d43c2:	bd08      	pop	{r3, pc}
   d43c4:	00030248 	.word	0x00030248

000d43c8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d43c8:	b508      	push	{r3, lr}
   d43ca:	4b02      	ldr	r3, [pc, #8]	; (d43d4 <inet_inet_ntop+0xc>)
   d43cc:	681b      	ldr	r3, [r3, #0]
   d43ce:	695b      	ldr	r3, [r3, #20]
   d43d0:	9301      	str	r3, [sp, #4]
   d43d2:	bd08      	pop	{r3, pc}
   d43d4:	00030264 	.word	0x00030264

000d43d8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d43d8:	b508      	push	{r3, lr}
   d43da:	4b02      	ldr	r3, [pc, #8]	; (d43e4 <HAL_USART_Init+0xc>)
   d43dc:	681b      	ldr	r3, [r3, #0]
   d43de:	681b      	ldr	r3, [r3, #0]
   d43e0:	9301      	str	r3, [sp, #4]
   d43e2:	bd08      	pop	{r3, pc}
   d43e4:	0003023c 	.word	0x0003023c

000d43e8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d43e8:	b508      	push	{r3, lr}
   d43ea:	4b02      	ldr	r3, [pc, #8]	; (d43f4 <HAL_USART_Write_Data+0xc>)
   d43ec:	681b      	ldr	r3, [r3, #0]
   d43ee:	68db      	ldr	r3, [r3, #12]
   d43f0:	9301      	str	r3, [sp, #4]
   d43f2:	bd08      	pop	{r3, pc}
   d43f4:	0003023c 	.word	0x0003023c

000d43f8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d43f8:	b508      	push	{r3, lr}
   d43fa:	4b02      	ldr	r3, [pc, #8]	; (d4404 <HAL_USART_Available_Data+0xc>)
   d43fc:	681b      	ldr	r3, [r3, #0]
   d43fe:	691b      	ldr	r3, [r3, #16]
   d4400:	9301      	str	r3, [sp, #4]
   d4402:	bd08      	pop	{r3, pc}
   d4404:	0003023c 	.word	0x0003023c

000d4408 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4408:	b508      	push	{r3, lr}
   d440a:	4b02      	ldr	r3, [pc, #8]	; (d4414 <HAL_USART_Read_Data+0xc>)
   d440c:	681b      	ldr	r3, [r3, #0]
   d440e:	695b      	ldr	r3, [r3, #20]
   d4410:	9301      	str	r3, [sp, #4]
   d4412:	bd08      	pop	{r3, pc}
   d4414:	0003023c 	.word	0x0003023c

000d4418 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4418:	b508      	push	{r3, lr}
   d441a:	4b02      	ldr	r3, [pc, #8]	; (d4424 <HAL_USART_Peek_Data+0xc>)
   d441c:	681b      	ldr	r3, [r3, #0]
   d441e:	699b      	ldr	r3, [r3, #24]
   d4420:	9301      	str	r3, [sp, #4]
   d4422:	bd08      	pop	{r3, pc}
   d4424:	0003023c 	.word	0x0003023c

000d4428 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4428:	b508      	push	{r3, lr}
   d442a:	4b02      	ldr	r3, [pc, #8]	; (d4434 <HAL_USART_Flush_Data+0xc>)
   d442c:	681b      	ldr	r3, [r3, #0]
   d442e:	69db      	ldr	r3, [r3, #28]
   d4430:	9301      	str	r3, [sp, #4]
   d4432:	bd08      	pop	{r3, pc}
   d4434:	0003023c 	.word	0x0003023c

000d4438 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4438:	b508      	push	{r3, lr}
   d443a:	4b02      	ldr	r3, [pc, #8]	; (d4444 <HAL_USART_Available_Data_For_Write+0xc>)
   d443c:	681b      	ldr	r3, [r3, #0]
   d443e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4440:	9301      	str	r3, [sp, #4]
   d4442:	bd08      	pop	{r3, pc}
   d4444:	0003023c 	.word	0x0003023c

000d4448 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4448:	b508      	push	{r3, lr}
   d444a:	4b02      	ldr	r3, [pc, #8]	; (d4454 <HAL_I2C_Begin+0xc>)
   d444c:	681b      	ldr	r3, [r3, #0]
   d444e:	68db      	ldr	r3, [r3, #12]
   d4450:	9301      	str	r3, [sp, #4]
   d4452:	bd08      	pop	{r3, pc}
   d4454:	00030228 	.word	0x00030228

000d4458 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d4458:	b508      	push	{r3, lr}
   d445a:	4b02      	ldr	r3, [pc, #8]	; (d4464 <HAL_I2C_Begin_Transmission+0xc>)
   d445c:	681b      	ldr	r3, [r3, #0]
   d445e:	699b      	ldr	r3, [r3, #24]
   d4460:	9301      	str	r3, [sp, #4]
   d4462:	bd08      	pop	{r3, pc}
   d4464:	00030228 	.word	0x00030228

000d4468 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4468:	b508      	push	{r3, lr}
   d446a:	4b02      	ldr	r3, [pc, #8]	; (d4474 <HAL_I2C_End_Transmission+0xc>)
   d446c:	681b      	ldr	r3, [r3, #0]
   d446e:	69db      	ldr	r3, [r3, #28]
   d4470:	9301      	str	r3, [sp, #4]
   d4472:	bd08      	pop	{r3, pc}
   d4474:	00030228 	.word	0x00030228

000d4478 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4478:	b508      	push	{r3, lr}
   d447a:	4b02      	ldr	r3, [pc, #8]	; (d4484 <HAL_I2C_Write_Data+0xc>)
   d447c:	681b      	ldr	r3, [r3, #0]
   d447e:	6a1b      	ldr	r3, [r3, #32]
   d4480:	9301      	str	r3, [sp, #4]
   d4482:	bd08      	pop	{r3, pc}
   d4484:	00030228 	.word	0x00030228

000d4488 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4488:	b508      	push	{r3, lr}
   d448a:	4b02      	ldr	r3, [pc, #8]	; (d4494 <HAL_I2C_Available_Data+0xc>)
   d448c:	681b      	ldr	r3, [r3, #0]
   d448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4490:	9301      	str	r3, [sp, #4]
   d4492:	bd08      	pop	{r3, pc}
   d4494:	00030228 	.word	0x00030228

000d4498 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4498:	b508      	push	{r3, lr}
   d449a:	4b02      	ldr	r3, [pc, #8]	; (d44a4 <HAL_I2C_Read_Data+0xc>)
   d449c:	681b      	ldr	r3, [r3, #0]
   d449e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d44a0:	9301      	str	r3, [sp, #4]
   d44a2:	bd08      	pop	{r3, pc}
   d44a4:	00030228 	.word	0x00030228

000d44a8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d44a8:	b508      	push	{r3, lr}
   d44aa:	4b02      	ldr	r3, [pc, #8]	; (d44b4 <HAL_I2C_Peek_Data+0xc>)
   d44ac:	681b      	ldr	r3, [r3, #0]
   d44ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d44b0:	9301      	str	r3, [sp, #4]
   d44b2:	bd08      	pop	{r3, pc}
   d44b4:	00030228 	.word	0x00030228

000d44b8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d44b8:	b508      	push	{r3, lr}
   d44ba:	4b02      	ldr	r3, [pc, #8]	; (d44c4 <HAL_I2C_Flush_Data+0xc>)
   d44bc:	681b      	ldr	r3, [r3, #0]
   d44be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d44c0:	9301      	str	r3, [sp, #4]
   d44c2:	bd08      	pop	{r3, pc}
   d44c4:	00030228 	.word	0x00030228

000d44c8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d44c8:	b508      	push	{r3, lr}
   d44ca:	4b02      	ldr	r3, [pc, #8]	; (d44d4 <HAL_I2C_Init+0xc>)
   d44cc:	681b      	ldr	r3, [r3, #0]
   d44ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d44d0:	9301      	str	r3, [sp, #4]
   d44d2:	bd08      	pop	{r3, pc}
   d44d4:	00030228 	.word	0x00030228

000d44d8 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d44d8:	b508      	push	{r3, lr}
   d44da:	4b02      	ldr	r3, [pc, #8]	; (d44e4 <HAL_I2C_Request_Data_Ex+0xc>)
   d44dc:	681b      	ldr	r3, [r3, #0]
   d44de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d44e0:	9301      	str	r3, [sp, #4]
   d44e2:	bd08      	pop	{r3, pc}
   d44e4:	00030228 	.word	0x00030228

000d44e8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d44e8:	b508      	push	{r3, lr}
   d44ea:	4b02      	ldr	r3, [pc, #8]	; (d44f4 <HAL_USB_USART_Init+0xc>)
   d44ec:	681b      	ldr	r3, [r3, #0]
   d44ee:	681b      	ldr	r3, [r3, #0]
   d44f0:	9301      	str	r3, [sp, #4]
   d44f2:	bd08      	pop	{r3, pc}
   d44f4:	0003024c 	.word	0x0003024c

000d44f8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d44f8:	b508      	push	{r3, lr}
   d44fa:	4b02      	ldr	r3, [pc, #8]	; (d4504 <HAL_USB_USART_Begin+0xc>)
   d44fc:	681b      	ldr	r3, [r3, #0]
   d44fe:	685b      	ldr	r3, [r3, #4]
   d4500:	9301      	str	r3, [sp, #4]
   d4502:	bd08      	pop	{r3, pc}
   d4504:	0003024c 	.word	0x0003024c

000d4508 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4508:	b508      	push	{r3, lr}
   d450a:	4b02      	ldr	r3, [pc, #8]	; (d4514 <HAL_USB_USART_Available_Data+0xc>)
   d450c:	681b      	ldr	r3, [r3, #0]
   d450e:	691b      	ldr	r3, [r3, #16]
   d4510:	9301      	str	r3, [sp, #4]
   d4512:	bd08      	pop	{r3, pc}
   d4514:	0003024c 	.word	0x0003024c

000d4518 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4518:	b508      	push	{r3, lr}
   d451a:	4b02      	ldr	r3, [pc, #8]	; (d4524 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d451c:	681b      	ldr	r3, [r3, #0]
   d451e:	695b      	ldr	r3, [r3, #20]
   d4520:	9301      	str	r3, [sp, #4]
   d4522:	bd08      	pop	{r3, pc}
   d4524:	0003024c 	.word	0x0003024c

000d4528 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4528:	b508      	push	{r3, lr}
   d452a:	4b02      	ldr	r3, [pc, #8]	; (d4534 <HAL_USB_USART_Receive_Data+0xc>)
   d452c:	681b      	ldr	r3, [r3, #0]
   d452e:	699b      	ldr	r3, [r3, #24]
   d4530:	9301      	str	r3, [sp, #4]
   d4532:	bd08      	pop	{r3, pc}
   d4534:	0003024c 	.word	0x0003024c

000d4538 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4538:	b508      	push	{r3, lr}
   d453a:	4b02      	ldr	r3, [pc, #8]	; (d4544 <HAL_USB_USART_Send_Data+0xc>)
   d453c:	681b      	ldr	r3, [r3, #0]
   d453e:	69db      	ldr	r3, [r3, #28]
   d4540:	9301      	str	r3, [sp, #4]
   d4542:	bd08      	pop	{r3, pc}
   d4544:	0003024c 	.word	0x0003024c

000d4548 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4548:	b508      	push	{r3, lr}
   d454a:	4b02      	ldr	r3, [pc, #8]	; (d4554 <HAL_USB_USART_Flush_Data+0xc>)
   d454c:	681b      	ldr	r3, [r3, #0]
   d454e:	6a1b      	ldr	r3, [r3, #32]
   d4550:	9301      	str	r3, [sp, #4]
   d4552:	bd08      	pop	{r3, pc}
   d4554:	0003024c 	.word	0x0003024c

000d4558 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4558:	b508      	push	{r3, lr}
   d455a:	4b02      	ldr	r3, [pc, #8]	; (d4564 <set_system_mode+0xc>)
   d455c:	681b      	ldr	r3, [r3, #0]
   d455e:	685b      	ldr	r3, [r3, #4]
   d4560:	9301      	str	r3, [sp, #4]
   d4562:	bd08      	pop	{r3, pc}
   d4564:	00030220 	.word	0x00030220

000d4568 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4568:	b508      	push	{r3, lr}
   d456a:	4b02      	ldr	r3, [pc, #8]	; (d4574 <system_delay_ms+0xc>)
   d456c:	681b      	ldr	r3, [r3, #0]
   d456e:	695b      	ldr	r3, [r3, #20]
   d4570:	9301      	str	r3, [sp, #4]
   d4572:	bd08      	pop	{r3, pc}
   d4574:	00030220 	.word	0x00030220

000d4578 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4578:	b508      	push	{r3, lr}
   d457a:	4b03      	ldr	r3, [pc, #12]	; (d4588 <system_ctrl_set_app_request_handler+0x10>)
   d457c:	681b      	ldr	r3, [r3, #0]
   d457e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4582:	9301      	str	r3, [sp, #4]
   d4584:	bd08      	pop	{r3, pc}
   d4586:	0000      	.short	0x0000
   d4588:	00030220 	.word	0x00030220

000d458c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d458c:	b508      	push	{r3, lr}
   d458e:	4b03      	ldr	r3, [pc, #12]	; (d459c <system_ctrl_set_result+0x10>)
   d4590:	681b      	ldr	r3, [r3, #0]
   d4592:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4596:	9301      	str	r3, [sp, #4]
   d4598:	bd08      	pop	{r3, pc}
   d459a:	0000      	.short	0x0000
   d459c:	00030220 	.word	0x00030220

000d45a0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d45a0:	b508      	push	{r3, lr}
   d45a2:	4b02      	ldr	r3, [pc, #8]	; (d45ac <network_connect+0xc>)
   d45a4:	681b      	ldr	r3, [r3, #0]
   d45a6:	685b      	ldr	r3, [r3, #4]
   d45a8:	9301      	str	r3, [sp, #4]
   d45aa:	bd08      	pop	{r3, pc}
   d45ac:	00030240 	.word	0x00030240

000d45b0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d45b0:	b508      	push	{r3, lr}
   d45b2:	4b02      	ldr	r3, [pc, #8]	; (d45bc <network_connecting+0xc>)
   d45b4:	681b      	ldr	r3, [r3, #0]
   d45b6:	689b      	ldr	r3, [r3, #8]
   d45b8:	9301      	str	r3, [sp, #4]
   d45ba:	bd08      	pop	{r3, pc}
   d45bc:	00030240 	.word	0x00030240

000d45c0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d45c0:	b508      	push	{r3, lr}
   d45c2:	4b02      	ldr	r3, [pc, #8]	; (d45cc <network_disconnect+0xc>)
   d45c4:	681b      	ldr	r3, [r3, #0]
   d45c6:	68db      	ldr	r3, [r3, #12]
   d45c8:	9301      	str	r3, [sp, #4]
   d45ca:	bd08      	pop	{r3, pc}
   d45cc:	00030240 	.word	0x00030240

000d45d0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d45d0:	b508      	push	{r3, lr}
   d45d2:	4b02      	ldr	r3, [pc, #8]	; (d45dc <network_ready+0xc>)
   d45d4:	681b      	ldr	r3, [r3, #0]
   d45d6:	691b      	ldr	r3, [r3, #16]
   d45d8:	9301      	str	r3, [sp, #4]
   d45da:	bd08      	pop	{r3, pc}
   d45dc:	00030240 	.word	0x00030240

000d45e0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d45e0:	b508      	push	{r3, lr}
   d45e2:	4b02      	ldr	r3, [pc, #8]	; (d45ec <network_on+0xc>)
   d45e4:	681b      	ldr	r3, [r3, #0]
   d45e6:	695b      	ldr	r3, [r3, #20]
   d45e8:	9301      	str	r3, [sp, #4]
   d45ea:	bd08      	pop	{r3, pc}
   d45ec:	00030240 	.word	0x00030240

000d45f0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d45f0:	b508      	push	{r3, lr}
   d45f2:	4b02      	ldr	r3, [pc, #8]	; (d45fc <network_off+0xc>)
   d45f4:	681b      	ldr	r3, [r3, #0]
   d45f6:	699b      	ldr	r3, [r3, #24]
   d45f8:	9301      	str	r3, [sp, #4]
   d45fa:	bd08      	pop	{r3, pc}
   d45fc:	00030240 	.word	0x00030240

000d4600 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4600:	b508      	push	{r3, lr}
   d4602:	4b02      	ldr	r3, [pc, #8]	; (d460c <network_listen+0xc>)
   d4604:	681b      	ldr	r3, [r3, #0]
   d4606:	69db      	ldr	r3, [r3, #28]
   d4608:	9301      	str	r3, [sp, #4]
   d460a:	bd08      	pop	{r3, pc}
   d460c:	00030240 	.word	0x00030240

000d4610 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4610:	b508      	push	{r3, lr}
   d4612:	4b02      	ldr	r3, [pc, #8]	; (d461c <network_listening+0xc>)
   d4614:	681b      	ldr	r3, [r3, #0]
   d4616:	6a1b      	ldr	r3, [r3, #32]
   d4618:	9301      	str	r3, [sp, #4]
   d461a:	bd08      	pop	{r3, pc}
   d461c:	00030240 	.word	0x00030240

000d4620 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4620:	b508      	push	{r3, lr}
   d4622:	4b02      	ldr	r3, [pc, #8]	; (d462c <network_set_listen_timeout+0xc>)
   d4624:	681b      	ldr	r3, [r3, #0]
   d4626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4628:	9301      	str	r3, [sp, #4]
   d462a:	bd08      	pop	{r3, pc}
   d462c:	00030240 	.word	0x00030240

000d4630 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4630:	b508      	push	{r3, lr}
   d4632:	4b02      	ldr	r3, [pc, #8]	; (d463c <network_get_listen_timeout+0xc>)
   d4634:	681b      	ldr	r3, [r3, #0]
   d4636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4638:	9301      	str	r3, [sp, #4]
   d463a:	bd08      	pop	{r3, pc}
   d463c:	00030240 	.word	0x00030240

000d4640 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4640:	b508      	push	{r3, lr}
   d4642:	4b02      	ldr	r3, [pc, #8]	; (d464c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4644:	681b      	ldr	r3, [r3, #0]
   d4646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4648:	9301      	str	r3, [sp, #4]
   d464a:	bd08      	pop	{r3, pc}
   d464c:	00030244 	.word	0x00030244

000d4650 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4650:	b508      	push	{r3, lr}
   d4652:	4b02      	ldr	r3, [pc, #8]	; (d465c <malloc+0xc>)
   d4654:	681b      	ldr	r3, [r3, #0]
   d4656:	681b      	ldr	r3, [r3, #0]
   d4658:	9301      	str	r3, [sp, #4]
   d465a:	bd08      	pop	{r3, pc}
   d465c:	0003021c 	.word	0x0003021c

000d4660 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4660:	b508      	push	{r3, lr}
   d4662:	4b02      	ldr	r3, [pc, #8]	; (d466c <free+0xc>)
   d4664:	681b      	ldr	r3, [r3, #0]
   d4666:	685b      	ldr	r3, [r3, #4]
   d4668:	9301      	str	r3, [sp, #4]
   d466a:	bd08      	pop	{r3, pc}
   d466c:	0003021c 	.word	0x0003021c

000d4670 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4670:	b508      	push	{r3, lr}
   d4672:	4b02      	ldr	r3, [pc, #8]	; (d467c <vsnprintf+0xc>)
   d4674:	681b      	ldr	r3, [r3, #0]
   d4676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4678:	9301      	str	r3, [sp, #4]
   d467a:	bd08      	pop	{r3, pc}
   d467c:	0003021c 	.word	0x0003021c

000d4680 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d4680:	b508      	push	{r3, lr}
   d4682:	4b02      	ldr	r3, [pc, #8]	; (d468c <__errno+0xc>)
   d4684:	681b      	ldr	r3, [r3, #0]
   d4686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4688:	9301      	str	r3, [sp, #4]
   d468a:	bd08      	pop	{r3, pc}
   d468c:	0003021c 	.word	0x0003021c

000d4690 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4690:	2200      	movs	r2, #0
   d4692:	4611      	mov	r1, r2
   d4694:	6840      	ldr	r0, [r0, #4]
   d4696:	f7ff bfbb 	b.w	d4610 <network_listening>

000d469a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d469a:	2200      	movs	r2, #0
   d469c:	4611      	mov	r1, r2
   d469e:	6840      	ldr	r0, [r0, #4]
   d46a0:	f7ff bfc6 	b.w	d4630 <network_get_listen_timeout>

000d46a4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d46a4:	2200      	movs	r2, #0
   d46a6:	6840      	ldr	r0, [r0, #4]
   d46a8:	f7ff bfba 	b.w	d4620 <network_set_listen_timeout>

000d46ac <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d46ac:	2200      	movs	r2, #0
   d46ae:	f081 0101 	eor.w	r1, r1, #1
   d46b2:	6840      	ldr	r0, [r0, #4]
   d46b4:	f7ff bfa4 	b.w	d4600 <network_listen>

000d46b8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d46b8:	2300      	movs	r3, #0
   d46ba:	461a      	mov	r2, r3
   d46bc:	4619      	mov	r1, r3
   d46be:	6840      	ldr	r0, [r0, #4]
   d46c0:	f7ff bf96 	b.w	d45f0 <network_off>

000d46c4 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d46c4:	2300      	movs	r3, #0
   d46c6:	461a      	mov	r2, r3
   d46c8:	4619      	mov	r1, r3
   d46ca:	6840      	ldr	r0, [r0, #4]
   d46cc:	f7ff bf88 	b.w	d45e0 <network_on>

000d46d0 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d46d0:	2200      	movs	r2, #0
   d46d2:	4611      	mov	r1, r2
   d46d4:	6840      	ldr	r0, [r0, #4]
   d46d6:	f7ff bf7b 	b.w	d45d0 <network_ready>

000d46da <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d46da:	2200      	movs	r2, #0
   d46dc:	4611      	mov	r1, r2
   d46de:	6840      	ldr	r0, [r0, #4]
   d46e0:	f7ff bf66 	b.w	d45b0 <network_connecting>

000d46e4 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d46e4:	2200      	movs	r2, #0
   d46e6:	2102      	movs	r1, #2
   d46e8:	6840      	ldr	r0, [r0, #4]
   d46ea:	f7ff bf69 	b.w	d45c0 <network_disconnect>

000d46ee <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d46ee:	2300      	movs	r3, #0
   d46f0:	461a      	mov	r2, r3
   d46f2:	6840      	ldr	r0, [r0, #4]
   d46f4:	f7ff bf54 	b.w	d45a0 <network_connect>

000d46f8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d46f8:	4b02      	ldr	r3, [pc, #8]	; (d4704 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d46fa:	2203      	movs	r2, #3
   d46fc:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d46fe:	4a02      	ldr	r2, [pc, #8]	; (d4708 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4700:	601a      	str	r2, [r3, #0]
   d4702:	4770      	bx	lr
   d4704:	2003e3dc 	.word	0x2003e3dc
   d4708:	000d61ec 	.word	0x000d61ec

000d470c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d470c:	b510      	push	{r4, lr}
   d470e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4710:	6800      	ldr	r0, [r0, #0]
   d4712:	b118      	cbz	r0, d471c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d4714:	f7ff ffa4 	bl	d4660 <free>
            wakeupSource_ = nullptr;
   d4718:	2300      	movs	r3, #0
   d471a:	6023      	str	r3, [r4, #0]
   d471c:	bd10      	pop	{r4, pc}

000d471e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d471e:	b510      	push	{r4, lr}
   d4720:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d4722:	f7ff fff3 	bl	d470c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4726:	4620      	mov	r0, r4
   d4728:	bd10      	pop	{r4, pc}
	...

000d472c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d472c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d472e:	4c09      	ldr	r4, [pc, #36]	; (d4754 <_GLOBAL__sub_I_System+0x28>)
   d4730:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4732:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4736:	6020      	str	r0, [r4, #0]
   d4738:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d473a:	71a0      	strb	r0, [r4, #6]
   d473c:	8120      	strh	r0, [r4, #8]
   d473e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4740:	f7ff ff0a 	bl	d4558 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4744:	4620      	mov	r0, r4
   d4746:	4a04      	ldr	r2, [pc, #16]	; (d4758 <_GLOBAL__sub_I_System+0x2c>)
   d4748:	4904      	ldr	r1, [pc, #16]	; (d475c <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d474a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d474e:	f000 bd47 	b.w	d51e0 <__aeabi_atexit>
   d4752:	bf00      	nop
   d4754:	2003e3e4 	.word	0x2003e3e4
   d4758:	2003e3b8 	.word	0x2003e3b8
   d475c:	000d471f 	.word	0x000d471f

000d4760 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4760:	b510      	push	{r4, lr}
   d4762:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4764:	6800      	ldr	r0, [r0, #0]
   d4766:	b108      	cbz	r0, d476c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4768:	f7ff fe26 	bl	d43b8 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d476c:	4620      	mov	r0, r4
   d476e:	bd10      	pop	{r4, pc}

000d4770 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4770:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4772:	4c06      	ldr	r4, [pc, #24]	; (d478c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4774:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4776:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4778:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d477a:	f7ff fe15 	bl	d43a8 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d477e:	4620      	mov	r0, r4
   d4780:	4a03      	ldr	r2, [pc, #12]	; (d4790 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4782:	4904      	ldr	r1, [pc, #16]	; (d4794 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4788:	f000 bd2a 	b.w	d51e0 <__aeabi_atexit>
   d478c:	2003e3f0 	.word	0x2003e3f0
   d4790:	2003e3b8 	.word	0x2003e3b8
   d4794:	000d4761 	.word	0x000d4761

000d4798 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d479a:	4606      	mov	r6, r0
   d479c:	460d      	mov	r5, r1
   d479e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d47a0:	2400      	movs	r4, #0
  while (size--) {
   d47a2:	42bd      	cmp	r5, r7
   d47a4:	d00c      	beq.n	d47c0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d47a6:	6833      	ldr	r3, [r6, #0]
   d47a8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d47ac:	689b      	ldr	r3, [r3, #8]
   d47ae:	4630      	mov	r0, r6
   d47b0:	4798      	blx	r3
     if (chunk>=0)
   d47b2:	2800      	cmp	r0, #0
   d47b4:	db01      	blt.n	d47ba <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d47b6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d47b8:	e7f3      	b.n	d47a2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d47ba:	2c00      	cmp	r4, #0
   d47bc:	bf08      	it	eq
   d47be:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d47c0:	4620      	mov	r0, r4
   d47c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d47c4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d47c4:	b570      	push	{r4, r5, r6, lr}
   d47c6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d47c8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d47ca:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d47cc:	b149      	cbz	r1, d47e2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d47ce:	f001 fca5 	bl	d611c <strlen>
   d47d2:	682b      	ldr	r3, [r5, #0]
   d47d4:	4602      	mov	r2, r0
   d47d6:	4621      	mov	r1, r4
   d47d8:	4628      	mov	r0, r5
   d47da:	68db      	ldr	r3, [r3, #12]
    }
   d47dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d47e0:	4718      	bx	r3
    }
   d47e2:	bd70      	pop	{r4, r5, r6, pc}

000d47e4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d47e4:	6803      	ldr	r3, [r0, #0]
   d47e6:	689b      	ldr	r3, [r3, #8]
   d47e8:	4718      	bx	r3

000d47ea <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d47ea:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d47ec:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d47ee:	4605      	mov	r5, r0
  size_t n = print('\r');
   d47f0:	f7ff fff8 	bl	d47e4 <_ZN5Print5printEc>
  n += print('\n');
   d47f4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d47f6:	4604      	mov	r4, r0
  n += print('\n');
   d47f8:	4628      	mov	r0, r5
   d47fa:	f7ff fff3 	bl	d47e4 <_ZN5Print5printEc>
  return n;
}
   d47fe:	4420      	add	r0, r4
   d4800:	bd38      	pop	{r3, r4, r5, pc}

000d4802 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4802:	b530      	push	{r4, r5, lr}
   d4804:	b08b      	sub	sp, #44	; 0x2c
   d4806:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4808:	2100      	movs	r1, #0
   d480a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d480e:	2a01      	cmp	r2, #1
   d4810:	bf98      	it	ls
   d4812:	220a      	movls	r2, #10
   d4814:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d4818:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d481c:	fb05 3312 	mls	r3, r5, r2, r3
   d4820:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4824:	2b09      	cmp	r3, #9
   d4826:	bf94      	ite	ls
   d4828:	3330      	addls	r3, #48	; 0x30
   d482a:	3337      	addhi	r3, #55	; 0x37
   d482c:	b2db      	uxtb	r3, r3
   d482e:	4621      	mov	r1, r4
   d4830:	f804 3901 	strb.w	r3, [r4], #-1
   d4834:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4836:	2d00      	cmp	r5, #0
   d4838:	d1ee      	bne.n	d4818 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d483a:	f7ff ffc3 	bl	d47c4 <_ZN5Print5writeEPKc>
}
   d483e:	b00b      	add	sp, #44	; 0x2c
   d4840:	bd30      	pop	{r4, r5, pc}

000d4842 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4842:	b40c      	push	{r2, r3}
   d4844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4848:	b087      	sub	sp, #28
   d484a:	af00      	add	r7, sp, #0
   d484c:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d4850:	4605      	mov	r5, r0
   d4852:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d4856:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4858:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d485a:	4623      	mov	r3, r4
   d485c:	464a      	mov	r2, r9
   d485e:	2114      	movs	r1, #20
   d4860:	1d38      	adds	r0, r7, #4
   d4862:	f7ff ff05 	bl	d4670 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d4866:	2813      	cmp	r0, #19
   d4868:	d805      	bhi.n	d4876 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d486a:	1d39      	adds	r1, r7, #4
   d486c:	4628      	mov	r0, r5
   d486e:	f7ff ffa9 	bl	d47c4 <_ZN5Print5writeEPKc>
   d4872:	4604      	mov	r4, r0
   d4874:	e013      	b.n	d489e <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4876:	f100 0308 	add.w	r3, r0, #8
   d487a:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d487e:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4880:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d4884:	1c41      	adds	r1, r0, #1
   d4886:	4623      	mov	r3, r4
   d4888:	464a      	mov	r2, r9
   d488a:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d488c:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d488e:	f7ff feef 	bl	d4670 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4892:	4669      	mov	r1, sp
   d4894:	4628      	mov	r0, r5
   d4896:	f7ff ff95 	bl	d47c4 <_ZN5Print5writeEPKc>
   d489a:	4604      	mov	r4, r0
   d489c:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d489e:	b11e      	cbz	r6, d48a8 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d48a0:	4628      	mov	r0, r5
   d48a2:	f7ff ffa2 	bl	d47ea <_ZN5Print7printlnEv>
   d48a6:	4404      	add	r4, r0
    return n;
}
   d48a8:	4620      	mov	r0, r4
   d48aa:	371c      	adds	r7, #28
   d48ac:	46bd      	mov	sp, r7
   d48ae:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d48b2:	b002      	add	sp, #8
   d48b4:	4770      	bx	lr
	...

000d48b8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d48b8:	4b01      	ldr	r3, [pc, #4]	; (d48c0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d48ba:	4a02      	ldr	r2, [pc, #8]	; (d48c4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d48bc:	601a      	str	r2, [r3, #0]
   d48be:	4770      	bx	lr
   d48c0:	2003e3f4 	.word	0x2003e3f4
   d48c4:	000d628b 	.word	0x000d628b

000d48c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d48c8:	4b02      	ldr	r3, [pc, #8]	; (d48d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d48ca:	681a      	ldr	r2, [r3, #0]
   d48cc:	4b02      	ldr	r3, [pc, #8]	; (d48d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d48ce:	601a      	str	r2, [r3, #0]
   d48d0:	4770      	bx	lr
   d48d2:	bf00      	nop
   d48d4:	2003e34c 	.word	0x2003e34c
   d48d8:	2003e3f8 	.word	0x2003e3f8

000d48dc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d48dc:	2100      	movs	r1, #0
   d48de:	f7ff be43 	b.w	d4568 <system_delay_ms>

000d48e2 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d48e2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d48e4:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d48e6:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d48e8:	b113      	cbz	r3, d48f0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d48ea:	2203      	movs	r2, #3
   d48ec:	4601      	mov	r1, r0
   d48ee:	4798      	blx	r3
    }
   d48f0:	4620      	mov	r0, r4
   d48f2:	bd10      	pop	{r4, pc}

000d48f4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d48f4:	b510      	push	{r4, lr}
   d48f6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d48f8:	f7ff fff3 	bl	d48e2 <_ZNSt14_Function_baseD1Ev>
   d48fc:	4620      	mov	r0, r4
   d48fe:	bd10      	pop	{r4, pc}

000d4900 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4900:	4803      	ldr	r0, [pc, #12]	; (d4910 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4902:	4a04      	ldr	r2, [pc, #16]	; (d4914 <_GLOBAL__sub_I_RGB+0x14>)
   d4904:	4904      	ldr	r1, [pc, #16]	; (d4918 <_GLOBAL__sub_I_RGB+0x18>)
   d4906:	2300      	movs	r3, #0
   d4908:	6083      	str	r3, [r0, #8]
   d490a:	f000 bc69 	b.w	d51e0 <__aeabi_atexit>
   d490e:	bf00      	nop
   d4910:	2003e3fc 	.word	0x2003e3fc
   d4914:	2003e3b8 	.word	0x2003e3b8
   d4918:	000d48f5 	.word	0x000d48f5

000d491c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d491c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d491e:	4b0c      	ldr	r3, [pc, #48]	; (d4950 <serialEventRun+0x34>)
   d4920:	b133      	cbz	r3, d4930 <serialEventRun+0x14>
   d4922:	f000 f957 	bl	d4bd4 <_Z16_fetch_usbserialv>
   d4926:	6803      	ldr	r3, [r0, #0]
   d4928:	691b      	ldr	r3, [r3, #16]
   d492a:	4798      	blx	r3
   d492c:	2800      	cmp	r0, #0
   d492e:	dc09      	bgt.n	d4944 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4930:	4b08      	ldr	r3, [pc, #32]	; (d4954 <serialEventRun+0x38>)
   d4932:	b163      	cbz	r3, d494e <serialEventRun+0x32>
   d4934:	f000 f9cc 	bl	d4cd0 <_Z22__fetch_global_Serial1v>
   d4938:	6803      	ldr	r3, [r0, #0]
   d493a:	691b      	ldr	r3, [r3, #16]
   d493c:	4798      	blx	r3
   d493e:	2800      	cmp	r0, #0
   d4940:	dc03      	bgt.n	d494a <serialEventRun+0x2e>
   d4942:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4944:	f3af 8000 	nop.w
   d4948:	e7f2      	b.n	d4930 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d494a:	f3af 8000 	nop.w
   d494e:	bd08      	pop	{r3, pc}
	...

000d4958 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4958:	b508      	push	{r3, lr}
	serialEventRun();
   d495a:	f7ff ffdf 	bl	d491c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d495e:	f7ff fd03 	bl	d4368 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4962:	4b01      	ldr	r3, [pc, #4]	; (d4968 <_post_loop+0x10>)
   d4964:	6018      	str	r0, [r3, #0]
   d4966:	bd08      	pop	{r3, pc}
   d4968:	2003e730 	.word	0x2003e730

000d496c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d496c:	4802      	ldr	r0, [pc, #8]	; (d4978 <_Z33system_initialize_user_backup_ramv+0xc>)
   d496e:	4a03      	ldr	r2, [pc, #12]	; (d497c <_Z33system_initialize_user_backup_ramv+0x10>)
   d4970:	4903      	ldr	r1, [pc, #12]	; (d4980 <_Z33system_initialize_user_backup_ramv+0x14>)
   d4972:	1a12      	subs	r2, r2, r0
   d4974:	f001 bb96 	b.w	d60a4 <memcpy>
   d4978:	2003f400 	.word	0x2003f400
   d497c:	2003f404 	.word	0x2003f404
   d4980:	000d6510 	.word	0x000d6510

000d4984 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4984:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4986:	2300      	movs	r3, #0
   d4988:	9300      	str	r3, [sp, #0]
   d498a:	461a      	mov	r2, r3
   d498c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4990:	f7ff fdfc 	bl	d458c <system_ctrl_set_result>
}
   d4994:	b003      	add	sp, #12
   d4996:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d499c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d499c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d499e:	8843      	ldrh	r3, [r0, #2]
   d49a0:	2b0a      	cmp	r3, #10
   d49a2:	d008      	beq.n	d49b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d49a4:	2b50      	cmp	r3, #80	; 0x50
   d49a6:	d109      	bne.n	d49bc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d49a8:	4b09      	ldr	r3, [pc, #36]	; (d49d0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d49aa:	681b      	ldr	r3, [r3, #0]
   d49ac:	b13b      	cbz	r3, d49be <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d49ae:	b003      	add	sp, #12
   d49b0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d49b4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d49b6:	f7ff ffe5 	bl	d4984 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d49ba:	e006      	b.n	d49ca <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d49bc:	2300      	movs	r3, #0
   d49be:	9300      	str	r3, [sp, #0]
   d49c0:	461a      	mov	r2, r3
   d49c2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d49c6:	f7ff fde1 	bl	d458c <system_ctrl_set_result>
        break;
    }
}
   d49ca:	b003      	add	sp, #12
   d49cc:	f85d fb04 	ldr.w	pc, [sp], #4
   d49d0:	2003e40c 	.word	0x2003e40c

000d49d4 <module_user_init_hook>:

void module_user_init_hook()
{
   d49d4:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d49d6:	4c10      	ldr	r4, [pc, #64]	; (d4a18 <module_user_init_hook+0x44>)
   d49d8:	4d10      	ldr	r5, [pc, #64]	; (d4a1c <module_user_init_hook+0x48>)
   d49da:	6823      	ldr	r3, [r4, #0]
   d49dc:	42ab      	cmp	r3, r5
   d49de:	4b10      	ldr	r3, [pc, #64]	; (d4a20 <module_user_init_hook+0x4c>)
   d49e0:	bf0c      	ite	eq
   d49e2:	2201      	moveq	r2, #1
   d49e4:	2200      	movne	r2, #0
   d49e6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d49e8:	d002      	beq.n	d49f0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d49ea:	f7ff ffbf 	bl	d496c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d49ee:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d49f0:	f7ff fcb2 	bl	d4358 <HAL_RNG_GetRandomNumber>
   d49f4:	4604      	mov	r4, r0
    srand(seed);
   d49f6:	f001 fb69 	bl	d60cc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d49fa:	4b0a      	ldr	r3, [pc, #40]	; (d4a24 <module_user_init_hook+0x50>)
   d49fc:	b113      	cbz	r3, d4a04 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d49fe:	4620      	mov	r0, r4
   d4a00:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4a04:	2100      	movs	r1, #0
   d4a06:	4807      	ldr	r0, [pc, #28]	; (d4a24 <module_user_init_hook+0x50>)
   d4a08:	f7ff fe1a 	bl	d4640 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4a0c:	2100      	movs	r1, #0
   d4a0e:	4806      	ldr	r0, [pc, #24]	; (d4a28 <module_user_init_hook+0x54>)
}
   d4a10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4a14:	f7ff bdb0 	b.w	d4578 <system_ctrl_set_app_request_handler>
   d4a18:	2003f400 	.word	0x2003f400
   d4a1c:	9a271c1e 	.word	0x9a271c1e
   d4a20:	2003e410 	.word	0x2003e410
   d4a24:	00000000 	.word	0x00000000
   d4a28:	000d499d 	.word	0x000d499d

000d4a2c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4a2c:	4770      	bx	lr

000d4a2e <_ZN9IPAddressD0Ev>:
   d4a2e:	b510      	push	{r4, lr}
   d4a30:	2118      	movs	r1, #24
   d4a32:	4604      	mov	r4, r0
   d4a34:	f000 fbe2 	bl	d51fc <_ZdlPvj>
   d4a38:	4620      	mov	r0, r4
   d4a3a:	bd10      	pop	{r4, pc}

000d4a3c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4a3e:	7d03      	ldrb	r3, [r0, #20]
   d4a40:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4a42:	b08d      	sub	sp, #52	; 0x34
   d4a44:	460e      	mov	r6, r1
   d4a46:	f100 0704 	add.w	r7, r0, #4
   d4a4a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4a4e:	d002      	beq.n	d4a56 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4a50:	f100 0508 	add.w	r5, r0, #8
   d4a54:	e018      	b.n	d4a88 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4a56:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4a58:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4a5a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4a5e:	232f      	movs	r3, #47	; 0x2f
   d4a60:	462a      	mov	r2, r5
   d4a62:	200a      	movs	r0, #10
   d4a64:	f7ff fcb0 	bl	d43c8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4a68:	4628      	mov	r0, r5
   d4a6a:	f001 fb57 	bl	d611c <strlen>
   d4a6e:	6833      	ldr	r3, [r6, #0]
   d4a70:	4602      	mov	r2, r0
   d4a72:	68db      	ldr	r3, [r3, #12]
   d4a74:	4629      	mov	r1, r5
   d4a76:	4630      	mov	r0, r6
   d4a78:	4798      	blx	r3
   d4a7a:	e00f      	b.n	d4a9c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4a7c:	b124      	cbz	r4, d4a88 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4a7e:	212e      	movs	r1, #46	; 0x2e
   d4a80:	4630      	mov	r0, r6
   d4a82:	f7ff feaf 	bl	d47e4 <_ZN5Print5printEc>
   d4a86:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4a88:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4a8c:	220a      	movs	r2, #10
   d4a8e:	4630      	mov	r0, r6
   d4a90:	f7ff feb7 	bl	d4802 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4a94:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4a96:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4a98:	d1f0      	bne.n	d4a7c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4a9a:	4620      	mov	r0, r4
    }
    return n;
}
   d4a9c:	b00d      	add	sp, #52	; 0x34
   d4a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4aa0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4aa0:	b510      	push	{r4, lr}
   d4aa2:	4b05      	ldr	r3, [pc, #20]	; (d4ab8 <_ZN9IPAddressC1Ev+0x18>)
   d4aa4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4aa6:	2211      	movs	r2, #17
   d4aa8:	f840 3b04 	str.w	r3, [r0], #4
   d4aac:	2100      	movs	r1, #0
   d4aae:	f001 fb04 	bl	d60ba <memset>
{
    clear();
}
   d4ab2:	4620      	mov	r0, r4
   d4ab4:	bd10      	pop	{r4, pc}
   d4ab6:	bf00      	nop
   d4ab8:	000d632c 	.word	0x000d632c

000d4abc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4abc:	4603      	mov	r3, r0
   d4abe:	4a07      	ldr	r2, [pc, #28]	; (d4adc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4ac0:	b510      	push	{r4, lr}
   d4ac2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4ac6:	f101 0210 	add.w	r2, r1, #16
   d4aca:	f851 4b04 	ldr.w	r4, [r1], #4
   d4ace:	f843 4b04 	str.w	r4, [r3], #4
   d4ad2:	4291      	cmp	r1, r2
   d4ad4:	d1f9      	bne.n	d4aca <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4ad6:	780a      	ldrb	r2, [r1, #0]
   d4ad8:	701a      	strb	r2, [r3, #0]
}
   d4ada:	bd10      	pop	{r4, pc}
   d4adc:	000d632c 	.word	0x000d632c

000d4ae0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4ae0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4ae2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4ae6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4aea:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4aee:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4af2:	2304      	movs	r3, #4
   d4af4:	6041      	str	r1, [r0, #4]
   d4af6:	7503      	strb	r3, [r0, #20]
   d4af8:	bd10      	pop	{r4, pc}

000d4afa <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4afa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4afc:	780d      	ldrb	r5, [r1, #0]
   d4afe:	788b      	ldrb	r3, [r1, #2]
   d4b00:	784a      	ldrb	r2, [r1, #1]
   d4b02:	78c9      	ldrb	r1, [r1, #3]
   d4b04:	9100      	str	r1, [sp, #0]
   d4b06:	4629      	mov	r1, r5
   d4b08:	f7ff ffea 	bl	d4ae0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4b0c:	b003      	add	sp, #12
   d4b0e:	bd30      	pop	{r4, r5, pc}

000d4b10 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4b10:	7441      	strb	r1, [r0, #17]
   d4b12:	4770      	bx	lr

000d4b14 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4b14:	4770      	bx	lr

000d4b16 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4b16:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4b18:	2100      	movs	r1, #0
   d4b1a:	7c00      	ldrb	r0, [r0, #16]
   d4b1c:	f7ff fd04 	bl	d4528 <HAL_USB_USART_Receive_Data>
}
   d4b20:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4b24:	bf28      	it	cs
   d4b26:	f04f 30ff 	movcs.w	r0, #4294967295
   d4b2a:	bd08      	pop	{r3, pc}

000d4b2c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4b2c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4b2e:	2101      	movs	r1, #1
   d4b30:	7c00      	ldrb	r0, [r0, #16]
   d4b32:	f7ff fcf9 	bl	d4528 <HAL_USB_USART_Receive_Data>
}
   d4b36:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4b3a:	bf28      	it	cs
   d4b3c:	f04f 30ff 	movcs.w	r0, #4294967295
   d4b40:	bd08      	pop	{r3, pc}

000d4b42 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4b42:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4b44:	7c00      	ldrb	r0, [r0, #16]
   d4b46:	f7ff fce7 	bl	d4518 <HAL_USB_USART_Available_Data_For_Write>
}
   d4b4a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4b4e:	bd08      	pop	{r3, pc}

000d4b50 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4b50:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4b52:	7c00      	ldrb	r0, [r0, #16]
   d4b54:	f7ff fcd8 	bl	d4508 <HAL_USB_USART_Available_Data>
}
   d4b58:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4b5c:	bd08      	pop	{r3, pc}

000d4b5e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4b5e:	7c00      	ldrb	r0, [r0, #16]
   d4b60:	f7ff bcf2 	b.w	d4548 <HAL_USB_USART_Flush_Data>

000d4b64 <_ZN9USBSerialD0Ev>:
   d4b64:	b510      	push	{r4, lr}
   d4b66:	2114      	movs	r1, #20
   d4b68:	4604      	mov	r4, r0
   d4b6a:	f000 fb47 	bl	d51fc <_ZdlPvj>
   d4b6e:	4620      	mov	r0, r4
   d4b70:	bd10      	pop	{r4, pc}

000d4b72 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4b72:	b538      	push	{r3, r4, r5, lr}
   d4b74:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4b76:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4b78:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4b7a:	f7ff fccd 	bl	d4518 <HAL_USB_USART_Available_Data_For_Write>
   d4b7e:	2800      	cmp	r0, #0
   d4b80:	dc01      	bgt.n	d4b86 <_ZN9USBSerial5writeEh+0x14>
   d4b82:	7c60      	ldrb	r0, [r4, #17]
   d4b84:	b128      	cbz	r0, d4b92 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4b86:	4629      	mov	r1, r5
   d4b88:	7c20      	ldrb	r0, [r4, #16]
   d4b8a:	f7ff fcd5 	bl	d4538 <HAL_USB_USART_Send_Data>
   d4b8e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4b92:	bd38      	pop	{r3, r4, r5, pc}

000d4b94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4b94:	b510      	push	{r4, lr}
   d4b96:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4b98:	2300      	movs	r3, #0
   d4b9a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4b9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4ba0:	60a3      	str	r3, [r4, #8]
   d4ba2:	4b05      	ldr	r3, [pc, #20]	; (d4bb8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4ba4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4ba6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4ba8:	4608      	mov	r0, r1
{
  _serial = serial;
   d4baa:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4bac:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4bae:	4611      	mov	r1, r2
   d4bb0:	f7ff fc9a 	bl	d44e8 <HAL_USB_USART_Init>
}
   d4bb4:	4620      	mov	r0, r4
   d4bb6:	bd10      	pop	{r4, pc}
   d4bb8:	000d6340 	.word	0x000d6340

000d4bbc <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4bbc:	2200      	movs	r2, #0
   d4bbe:	7c00      	ldrb	r0, [r0, #16]
   d4bc0:	f7ff bc9a 	b.w	d44f8 <HAL_USB_USART_Begin>

000d4bc4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4bc4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4bc6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4bc8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4bca:	2100      	movs	r1, #0
   d4bcc:	f001 fa75 	bl	d60ba <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4bd0:	4620      	mov	r0, r4
   d4bd2:	bd10      	pop	{r4, pc}

000d4bd4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4bd4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4bd6:	4d0e      	ldr	r5, [pc, #56]	; (d4c10 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4bd8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4bda:	a801      	add	r0, sp, #4
   d4bdc:	f7ff fff2 	bl	d4bc4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4be0:	6829      	ldr	r1, [r5, #0]
   d4be2:	f011 0401 	ands.w	r4, r1, #1
   d4be6:	d110      	bne.n	d4c0a <_Z16_fetch_usbserialv+0x36>
   d4be8:	4628      	mov	r0, r5
   d4bea:	f7ff fa5a 	bl	d40a2 <__cxa_guard_acquire>
   d4bee:	b160      	cbz	r0, d4c0a <_Z16_fetch_usbserialv+0x36>
   d4bf0:	aa01      	add	r2, sp, #4
   d4bf2:	4621      	mov	r1, r4
   d4bf4:	4807      	ldr	r0, [pc, #28]	; (d4c14 <_Z16_fetch_usbserialv+0x40>)
   d4bf6:	f7ff ffcd 	bl	d4b94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4bfa:	4628      	mov	r0, r5
   d4bfc:	f7ff fa56 	bl	d40ac <__cxa_guard_release>
   d4c00:	4a05      	ldr	r2, [pc, #20]	; (d4c18 <_Z16_fetch_usbserialv+0x44>)
   d4c02:	4906      	ldr	r1, [pc, #24]	; (d4c1c <_Z16_fetch_usbserialv+0x48>)
   d4c04:	4803      	ldr	r0, [pc, #12]	; (d4c14 <_Z16_fetch_usbserialv+0x40>)
   d4c06:	f000 faeb 	bl	d51e0 <__aeabi_atexit>
	return _usbserial;
}
   d4c0a:	4802      	ldr	r0, [pc, #8]	; (d4c14 <_Z16_fetch_usbserialv+0x40>)
   d4c0c:	b007      	add	sp, #28
   d4c0e:	bd30      	pop	{r4, r5, pc}
   d4c10:	2003e414 	.word	0x2003e414
   d4c14:	2003e418 	.word	0x2003e418
   d4c18:	2003e3b8 	.word	0x2003e3b8
   d4c1c:	000d4b15 	.word	0x000d4b15

000d4c20 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4c20:	4770      	bx	lr

000d4c22 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4c22:	7441      	strb	r1, [r0, #17]
   d4c24:	4770      	bx	lr

000d4c26 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4c26:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4c28:	7c00      	ldrb	r0, [r0, #16]
   d4c2a:	f7ff fc05 	bl	d4438 <HAL_USART_Available_Data_For_Write>
}
   d4c2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4c32:	bd08      	pop	{r3, pc}

000d4c34 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4c34:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d4c36:	7c00      	ldrb	r0, [r0, #16]
   d4c38:	f7ff fbde 	bl	d43f8 <HAL_USART_Available_Data>
}
   d4c3c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4c40:	bd08      	pop	{r3, pc}

000d4c42 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4c42:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4c44:	7c00      	ldrb	r0, [r0, #16]
   d4c46:	f7ff fbe7 	bl	d4418 <HAL_USART_Peek_Data>
}
   d4c4a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4c4e:	bf28      	it	cs
   d4c50:	f04f 30ff 	movcs.w	r0, #4294967295
   d4c54:	bd08      	pop	{r3, pc}

000d4c56 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4c56:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d4c58:	7c00      	ldrb	r0, [r0, #16]
   d4c5a:	f7ff fbd5 	bl	d4408 <HAL_USART_Read_Data>
}
   d4c5e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4c62:	bf28      	it	cs
   d4c64:	f04f 30ff 	movcs.w	r0, #4294967295
   d4c68:	bd08      	pop	{r3, pc}

000d4c6a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4c6a:	7c00      	ldrb	r0, [r0, #16]
   d4c6c:	f7ff bbdc 	b.w	d4428 <HAL_USART_Flush_Data>

000d4c70 <_ZN11USARTSerialD0Ev>:
   d4c70:	b510      	push	{r4, lr}
   d4c72:	2114      	movs	r1, #20
   d4c74:	4604      	mov	r4, r0
   d4c76:	f000 fac1 	bl	d51fc <_ZdlPvj>
   d4c7a:	4620      	mov	r0, r4
   d4c7c:	bd10      	pop	{r4, pc}

000d4c7e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4c7e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4c80:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4c82:	4604      	mov	r4, r0
   d4c84:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4c86:	b925      	cbnz	r5, d4c92 <_ZN11USARTSerial5writeEh+0x14>
   d4c88:	7c00      	ldrb	r0, [r0, #16]
   d4c8a:	f7ff fbd5 	bl	d4438 <HAL_USART_Available_Data_For_Write>
   d4c8e:	2800      	cmp	r0, #0
   d4c90:	dd05      	ble.n	d4c9e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4c92:	4631      	mov	r1, r6
   d4c94:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4c96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4c9a:	f7ff bba5 	b.w	d43e8 <HAL_USART_Write_Data>
  }
  return 0;
}
   d4c9e:	4628      	mov	r0, r5
   d4ca0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4ca4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4ca4:	b510      	push	{r4, lr}
   d4ca6:	4604      	mov	r4, r0
   d4ca8:	4608      	mov	r0, r1
   d4caa:	4611      	mov	r1, r2
   d4cac:	2200      	movs	r2, #0
   d4cae:	6062      	str	r2, [r4, #4]
   d4cb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4cb4:	60a2      	str	r2, [r4, #8]
   d4cb6:	4a05      	ldr	r2, [pc, #20]	; (d4ccc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d4cb8:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d4cba:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4cbc:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4cbe:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d4cc0:	461a      	mov	r2, r3
   d4cc2:	f7ff fb89 	bl	d43d8 <HAL_USART_Init>
}
   d4cc6:	4620      	mov	r0, r4
   d4cc8:	bd10      	pop	{r4, pc}
   d4cca:	bf00      	nop
   d4ccc:	000d6370 	.word	0x000d6370

000d4cd0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4cd0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4cd2:	4d0c      	ldr	r5, [pc, #48]	; (d4d04 <_Z22__fetch_global_Serial1v+0x34>)
   d4cd4:	6829      	ldr	r1, [r5, #0]
   d4cd6:	f011 0401 	ands.w	r4, r1, #1
   d4cda:	d111      	bne.n	d4d00 <_Z22__fetch_global_Serial1v+0x30>
   d4cdc:	4628      	mov	r0, r5
   d4cde:	f7ff f9e0 	bl	d40a2 <__cxa_guard_acquire>
   d4ce2:	b168      	cbz	r0, d4d00 <_Z22__fetch_global_Serial1v+0x30>
   d4ce4:	4a08      	ldr	r2, [pc, #32]	; (d4d08 <_Z22__fetch_global_Serial1v+0x38>)
   d4ce6:	4b09      	ldr	r3, [pc, #36]	; (d4d0c <_Z22__fetch_global_Serial1v+0x3c>)
   d4ce8:	4809      	ldr	r0, [pc, #36]	; (d4d10 <_Z22__fetch_global_Serial1v+0x40>)
   d4cea:	4621      	mov	r1, r4
   d4cec:	f7ff ffda 	bl	d4ca4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d4cf0:	4628      	mov	r0, r5
   d4cf2:	f7ff f9db 	bl	d40ac <__cxa_guard_release>
   d4cf6:	4a07      	ldr	r2, [pc, #28]	; (d4d14 <_Z22__fetch_global_Serial1v+0x44>)
   d4cf8:	4907      	ldr	r1, [pc, #28]	; (d4d18 <_Z22__fetch_global_Serial1v+0x48>)
   d4cfa:	4805      	ldr	r0, [pc, #20]	; (d4d10 <_Z22__fetch_global_Serial1v+0x40>)
   d4cfc:	f000 fa70 	bl	d51e0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4d00:	4803      	ldr	r0, [pc, #12]	; (d4d10 <_Z22__fetch_global_Serial1v+0x40>)
   d4d02:	bd38      	pop	{r3, r4, r5, pc}
   d4d04:	2003e4c4 	.word	0x2003e4c4
   d4d08:	2003e4c8 	.word	0x2003e4c8
   d4d0c:	2003e440 	.word	0x2003e440
   d4d10:	2003e42c 	.word	0x2003e42c
   d4d14:	2003e3b8 	.word	0x2003e3b8
   d4d18:	000d4c21 	.word	0x000d4c21

000d4d1c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d4d1c:	4770      	bx	lr

000d4d1e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4d1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4d20:	4606      	mov	r6, r0
   d4d22:	4615      	mov	r5, r2
   d4d24:	460c      	mov	r4, r1
   d4d26:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4d28:	42bc      	cmp	r4, r7
   d4d2a:	d006      	beq.n	d4d3a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4d2c:	6833      	ldr	r3, [r6, #0]
   d4d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4d32:	689b      	ldr	r3, [r3, #8]
   d4d34:	4630      	mov	r0, r6
   d4d36:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4d38:	e7f6      	b.n	d4d28 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4d3a:	4628      	mov	r0, r5
   d4d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d3e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4d3e:	2200      	movs	r2, #0
   d4d40:	7c00      	ldrb	r0, [r0, #16]
   d4d42:	f7ff bb99 	b.w	d4478 <HAL_I2C_Write_Data>

000d4d46 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4d46:	2100      	movs	r1, #0
   d4d48:	7c00      	ldrb	r0, [r0, #16]
   d4d4a:	f7ff bb9d 	b.w	d4488 <HAL_I2C_Available_Data>

000d4d4e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4d4e:	2100      	movs	r1, #0
   d4d50:	7c00      	ldrb	r0, [r0, #16]
   d4d52:	f7ff bba1 	b.w	d4498 <HAL_I2C_Read_Data>

000d4d56 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4d56:	2100      	movs	r1, #0
   d4d58:	7c00      	ldrb	r0, [r0, #16]
   d4d5a:	f7ff bba5 	b.w	d44a8 <HAL_I2C_Peek_Data>

000d4d5e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4d5e:	2100      	movs	r1, #0
   d4d60:	7c00      	ldrb	r0, [r0, #16]
   d4d62:	f7ff bba9 	b.w	d44b8 <HAL_I2C_Flush_Data>

000d4d66 <_ZN7TwoWireD0Ev>:
   d4d66:	b510      	push	{r4, lr}
   d4d68:	2114      	movs	r1, #20
   d4d6a:	4604      	mov	r4, r0
   d4d6c:	f000 fa46 	bl	d51fc <_ZdlPvj>
   d4d70:	4620      	mov	r0, r4
   d4d72:	bd10      	pop	{r4, pc}

000d4d74 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4d74:	b510      	push	{r4, lr}
   d4d76:	4604      	mov	r4, r0
   d4d78:	2300      	movs	r3, #0
   d4d7a:	6063      	str	r3, [r4, #4]
   d4d7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4d80:	60a3      	str	r3, [r4, #8]
   d4d82:	4b04      	ldr	r3, [pc, #16]	; (d4d94 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d4d84:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4d86:	4608      	mov	r0, r1
   d4d88:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d4d8a:	4611      	mov	r1, r2
   d4d8c:	f7ff fb9c 	bl	d44c8 <HAL_I2C_Init>
}
   d4d90:	4620      	mov	r0, r4
   d4d92:	bd10      	pop	{r4, pc}
   d4d94:	000d63a0 	.word	0x000d63a0

000d4d98 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d4d98:	2300      	movs	r3, #0
   d4d9a:	461a      	mov	r2, r3
   d4d9c:	4619      	mov	r1, r3
   d4d9e:	7c00      	ldrb	r0, [r0, #16]
   d4da0:	f7ff bb52 	b.w	d4448 <HAL_I2C_Begin>

000d4da4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d4da4:	b570      	push	{r4, r5, r6, lr}
   d4da6:	460c      	mov	r4, r1
   d4da8:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d4daa:	2514      	movs	r5, #20
   d4dac:	4606      	mov	r6, r0
   d4dae:	462a      	mov	r2, r5
   d4db0:	2100      	movs	r1, #0
   d4db2:	a801      	add	r0, sp, #4
   d4db4:	f001 f981 	bl	d60ba <memset>
   d4db8:	7823      	ldrb	r3, [r4, #0]
   d4dba:	f88d 3008 	strb.w	r3, [sp, #8]
   d4dbe:	6863      	ldr	r3, [r4, #4]
   d4dc0:	9303      	str	r3, [sp, #12]
   d4dc2:	68e3      	ldr	r3, [r4, #12]
   d4dc4:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d4dc6:	2200      	movs	r2, #0
   d4dc8:	7a23      	ldrb	r3, [r4, #8]
   d4dca:	7c30      	ldrb	r0, [r6, #16]
   d4dcc:	f8ad 5004 	strh.w	r5, [sp, #4]
   d4dd0:	a901      	add	r1, sp, #4
   d4dd2:	9305      	str	r3, [sp, #20]
   d4dd4:	f7ff fb80 	bl	d44d8 <HAL_I2C_Request_Data_Ex>
}
   d4dd8:	b006      	add	sp, #24
   d4dda:	bd70      	pop	{r4, r5, r6, pc}

000d4ddc <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d4ddc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d4dde:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d4de0:	f88d 1000 	strb.w	r1, [sp]
   d4de4:	f04f 0164 	mov.w	r1, #100	; 0x64
   d4de8:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d4dea:	bf18      	it	ne
   d4dec:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d4dee:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d4df0:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d4df2:	f88d 3008 	strb.w	r3, [sp, #8]
   d4df6:	f7ff ffd5 	bl	d4da4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d4dfa:	b005      	add	sp, #20
   d4dfc:	f85d fb04 	ldr.w	pc, [sp], #4

000d4e00 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d4e00:	2301      	movs	r3, #1
   d4e02:	f7ff bfeb 	b.w	d4ddc <_ZN7TwoWire11requestFromEhjh>

000d4e06 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d4e06:	2200      	movs	r2, #0
   d4e08:	7c00      	ldrb	r0, [r0, #16]
   d4e0a:	f7ff bb25 	b.w	d4458 <HAL_I2C_Begin_Transmission>

000d4e0e <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d4e0e:	b2c9      	uxtb	r1, r1
   d4e10:	f7ff bff9 	b.w	d4e06 <_ZN7TwoWire17beginTransmissionEh>

000d4e14 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d4e14:	2200      	movs	r2, #0
   d4e16:	7c00      	ldrb	r0, [r0, #16]
   d4e18:	f7ff bb26 	b.w	d4468 <HAL_I2C_End_Transmission>

000d4e1c <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d4e1c:	2101      	movs	r1, #1
   d4e1e:	f7ff bff9 	b.w	d4e14 <_ZN7TwoWire15endTransmissionEh>

000d4e22 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4e22:	2200      	movs	r2, #0
   d4e24:	4611      	mov	r1, r2
   d4e26:	6840      	ldr	r0, [r0, #4]
   d4e28:	f7ff bbf2 	b.w	d4610 <network_listening>

000d4e2c <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4e2c:	2200      	movs	r2, #0
   d4e2e:	4611      	mov	r1, r2
   d4e30:	6840      	ldr	r0, [r0, #4]
   d4e32:	f7ff bbfd 	b.w	d4630 <network_get_listen_timeout>

000d4e36 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4e36:	2200      	movs	r2, #0
   d4e38:	6840      	ldr	r0, [r0, #4]
   d4e3a:	f7ff bbf1 	b.w	d4620 <network_set_listen_timeout>

000d4e3e <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4e3e:	2200      	movs	r2, #0
   d4e40:	f081 0101 	eor.w	r1, r1, #1
   d4e44:	6840      	ldr	r0, [r0, #4]
   d4e46:	f7ff bbdb 	b.w	d4600 <network_listen>

000d4e4a <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d4e4a:	2300      	movs	r3, #0
   d4e4c:	461a      	mov	r2, r3
   d4e4e:	2101      	movs	r1, #1
   d4e50:	6840      	ldr	r0, [r0, #4]
   d4e52:	f7ff bbcd 	b.w	d45f0 <network_off>

000d4e56 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4e56:	2300      	movs	r3, #0
   d4e58:	461a      	mov	r2, r3
   d4e5a:	4619      	mov	r1, r3
   d4e5c:	6840      	ldr	r0, [r0, #4]
   d4e5e:	f7ff bbbf 	b.w	d45e0 <network_on>

000d4e62 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4e62:	2200      	movs	r2, #0
   d4e64:	4611      	mov	r1, r2
   d4e66:	6840      	ldr	r0, [r0, #4]
   d4e68:	f7ff bbb2 	b.w	d45d0 <network_ready>

000d4e6c <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4e6c:	2200      	movs	r2, #0
   d4e6e:	4611      	mov	r1, r2
   d4e70:	6840      	ldr	r0, [r0, #4]
   d4e72:	f7ff bb9d 	b.w	d45b0 <network_connecting>

000d4e76 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4e76:	2200      	movs	r2, #0
   d4e78:	2102      	movs	r1, #2
   d4e7a:	6840      	ldr	r0, [r0, #4]
   d4e7c:	f7ff bba0 	b.w	d45c0 <network_disconnect>

000d4e80 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4e80:	2300      	movs	r3, #0
   d4e82:	461a      	mov	r2, r3
   d4e84:	6840      	ldr	r0, [r0, #4]
   d4e86:	f7ff bb8b 	b.w	d45a0 <network_connect>

000d4e8a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4e8a:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4e8c:	4605      	mov	r5, r0
   d4e8e:	b188      	cbz	r0, d4eb4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4e90:	6804      	ldr	r4, [r0, #0]
   d4e92:	b14c      	cbz	r4, d4ea8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d4e94:	68a3      	ldr	r3, [r4, #8]
   d4e96:	b11b      	cbz	r3, d4ea0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4e98:	2203      	movs	r2, #3
   d4e9a:	4621      	mov	r1, r4
   d4e9c:	4620      	mov	r0, r4
   d4e9e:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4ea0:	2110      	movs	r1, #16
   d4ea2:	4620      	mov	r0, r4
   d4ea4:	f000 f9aa 	bl	d51fc <_ZdlPvj>
   d4ea8:	4628      	mov	r0, r5
   d4eaa:	2114      	movs	r1, #20
      }
   d4eac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4eb0:	f000 b9a4 	b.w	d51fc <_ZdlPvj>
   d4eb4:	bd38      	pop	{r3, r4, r5, pc}

000d4eb6 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4eb6:	b110      	cbz	r0, d4ebe <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d4eb8:	6803      	ldr	r3, [r0, #0]
   d4eba:	685b      	ldr	r3, [r3, #4]
   d4ebc:	4718      	bx	r3
   d4ebe:	4770      	bx	lr

000d4ec0 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4ec0:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4ec2:	6803      	ldr	r3, [r0, #0]
   d4ec4:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4ec6:	b1bb      	cbz	r3, d4ef8 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4ec8:	6858      	ldr	r0, [r3, #4]
   d4eca:	f7ff fa55 	bl	d4378 <os_thread_is_current>
   d4ece:	b978      	cbnz	r0, d4ef0 <_ZN6ThreadD1Ev+0x30>
   d4ed0:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4ed2:	7c5a      	ldrb	r2, [r3, #17]
   d4ed4:	b912      	cbnz	r2, d4edc <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4ed6:	6858      	ldr	r0, [r3, #4]
   d4ed8:	f7ff fa56 	bl	d4388 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4edc:	6823      	ldr	r3, [r4, #0]
   d4ede:	6858      	ldr	r0, [r3, #4]
   d4ee0:	f7ff fa5a 	bl	d4398 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4ee4:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4ee6:	2300      	movs	r3, #0
   d4ee8:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4eea:	b128      	cbz	r0, d4ef8 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4eec:	f7ff ffcd 	bl	d4e8a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4ef0:	6820      	ldr	r0, [r4, #0]
   d4ef2:	b108      	cbz	r0, d4ef8 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4ef4:	f7ff ffc9 	bl	d4e8a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d4ef8:	4620      	mov	r0, r4
   d4efa:	bd10      	pop	{r4, pc}

000d4efc <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d4efc:	b538      	push	{r3, r4, r5, lr}
   d4efe:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f00:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d4f04:	b108      	cbz	r0, d4f0a <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4f06:	f7ff f8ca 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4f0a:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d4f0e:	b108      	cbz	r0, d4f14 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d4f10:	f7ff fa52 	bl	d43b8 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f14:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d4f18:	b135      	cbz	r5, d4f28 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4f1a:	4628      	mov	r0, r5
   d4f1c:	f7ff ffd0 	bl	d4ec0 <_ZN6ThreadD1Ev>
   d4f20:	2104      	movs	r1, #4
   d4f22:	4628      	mov	r0, r5
   d4f24:	f000 f96a 	bl	d51fc <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f28:	6820      	ldr	r0, [r4, #0]
   d4f2a:	b108      	cbz	r0, d4f30 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d4f2c:	f7ff ffc3 	bl	d4eb6 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d4f30:	4620      	mov	r0, r4
   d4f32:	bd38      	pop	{r3, r4, r5, pc}

000d4f34 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4f34:	b510      	push	{r4, lr}
   d4f36:	4b04      	ldr	r3, [pc, #16]	; (d4f48 <_ZN5spark9MeshClassD1Ev+0x14>)
   d4f38:	4604      	mov	r4, r0
   d4f3a:	f840 3b08 	str.w	r3, [r0], #8
   d4f3e:	f7ff ffdd 	bl	d4efc <_ZN5spark11MeshPublishD1Ev>
   d4f42:	4620      	mov	r0, r4
   d4f44:	bd10      	pop	{r4, pc}
   d4f46:	bf00      	nop
   d4f48:	000d63c8 	.word	0x000d63c8

000d4f4c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4f4c:	b538      	push	{r3, r4, r5, lr}
   d4f4e:	4c0e      	ldr	r4, [pc, #56]	; (d4f88 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d4f50:	4b0e      	ldr	r3, [pc, #56]	; (d4f8c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d4f52:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4f54:	2500      	movs	r5, #0
   d4f56:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4f58:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4f5c:	6063      	str	r3, [r4, #4]
   d4f5e:	60a5      	str	r5, [r4, #8]
   d4f60:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4f64:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4f68:	f7ff fa1e 	bl	d43a8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4f6c:	4b08      	ldr	r3, [pc, #32]	; (d4f90 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d4f6e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4f72:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d4f76:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4f78:	4620      	mov	r0, r4
   d4f7a:	4a06      	ldr	r2, [pc, #24]	; (d4f94 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d4f7c:	4906      	ldr	r1, [pc, #24]	; (d4f98 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d4f7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4f82:	f000 b92d 	b.w	d51e0 <__aeabi_atexit>
   d4f86:	bf00      	nop
   d4f88:	2003e54c 	.word	0x2003e54c
   d4f8c:	000d6430 	.word	0x000d6430
   d4f90:	000d63c8 	.word	0x000d63c8
   d4f94:	2003e3b8 	.word	0x2003e3b8
   d4f98:	000d4f35 	.word	0x000d4f35

000d4f9c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4f9c:	2200      	movs	r2, #0
   d4f9e:	4611      	mov	r1, r2
   d4fa0:	6840      	ldr	r0, [r0, #4]
   d4fa2:	f7ff bb15 	b.w	d45d0 <network_ready>

000d4fa6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4fa6:	2200      	movs	r2, #0
   d4fa8:	4611      	mov	r1, r2
   d4faa:	6840      	ldr	r0, [r0, #4]
   d4fac:	f7ff bb30 	b.w	d4610 <network_listening>

000d4fb0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4fb0:	2200      	movs	r2, #0
   d4fb2:	4611      	mov	r1, r2
   d4fb4:	6840      	ldr	r0, [r0, #4]
   d4fb6:	f7ff bb3b 	b.w	d4630 <network_get_listen_timeout>

000d4fba <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4fba:	2200      	movs	r2, #0
   d4fbc:	6840      	ldr	r0, [r0, #4]
   d4fbe:	f7ff bb2f 	b.w	d4620 <network_set_listen_timeout>

000d4fc2 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4fc2:	2200      	movs	r2, #0
   d4fc4:	f081 0101 	eor.w	r1, r1, #1
   d4fc8:	6840      	ldr	r0, [r0, #4]
   d4fca:	f7ff bb19 	b.w	d4600 <network_listen>

000d4fce <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d4fce:	2300      	movs	r3, #0
   d4fd0:	461a      	mov	r2, r3
   d4fd2:	4619      	mov	r1, r3
   d4fd4:	6840      	ldr	r0, [r0, #4]
   d4fd6:	f7ff bb0b 	b.w	d45f0 <network_off>

000d4fda <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d4fda:	2300      	movs	r3, #0
   d4fdc:	461a      	mov	r2, r3
   d4fde:	4619      	mov	r1, r3
   d4fe0:	6840      	ldr	r0, [r0, #4]
   d4fe2:	f7ff bafd 	b.w	d45e0 <network_on>

000d4fe6 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4fe6:	2200      	movs	r2, #0
   d4fe8:	4611      	mov	r1, r2
   d4fea:	6840      	ldr	r0, [r0, #4]
   d4fec:	f7ff bae0 	b.w	d45b0 <network_connecting>

000d4ff0 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4ff0:	2200      	movs	r2, #0
   d4ff2:	2102      	movs	r1, #2
   d4ff4:	6840      	ldr	r0, [r0, #4]
   d4ff6:	f7ff bae3 	b.w	d45c0 <network_disconnect>

000d4ffa <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4ffa:	2300      	movs	r3, #0
   d4ffc:	461a      	mov	r2, r3
   d4ffe:	6840      	ldr	r0, [r0, #4]
   d5000:	f7ff bace 	b.w	d45a0 <network_connect>

000d5004 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5004:	4b02      	ldr	r3, [pc, #8]	; (d5010 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5006:	2204      	movs	r2, #4
   d5008:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d500a:	4a02      	ldr	r2, [pc, #8]	; (d5014 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d500c:	601a      	str	r2, [r3, #0]
   d500e:	4770      	bx	lr
   d5010:	2003e720 	.word	0x2003e720
   d5014:	000d63fc 	.word	0x000d63fc

000d5018 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5018:	2300      	movs	r3, #0
   d501a:	461a      	mov	r2, r3
   d501c:	6840      	ldr	r0, [r0, #4]
   d501e:	f7ff babf 	b.w	d45a0 <network_connect>

000d5022 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5022:	2200      	movs	r2, #0
   d5024:	2102      	movs	r1, #2
   d5026:	6840      	ldr	r0, [r0, #4]
   d5028:	f7ff baca 	b.w	d45c0 <network_disconnect>

000d502c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d502c:	2200      	movs	r2, #0
   d502e:	4611      	mov	r1, r2
   d5030:	6840      	ldr	r0, [r0, #4]
   d5032:	f7ff babd 	b.w	d45b0 <network_connecting>

000d5036 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5036:	2200      	movs	r2, #0
   d5038:	4611      	mov	r1, r2
   d503a:	6840      	ldr	r0, [r0, #4]
   d503c:	f7ff bac8 	b.w	d45d0 <network_ready>

000d5040 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5040:	2300      	movs	r3, #0
   d5042:	461a      	mov	r2, r3
   d5044:	4619      	mov	r1, r3
   d5046:	6840      	ldr	r0, [r0, #4]
   d5048:	f7ff baca 	b.w	d45e0 <network_on>

000d504c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d504c:	2300      	movs	r3, #0
   d504e:	461a      	mov	r2, r3
   d5050:	4619      	mov	r1, r3
   d5052:	6840      	ldr	r0, [r0, #4]
   d5054:	f7ff bacc 	b.w	d45f0 <network_off>

000d5058 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5058:	2200      	movs	r2, #0
   d505a:	f081 0101 	eor.w	r1, r1, #1
   d505e:	6840      	ldr	r0, [r0, #4]
   d5060:	f7ff bace 	b.w	d4600 <network_listen>

000d5064 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5064:	2200      	movs	r2, #0
   d5066:	6840      	ldr	r0, [r0, #4]
   d5068:	f7ff bada 	b.w	d4620 <network_set_listen_timeout>

000d506c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d506c:	2200      	movs	r2, #0
   d506e:	4611      	mov	r1, r2
   d5070:	6840      	ldr	r0, [r0, #4]
   d5072:	f7ff badd 	b.w	d4630 <network_get_listen_timeout>

000d5076 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5076:	2200      	movs	r2, #0
   d5078:	4611      	mov	r1, r2
   d507a:	6840      	ldr	r0, [r0, #4]
   d507c:	f7ff bac8 	b.w	d4610 <network_listening>

000d5080 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5084:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5086:	b095      	sub	sp, #84	; 0x54
   d5088:	4616      	mov	r6, r2
   d508a:	460d      	mov	r5, r1
   d508c:	4607      	mov	r7, r0
    IPAddress addr;
   d508e:	f7ff fd07 	bl	d4aa0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5092:	4621      	mov	r1, r4
   d5094:	2220      	movs	r2, #32
   d5096:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5098:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d509a:	f001 f80e 	bl	d60ba <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d509e:	2340      	movs	r3, #64	; 0x40
   d50a0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d50a2:	4621      	mov	r1, r4
   d50a4:	466b      	mov	r3, sp
   d50a6:	aa0c      	add	r2, sp, #48	; 0x30
   d50a8:	4630      	mov	r0, r6
   d50aa:	f7ff f945 	bl	d4338 <netdb_getaddrinfo>
    if (!r) {
   d50ae:	4604      	mov	r4, r0
   d50b0:	2800      	cmp	r0, #0
   d50b2:	d144      	bne.n	d513e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d50b4:	4602      	mov	r2, r0
   d50b6:	2101      	movs	r1, #1
   d50b8:	6868      	ldr	r0, [r5, #4]
   d50ba:	f7ff fa89 	bl	d45d0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d50be:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d50c0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d50c2:	4622      	mov	r2, r4
   d50c4:	6868      	ldr	r0, [r5, #4]
   d50c6:	f7ff fa83 	bl	d45d0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d50ca:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d50cc:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d50ce:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d50d0:	2e00      	cmp	r6, #0
   d50d2:	d034      	beq.n	d513e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d50d4:	2900      	cmp	r1, #0
   d50d6:	d132      	bne.n	d513e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d50d8:	6873      	ldr	r3, [r6, #4]
   d50da:	2b02      	cmp	r3, #2
   d50dc:	d002      	beq.n	d50e4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d50de:	2b0a      	cmp	r3, #10
   d50e0:	d009      	beq.n	d50f6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d50e2:	e02a      	b.n	d513a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d50e4:	f1b8 0f00 	cmp.w	r8, #0
   d50e8:	d027      	beq.n	d513a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d50ea:	6971      	ldr	r1, [r6, #20]
   d50ec:	4638      	mov	r0, r7
   d50ee:	3104      	adds	r1, #4
   d50f0:	f7ff fd03 	bl	d4afa <_ZN9IPAddressaSEPKh>
   d50f4:	e020      	b.n	d5138 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d50f6:	f1b9 0f00 	cmp.w	r9, #0
   d50fa:	d01e      	beq.n	d513a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d50fc:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d50fe:	2211      	movs	r2, #17
   d5100:	a801      	add	r0, sp, #4
   d5102:	f000 ffda 	bl	d60ba <memset>
                    a.v = 6;
   d5106:	2306      	movs	r3, #6
   d5108:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d510c:	ad01      	add	r5, sp, #4
   d510e:	f104 0308 	add.w	r3, r4, #8
   d5112:	3418      	adds	r4, #24
   d5114:	6818      	ldr	r0, [r3, #0]
   d5116:	6859      	ldr	r1, [r3, #4]
   d5118:	462a      	mov	r2, r5
   d511a:	c203      	stmia	r2!, {r0, r1}
   d511c:	3308      	adds	r3, #8
   d511e:	42a3      	cmp	r3, r4
   d5120:	4615      	mov	r5, r2
   d5122:	d1f7      	bne.n	d5114 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5124:	a901      	add	r1, sp, #4
   d5126:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5128:	ad07      	add	r5, sp, #28
   d512a:	f7ff fcc7 	bl	d4abc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d512e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5130:	1d3c      	adds	r4, r7, #4
   d5132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5134:	682b      	ldr	r3, [r5, #0]
   d5136:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5138:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d513a:	69f6      	ldr	r6, [r6, #28]
   d513c:	e7c8      	b.n	d50d0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d513e:	9800      	ldr	r0, [sp, #0]
   d5140:	f7ff f8f2 	bl	d4328 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5144:	4638      	mov	r0, r7
   d5146:	b015      	add	sp, #84	; 0x54
   d5148:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d514c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d514c:	4b02      	ldr	r3, [pc, #8]	; (d5158 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d514e:	4a03      	ldr	r2, [pc, #12]	; (d515c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5150:	601a      	str	r2, [r3, #0]
   d5152:	2200      	movs	r2, #0
   d5154:	605a      	str	r2, [r3, #4]
   d5156:	4770      	bx	lr
   d5158:	2003e728 	.word	0x2003e728
   d515c:	000d6430 	.word	0x000d6430

000d5160 <_Z17acquireWireBufferv>:
   d5160:	b570      	push	{r4, r5, r6, lr}
   d5162:	4604      	mov	r4, r0
   d5164:	2514      	movs	r5, #20
   d5166:	462a      	mov	r2, r5
   d5168:	4e09      	ldr	r6, [pc, #36]	; (d5190 <_Z17acquireWireBufferv+0x30>)
   d516a:	2100      	movs	r1, #0
   d516c:	f000 ffa5 	bl	d60ba <memset>
   d5170:	8025      	strh	r5, [r4, #0]
   d5172:	2520      	movs	r5, #32
   d5174:	4631      	mov	r1, r6
   d5176:	60a5      	str	r5, [r4, #8]
   d5178:	6125      	str	r5, [r4, #16]
   d517a:	4628      	mov	r0, r5
   d517c:	f000 f840 	bl	d5200 <_ZnajRKSt9nothrow_t>
   d5180:	4631      	mov	r1, r6
   d5182:	6060      	str	r0, [r4, #4]
   d5184:	4628      	mov	r0, r5
   d5186:	f000 f83b 	bl	d5200 <_ZnajRKSt9nothrow_t>
   d518a:	60e0      	str	r0, [r4, #12]
   d518c:	4620      	mov	r0, r4
   d518e:	bd70      	pop	{r4, r5, r6, pc}
   d5190:	000d645c 	.word	0x000d645c

000d5194 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5194:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5196:	4d0e      	ldr	r5, [pc, #56]	; (d51d0 <_Z19__fetch_global_Wirev+0x3c>)
   d5198:	6829      	ldr	r1, [r5, #0]
   d519a:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d519e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d51a0:	d113      	bne.n	d51ca <_Z19__fetch_global_Wirev+0x36>
   d51a2:	4628      	mov	r0, r5
   d51a4:	f7fe ff7d 	bl	d40a2 <__cxa_guard_acquire>
   d51a8:	b178      	cbz	r0, d51ca <_Z19__fetch_global_Wirev+0x36>
   d51aa:	a801      	add	r0, sp, #4
   d51ac:	f7ff ffd8 	bl	d5160 <_Z17acquireWireBufferv>
   d51b0:	aa01      	add	r2, sp, #4
   d51b2:	4621      	mov	r1, r4
   d51b4:	4807      	ldr	r0, [pc, #28]	; (d51d4 <_Z19__fetch_global_Wirev+0x40>)
   d51b6:	f7ff fddd 	bl	d4d74 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d51ba:	4628      	mov	r0, r5
   d51bc:	f7fe ff76 	bl	d40ac <__cxa_guard_release>
   d51c0:	4a05      	ldr	r2, [pc, #20]	; (d51d8 <_Z19__fetch_global_Wirev+0x44>)
   d51c2:	4906      	ldr	r1, [pc, #24]	; (d51dc <_Z19__fetch_global_Wirev+0x48>)
   d51c4:	4803      	ldr	r0, [pc, #12]	; (d51d4 <_Z19__fetch_global_Wirev+0x40>)
   d51c6:	f000 f80b 	bl	d51e0 <__aeabi_atexit>
	return wire;
}
   d51ca:	4802      	ldr	r0, [pc, #8]	; (d51d4 <_Z19__fetch_global_Wirev+0x40>)
   d51cc:	b007      	add	sp, #28
   d51ce:	bd30      	pop	{r4, r5, pc}
   d51d0:	2003e734 	.word	0x2003e734
   d51d4:	2003e738 	.word	0x2003e738
   d51d8:	2003e3b8 	.word	0x2003e3b8
   d51dc:	000d4d1d 	.word	0x000d4d1d

000d51e0 <__aeabi_atexit>:
   d51e0:	460b      	mov	r3, r1
   d51e2:	4601      	mov	r1, r0
   d51e4:	4618      	mov	r0, r3
   d51e6:	f000 bf4f 	b.w	d6088 <__cxa_atexit>
	...

000d51ec <_ZSt15get_new_handlerv>:
   d51ec:	4b02      	ldr	r3, [pc, #8]	; (d51f8 <_ZSt15get_new_handlerv+0xc>)
   d51ee:	6818      	ldr	r0, [r3, #0]
   d51f0:	f3bf 8f5f 	dmb	sy
   d51f4:	4770      	bx	lr
   d51f6:	bf00      	nop
   d51f8:	2003e74c 	.word	0x2003e74c

000d51fc <_ZdlPvj>:
   d51fc:	f7fe bf4d 	b.w	d409a <_ZdlPv>

000d5200 <_ZnajRKSt9nothrow_t>:
   d5200:	f000 b800 	b.w	d5204 <_ZnwjRKSt9nothrow_t>

000d5204 <_ZnwjRKSt9nothrow_t>:
   d5204:	b510      	push	{r4, lr}
   d5206:	2800      	cmp	r0, #0
   d5208:	bf14      	ite	ne
   d520a:	4604      	movne	r4, r0
   d520c:	2401      	moveq	r4, #1
   d520e:	4620      	mov	r0, r4
   d5210:	f7ff fa1e 	bl	d4650 <malloc>
   d5214:	b920      	cbnz	r0, d5220 <_ZnwjRKSt9nothrow_t+0x1c>
   d5216:	f7ff ffe9 	bl	d51ec <_ZSt15get_new_handlerv>
   d521a:	b108      	cbz	r0, d5220 <_ZnwjRKSt9nothrow_t+0x1c>
   d521c:	4780      	blx	r0
   d521e:	e7f6      	b.n	d520e <_ZnwjRKSt9nothrow_t+0xa>
   d5220:	bd10      	pop	{r4, pc}
	...

000d5224 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5224:	4b18      	ldr	r3, [pc, #96]	; (d5288 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5226:	681a      	ldr	r2, [r3, #0]
   d5228:	07d1      	lsls	r1, r2, #31
   d522a:	bf5c      	itt	pl
   d522c:	2201      	movpl	r2, #1
   d522e:	601a      	strpl	r2, [r3, #0]
   d5230:	4b16      	ldr	r3, [pc, #88]	; (d528c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5232:	681a      	ldr	r2, [r3, #0]
   d5234:	07d2      	lsls	r2, r2, #31
   d5236:	bf5c      	itt	pl
   d5238:	2201      	movpl	r2, #1
   d523a:	601a      	strpl	r2, [r3, #0]
   d523c:	4b14      	ldr	r3, [pc, #80]	; (d5290 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d523e:	681a      	ldr	r2, [r3, #0]
   d5240:	07d0      	lsls	r0, r2, #31
   d5242:	bf5c      	itt	pl
   d5244:	2201      	movpl	r2, #1
   d5246:	601a      	strpl	r2, [r3, #0]
   d5248:	4b12      	ldr	r3, [pc, #72]	; (d5294 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d524a:	681a      	ldr	r2, [r3, #0]
   d524c:	07d1      	lsls	r1, r2, #31
   d524e:	bf5c      	itt	pl
   d5250:	2201      	movpl	r2, #1
   d5252:	601a      	strpl	r2, [r3, #0]
   d5254:	4b10      	ldr	r3, [pc, #64]	; (d5298 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5256:	681a      	ldr	r2, [r3, #0]
   d5258:	07d2      	lsls	r2, r2, #31
   d525a:	bf5c      	itt	pl
   d525c:	2201      	movpl	r2, #1
   d525e:	601a      	strpl	r2, [r3, #0]
   d5260:	4b0e      	ldr	r3, [pc, #56]	; (d529c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5262:	681a      	ldr	r2, [r3, #0]
   d5264:	07d0      	lsls	r0, r2, #31
   d5266:	bf5c      	itt	pl
   d5268:	2201      	movpl	r2, #1
   d526a:	601a      	strpl	r2, [r3, #0]
   d526c:	4b0c      	ldr	r3, [pc, #48]	; (d52a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d526e:	681a      	ldr	r2, [r3, #0]
   d5270:	07d1      	lsls	r1, r2, #31
   d5272:	bf5c      	itt	pl
   d5274:	2201      	movpl	r2, #1
   d5276:	601a      	strpl	r2, [r3, #0]
   d5278:	4b0a      	ldr	r3, [pc, #40]	; (d52a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d527a:	681a      	ldr	r2, [r3, #0]
   d527c:	07d2      	lsls	r2, r2, #31
   d527e:	bf5c      	itt	pl
   d5280:	2201      	movpl	r2, #1
   d5282:	601a      	strpl	r2, [r3, #0]
   d5284:	4770      	bx	lr
   d5286:	bf00      	nop
   d5288:	2003e76c 	.word	0x2003e76c
   d528c:	2003e768 	.word	0x2003e768
   d5290:	2003e764 	.word	0x2003e764
   d5294:	2003e760 	.word	0x2003e760
   d5298:	2003e75c 	.word	0x2003e75c
   d529c:	2003e758 	.word	0x2003e758
   d52a0:	2003e754 	.word	0x2003e754
   d52a4:	2003e750 	.word	0x2003e750

000d52a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d52a8:	4b24      	ldr	r3, [pc, #144]	; (d533c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d52aa:	681a      	ldr	r2, [r3, #0]
   d52ac:	07d0      	lsls	r0, r2, #31
   d52ae:	bf5c      	itt	pl
   d52b0:	2201      	movpl	r2, #1
   d52b2:	601a      	strpl	r2, [r3, #0]
   d52b4:	4b22      	ldr	r3, [pc, #136]	; (d5340 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d52b6:	681a      	ldr	r2, [r3, #0]
   d52b8:	07d1      	lsls	r1, r2, #31
   d52ba:	bf5c      	itt	pl
   d52bc:	2201      	movpl	r2, #1
   d52be:	601a      	strpl	r2, [r3, #0]
   d52c0:	4b20      	ldr	r3, [pc, #128]	; (d5344 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d52c2:	681a      	ldr	r2, [r3, #0]
   d52c4:	07d2      	lsls	r2, r2, #31
   d52c6:	bf5c      	itt	pl
   d52c8:	2201      	movpl	r2, #1
   d52ca:	601a      	strpl	r2, [r3, #0]
   d52cc:	4b1e      	ldr	r3, [pc, #120]	; (d5348 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d52ce:	681a      	ldr	r2, [r3, #0]
   d52d0:	07d0      	lsls	r0, r2, #31
   d52d2:	bf5c      	itt	pl
   d52d4:	2201      	movpl	r2, #1
   d52d6:	601a      	strpl	r2, [r3, #0]
   d52d8:	4b1c      	ldr	r3, [pc, #112]	; (d534c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d52da:	681a      	ldr	r2, [r3, #0]
   d52dc:	07d1      	lsls	r1, r2, #31
   d52de:	bf5c      	itt	pl
   d52e0:	2201      	movpl	r2, #1
   d52e2:	601a      	strpl	r2, [r3, #0]
   d52e4:	4b1a      	ldr	r3, [pc, #104]	; (d5350 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d52e6:	681a      	ldr	r2, [r3, #0]
   d52e8:	07d2      	lsls	r2, r2, #31
   d52ea:	bf5c      	itt	pl
   d52ec:	2201      	movpl	r2, #1
   d52ee:	601a      	strpl	r2, [r3, #0]
   d52f0:	4b18      	ldr	r3, [pc, #96]	; (d5354 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d52f2:	681a      	ldr	r2, [r3, #0]
   d52f4:	07d0      	lsls	r0, r2, #31
   d52f6:	bf5c      	itt	pl
   d52f8:	2201      	movpl	r2, #1
   d52fa:	601a      	strpl	r2, [r3, #0]
   d52fc:	4b16      	ldr	r3, [pc, #88]	; (d5358 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d52fe:	681a      	ldr	r2, [r3, #0]
   d5300:	07d1      	lsls	r1, r2, #31
   d5302:	bf5c      	itt	pl
   d5304:	2201      	movpl	r2, #1
   d5306:	601a      	strpl	r2, [r3, #0]
   d5308:	4b14      	ldr	r3, [pc, #80]	; (d535c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d530a:	681a      	ldr	r2, [r3, #0]
   d530c:	07d2      	lsls	r2, r2, #31
   d530e:	bf5c      	itt	pl
   d5310:	2201      	movpl	r2, #1
   d5312:	601a      	strpl	r2, [r3, #0]
   d5314:	4b12      	ldr	r3, [pc, #72]	; (d5360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5316:	681a      	ldr	r2, [r3, #0]
   d5318:	07d0      	lsls	r0, r2, #31
   d531a:	bf5c      	itt	pl
   d531c:	2201      	movpl	r2, #1
   d531e:	601a      	strpl	r2, [r3, #0]
   d5320:	4b10      	ldr	r3, [pc, #64]	; (d5364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5322:	681a      	ldr	r2, [r3, #0]
   d5324:	07d1      	lsls	r1, r2, #31
   d5326:	bf5c      	itt	pl
   d5328:	2201      	movpl	r2, #1
   d532a:	601a      	strpl	r2, [r3, #0]
   d532c:	4b0e      	ldr	r3, [pc, #56]	; (d5368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d532e:	681a      	ldr	r2, [r3, #0]
   d5330:	07d2      	lsls	r2, r2, #31
   d5332:	bf5c      	itt	pl
   d5334:	2201      	movpl	r2, #1
   d5336:	601a      	strpl	r2, [r3, #0]
   d5338:	4770      	bx	lr
   d533a:	bf00      	nop
   d533c:	2003e79c 	.word	0x2003e79c
   d5340:	2003e798 	.word	0x2003e798
   d5344:	2003e794 	.word	0x2003e794
   d5348:	2003e790 	.word	0x2003e790
   d534c:	2003e78c 	.word	0x2003e78c
   d5350:	2003e788 	.word	0x2003e788
   d5354:	2003e784 	.word	0x2003e784
   d5358:	2003e780 	.word	0x2003e780
   d535c:	2003e77c 	.word	0x2003e77c
   d5360:	2003e778 	.word	0x2003e778
   d5364:	2003e774 	.word	0x2003e774
   d5368:	2003e770 	.word	0x2003e770

000d536c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d536c:	4b24      	ldr	r3, [pc, #144]	; (d5400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d536e:	681a      	ldr	r2, [r3, #0]
   d5370:	07d0      	lsls	r0, r2, #31
   d5372:	bf5c      	itt	pl
   d5374:	2201      	movpl	r2, #1
   d5376:	601a      	strpl	r2, [r3, #0]
   d5378:	4b22      	ldr	r3, [pc, #136]	; (d5404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d537a:	681a      	ldr	r2, [r3, #0]
   d537c:	07d1      	lsls	r1, r2, #31
   d537e:	bf5c      	itt	pl
   d5380:	2201      	movpl	r2, #1
   d5382:	601a      	strpl	r2, [r3, #0]
   d5384:	4b20      	ldr	r3, [pc, #128]	; (d5408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5386:	681a      	ldr	r2, [r3, #0]
   d5388:	07d2      	lsls	r2, r2, #31
   d538a:	bf5c      	itt	pl
   d538c:	2201      	movpl	r2, #1
   d538e:	601a      	strpl	r2, [r3, #0]
   d5390:	4b1e      	ldr	r3, [pc, #120]	; (d540c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5392:	681a      	ldr	r2, [r3, #0]
   d5394:	07d0      	lsls	r0, r2, #31
   d5396:	bf5c      	itt	pl
   d5398:	2201      	movpl	r2, #1
   d539a:	601a      	strpl	r2, [r3, #0]
   d539c:	4b1c      	ldr	r3, [pc, #112]	; (d5410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d539e:	681a      	ldr	r2, [r3, #0]
   d53a0:	07d1      	lsls	r1, r2, #31
   d53a2:	bf5c      	itt	pl
   d53a4:	2201      	movpl	r2, #1
   d53a6:	601a      	strpl	r2, [r3, #0]
   d53a8:	4b1a      	ldr	r3, [pc, #104]	; (d5414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d53aa:	681a      	ldr	r2, [r3, #0]
   d53ac:	07d2      	lsls	r2, r2, #31
   d53ae:	bf5c      	itt	pl
   d53b0:	2201      	movpl	r2, #1
   d53b2:	601a      	strpl	r2, [r3, #0]
   d53b4:	4b18      	ldr	r3, [pc, #96]	; (d5418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d53b6:	681a      	ldr	r2, [r3, #0]
   d53b8:	07d0      	lsls	r0, r2, #31
   d53ba:	bf5c      	itt	pl
   d53bc:	2201      	movpl	r2, #1
   d53be:	601a      	strpl	r2, [r3, #0]
   d53c0:	4b16      	ldr	r3, [pc, #88]	; (d541c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d53c2:	681a      	ldr	r2, [r3, #0]
   d53c4:	07d1      	lsls	r1, r2, #31
   d53c6:	bf5c      	itt	pl
   d53c8:	2201      	movpl	r2, #1
   d53ca:	601a      	strpl	r2, [r3, #0]
   d53cc:	4b14      	ldr	r3, [pc, #80]	; (d5420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d53ce:	681a      	ldr	r2, [r3, #0]
   d53d0:	07d2      	lsls	r2, r2, #31
   d53d2:	bf5c      	itt	pl
   d53d4:	2201      	movpl	r2, #1
   d53d6:	601a      	strpl	r2, [r3, #0]
   d53d8:	4b12      	ldr	r3, [pc, #72]	; (d5424 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d53da:	681a      	ldr	r2, [r3, #0]
   d53dc:	07d0      	lsls	r0, r2, #31
   d53de:	bf5c      	itt	pl
   d53e0:	2201      	movpl	r2, #1
   d53e2:	601a      	strpl	r2, [r3, #0]
   d53e4:	4b10      	ldr	r3, [pc, #64]	; (d5428 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d53e6:	681a      	ldr	r2, [r3, #0]
   d53e8:	07d1      	lsls	r1, r2, #31
   d53ea:	bf5c      	itt	pl
   d53ec:	2201      	movpl	r2, #1
   d53ee:	601a      	strpl	r2, [r3, #0]
   d53f0:	4b0e      	ldr	r3, [pc, #56]	; (d542c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d53f2:	681a      	ldr	r2, [r3, #0]
   d53f4:	07d2      	lsls	r2, r2, #31
   d53f6:	bf5c      	itt	pl
   d53f8:	2201      	movpl	r2, #1
   d53fa:	601a      	strpl	r2, [r3, #0]
   d53fc:	4770      	bx	lr
   d53fe:	bf00      	nop
   d5400:	2003e7cc 	.word	0x2003e7cc
   d5404:	2003e7c8 	.word	0x2003e7c8
   d5408:	2003e7c4 	.word	0x2003e7c4
   d540c:	2003e7c0 	.word	0x2003e7c0
   d5410:	2003e7bc 	.word	0x2003e7bc
   d5414:	2003e7b8 	.word	0x2003e7b8
   d5418:	2003e7b4 	.word	0x2003e7b4
   d541c:	2003e7b0 	.word	0x2003e7b0
   d5420:	2003e7ac 	.word	0x2003e7ac
   d5424:	2003e7a8 	.word	0x2003e7a8
   d5428:	2003e7a4 	.word	0x2003e7a4
   d542c:	2003e7a0 	.word	0x2003e7a0

000d5430 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5430:	4b18      	ldr	r3, [pc, #96]	; (d5494 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5432:	681a      	ldr	r2, [r3, #0]
   d5434:	07d1      	lsls	r1, r2, #31
   d5436:	bf5c      	itt	pl
   d5438:	2201      	movpl	r2, #1
   d543a:	601a      	strpl	r2, [r3, #0]
   d543c:	4b16      	ldr	r3, [pc, #88]	; (d5498 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d543e:	681a      	ldr	r2, [r3, #0]
   d5440:	07d2      	lsls	r2, r2, #31
   d5442:	bf5c      	itt	pl
   d5444:	2201      	movpl	r2, #1
   d5446:	601a      	strpl	r2, [r3, #0]
   d5448:	4b14      	ldr	r3, [pc, #80]	; (d549c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d544a:	681a      	ldr	r2, [r3, #0]
   d544c:	07d0      	lsls	r0, r2, #31
   d544e:	bf5c      	itt	pl
   d5450:	2201      	movpl	r2, #1
   d5452:	601a      	strpl	r2, [r3, #0]
   d5454:	4b12      	ldr	r3, [pc, #72]	; (d54a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5456:	681a      	ldr	r2, [r3, #0]
   d5458:	07d1      	lsls	r1, r2, #31
   d545a:	bf5c      	itt	pl
   d545c:	2201      	movpl	r2, #1
   d545e:	601a      	strpl	r2, [r3, #0]
   d5460:	4b10      	ldr	r3, [pc, #64]	; (d54a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5462:	681a      	ldr	r2, [r3, #0]
   d5464:	07d2      	lsls	r2, r2, #31
   d5466:	bf5c      	itt	pl
   d5468:	2201      	movpl	r2, #1
   d546a:	601a      	strpl	r2, [r3, #0]
   d546c:	4b0e      	ldr	r3, [pc, #56]	; (d54a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d546e:	681a      	ldr	r2, [r3, #0]
   d5470:	07d0      	lsls	r0, r2, #31
   d5472:	bf5c      	itt	pl
   d5474:	2201      	movpl	r2, #1
   d5476:	601a      	strpl	r2, [r3, #0]
   d5478:	4b0c      	ldr	r3, [pc, #48]	; (d54ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d547a:	681a      	ldr	r2, [r3, #0]
   d547c:	07d1      	lsls	r1, r2, #31
   d547e:	bf5c      	itt	pl
   d5480:	2201      	movpl	r2, #1
   d5482:	601a      	strpl	r2, [r3, #0]
   d5484:	4b0a      	ldr	r3, [pc, #40]	; (d54b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5486:	681a      	ldr	r2, [r3, #0]
   d5488:	07d2      	lsls	r2, r2, #31
   d548a:	bf5c      	itt	pl
   d548c:	2201      	movpl	r2, #1
   d548e:	601a      	strpl	r2, [r3, #0]
   d5490:	4770      	bx	lr
   d5492:	bf00      	nop
   d5494:	2003e7ec 	.word	0x2003e7ec
   d5498:	2003e7e8 	.word	0x2003e7e8
   d549c:	2003e7e4 	.word	0x2003e7e4
   d54a0:	2003e7e0 	.word	0x2003e7e0
   d54a4:	2003e7dc 	.word	0x2003e7dc
   d54a8:	2003e7d8 	.word	0x2003e7d8
   d54ac:	2003e7d4 	.word	0x2003e7d4
   d54b0:	2003e7d0 	.word	0x2003e7d0

000d54b4 <sqrt>:
   d54b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d54b8:	ed2d 8b02 	vpush	{d8}
   d54bc:	b08b      	sub	sp, #44	; 0x2c
   d54be:	ec55 4b10 	vmov	r4, r5, d0
   d54c2:	f000 f857 	bl	d5574 <__ieee754_sqrt>
   d54c6:	4b29      	ldr	r3, [pc, #164]	; (d556c <sqrt+0xb8>)
   d54c8:	eeb0 8a40 	vmov.f32	s16, s0
   d54cc:	eef0 8a60 	vmov.f32	s17, s1
   d54d0:	f993 6000 	ldrsb.w	r6, [r3]
   d54d4:	1c73      	adds	r3, r6, #1
   d54d6:	d012      	beq.n	d54fe <sqrt+0x4a>
   d54d8:	4622      	mov	r2, r4
   d54da:	462b      	mov	r3, r5
   d54dc:	4620      	mov	r0, r4
   d54de:	4629      	mov	r1, r5
   d54e0:	f000 fd6c 	bl	d5fbc <__aeabi_dcmpun>
   d54e4:	4607      	mov	r7, r0
   d54e6:	b950      	cbnz	r0, d54fe <sqrt+0x4a>
   d54e8:	f04f 0800 	mov.w	r8, #0
   d54ec:	f04f 0900 	mov.w	r9, #0
   d54f0:	4620      	mov	r0, r4
   d54f2:	4629      	mov	r1, r5
   d54f4:	4642      	mov	r2, r8
   d54f6:	464b      	mov	r3, r9
   d54f8:	f000 fd38 	bl	d5f6c <__aeabi_dcmplt>
   d54fc:	b940      	cbnz	r0, d5510 <sqrt+0x5c>
   d54fe:	eeb0 0a48 	vmov.f32	s0, s16
   d5502:	eef0 0a68 	vmov.f32	s1, s17
   d5506:	b00b      	add	sp, #44	; 0x2c
   d5508:	ecbd 8b02 	vpop	{d8}
   d550c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5510:	4b17      	ldr	r3, [pc, #92]	; (d5570 <sqrt+0xbc>)
   d5512:	9708      	str	r7, [sp, #32]
   d5514:	2201      	movs	r2, #1
   d5516:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d551a:	e9cd 4502 	strd	r4, r5, [sp, #8]
   d551e:	e88d 000c 	stmia.w	sp, {r2, r3}
   d5522:	b1b6      	cbz	r6, d5552 <sqrt+0x9e>
   d5524:	4642      	mov	r2, r8
   d5526:	464b      	mov	r3, r9
   d5528:	4640      	mov	r0, r8
   d552a:	4649      	mov	r1, r9
   d552c:	f000 fbd6 	bl	d5cdc <__aeabi_ddiv>
   d5530:	2e02      	cmp	r6, #2
   d5532:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d5536:	d10e      	bne.n	d5556 <sqrt+0xa2>
   d5538:	f7ff f8a2 	bl	d4680 <__errno>
   d553c:	2321      	movs	r3, #33	; 0x21
   d553e:	6003      	str	r3, [r0, #0]
   d5540:	9b08      	ldr	r3, [sp, #32]
   d5542:	b973      	cbnz	r3, d5562 <sqrt+0xae>
   d5544:	ed9d 0b06 	vldr	d0, [sp, #24]
   d5548:	b00b      	add	sp, #44	; 0x2c
   d554a:	ecbd 8b02 	vpop	{d8}
   d554e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5552:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d5556:	4668      	mov	r0, sp
   d5558:	f000 f8dc 	bl	d5714 <matherr>
   d555c:	2800      	cmp	r0, #0
   d555e:	d1ef      	bne.n	d5540 <sqrt+0x8c>
   d5560:	e7ea      	b.n	d5538 <sqrt+0x84>
   d5562:	f7ff f88d 	bl	d4680 <__errno>
   d5566:	9b08      	ldr	r3, [sp, #32]
   d5568:	6003      	str	r3, [r0, #0]
   d556a:	e7eb      	b.n	d5544 <sqrt+0x90>
   d556c:	2003e350 	.word	0x2003e350
   d5570:	000d6460 	.word	0x000d6460

000d5574 <__ieee754_sqrt>:
   d5574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5578:	4965      	ldr	r1, [pc, #404]	; (d5710 <__ieee754_sqrt+0x19c>)
   d557a:	ec55 4b10 	vmov	r4, r5, d0
   d557e:	460e      	mov	r6, r1
   d5580:	4029      	ands	r1, r5
   d5582:	42b1      	cmp	r1, r6
   d5584:	f000 8097 	beq.w	d56b6 <__ieee754_sqrt+0x142>
   d5588:	2d00      	cmp	r5, #0
   d558a:	462b      	mov	r3, r5
   d558c:	ee10 2a10 	vmov	r2, s0
   d5590:	dd74      	ble.n	d567c <__ieee754_sqrt+0x108>
   d5592:	152f      	asrs	r7, r5, #20
   d5594:	d07f      	beq.n	d5696 <__ieee754_sqrt+0x122>
   d5596:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d559a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d559e:	07f9      	lsls	r1, r7, #31
   d55a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d55a4:	d465      	bmi.n	d5672 <__ieee754_sqrt+0xfe>
   d55a6:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d55aa:	2600      	movs	r6, #0
   d55ac:	440b      	add	r3, r1
   d55ae:	107f      	asrs	r7, r7, #1
   d55b0:	0052      	lsls	r2, r2, #1
   d55b2:	46b6      	mov	lr, r6
   d55b4:	2016      	movs	r0, #22
   d55b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d55ba:	eb0e 0401 	add.w	r4, lr, r1
   d55be:	429c      	cmp	r4, r3
   d55c0:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d55c4:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d55c8:	dc03      	bgt.n	d55d2 <__ieee754_sqrt+0x5e>
   d55ca:	1b1b      	subs	r3, r3, r4
   d55cc:	eb04 0e01 	add.w	lr, r4, r1
   d55d0:	440e      	add	r6, r1
   d55d2:	3801      	subs	r0, #1
   d55d4:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d55d8:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d55dc:	d1ed      	bne.n	d55ba <__ieee754_sqrt+0x46>
   d55de:	4684      	mov	ip, r0
   d55e0:	2420      	movs	r4, #32
   d55e2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d55e6:	e009      	b.n	d55fc <__ieee754_sqrt+0x88>
   d55e8:	d020      	beq.n	d562c <__ieee754_sqrt+0xb8>
   d55ea:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d55ee:	3c01      	subs	r4, #1
   d55f0:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d55f4:	442b      	add	r3, r5
   d55f6:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d55fa:	d020      	beq.n	d563e <__ieee754_sqrt+0xca>
   d55fc:	459e      	cmp	lr, r3
   d55fe:	eb01 050c 	add.w	r5, r1, ip
   d5602:	daf1      	bge.n	d55e8 <__ieee754_sqrt+0x74>
   d5604:	2d00      	cmp	r5, #0
   d5606:	eb05 0c01 	add.w	ip, r5, r1
   d560a:	db09      	blt.n	d5620 <__ieee754_sqrt+0xac>
   d560c:	46f0      	mov	r8, lr
   d560e:	4295      	cmp	r5, r2
   d5610:	ebce 0303 	rsb	r3, lr, r3
   d5614:	d900      	bls.n	d5618 <__ieee754_sqrt+0xa4>
   d5616:	3b01      	subs	r3, #1
   d5618:	1b52      	subs	r2, r2, r5
   d561a:	4408      	add	r0, r1
   d561c:	46c6      	mov	lr, r8
   d561e:	e7e4      	b.n	d55ea <__ieee754_sqrt+0x76>
   d5620:	f1bc 0f00 	cmp.w	ip, #0
   d5624:	dbf2      	blt.n	d560c <__ieee754_sqrt+0x98>
   d5626:	f10e 0801 	add.w	r8, lr, #1
   d562a:	e7f0      	b.n	d560e <__ieee754_sqrt+0x9a>
   d562c:	4295      	cmp	r5, r2
   d562e:	d81e      	bhi.n	d566e <__ieee754_sqrt+0xfa>
   d5630:	2d00      	cmp	r5, #0
   d5632:	eb05 0c01 	add.w	ip, r5, r1
   d5636:	db50      	blt.n	d56da <__ieee754_sqrt+0x166>
   d5638:	4698      	mov	r8, r3
   d563a:	2300      	movs	r3, #0
   d563c:	e7ec      	b.n	d5618 <__ieee754_sqrt+0xa4>
   d563e:	4313      	orrs	r3, r2
   d5640:	d004      	beq.n	d564c <__ieee754_sqrt+0xd8>
   d5642:	1c42      	adds	r2, r0, #1
   d5644:	d04d      	beq.n	d56e2 <__ieee754_sqrt+0x16e>
   d5646:	f000 0301 	and.w	r3, r0, #1
   d564a:	4418      	add	r0, r3
   d564c:	0840      	lsrs	r0, r0, #1
   d564e:	1071      	asrs	r1, r6, #1
   d5650:	07f3      	lsls	r3, r6, #31
   d5652:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d5656:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d565a:	bf48      	it	mi
   d565c:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d5660:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d5664:	4602      	mov	r2, r0
   d5666:	ec43 2b10 	vmov	d0, r2, r3
   d566a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d566e:	4673      	mov	r3, lr
   d5670:	e7bb      	b.n	d55ea <__ieee754_sqrt+0x76>
   d5672:	005b      	lsls	r3, r3, #1
   d5674:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d5678:	0052      	lsls	r2, r2, #1
   d567a:	e794      	b.n	d55a6 <__ieee754_sqrt+0x32>
   d567c:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d5680:	4321      	orrs	r1, r4
   d5682:	d028      	beq.n	d56d6 <__ieee754_sqrt+0x162>
   d5684:	bbad      	cbnz	r5, d56f2 <__ieee754_sqrt+0x17e>
   d5686:	462f      	mov	r7, r5
   d5688:	0ad3      	lsrs	r3, r2, #11
   d568a:	3f15      	subs	r7, #21
   d568c:	0552      	lsls	r2, r2, #21
   d568e:	2b00      	cmp	r3, #0
   d5690:	d0fa      	beq.n	d5688 <__ieee754_sqrt+0x114>
   d5692:	02dd      	lsls	r5, r3, #11
   d5694:	d428      	bmi.n	d56e8 <__ieee754_sqrt+0x174>
   d5696:	2100      	movs	r1, #0
   d5698:	e000      	b.n	d569c <__ieee754_sqrt+0x128>
   d569a:	4601      	mov	r1, r0
   d569c:	005b      	lsls	r3, r3, #1
   d569e:	02dc      	lsls	r4, r3, #11
   d56a0:	f101 0001 	add.w	r0, r1, #1
   d56a4:	d5f9      	bpl.n	d569a <__ieee754_sqrt+0x126>
   d56a6:	f1c0 0420 	rsb	r4, r0, #32
   d56aa:	fa22 f404 	lsr.w	r4, r2, r4
   d56ae:	4323      	orrs	r3, r4
   d56b0:	1a7f      	subs	r7, r7, r1
   d56b2:	4082      	lsls	r2, r0
   d56b4:	e76f      	b.n	d5596 <__ieee754_sqrt+0x22>
   d56b6:	ee10 2a10 	vmov	r2, s0
   d56ba:	462b      	mov	r3, r5
   d56bc:	ee10 0a10 	vmov	r0, s0
   d56c0:	4629      	mov	r1, r5
   d56c2:	f000 f9e1 	bl	d5a88 <__aeabi_dmul>
   d56c6:	4622      	mov	r2, r4
   d56c8:	462b      	mov	r3, r5
   d56ca:	f000 f82b 	bl	d5724 <__adddf3>
   d56ce:	ec41 0b10 	vmov	d0, r0, r1
   d56d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d56d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d56da:	f1bc 0f00 	cmp.w	ip, #0
   d56de:	daa2      	bge.n	d5626 <__ieee754_sqrt+0xb2>
   d56e0:	e7aa      	b.n	d5638 <__ieee754_sqrt+0xc4>
   d56e2:	3601      	adds	r6, #1
   d56e4:	4620      	mov	r0, r4
   d56e6:	e7b2      	b.n	d564e <__ieee754_sqrt+0xda>
   d56e8:	2420      	movs	r4, #32
   d56ea:	f04f 31ff 	mov.w	r1, #4294967295
   d56ee:	2000      	movs	r0, #0
   d56f0:	e7db      	b.n	d56aa <__ieee754_sqrt+0x136>
   d56f2:	ee10 2a10 	vmov	r2, s0
   d56f6:	462b      	mov	r3, r5
   d56f8:	4620      	mov	r0, r4
   d56fa:	4629      	mov	r1, r5
   d56fc:	f000 f810 	bl	d5720 <__aeabi_dsub>
   d5700:	4602      	mov	r2, r0
   d5702:	460b      	mov	r3, r1
   d5704:	f000 faea 	bl	d5cdc <__aeabi_ddiv>
   d5708:	ec41 0b10 	vmov	d0, r0, r1
   d570c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5710:	7ff00000 	.word	0x7ff00000

000d5714 <matherr>:
   d5714:	2000      	movs	r0, #0
   d5716:	4770      	bx	lr

000d5718 <__aeabi_drsub>:
   d5718:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d571c:	e002      	b.n	d5724 <__adddf3>
   d571e:	bf00      	nop

000d5720 <__aeabi_dsub>:
   d5720:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5724 <__adddf3>:
   d5724:	b530      	push	{r4, r5, lr}
   d5726:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d572a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d572e:	ea94 0f05 	teq	r4, r5
   d5732:	bf08      	it	eq
   d5734:	ea90 0f02 	teqeq	r0, r2
   d5738:	bf1f      	itttt	ne
   d573a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d573e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5742:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5746:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d574a:	f000 80e2 	beq.w	d5912 <__adddf3+0x1ee>
   d574e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5752:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5756:	bfb8      	it	lt
   d5758:	426d      	neglt	r5, r5
   d575a:	dd0c      	ble.n	d5776 <__adddf3+0x52>
   d575c:	442c      	add	r4, r5
   d575e:	ea80 0202 	eor.w	r2, r0, r2
   d5762:	ea81 0303 	eor.w	r3, r1, r3
   d5766:	ea82 0000 	eor.w	r0, r2, r0
   d576a:	ea83 0101 	eor.w	r1, r3, r1
   d576e:	ea80 0202 	eor.w	r2, r0, r2
   d5772:	ea81 0303 	eor.w	r3, r1, r3
   d5776:	2d36      	cmp	r5, #54	; 0x36
   d5778:	bf88      	it	hi
   d577a:	bd30      	pophi	{r4, r5, pc}
   d577c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5780:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5784:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5788:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d578c:	d002      	beq.n	d5794 <__adddf3+0x70>
   d578e:	4240      	negs	r0, r0
   d5790:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5794:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5798:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d579c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d57a0:	d002      	beq.n	d57a8 <__adddf3+0x84>
   d57a2:	4252      	negs	r2, r2
   d57a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d57a8:	ea94 0f05 	teq	r4, r5
   d57ac:	f000 80a7 	beq.w	d58fe <__adddf3+0x1da>
   d57b0:	f1a4 0401 	sub.w	r4, r4, #1
   d57b4:	f1d5 0e20 	rsbs	lr, r5, #32
   d57b8:	db0d      	blt.n	d57d6 <__adddf3+0xb2>
   d57ba:	fa02 fc0e 	lsl.w	ip, r2, lr
   d57be:	fa22 f205 	lsr.w	r2, r2, r5
   d57c2:	1880      	adds	r0, r0, r2
   d57c4:	f141 0100 	adc.w	r1, r1, #0
   d57c8:	fa03 f20e 	lsl.w	r2, r3, lr
   d57cc:	1880      	adds	r0, r0, r2
   d57ce:	fa43 f305 	asr.w	r3, r3, r5
   d57d2:	4159      	adcs	r1, r3
   d57d4:	e00e      	b.n	d57f4 <__adddf3+0xd0>
   d57d6:	f1a5 0520 	sub.w	r5, r5, #32
   d57da:	f10e 0e20 	add.w	lr, lr, #32
   d57de:	2a01      	cmp	r2, #1
   d57e0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d57e4:	bf28      	it	cs
   d57e6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d57ea:	fa43 f305 	asr.w	r3, r3, r5
   d57ee:	18c0      	adds	r0, r0, r3
   d57f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d57f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d57f8:	d507      	bpl.n	d580a <__adddf3+0xe6>
   d57fa:	f04f 0e00 	mov.w	lr, #0
   d57fe:	f1dc 0c00 	rsbs	ip, ip, #0
   d5802:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5806:	eb6e 0101 	sbc.w	r1, lr, r1
   d580a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d580e:	d31b      	bcc.n	d5848 <__adddf3+0x124>
   d5810:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5814:	d30c      	bcc.n	d5830 <__adddf3+0x10c>
   d5816:	0849      	lsrs	r1, r1, #1
   d5818:	ea5f 0030 	movs.w	r0, r0, rrx
   d581c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5820:	f104 0401 	add.w	r4, r4, #1
   d5824:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5828:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d582c:	f080 809a 	bcs.w	d5964 <__adddf3+0x240>
   d5830:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5834:	bf08      	it	eq
   d5836:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d583a:	f150 0000 	adcs.w	r0, r0, #0
   d583e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5842:	ea41 0105 	orr.w	r1, r1, r5
   d5846:	bd30      	pop	{r4, r5, pc}
   d5848:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d584c:	4140      	adcs	r0, r0
   d584e:	eb41 0101 	adc.w	r1, r1, r1
   d5852:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5856:	f1a4 0401 	sub.w	r4, r4, #1
   d585a:	d1e9      	bne.n	d5830 <__adddf3+0x10c>
   d585c:	f091 0f00 	teq	r1, #0
   d5860:	bf04      	itt	eq
   d5862:	4601      	moveq	r1, r0
   d5864:	2000      	moveq	r0, #0
   d5866:	fab1 f381 	clz	r3, r1
   d586a:	bf08      	it	eq
   d586c:	3320      	addeq	r3, #32
   d586e:	f1a3 030b 	sub.w	r3, r3, #11
   d5872:	f1b3 0220 	subs.w	r2, r3, #32
   d5876:	da0c      	bge.n	d5892 <__adddf3+0x16e>
   d5878:	320c      	adds	r2, #12
   d587a:	dd08      	ble.n	d588e <__adddf3+0x16a>
   d587c:	f102 0c14 	add.w	ip, r2, #20
   d5880:	f1c2 020c 	rsb	r2, r2, #12
   d5884:	fa01 f00c 	lsl.w	r0, r1, ip
   d5888:	fa21 f102 	lsr.w	r1, r1, r2
   d588c:	e00c      	b.n	d58a8 <__adddf3+0x184>
   d588e:	f102 0214 	add.w	r2, r2, #20
   d5892:	bfd8      	it	le
   d5894:	f1c2 0c20 	rsble	ip, r2, #32
   d5898:	fa01 f102 	lsl.w	r1, r1, r2
   d589c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d58a0:	bfdc      	itt	le
   d58a2:	ea41 010c 	orrle.w	r1, r1, ip
   d58a6:	4090      	lslle	r0, r2
   d58a8:	1ae4      	subs	r4, r4, r3
   d58aa:	bfa2      	ittt	ge
   d58ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d58b0:	4329      	orrge	r1, r5
   d58b2:	bd30      	popge	{r4, r5, pc}
   d58b4:	ea6f 0404 	mvn.w	r4, r4
   d58b8:	3c1f      	subs	r4, #31
   d58ba:	da1c      	bge.n	d58f6 <__adddf3+0x1d2>
   d58bc:	340c      	adds	r4, #12
   d58be:	dc0e      	bgt.n	d58de <__adddf3+0x1ba>
   d58c0:	f104 0414 	add.w	r4, r4, #20
   d58c4:	f1c4 0220 	rsb	r2, r4, #32
   d58c8:	fa20 f004 	lsr.w	r0, r0, r4
   d58cc:	fa01 f302 	lsl.w	r3, r1, r2
   d58d0:	ea40 0003 	orr.w	r0, r0, r3
   d58d4:	fa21 f304 	lsr.w	r3, r1, r4
   d58d8:	ea45 0103 	orr.w	r1, r5, r3
   d58dc:	bd30      	pop	{r4, r5, pc}
   d58de:	f1c4 040c 	rsb	r4, r4, #12
   d58e2:	f1c4 0220 	rsb	r2, r4, #32
   d58e6:	fa20 f002 	lsr.w	r0, r0, r2
   d58ea:	fa01 f304 	lsl.w	r3, r1, r4
   d58ee:	ea40 0003 	orr.w	r0, r0, r3
   d58f2:	4629      	mov	r1, r5
   d58f4:	bd30      	pop	{r4, r5, pc}
   d58f6:	fa21 f004 	lsr.w	r0, r1, r4
   d58fa:	4629      	mov	r1, r5
   d58fc:	bd30      	pop	{r4, r5, pc}
   d58fe:	f094 0f00 	teq	r4, #0
   d5902:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5906:	bf06      	itte	eq
   d5908:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d590c:	3401      	addeq	r4, #1
   d590e:	3d01      	subne	r5, #1
   d5910:	e74e      	b.n	d57b0 <__adddf3+0x8c>
   d5912:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5916:	bf18      	it	ne
   d5918:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d591c:	d029      	beq.n	d5972 <__adddf3+0x24e>
   d591e:	ea94 0f05 	teq	r4, r5
   d5922:	bf08      	it	eq
   d5924:	ea90 0f02 	teqeq	r0, r2
   d5928:	d005      	beq.n	d5936 <__adddf3+0x212>
   d592a:	ea54 0c00 	orrs.w	ip, r4, r0
   d592e:	bf04      	itt	eq
   d5930:	4619      	moveq	r1, r3
   d5932:	4610      	moveq	r0, r2
   d5934:	bd30      	pop	{r4, r5, pc}
   d5936:	ea91 0f03 	teq	r1, r3
   d593a:	bf1e      	ittt	ne
   d593c:	2100      	movne	r1, #0
   d593e:	2000      	movne	r0, #0
   d5940:	bd30      	popne	{r4, r5, pc}
   d5942:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5946:	d105      	bne.n	d5954 <__adddf3+0x230>
   d5948:	0040      	lsls	r0, r0, #1
   d594a:	4149      	adcs	r1, r1
   d594c:	bf28      	it	cs
   d594e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5952:	bd30      	pop	{r4, r5, pc}
   d5954:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5958:	bf3c      	itt	cc
   d595a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d595e:	bd30      	popcc	{r4, r5, pc}
   d5960:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5964:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5968:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d596c:	f04f 0000 	mov.w	r0, #0
   d5970:	bd30      	pop	{r4, r5, pc}
   d5972:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5976:	bf1a      	itte	ne
   d5978:	4619      	movne	r1, r3
   d597a:	4610      	movne	r0, r2
   d597c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5980:	bf1c      	itt	ne
   d5982:	460b      	movne	r3, r1
   d5984:	4602      	movne	r2, r0
   d5986:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d598a:	bf06      	itte	eq
   d598c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5990:	ea91 0f03 	teqeq	r1, r3
   d5994:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5998:	bd30      	pop	{r4, r5, pc}
   d599a:	bf00      	nop

000d599c <__aeabi_ui2d>:
   d599c:	f090 0f00 	teq	r0, #0
   d59a0:	bf04      	itt	eq
   d59a2:	2100      	moveq	r1, #0
   d59a4:	4770      	bxeq	lr
   d59a6:	b530      	push	{r4, r5, lr}
   d59a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d59ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d59b0:	f04f 0500 	mov.w	r5, #0
   d59b4:	f04f 0100 	mov.w	r1, #0
   d59b8:	e750      	b.n	d585c <__adddf3+0x138>
   d59ba:	bf00      	nop

000d59bc <__aeabi_i2d>:
   d59bc:	f090 0f00 	teq	r0, #0
   d59c0:	bf04      	itt	eq
   d59c2:	2100      	moveq	r1, #0
   d59c4:	4770      	bxeq	lr
   d59c6:	b530      	push	{r4, r5, lr}
   d59c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d59cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d59d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d59d4:	bf48      	it	mi
   d59d6:	4240      	negmi	r0, r0
   d59d8:	f04f 0100 	mov.w	r1, #0
   d59dc:	e73e      	b.n	d585c <__adddf3+0x138>
   d59de:	bf00      	nop

000d59e0 <__aeabi_f2d>:
   d59e0:	0042      	lsls	r2, r0, #1
   d59e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d59e6:	ea4f 0131 	mov.w	r1, r1, rrx
   d59ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d59ee:	bf1f      	itttt	ne
   d59f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d59f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d59f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d59fc:	4770      	bxne	lr
   d59fe:	f092 0f00 	teq	r2, #0
   d5a02:	bf14      	ite	ne
   d5a04:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5a08:	4770      	bxeq	lr
   d5a0a:	b530      	push	{r4, r5, lr}
   d5a0c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5a10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5a14:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5a18:	e720      	b.n	d585c <__adddf3+0x138>
   d5a1a:	bf00      	nop

000d5a1c <__aeabi_ul2d>:
   d5a1c:	ea50 0201 	orrs.w	r2, r0, r1
   d5a20:	bf08      	it	eq
   d5a22:	4770      	bxeq	lr
   d5a24:	b530      	push	{r4, r5, lr}
   d5a26:	f04f 0500 	mov.w	r5, #0
   d5a2a:	e00a      	b.n	d5a42 <__aeabi_l2d+0x16>

000d5a2c <__aeabi_l2d>:
   d5a2c:	ea50 0201 	orrs.w	r2, r0, r1
   d5a30:	bf08      	it	eq
   d5a32:	4770      	bxeq	lr
   d5a34:	b530      	push	{r4, r5, lr}
   d5a36:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5a3a:	d502      	bpl.n	d5a42 <__aeabi_l2d+0x16>
   d5a3c:	4240      	negs	r0, r0
   d5a3e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5a42:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5a46:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5a4a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5a4e:	f43f aedc 	beq.w	d580a <__adddf3+0xe6>
   d5a52:	f04f 0203 	mov.w	r2, #3
   d5a56:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5a5a:	bf18      	it	ne
   d5a5c:	3203      	addne	r2, #3
   d5a5e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5a62:	bf18      	it	ne
   d5a64:	3203      	addne	r2, #3
   d5a66:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5a6a:	f1c2 0320 	rsb	r3, r2, #32
   d5a6e:	fa00 fc03 	lsl.w	ip, r0, r3
   d5a72:	fa20 f002 	lsr.w	r0, r0, r2
   d5a76:	fa01 fe03 	lsl.w	lr, r1, r3
   d5a7a:	ea40 000e 	orr.w	r0, r0, lr
   d5a7e:	fa21 f102 	lsr.w	r1, r1, r2
   d5a82:	4414      	add	r4, r2
   d5a84:	e6c1      	b.n	d580a <__adddf3+0xe6>
   d5a86:	bf00      	nop

000d5a88 <__aeabi_dmul>:
   d5a88:	b570      	push	{r4, r5, r6, lr}
   d5a8a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5a8e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5a92:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5a96:	bf1d      	ittte	ne
   d5a98:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5a9c:	ea94 0f0c 	teqne	r4, ip
   d5aa0:	ea95 0f0c 	teqne	r5, ip
   d5aa4:	f000 f8de 	bleq	d5c64 <__aeabi_dmul+0x1dc>
   d5aa8:	442c      	add	r4, r5
   d5aaa:	ea81 0603 	eor.w	r6, r1, r3
   d5aae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d5ab2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d5ab6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5aba:	bf18      	it	ne
   d5abc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5ac0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5ac4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5ac8:	d038      	beq.n	d5b3c <__aeabi_dmul+0xb4>
   d5aca:	fba0 ce02 	umull	ip, lr, r0, r2
   d5ace:	f04f 0500 	mov.w	r5, #0
   d5ad2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5ad6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5ada:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5ade:	f04f 0600 	mov.w	r6, #0
   d5ae2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5ae6:	f09c 0f00 	teq	ip, #0
   d5aea:	bf18      	it	ne
   d5aec:	f04e 0e01 	orrne.w	lr, lr, #1
   d5af0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5af4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5af8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5afc:	d204      	bcs.n	d5b08 <__aeabi_dmul+0x80>
   d5afe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5b02:	416d      	adcs	r5, r5
   d5b04:	eb46 0606 	adc.w	r6, r6, r6
   d5b08:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d5b0c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5b10:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d5b14:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5b18:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d5b1c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5b20:	bf88      	it	hi
   d5b22:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5b26:	d81e      	bhi.n	d5b66 <__aeabi_dmul+0xde>
   d5b28:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5b2c:	bf08      	it	eq
   d5b2e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d5b32:	f150 0000 	adcs.w	r0, r0, #0
   d5b36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5b3a:	bd70      	pop	{r4, r5, r6, pc}
   d5b3c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5b40:	ea46 0101 	orr.w	r1, r6, r1
   d5b44:	ea40 0002 	orr.w	r0, r0, r2
   d5b48:	ea81 0103 	eor.w	r1, r1, r3
   d5b4c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5b50:	bfc2      	ittt	gt
   d5b52:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5b56:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5b5a:	bd70      	popgt	{r4, r5, r6, pc}
   d5b5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5b60:	f04f 0e00 	mov.w	lr, #0
   d5b64:	3c01      	subs	r4, #1
   d5b66:	f300 80ab 	bgt.w	d5cc0 <__aeabi_dmul+0x238>
   d5b6a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d5b6e:	bfde      	ittt	le
   d5b70:	2000      	movle	r0, #0
   d5b72:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d5b76:	bd70      	pople	{r4, r5, r6, pc}
   d5b78:	f1c4 0400 	rsb	r4, r4, #0
   d5b7c:	3c20      	subs	r4, #32
   d5b7e:	da35      	bge.n	d5bec <__aeabi_dmul+0x164>
   d5b80:	340c      	adds	r4, #12
   d5b82:	dc1b      	bgt.n	d5bbc <__aeabi_dmul+0x134>
   d5b84:	f104 0414 	add.w	r4, r4, #20
   d5b88:	f1c4 0520 	rsb	r5, r4, #32
   d5b8c:	fa00 f305 	lsl.w	r3, r0, r5
   d5b90:	fa20 f004 	lsr.w	r0, r0, r4
   d5b94:	fa01 f205 	lsl.w	r2, r1, r5
   d5b98:	ea40 0002 	orr.w	r0, r0, r2
   d5b9c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d5ba0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5ba4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5ba8:	fa21 f604 	lsr.w	r6, r1, r4
   d5bac:	eb42 0106 	adc.w	r1, r2, r6
   d5bb0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5bb4:	bf08      	it	eq
   d5bb6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5bba:	bd70      	pop	{r4, r5, r6, pc}
   d5bbc:	f1c4 040c 	rsb	r4, r4, #12
   d5bc0:	f1c4 0520 	rsb	r5, r4, #32
   d5bc4:	fa00 f304 	lsl.w	r3, r0, r4
   d5bc8:	fa20 f005 	lsr.w	r0, r0, r5
   d5bcc:	fa01 f204 	lsl.w	r2, r1, r4
   d5bd0:	ea40 0002 	orr.w	r0, r0, r2
   d5bd4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5bd8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5bdc:	f141 0100 	adc.w	r1, r1, #0
   d5be0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5be4:	bf08      	it	eq
   d5be6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5bea:	bd70      	pop	{r4, r5, r6, pc}
   d5bec:	f1c4 0520 	rsb	r5, r4, #32
   d5bf0:	fa00 f205 	lsl.w	r2, r0, r5
   d5bf4:	ea4e 0e02 	orr.w	lr, lr, r2
   d5bf8:	fa20 f304 	lsr.w	r3, r0, r4
   d5bfc:	fa01 f205 	lsl.w	r2, r1, r5
   d5c00:	ea43 0302 	orr.w	r3, r3, r2
   d5c04:	fa21 f004 	lsr.w	r0, r1, r4
   d5c08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5c0c:	fa21 f204 	lsr.w	r2, r1, r4
   d5c10:	ea20 0002 	bic.w	r0, r0, r2
   d5c14:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d5c18:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5c1c:	bf08      	it	eq
   d5c1e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5c22:	bd70      	pop	{r4, r5, r6, pc}
   d5c24:	f094 0f00 	teq	r4, #0
   d5c28:	d10f      	bne.n	d5c4a <__aeabi_dmul+0x1c2>
   d5c2a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d5c2e:	0040      	lsls	r0, r0, #1
   d5c30:	eb41 0101 	adc.w	r1, r1, r1
   d5c34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5c38:	bf08      	it	eq
   d5c3a:	3c01      	subeq	r4, #1
   d5c3c:	d0f7      	beq.n	d5c2e <__aeabi_dmul+0x1a6>
   d5c3e:	ea41 0106 	orr.w	r1, r1, r6
   d5c42:	f095 0f00 	teq	r5, #0
   d5c46:	bf18      	it	ne
   d5c48:	4770      	bxne	lr
   d5c4a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d5c4e:	0052      	lsls	r2, r2, #1
   d5c50:	eb43 0303 	adc.w	r3, r3, r3
   d5c54:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d5c58:	bf08      	it	eq
   d5c5a:	3d01      	subeq	r5, #1
   d5c5c:	d0f7      	beq.n	d5c4e <__aeabi_dmul+0x1c6>
   d5c5e:	ea43 0306 	orr.w	r3, r3, r6
   d5c62:	4770      	bx	lr
   d5c64:	ea94 0f0c 	teq	r4, ip
   d5c68:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5c6c:	bf18      	it	ne
   d5c6e:	ea95 0f0c 	teqne	r5, ip
   d5c72:	d00c      	beq.n	d5c8e <__aeabi_dmul+0x206>
   d5c74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5c78:	bf18      	it	ne
   d5c7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5c7e:	d1d1      	bne.n	d5c24 <__aeabi_dmul+0x19c>
   d5c80:	ea81 0103 	eor.w	r1, r1, r3
   d5c84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5c88:	f04f 0000 	mov.w	r0, #0
   d5c8c:	bd70      	pop	{r4, r5, r6, pc}
   d5c8e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5c92:	bf06      	itte	eq
   d5c94:	4610      	moveq	r0, r2
   d5c96:	4619      	moveq	r1, r3
   d5c98:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5c9c:	d019      	beq.n	d5cd2 <__aeabi_dmul+0x24a>
   d5c9e:	ea94 0f0c 	teq	r4, ip
   d5ca2:	d102      	bne.n	d5caa <__aeabi_dmul+0x222>
   d5ca4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d5ca8:	d113      	bne.n	d5cd2 <__aeabi_dmul+0x24a>
   d5caa:	ea95 0f0c 	teq	r5, ip
   d5cae:	d105      	bne.n	d5cbc <__aeabi_dmul+0x234>
   d5cb0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d5cb4:	bf1c      	itt	ne
   d5cb6:	4610      	movne	r0, r2
   d5cb8:	4619      	movne	r1, r3
   d5cba:	d10a      	bne.n	d5cd2 <__aeabi_dmul+0x24a>
   d5cbc:	ea81 0103 	eor.w	r1, r1, r3
   d5cc0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5cc4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5cc8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5ccc:	f04f 0000 	mov.w	r0, #0
   d5cd0:	bd70      	pop	{r4, r5, r6, pc}
   d5cd2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5cd6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d5cda:	bd70      	pop	{r4, r5, r6, pc}

000d5cdc <__aeabi_ddiv>:
   d5cdc:	b570      	push	{r4, r5, r6, lr}
   d5cde:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5ce2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5ce6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5cea:	bf1d      	ittte	ne
   d5cec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5cf0:	ea94 0f0c 	teqne	r4, ip
   d5cf4:	ea95 0f0c 	teqne	r5, ip
   d5cf8:	f000 f8a7 	bleq	d5e4a <__aeabi_ddiv+0x16e>
   d5cfc:	eba4 0405 	sub.w	r4, r4, r5
   d5d00:	ea81 0e03 	eor.w	lr, r1, r3
   d5d04:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5d08:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5d0c:	f000 8088 	beq.w	d5e20 <__aeabi_ddiv+0x144>
   d5d10:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5d14:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d5d18:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d5d1c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d5d20:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d5d24:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d5d28:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d5d2c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d5d30:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d5d34:	429d      	cmp	r5, r3
   d5d36:	bf08      	it	eq
   d5d38:	4296      	cmpeq	r6, r2
   d5d3a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d5d3e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d5d42:	d202      	bcs.n	d5d4a <__aeabi_ddiv+0x6e>
   d5d44:	085b      	lsrs	r3, r3, #1
   d5d46:	ea4f 0232 	mov.w	r2, r2, rrx
   d5d4a:	1ab6      	subs	r6, r6, r2
   d5d4c:	eb65 0503 	sbc.w	r5, r5, r3
   d5d50:	085b      	lsrs	r3, r3, #1
   d5d52:	ea4f 0232 	mov.w	r2, r2, rrx
   d5d56:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d5d5a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d5d5e:	ebb6 0e02 	subs.w	lr, r6, r2
   d5d62:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5d66:	bf22      	ittt	cs
   d5d68:	1ab6      	subcs	r6, r6, r2
   d5d6a:	4675      	movcs	r5, lr
   d5d6c:	ea40 000c 	orrcs.w	r0, r0, ip
   d5d70:	085b      	lsrs	r3, r3, #1
   d5d72:	ea4f 0232 	mov.w	r2, r2, rrx
   d5d76:	ebb6 0e02 	subs.w	lr, r6, r2
   d5d7a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5d7e:	bf22      	ittt	cs
   d5d80:	1ab6      	subcs	r6, r6, r2
   d5d82:	4675      	movcs	r5, lr
   d5d84:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d5d88:	085b      	lsrs	r3, r3, #1
   d5d8a:	ea4f 0232 	mov.w	r2, r2, rrx
   d5d8e:	ebb6 0e02 	subs.w	lr, r6, r2
   d5d92:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5d96:	bf22      	ittt	cs
   d5d98:	1ab6      	subcs	r6, r6, r2
   d5d9a:	4675      	movcs	r5, lr
   d5d9c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d5da0:	085b      	lsrs	r3, r3, #1
   d5da2:	ea4f 0232 	mov.w	r2, r2, rrx
   d5da6:	ebb6 0e02 	subs.w	lr, r6, r2
   d5daa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5dae:	bf22      	ittt	cs
   d5db0:	1ab6      	subcs	r6, r6, r2
   d5db2:	4675      	movcs	r5, lr
   d5db4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d5db8:	ea55 0e06 	orrs.w	lr, r5, r6
   d5dbc:	d018      	beq.n	d5df0 <__aeabi_ddiv+0x114>
   d5dbe:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d5dc2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d5dc6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d5dca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d5dce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d5dd2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d5dd6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d5dda:	d1c0      	bne.n	d5d5e <__aeabi_ddiv+0x82>
   d5ddc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5de0:	d10b      	bne.n	d5dfa <__aeabi_ddiv+0x11e>
   d5de2:	ea41 0100 	orr.w	r1, r1, r0
   d5de6:	f04f 0000 	mov.w	r0, #0
   d5dea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d5dee:	e7b6      	b.n	d5d5e <__aeabi_ddiv+0x82>
   d5df0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5df4:	bf04      	itt	eq
   d5df6:	4301      	orreq	r1, r0
   d5df8:	2000      	moveq	r0, #0
   d5dfa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5dfe:	bf88      	it	hi
   d5e00:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5e04:	f63f aeaf 	bhi.w	d5b66 <__aeabi_dmul+0xde>
   d5e08:	ebb5 0c03 	subs.w	ip, r5, r3
   d5e0c:	bf04      	itt	eq
   d5e0e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d5e12:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5e16:	f150 0000 	adcs.w	r0, r0, #0
   d5e1a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5e1e:	bd70      	pop	{r4, r5, r6, pc}
   d5e20:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d5e24:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d5e28:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d5e2c:	bfc2      	ittt	gt
   d5e2e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5e32:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5e36:	bd70      	popgt	{r4, r5, r6, pc}
   d5e38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5e3c:	f04f 0e00 	mov.w	lr, #0
   d5e40:	3c01      	subs	r4, #1
   d5e42:	e690      	b.n	d5b66 <__aeabi_dmul+0xde>
   d5e44:	ea45 0e06 	orr.w	lr, r5, r6
   d5e48:	e68d      	b.n	d5b66 <__aeabi_dmul+0xde>
   d5e4a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5e4e:	ea94 0f0c 	teq	r4, ip
   d5e52:	bf08      	it	eq
   d5e54:	ea95 0f0c 	teqeq	r5, ip
   d5e58:	f43f af3b 	beq.w	d5cd2 <__aeabi_dmul+0x24a>
   d5e5c:	ea94 0f0c 	teq	r4, ip
   d5e60:	d10a      	bne.n	d5e78 <__aeabi_ddiv+0x19c>
   d5e62:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5e66:	f47f af34 	bne.w	d5cd2 <__aeabi_dmul+0x24a>
   d5e6a:	ea95 0f0c 	teq	r5, ip
   d5e6e:	f47f af25 	bne.w	d5cbc <__aeabi_dmul+0x234>
   d5e72:	4610      	mov	r0, r2
   d5e74:	4619      	mov	r1, r3
   d5e76:	e72c      	b.n	d5cd2 <__aeabi_dmul+0x24a>
   d5e78:	ea95 0f0c 	teq	r5, ip
   d5e7c:	d106      	bne.n	d5e8c <__aeabi_ddiv+0x1b0>
   d5e7e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5e82:	f43f aefd 	beq.w	d5c80 <__aeabi_dmul+0x1f8>
   d5e86:	4610      	mov	r0, r2
   d5e88:	4619      	mov	r1, r3
   d5e8a:	e722      	b.n	d5cd2 <__aeabi_dmul+0x24a>
   d5e8c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5e90:	bf18      	it	ne
   d5e92:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5e96:	f47f aec5 	bne.w	d5c24 <__aeabi_dmul+0x19c>
   d5e9a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d5e9e:	f47f af0d 	bne.w	d5cbc <__aeabi_dmul+0x234>
   d5ea2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d5ea6:	f47f aeeb 	bne.w	d5c80 <__aeabi_dmul+0x1f8>
   d5eaa:	e712      	b.n	d5cd2 <__aeabi_dmul+0x24a>

000d5eac <__gedf2>:
   d5eac:	f04f 3cff 	mov.w	ip, #4294967295
   d5eb0:	e006      	b.n	d5ec0 <__cmpdf2+0x4>
   d5eb2:	bf00      	nop

000d5eb4 <__ledf2>:
   d5eb4:	f04f 0c01 	mov.w	ip, #1
   d5eb8:	e002      	b.n	d5ec0 <__cmpdf2+0x4>
   d5eba:	bf00      	nop

000d5ebc <__cmpdf2>:
   d5ebc:	f04f 0c01 	mov.w	ip, #1
   d5ec0:	f84d cd04 	str.w	ip, [sp, #-4]!
   d5ec4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5ec8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5ecc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5ed0:	bf18      	it	ne
   d5ed2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d5ed6:	d01b      	beq.n	d5f10 <__cmpdf2+0x54>
   d5ed8:	b001      	add	sp, #4
   d5eda:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d5ede:	bf0c      	ite	eq
   d5ee0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d5ee4:	ea91 0f03 	teqne	r1, r3
   d5ee8:	bf02      	ittt	eq
   d5eea:	ea90 0f02 	teqeq	r0, r2
   d5eee:	2000      	moveq	r0, #0
   d5ef0:	4770      	bxeq	lr
   d5ef2:	f110 0f00 	cmn.w	r0, #0
   d5ef6:	ea91 0f03 	teq	r1, r3
   d5efa:	bf58      	it	pl
   d5efc:	4299      	cmppl	r1, r3
   d5efe:	bf08      	it	eq
   d5f00:	4290      	cmpeq	r0, r2
   d5f02:	bf2c      	ite	cs
   d5f04:	17d8      	asrcs	r0, r3, #31
   d5f06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d5f0a:	f040 0001 	orr.w	r0, r0, #1
   d5f0e:	4770      	bx	lr
   d5f10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5f14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5f18:	d102      	bne.n	d5f20 <__cmpdf2+0x64>
   d5f1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d5f1e:	d107      	bne.n	d5f30 <__cmpdf2+0x74>
   d5f20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5f24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5f28:	d1d6      	bne.n	d5ed8 <__cmpdf2+0x1c>
   d5f2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d5f2e:	d0d3      	beq.n	d5ed8 <__cmpdf2+0x1c>
   d5f30:	f85d 0b04 	ldr.w	r0, [sp], #4
   d5f34:	4770      	bx	lr
   d5f36:	bf00      	nop

000d5f38 <__aeabi_cdrcmple>:
   d5f38:	4684      	mov	ip, r0
   d5f3a:	4610      	mov	r0, r2
   d5f3c:	4662      	mov	r2, ip
   d5f3e:	468c      	mov	ip, r1
   d5f40:	4619      	mov	r1, r3
   d5f42:	4663      	mov	r3, ip
   d5f44:	e000      	b.n	d5f48 <__aeabi_cdcmpeq>
   d5f46:	bf00      	nop

000d5f48 <__aeabi_cdcmpeq>:
   d5f48:	b501      	push	{r0, lr}
   d5f4a:	f7ff ffb7 	bl	d5ebc <__cmpdf2>
   d5f4e:	2800      	cmp	r0, #0
   d5f50:	bf48      	it	mi
   d5f52:	f110 0f00 	cmnmi.w	r0, #0
   d5f56:	bd01      	pop	{r0, pc}

000d5f58 <__aeabi_dcmpeq>:
   d5f58:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5f5c:	f7ff fff4 	bl	d5f48 <__aeabi_cdcmpeq>
   d5f60:	bf0c      	ite	eq
   d5f62:	2001      	moveq	r0, #1
   d5f64:	2000      	movne	r0, #0
   d5f66:	f85d fb08 	ldr.w	pc, [sp], #8
   d5f6a:	bf00      	nop

000d5f6c <__aeabi_dcmplt>:
   d5f6c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5f70:	f7ff ffea 	bl	d5f48 <__aeabi_cdcmpeq>
   d5f74:	bf34      	ite	cc
   d5f76:	2001      	movcc	r0, #1
   d5f78:	2000      	movcs	r0, #0
   d5f7a:	f85d fb08 	ldr.w	pc, [sp], #8
   d5f7e:	bf00      	nop

000d5f80 <__aeabi_dcmple>:
   d5f80:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5f84:	f7ff ffe0 	bl	d5f48 <__aeabi_cdcmpeq>
   d5f88:	bf94      	ite	ls
   d5f8a:	2001      	movls	r0, #1
   d5f8c:	2000      	movhi	r0, #0
   d5f8e:	f85d fb08 	ldr.w	pc, [sp], #8
   d5f92:	bf00      	nop

000d5f94 <__aeabi_dcmpge>:
   d5f94:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5f98:	f7ff ffce 	bl	d5f38 <__aeabi_cdrcmple>
   d5f9c:	bf94      	ite	ls
   d5f9e:	2001      	movls	r0, #1
   d5fa0:	2000      	movhi	r0, #0
   d5fa2:	f85d fb08 	ldr.w	pc, [sp], #8
   d5fa6:	bf00      	nop

000d5fa8 <__aeabi_dcmpgt>:
   d5fa8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5fac:	f7ff ffc4 	bl	d5f38 <__aeabi_cdrcmple>
   d5fb0:	bf34      	ite	cc
   d5fb2:	2001      	movcc	r0, #1
   d5fb4:	2000      	movcs	r0, #0
   d5fb6:	f85d fb08 	ldr.w	pc, [sp], #8
   d5fba:	bf00      	nop

000d5fbc <__aeabi_dcmpun>:
   d5fbc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5fc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5fc4:	d102      	bne.n	d5fcc <__aeabi_dcmpun+0x10>
   d5fc6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d5fca:	d10a      	bne.n	d5fe2 <__aeabi_dcmpun+0x26>
   d5fcc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5fd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5fd4:	d102      	bne.n	d5fdc <__aeabi_dcmpun+0x20>
   d5fd6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d5fda:	d102      	bne.n	d5fe2 <__aeabi_dcmpun+0x26>
   d5fdc:	f04f 0000 	mov.w	r0, #0
   d5fe0:	4770      	bx	lr
   d5fe2:	f04f 0001 	mov.w	r0, #1
   d5fe6:	4770      	bx	lr

000d5fe8 <__aeabi_d2f>:
   d5fe8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d5fec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d5ff0:	bf24      	itt	cs
   d5ff2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d5ff6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d5ffa:	d90d      	bls.n	d6018 <__aeabi_d2f+0x30>
   d5ffc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6000:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6004:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6008:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d600c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6010:	bf08      	it	eq
   d6012:	f020 0001 	biceq.w	r0, r0, #1
   d6016:	4770      	bx	lr
   d6018:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d601c:	d121      	bne.n	d6062 <__aeabi_d2f+0x7a>
   d601e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d6022:	bfbc      	itt	lt
   d6024:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6028:	4770      	bxlt	lr
   d602a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d602e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d6032:	f1c2 0218 	rsb	r2, r2, #24
   d6036:	f1c2 0c20 	rsb	ip, r2, #32
   d603a:	fa10 f30c 	lsls.w	r3, r0, ip
   d603e:	fa20 f002 	lsr.w	r0, r0, r2
   d6042:	bf18      	it	ne
   d6044:	f040 0001 	orrne.w	r0, r0, #1
   d6048:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d604c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6050:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6054:	ea40 000c 	orr.w	r0, r0, ip
   d6058:	fa23 f302 	lsr.w	r3, r3, r2
   d605c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6060:	e7cc      	b.n	d5ffc <__aeabi_d2f+0x14>
   d6062:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d6066:	d107      	bne.n	d6078 <__aeabi_d2f+0x90>
   d6068:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d606c:	bf1e      	ittt	ne
   d606e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6072:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d6076:	4770      	bxne	lr
   d6078:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d607c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6080:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6084:	4770      	bx	lr
   d6086:	bf00      	nop

000d6088 <__cxa_atexit>:
   d6088:	b510      	push	{r4, lr}
   d608a:	4c05      	ldr	r4, [pc, #20]	; (d60a0 <__cxa_atexit+0x18>)
   d608c:	4613      	mov	r3, r2
   d608e:	b12c      	cbz	r4, d609c <__cxa_atexit+0x14>
   d6090:	460a      	mov	r2, r1
   d6092:	4601      	mov	r1, r0
   d6094:	2002      	movs	r0, #2
   d6096:	f3af 8000 	nop.w
   d609a:	bd10      	pop	{r4, pc}
   d609c:	4620      	mov	r0, r4
   d609e:	bd10      	pop	{r4, pc}
   d60a0:	00000000 	.word	0x00000000

000d60a4 <memcpy>:
   d60a4:	b510      	push	{r4, lr}
   d60a6:	1e43      	subs	r3, r0, #1
   d60a8:	440a      	add	r2, r1
   d60aa:	4291      	cmp	r1, r2
   d60ac:	d004      	beq.n	d60b8 <memcpy+0x14>
   d60ae:	f811 4b01 	ldrb.w	r4, [r1], #1
   d60b2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d60b6:	e7f8      	b.n	d60aa <memcpy+0x6>
   d60b8:	bd10      	pop	{r4, pc}

000d60ba <memset>:
   d60ba:	4402      	add	r2, r0
   d60bc:	4603      	mov	r3, r0
   d60be:	4293      	cmp	r3, r2
   d60c0:	d002      	beq.n	d60c8 <memset+0xe>
   d60c2:	f803 1b01 	strb.w	r1, [r3], #1
   d60c6:	e7fa      	b.n	d60be <memset+0x4>
   d60c8:	4770      	bx	lr
	...

000d60cc <srand>:
   d60cc:	b538      	push	{r3, r4, r5, lr}
   d60ce:	4b12      	ldr	r3, [pc, #72]	; (d6118 <srand+0x4c>)
   d60d0:	681c      	ldr	r4, [r3, #0]
   d60d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d60d4:	4605      	mov	r5, r0
   d60d6:	b9d3      	cbnz	r3, d610e <srand+0x42>
   d60d8:	2018      	movs	r0, #24
   d60da:	f7fe fab9 	bl	d4650 <malloc>
   d60de:	f243 330e 	movw	r3, #13070	; 0x330e
   d60e2:	63a0      	str	r0, [r4, #56]	; 0x38
   d60e4:	8003      	strh	r3, [r0, #0]
   d60e6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d60ea:	8043      	strh	r3, [r0, #2]
   d60ec:	f241 2334 	movw	r3, #4660	; 0x1234
   d60f0:	8083      	strh	r3, [r0, #4]
   d60f2:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d60f6:	80c3      	strh	r3, [r0, #6]
   d60f8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d60fc:	8103      	strh	r3, [r0, #8]
   d60fe:	2305      	movs	r3, #5
   d6100:	8143      	strh	r3, [r0, #10]
   d6102:	230b      	movs	r3, #11
   d6104:	8183      	strh	r3, [r0, #12]
   d6106:	2201      	movs	r2, #1
   d6108:	2300      	movs	r3, #0
   d610a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d610e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6110:	2200      	movs	r2, #0
   d6112:	611d      	str	r5, [r3, #16]
   d6114:	615a      	str	r2, [r3, #20]
   d6116:	bd38      	pop	{r3, r4, r5, pc}
   d6118:	2003e3b4 	.word	0x2003e3b4

000d611c <strlen>:
   d611c:	4603      	mov	r3, r0
   d611e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6122:	2a00      	cmp	r2, #0
   d6124:	d1fb      	bne.n	d611e <strlen+0x2>
   d6126:	1a18      	subs	r0, r3, r0
   d6128:	3801      	subs	r0, #1
   d612a:	4770      	bx	lr

000d612c <dynalib_user>:
   d612c:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d613c:	0000 0000 2d2d 2d2d 2d2d 2d2d 2d2d 412d     ....-----------A
   d614c:	6363 6c65 7265 7461 6f69 2d6e 2d2d 2d2d     cceleration-----
   d615c:	2d2d 2d2d 2d2d 2d2d 2d2d 000a 6341 6563     ----------..Acce
   d616c:	656c 6172 6974 6e6f 6920 206e 2d58 7841     leration in X-Ax
   d617c:	7369 203a 3025 322e 2066 000a 6341 6563     is: %0.2f ..Acce
   d618c:	656c 6172 6974 6e6f 6920 206e 2d59 7841     leration in Y-Ax
   d619c:	7369 203a 3025 322e 2066 000a 6341 6563     is: %0.2f ..Acce
   d61ac:	656c 6172 6974 6e6f 6920 206e 2d5a 7841     leration in Z-Ax
   d61bc:	7369 203a 3025 322e 2066 000a 6f54 6174     is: %0.2f ..Tota
   d61cc:	206c 6341 6563 656c 6172 6974 6e6f 203a     l Acceleration: 
   d61dc:	3025 322e 2066 000a                         %0.2f ..

000d61e4 <_ZTVN5spark13EthernetClassE>:
	...
   d61ec:	46ef 000d 46e5 000d 46db 000d 46d1 000d     .F...F...F...F..
   d61fc:	46c5 000d 46b9 000d 46ad 000d 46a5 000d     .F...F...F...F..
   d620c:	469b 000d 4691 000d 5081 000d 6162 6475     .F...F...P..baud
   d621c:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d622c:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d623c:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d624c:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d625c:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d626c:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d627c:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d628c:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d629c:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d62ac:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d62bc:	0d00 000a 0066 6e6c 6600 006e 6f63 6564     ....f.ln.fn.code
   d62cc:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   d62dc:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d62ec:	726f 7000 6e61 6369 6100 6c6c 5a00 2500     or.panic.all.Z.%
   d62fc:	302b 6433 253a 3230 0075 5925 252d 2d6d     +03d:%02u.%Y-%m-
   d630c:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
   d631c:	7463 6d69 0065 0000                         ctime...

000d6324 <_ZTV9IPAddress>:
	...
   d632c:	4a3d 000d 4a2d 000d 4a2f 000d               =J..-J../J..

000d6338 <_ZTV9USBSerial>:
	...
   d6340:	4b15 000d 4b65 000d 4b73 000d 4799 000d     .K..eK..sK...G..
   d6350:	4b51 000d 4b17 000d 4b2d 000d 4b5f 000d     QK...K..-K.._K..
   d6360:	4b43 000d 4b11 000d                         CK...K..

000d6368 <_ZTV11USARTSerial>:
	...
   d6370:	4c21 000d 4c71 000d 4c7f 000d 4799 000d     !L..qL...L...G..
   d6380:	4c35 000d 4c57 000d 4c43 000d 4c6b 000d     5L..WL..CL..kL..
   d6390:	4c23 000d 4c27 000d                         #L..'L..

000d6398 <_ZTV7TwoWire>:
	...
   d63a0:	4d1d 000d 4d67 000d 4d3f 000d 4d1f 000d     .M..gM..?M...M..
   d63b0:	4d47 000d 4d4f 000d 4d57 000d 4d5f 000d     GM..OM..WM.._M..

000d63c0 <_ZTVN5spark9MeshClassE>:
	...
   d63c8:	4e81 000d 4e77 000d 4e6d 000d 4e63 000d     .N..wN..mN..cN..
   d63d8:	4e57 000d 4e4b 000d 4e3f 000d 4e37 000d     WN..KN..?N..7N..
   d63e8:	4e2d 000d 4e23 000d 5081 000d               -N..#N...P..

000d63f4 <_ZTVN5spark9WiFiClassE>:
	...
   d63fc:	4ffb 000d 4ff1 000d 4fe7 000d 4f9d 000d     .O...O...O...O..
   d640c:	4fdb 000d 4fcf 000d 4fc3 000d 4fbb 000d     .O...O...O...O..
   d641c:	4fb1 000d 4fa7 000d 5081 000d               .O...O...P..

000d6428 <_ZTVN5spark12NetworkClassE>:
	...
   d6430:	5019 000d 5023 000d 502d 000d 5037 000d     .P..#P..-P..7P..
   d6440:	5041 000d 504d 000d 5059 000d 5065 000d     AP..MP..YP..eP..
   d6450:	506d 000d 5077 000d 5081 000d               mP..wP...P..

000d645c <_ZSt7nothrow>:
   d645c:	0000 0000 7173 7472 0000 0000               ....sqrt....

000d6468 <__sf_fake_stdin>:
	...

000d6488 <__sf_fake_stdout>:
	...

000d64a8 <__sf_fake_stderr>:
	...
   d64c8:	0043                                        C.

000d64ca <link_const_variable_data_end>:
	...

000d64cc <link_constructors_location>:
   d64cc:	000d4325 	.word	0x000d4325
   d64d0:	000d46f9 	.word	0x000d46f9
   d64d4:	000d472d 	.word	0x000d472d
   d64d8:	000d4771 	.word	0x000d4771
   d64dc:	000d48b9 	.word	0x000d48b9
   d64e0:	000d48c9 	.word	0x000d48c9
   d64e4:	000d4901 	.word	0x000d4901
   d64e8:	000d4f4d 	.word	0x000d4f4d
   d64ec:	000d5005 	.word	0x000d5005
   d64f0:	000d514d 	.word	0x000d514d
   d64f4:	000d5225 	.word	0x000d5225
   d64f8:	000d52a9 	.word	0x000d52a9
   d64fc:	000d536d 	.word	0x000d536d
   d6500:	000d5431 	.word	0x000d5431

000d6504 <link_constructors_end>:
	...
