
/home/brian/Particle/LIS331HH/target/1.5.0/argon/LIS331HH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002500  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6520  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e348  000d6524  0001e348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000043c  2003e3b4  2003e3b4  0002e3b4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6590  000d6590  00026590  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d65b8  000d65b8  000265b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c24e0  00000000  00000000  000265bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000e5f6  00000000  00000000  000e8a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002028  00000000  00000000  000f7092  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00030c08  00000000  00000000  000f90ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0002163f  00000000  00000000  00129cc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00103245  00000000  00000000  0014b301  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001a576  00000000  00000000  0024e546  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003f78  00000000  00000000  00268abc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000bf44  00000000  00000000  0026ca34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 f845 	bl	d60c0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 f84a 	bl	d60d6 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e348 	.word	0x2003e348
   d404c:	000d6524 	.word	0x000d6524
   d4050:	2003e3b4 	.word	0x2003e3b4
   d4054:	2003e3b4 	.word	0x2003e3b4
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f000 fea9 	bl	d4db4 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d6520 	.word	0x000d6520
   d4084:	000d64e8 	.word	0x000d64e8

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b817 	b.w	d40ba <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f85b 	bl	d4148 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f000 be4f 	b.w	d4d38 <_post_loop>

000d409a <_ZdlPv>:
   d409a:	f000 baed 	b.w	d4678 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 baeb 	b.w	d4678 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d40b2:	6803      	ldr	r3, [r0, #0]
   d40b4:	b2c9      	uxtb	r1, r1
   d40b6:	689b      	ldr	r3, [r3, #8]
   d40b8:	4718      	bx	r3

000d40ba <setup>:
float yG;
float zG;
float tG;

void setup()
{
   d40ba:	b508      	push	{r3, lr}

  Wire.begin();
   d40bc:	f001 f878 	bl	d51b0 <_Z19__fetch_global_Wirev>
   d40c0:	f000 fcd0 	bl	d4a64 <_ZN7TwoWire5beginEv>
  Serial.begin(9600);
   d40c4:	f000 fd76 	bl	d4bb4 <_Z16_fetch_usbserialv>
   d40c8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40cc:	f000 fd66 	bl	d4b9c <_ZN9USBSerial5beginEl>

  // Start I2C Transmission
  Wire.beginTransmission(Addr);
   d40d0:	f001 f86e 	bl	d51b0 <_Z19__fetch_global_Wirev>
   d40d4:	2118      	movs	r1, #24
   d40d6:	f000 fd00 	bl	d4ada <_ZN7TwoWire17beginTransmissionEi>
  // Select control register 1
  Wire.write(0x20);
   d40da:	f001 f869 	bl	d51b0 <_Z19__fetch_global_Wirev>
   d40de:	2120      	movs	r1, #32
   d40e0:	f7ff ffe7 	bl	d40b2 <_ZN7TwoWire5writeEi>
  // Enable X, Y, Z axis, power on mode, data rate selection = 50Hz
  Wire.write(0x27);
   d40e4:	f001 f864 	bl	d51b0 <_Z19__fetch_global_Wirev>
   d40e8:	2127      	movs	r1, #39	; 0x27
   d40ea:	f7ff ffe2 	bl	d40b2 <_ZN7TwoWire5writeEi>
  // Stop I2C Transmission
  Wire.endTransmission();
   d40ee:	f001 f85f 	bl	d51b0 <_Z19__fetch_global_Wirev>
   d40f2:	f000 fcf9 	bl	d4ae8 <_ZN7TwoWire15endTransmissionEv>

  // Start I2C Transmission
  Wire.beginTransmission(Addr);
   d40f6:	f001 f85b 	bl	d51b0 <_Z19__fetch_global_Wirev>
   d40fa:	2118      	movs	r1, #24
   d40fc:	f000 fced 	bl	d4ada <_ZN7TwoWire17beginTransmissionEi>
  // Select control register 4
  Wire.write(0x23);
   d4100:	f001 f856 	bl	d51b0 <_Z19__fetch_global_Wirev>
   d4104:	2123      	movs	r1, #35	; 0x23
   d4106:	f7ff ffd4 	bl	d40b2 <_ZN7TwoWire5writeEi>
  // Set Continuos update, +/- 6g, self-test enabled
  Wire.write(0x00);
   d410a:	f001 f851 	bl	d51b0 <_Z19__fetch_global_Wirev>
   d410e:	2100      	movs	r1, #0
   d4110:	f7ff ffcf 	bl	d40b2 <_ZN7TwoWire5writeEi>
  // Stop I2C Transmission
  Wire.endTransmission();
   d4114:	f001 f84c 	bl	d51b0 <_Z19__fetch_global_Wirev>
   d4118:	f000 fce6 	bl	d4ae8 <_ZN7TwoWire15endTransmissionEv>
  delay(300);
   d411c:	f44f 7096 	mov.w	r0, #300	; 0x12c
}
   d4120:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Wire.write(0x23);
  // Set Continuos update, +/- 6g, self-test enabled
  Wire.write(0x00);
  // Stop I2C Transmission
  Wire.endTransmission();
  delay(300);
   d4124:	f000 bde7 	b.w	d4cf6 <delay>

000d4128 <_ZN5Print6printfIIfEEEjPKcDpT_>:
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
   d4128:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d412a:	4604      	mov	r4, r0
    {
        return this->printf_impl(false, format, args...);
   d412c:	ee10 0a10 	vmov	r0, s0
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
   d4130:	460d      	mov	r5, r1
    {
        return this->printf_impl(false, format, args...);
   d4132:	f001 fc63 	bl	d59fc <__aeabi_f2d>
   d4136:	462a      	mov	r2, r5
   d4138:	e9cd 0100 	strd	r0, r1, [sp]
   d413c:	2100      	movs	r1, #0
   d413e:	4620      	mov	r0, r4
   d4140:	f000 fedf 	bl	d4f02 <_ZN5Print11printf_implEbPKcz>
    }
   d4144:	b003      	add	sp, #12
   d4146:	bd30      	pop	{r4, r5, pc}

000d4148 <loop>:
}

void loop()
{
   d4148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

    // Read 6 bytes of data
    // xAccl lsb, xAccl msb, yAccl lsb, yAccl msb, zAccl lsb, zAccl msb
    if (Wire.available() == 1)
    {
      data[i] = Wire.read();
   d414c:	4d6e      	ldr	r5, [pc, #440]	; (d4308 <loop+0x1c0>)
  Wire.endTransmission();
  delay(300);
}

void loop()
{
   d414e:	2428      	movs	r4, #40	; 0x28
  for (int i = 0; i < 6; i++)
  {
    // Start I2C Transmission, Select data register, Stop I2C Transmission
    Wire.beginTransmission(Addr);
   d4150:	f001 f82e 	bl	d51b0 <_Z19__fetch_global_Wirev>
   d4154:	2118      	movs	r1, #24
   d4156:	f000 fcc0 	bl	d4ada <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((40 + i));
   d415a:	f001 f829 	bl	d51b0 <_Z19__fetch_global_Wirev>
   d415e:	4621      	mov	r1, r4
   d4160:	f7ff ffa7 	bl	d40b2 <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
   d4164:	f001 f824 	bl	d51b0 <_Z19__fetch_global_Wirev>
   d4168:	f000 fcbe 	bl	d4ae8 <_ZN7TwoWire15endTransmissionEv>

    // Request 1 byte of data
    Wire.requestFrom(Addr, 1);
   d416c:	f001 f820 	bl	d51b0 <_Z19__fetch_global_Wirev>
   d4170:	2201      	movs	r2, #1
   d4172:	2118      	movs	r1, #24
   d4174:	f000 fcaa 	bl	d4acc <_ZN7TwoWire11requestFromEhj>

    // Read 6 bytes of data
    // xAccl lsb, xAccl msb, yAccl lsb, yAccl msb, zAccl lsb, zAccl msb
    if (Wire.available() == 1)
   d4178:	f001 f81a 	bl	d51b0 <_Z19__fetch_global_Wirev>
   d417c:	6803      	ldr	r3, [r0, #0]
   d417e:	691b      	ldr	r3, [r3, #16]
   d4180:	4798      	blx	r3
   d4182:	2801      	cmp	r0, #1
   d4184:	d107      	bne.n	d4196 <loop+0x4e>
    {
      data[i] = Wire.read();
   d4186:	f001 f813 	bl	d51b0 <_Z19__fetch_global_Wirev>
   d418a:	6803      	ldr	r3, [r0, #0]
   d418c:	695b      	ldr	r3, [r3, #20]
   d418e:	4798      	blx	r3
   d4190:	192b      	adds	r3, r5, r4
   d4192:	f803 0c28 	strb.w	r0, [r3, #-40]
    }
    delay(300);
   d4196:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d419a:	3401      	adds	r4, #1
   d419c:	f000 fdab 	bl	d4cf6 <delay>
  delay(300);
}

void loop()
{
  for (int i = 0; i < 6; i++)
   d41a0:	2c2e      	cmp	r4, #46	; 0x2e
   d41a2:	d1d5      	bne.n	d4150 <loop+0x8>
    }
    delay(300);
  }

  // Convert the data
  xAccl = ((data[1] * 256) + data[0]);
   d41a4:	4b58      	ldr	r3, [pc, #352]	; (d4308 <loop+0x1c0>)
   d41a6:	4c59      	ldr	r4, [pc, #356]	; (d430c <loop+0x1c4>)
   d41a8:	7859      	ldrb	r1, [r3, #1]
   d41aa:	781a      	ldrb	r2, [r3, #0]
  if (xAccl > 32767)
  {
    xAccl -= 65536;
  }

  yAccl = ((data[3] * 256) + data[2]);
   d41ac:	78d8      	ldrb	r0, [r3, #3]
   d41ae:	4f58      	ldr	r7, [pc, #352]	; (d4310 <loop+0x1c8>)
  {
    zAccl -= 65536;
  }

  // Convert to G's (Gravity = 1G = 9.8m/s^2)
  xG = xAccl/5250.0;
   d41b0:	4e58      	ldr	r6, [pc, #352]	; (d4314 <loop+0x1cc>)
  yG = yAccl/5250.0;
   d41b2:	4d59      	ldr	r5, [pc, #356]	; (d4318 <loop+0x1d0>)
    }
    delay(300);
  }

  // Convert the data
  xAccl = ((data[1] * 256) + data[0]);
   d41b4:	eb02 2201 	add.w	r2, r2, r1, lsl #8
  if (xAccl > 32767)
   d41b8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   d41bc:	4957      	ldr	r1, [pc, #348]	; (d431c <loop+0x1d4>)
  {
    xAccl -= 65536;
   d41be:	bfa8      	it	ge
   d41c0:	f5a2 3280 	subge.w	r2, r2, #65536	; 0x10000
   d41c4:	600a      	str	r2, [r1, #0]
  }

  yAccl = ((data[3] * 256) + data[2]);
   d41c6:	789a      	ldrb	r2, [r3, #2]
   d41c8:	eb02 2200 	add.w	r2, r2, r0, lsl #8
  if (yAccl > 32767)
   d41cc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  {
    yAccl -= 65536;
   d41d0:	bfa8      	it	ge
   d41d2:	f5a2 3280 	subge.w	r2, r2, #65536	; 0x10000
   d41d6:	6022      	str	r2, [r4, #0]
  }

  zAccl = ((data[5] * 256) + data[4]);
   d41d8:	795a      	ldrb	r2, [r3, #5]
   d41da:	791b      	ldrb	r3, [r3, #4]
  {
    zAccl -= 65536;
  }

  // Convert to G's (Gravity = 1G = 9.8m/s^2)
  xG = xAccl/5250.0;
   d41dc:	6808      	ldr	r0, [r1, #0]
  if (yAccl > 32767)
  {
    yAccl -= 65536;
  }

  zAccl = ((data[5] * 256) + data[4]);
   d41de:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  if (zAccl > 32767)
   d41e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  {
    zAccl -= 65536;
   d41e6:	bfa8      	it	ge
   d41e8:	f5a3 3380 	subge.w	r3, r3, #65536	; 0x10000
   d41ec:	603b      	str	r3, [r7, #0]
  }

  // Convert to G's (Gravity = 1G = 9.8m/s^2)
  xG = xAccl/5250.0;
   d41ee:	f001 fbf3 	bl	d59d8 <__aeabi_i2d>
   d41f2:	a343      	add	r3, pc, #268	; (adr r3, d4300 <loop+0x1b8>)
   d41f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41f8:	f001 fd7e 	bl	d5cf8 <__aeabi_ddiv>
   d41fc:	f001 ff02 	bl	d6004 <__aeabi_d2f>
   d4200:	4680      	mov	r8, r0
   d4202:	6030      	str	r0, [r6, #0]
  yG = yAccl/5250.0;
   d4204:	6820      	ldr	r0, [r4, #0]
  zG = zAccl/5250.0;
   d4206:	4c46      	ldr	r4, [pc, #280]	; (d4320 <loop+0x1d8>)
    zAccl -= 65536;
  }

  // Convert to G's (Gravity = 1G = 9.8m/s^2)
  xG = xAccl/5250.0;
  yG = yAccl/5250.0;
   d4208:	f001 fbe6 	bl	d59d8 <__aeabi_i2d>
   d420c:	a33c      	add	r3, pc, #240	; (adr r3, d4300 <loop+0x1b8>)
   d420e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4212:	f001 fd71 	bl	d5cf8 <__aeabi_ddiv>
   d4216:	f001 fef5 	bl	d6004 <__aeabi_d2f>
   d421a:	4682      	mov	sl, r0
   d421c:	6028      	str	r0, [r5, #0]
  zG = zAccl/5250.0;
   d421e:	6838      	ldr	r0, [r7, #0]
   d4220:	f001 fbda 	bl	d59d8 <__aeabi_i2d>
   d4224:	a336      	add	r3, pc, #216	; (adr r3, d4300 <loop+0x1b8>)
   d4226:	e9d3 2300 	ldrd	r2, r3, [r3]
   d422a:	f001 fd65 	bl	d5cf8 <__aeabi_ddiv>
   d422e:	f001 fee9 	bl	d6004 <__aeabi_d2f>
   d4232:	4607      	mov	r7, r0
   d4234:	6020      	str	r0, [r4, #0]

  tG = sqrt(pow(xG,2)+pow(yG,2)+pow(zG,2));
   d4236:	4640      	mov	r0, r8
   d4238:	f001 fbe0 	bl	d59fc <__aeabi_f2d>
   d423c:	4680      	mov	r8, r0
   d423e:	4650      	mov	r0, sl
   d4240:	4689      	mov	r9, r1
   d4242:	f001 fbdb 	bl	d59fc <__aeabi_f2d>
   d4246:	4682      	mov	sl, r0
   d4248:	4638      	mov	r0, r7
   d424a:	468b      	mov	fp, r1
   d424c:	f001 fbd6 	bl	d59fc <__aeabi_f2d>
   d4250:	4642      	mov	r2, r8
   d4252:	e9cd 0100 	strd	r0, r1, [sp]
   d4256:	464b      	mov	r3, r9
   d4258:	4640      	mov	r0, r8
   d425a:	4649      	mov	r1, r9
   d425c:	f001 fc22 	bl	d5aa4 <__aeabi_dmul>
   d4260:	4652      	mov	r2, sl
   d4262:	4680      	mov	r8, r0
   d4264:	4689      	mov	r9, r1
   d4266:	465b      	mov	r3, fp
   d4268:	4650      	mov	r0, sl
   d426a:	4659      	mov	r1, fp
   d426c:	f001 fc1a 	bl	d5aa4 <__aeabi_dmul>
   d4270:	4602      	mov	r2, r0
   d4272:	460b      	mov	r3, r1
   d4274:	4640      	mov	r0, r8
   d4276:	4649      	mov	r1, r9
   d4278:	f001 fa62 	bl	d5740 <__adddf3>
   d427c:	e9dd 2300 	ldrd	r2, r3, [sp]
   d4280:	4680      	mov	r8, r0
   d4282:	4689      	mov	r9, r1
   d4284:	4610      	mov	r0, r2
   d4286:	4619      	mov	r1, r3
   d4288:	f001 fc0c 	bl	d5aa4 <__aeabi_dmul>
   d428c:	460b      	mov	r3, r1
   d428e:	4602      	mov	r2, r0
   d4290:	4649      	mov	r1, r9
   d4292:	4640      	mov	r0, r8
   d4294:	f001 fa54 	bl	d5740 <__adddf3>
   d4298:	ec41 0b10 	vmov	d0, r0, r1
   d429c:	f001 f918 	bl	d54d0 <sqrt>
   d42a0:	ec51 0b10 	vmov	r0, r1, d0
   d42a4:	f001 feae 	bl	d6004 <__aeabi_d2f>
   d42a8:	4f1e      	ldr	r7, [pc, #120]	; (d4324 <loop+0x1dc>)
   d42aa:	6038      	str	r0, [r7, #0]
  
  // Output data to dashboard
  Serial.printf("-----------Acceleration---------------\n");
   d42ac:	f000 fc82 	bl	d4bb4 <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d42b0:	4a1d      	ldr	r2, [pc, #116]	; (d4328 <loop+0x1e0>)
   d42b2:	2100      	movs	r1, #0
   d42b4:	f000 fe25 	bl	d4f02 <_ZN5Print11printf_implEbPKcz>
  Serial.printf("Acceleration in X-Axis: %0.2f \n", xG);
   d42b8:	f000 fc7c 	bl	d4bb4 <_Z16_fetch_usbserialv>
   d42bc:	ed96 0a00 	vldr	s0, [r6]
   d42c0:	491a      	ldr	r1, [pc, #104]	; (d432c <loop+0x1e4>)
   d42c2:	f7ff ff31 	bl	d4128 <_ZN5Print6printfIIfEEEjPKcDpT_>
  Serial.printf("Acceleration in Y-Axis: %0.2f \n", yG);
   d42c6:	f000 fc75 	bl	d4bb4 <_Z16_fetch_usbserialv>
   d42ca:	ed95 0a00 	vldr	s0, [r5]
   d42ce:	4918      	ldr	r1, [pc, #96]	; (d4330 <loop+0x1e8>)
   d42d0:	f7ff ff2a 	bl	d4128 <_ZN5Print6printfIIfEEEjPKcDpT_>
  Serial.printf("Acceleration in Z-Axis: %0.2f \n", zG);
   d42d4:	f000 fc6e 	bl	d4bb4 <_Z16_fetch_usbserialv>
   d42d8:	ed94 0a00 	vldr	s0, [r4]
   d42dc:	4915      	ldr	r1, [pc, #84]	; (d4334 <loop+0x1ec>)
   d42de:	f7ff ff23 	bl	d4128 <_ZN5Print6printfIIfEEEjPKcDpT_>
  Serial.printf("Total Acceleration: %0.2f \n", tG);
   d42e2:	f000 fc67 	bl	d4bb4 <_Z16_fetch_usbserialv>
   d42e6:	ed97 0a00 	vldr	s0, [r7]
   d42ea:	4913      	ldr	r1, [pc, #76]	; (d4338 <loop+0x1f0>)
   d42ec:	f7ff ff1c 	bl	d4128 <_ZN5Print6printfIIfEEEjPKcDpT_>
  delay(250);
   d42f0:	20fa      	movs	r0, #250	; 0xfa
   d42f2:	b003      	add	sp, #12
   d42f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Serial.printf("-----------Acceleration---------------\n");
  Serial.printf("Acceleration in X-Axis: %0.2f \n", xG);
  Serial.printf("Acceleration in Y-Axis: %0.2f \n", yG);
  Serial.printf("Acceleration in Z-Axis: %0.2f \n", zG);
  Serial.printf("Total Acceleration: %0.2f \n", tG);
  delay(250);
   d42f8:	f000 bcfd 	b.w	d4cf6 <delay>
   d42fc:	f3af 8000 	nop.w
   d4300:	00000000 	.word	0x00000000
   d4304:	40b48200 	.word	0x40b48200
   d4308:	2003e3c0 	.word	0x2003e3c0
   d430c:	2003e3c8 	.word	0x2003e3c8
   d4310:	2003e3d0 	.word	0x2003e3d0
   d4314:	2003e3bc 	.word	0x2003e3bc
   d4318:	2003e3cc 	.word	0x2003e3cc
   d431c:	2003e3b8 	.word	0x2003e3b8
   d4320:	2003e3d4 	.word	0x2003e3d4
   d4324:	2003e3d8 	.word	0x2003e3d8
   d4328:	000d615c 	.word	0x000d615c
   d432c:	000d6184 	.word	0x000d6184
   d4330:	000d61a4 	.word	0x000d61a4
   d4334:	000d61c4 	.word	0x000d61c4
   d4338:	000d61e4 	.word	0x000d61e4

000d433c <_GLOBAL__sub_I_data>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d433c:	f000 b900 	b.w	d4540 <HAL_Pin_Map>

000d4340 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4340:	b508      	push	{r3, lr}
   d4342:	4b02      	ldr	r3, [pc, #8]	; (d434c <HAL_USB_USART_Init+0xc>)
   d4344:	681b      	ldr	r3, [r3, #0]
   d4346:	681b      	ldr	r3, [r3, #0]
   d4348:	9301      	str	r3, [sp, #4]
   d434a:	bd08      	pop	{r3, pc}
   d434c:	0003024c 	.word	0x0003024c

000d4350 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4350:	b508      	push	{r3, lr}
   d4352:	4b02      	ldr	r3, [pc, #8]	; (d435c <HAL_USB_USART_Begin+0xc>)
   d4354:	681b      	ldr	r3, [r3, #0]
   d4356:	685b      	ldr	r3, [r3, #4]
   d4358:	9301      	str	r3, [sp, #4]
   d435a:	bd08      	pop	{r3, pc}
   d435c:	0003024c 	.word	0x0003024c

000d4360 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4360:	b508      	push	{r3, lr}
   d4362:	4b02      	ldr	r3, [pc, #8]	; (d436c <HAL_USB_USART_Available_Data+0xc>)
   d4364:	681b      	ldr	r3, [r3, #0]
   d4366:	691b      	ldr	r3, [r3, #16]
   d4368:	9301      	str	r3, [sp, #4]
   d436a:	bd08      	pop	{r3, pc}
   d436c:	0003024c 	.word	0x0003024c

000d4370 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4370:	b508      	push	{r3, lr}
   d4372:	4b02      	ldr	r3, [pc, #8]	; (d437c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4374:	681b      	ldr	r3, [r3, #0]
   d4376:	695b      	ldr	r3, [r3, #20]
   d4378:	9301      	str	r3, [sp, #4]
   d437a:	bd08      	pop	{r3, pc}
   d437c:	0003024c 	.word	0x0003024c

000d4380 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4380:	b508      	push	{r3, lr}
   d4382:	4b02      	ldr	r3, [pc, #8]	; (d438c <HAL_USB_USART_Receive_Data+0xc>)
   d4384:	681b      	ldr	r3, [r3, #0]
   d4386:	699b      	ldr	r3, [r3, #24]
   d4388:	9301      	str	r3, [sp, #4]
   d438a:	bd08      	pop	{r3, pc}
   d438c:	0003024c 	.word	0x0003024c

000d4390 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4390:	b508      	push	{r3, lr}
   d4392:	4b02      	ldr	r3, [pc, #8]	; (d439c <HAL_USB_USART_Send_Data+0xc>)
   d4394:	681b      	ldr	r3, [r3, #0]
   d4396:	69db      	ldr	r3, [r3, #28]
   d4398:	9301      	str	r3, [sp, #4]
   d439a:	bd08      	pop	{r3, pc}
   d439c:	0003024c 	.word	0x0003024c

000d43a0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d43a0:	b508      	push	{r3, lr}
   d43a2:	4b02      	ldr	r3, [pc, #8]	; (d43ac <HAL_USB_USART_Flush_Data+0xc>)
   d43a4:	681b      	ldr	r3, [r3, #0]
   d43a6:	6a1b      	ldr	r3, [r3, #32]
   d43a8:	9301      	str	r3, [sp, #4]
   d43aa:	bd08      	pop	{r3, pc}
   d43ac:	0003024c 	.word	0x0003024c

000d43b0 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d43b0:	b508      	push	{r3, lr}
   d43b2:	4b02      	ldr	r3, [pc, #8]	; (d43bc <HAL_I2C_Begin+0xc>)
   d43b4:	681b      	ldr	r3, [r3, #0]
   d43b6:	68db      	ldr	r3, [r3, #12]
   d43b8:	9301      	str	r3, [sp, #4]
   d43ba:	bd08      	pop	{r3, pc}
   d43bc:	00030228 	.word	0x00030228

000d43c0 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d43c0:	b508      	push	{r3, lr}
   d43c2:	4b02      	ldr	r3, [pc, #8]	; (d43cc <HAL_I2C_Begin_Transmission+0xc>)
   d43c4:	681b      	ldr	r3, [r3, #0]
   d43c6:	699b      	ldr	r3, [r3, #24]
   d43c8:	9301      	str	r3, [sp, #4]
   d43ca:	bd08      	pop	{r3, pc}
   d43cc:	00030228 	.word	0x00030228

000d43d0 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d43d0:	b508      	push	{r3, lr}
   d43d2:	4b02      	ldr	r3, [pc, #8]	; (d43dc <HAL_I2C_End_Transmission+0xc>)
   d43d4:	681b      	ldr	r3, [r3, #0]
   d43d6:	69db      	ldr	r3, [r3, #28]
   d43d8:	9301      	str	r3, [sp, #4]
   d43da:	bd08      	pop	{r3, pc}
   d43dc:	00030228 	.word	0x00030228

000d43e0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d43e0:	b508      	push	{r3, lr}
   d43e2:	4b02      	ldr	r3, [pc, #8]	; (d43ec <HAL_I2C_Write_Data+0xc>)
   d43e4:	681b      	ldr	r3, [r3, #0]
   d43e6:	6a1b      	ldr	r3, [r3, #32]
   d43e8:	9301      	str	r3, [sp, #4]
   d43ea:	bd08      	pop	{r3, pc}
   d43ec:	00030228 	.word	0x00030228

000d43f0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d43f0:	b508      	push	{r3, lr}
   d43f2:	4b02      	ldr	r3, [pc, #8]	; (d43fc <HAL_I2C_Available_Data+0xc>)
   d43f4:	681b      	ldr	r3, [r3, #0]
   d43f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d43f8:	9301      	str	r3, [sp, #4]
   d43fa:	bd08      	pop	{r3, pc}
   d43fc:	00030228 	.word	0x00030228

000d4400 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4400:	b508      	push	{r3, lr}
   d4402:	4b02      	ldr	r3, [pc, #8]	; (d440c <HAL_I2C_Read_Data+0xc>)
   d4404:	681b      	ldr	r3, [r3, #0]
   d4406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4408:	9301      	str	r3, [sp, #4]
   d440a:	bd08      	pop	{r3, pc}
   d440c:	00030228 	.word	0x00030228

000d4410 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4410:	b508      	push	{r3, lr}
   d4412:	4b02      	ldr	r3, [pc, #8]	; (d441c <HAL_I2C_Peek_Data+0xc>)
   d4414:	681b      	ldr	r3, [r3, #0]
   d4416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4418:	9301      	str	r3, [sp, #4]
   d441a:	bd08      	pop	{r3, pc}
   d441c:	00030228 	.word	0x00030228

000d4420 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4420:	b508      	push	{r3, lr}
   d4422:	4b02      	ldr	r3, [pc, #8]	; (d442c <HAL_I2C_Flush_Data+0xc>)
   d4424:	681b      	ldr	r3, [r3, #0]
   d4426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4428:	9301      	str	r3, [sp, #4]
   d442a:	bd08      	pop	{r3, pc}
   d442c:	00030228 	.word	0x00030228

000d4430 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4430:	b508      	push	{r3, lr}
   d4432:	4b02      	ldr	r3, [pc, #8]	; (d443c <HAL_I2C_Init+0xc>)
   d4434:	681b      	ldr	r3, [r3, #0]
   d4436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4438:	9301      	str	r3, [sp, #4]
   d443a:	bd08      	pop	{r3, pc}
   d443c:	00030228 	.word	0x00030228

000d4440 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d4440:	b508      	push	{r3, lr}
   d4442:	4b02      	ldr	r3, [pc, #8]	; (d444c <HAL_I2C_Request_Data_Ex+0xc>)
   d4444:	681b      	ldr	r3, [r3, #0]
   d4446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4448:	9301      	str	r3, [sp, #4]
   d444a:	bd08      	pop	{r3, pc}
   d444c:	00030228 	.word	0x00030228

000d4450 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4450:	b508      	push	{r3, lr}
   d4452:	4b02      	ldr	r3, [pc, #8]	; (d445c <HAL_USART_Init+0xc>)
   d4454:	681b      	ldr	r3, [r3, #0]
   d4456:	681b      	ldr	r3, [r3, #0]
   d4458:	9301      	str	r3, [sp, #4]
   d445a:	bd08      	pop	{r3, pc}
   d445c:	0003023c 	.word	0x0003023c

000d4460 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4460:	b508      	push	{r3, lr}
   d4462:	4b02      	ldr	r3, [pc, #8]	; (d446c <HAL_USART_Write_Data+0xc>)
   d4464:	681b      	ldr	r3, [r3, #0]
   d4466:	68db      	ldr	r3, [r3, #12]
   d4468:	9301      	str	r3, [sp, #4]
   d446a:	bd08      	pop	{r3, pc}
   d446c:	0003023c 	.word	0x0003023c

000d4470 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4470:	b508      	push	{r3, lr}
   d4472:	4b02      	ldr	r3, [pc, #8]	; (d447c <HAL_USART_Available_Data+0xc>)
   d4474:	681b      	ldr	r3, [r3, #0]
   d4476:	691b      	ldr	r3, [r3, #16]
   d4478:	9301      	str	r3, [sp, #4]
   d447a:	bd08      	pop	{r3, pc}
   d447c:	0003023c 	.word	0x0003023c

000d4480 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4480:	b508      	push	{r3, lr}
   d4482:	4b02      	ldr	r3, [pc, #8]	; (d448c <HAL_USART_Read_Data+0xc>)
   d4484:	681b      	ldr	r3, [r3, #0]
   d4486:	695b      	ldr	r3, [r3, #20]
   d4488:	9301      	str	r3, [sp, #4]
   d448a:	bd08      	pop	{r3, pc}
   d448c:	0003023c 	.word	0x0003023c

000d4490 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4490:	b508      	push	{r3, lr}
   d4492:	4b02      	ldr	r3, [pc, #8]	; (d449c <HAL_USART_Peek_Data+0xc>)
   d4494:	681b      	ldr	r3, [r3, #0]
   d4496:	699b      	ldr	r3, [r3, #24]
   d4498:	9301      	str	r3, [sp, #4]
   d449a:	bd08      	pop	{r3, pc}
   d449c:	0003023c 	.word	0x0003023c

000d44a0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d44a0:	b508      	push	{r3, lr}
   d44a2:	4b02      	ldr	r3, [pc, #8]	; (d44ac <HAL_USART_Flush_Data+0xc>)
   d44a4:	681b      	ldr	r3, [r3, #0]
   d44a6:	69db      	ldr	r3, [r3, #28]
   d44a8:	9301      	str	r3, [sp, #4]
   d44aa:	bd08      	pop	{r3, pc}
   d44ac:	0003023c 	.word	0x0003023c

000d44b0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d44b0:	b508      	push	{r3, lr}
   d44b2:	4b02      	ldr	r3, [pc, #8]	; (d44bc <HAL_USART_Available_Data_For_Write+0xc>)
   d44b4:	681b      	ldr	r3, [r3, #0]
   d44b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d44b8:	9301      	str	r3, [sp, #4]
   d44ba:	bd08      	pop	{r3, pc}
   d44bc:	0003023c 	.word	0x0003023c

000d44c0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d44c0:	b508      	push	{r3, lr}
   d44c2:	4b02      	ldr	r3, [pc, #8]	; (d44cc <inet_inet_ntop+0xc>)
   d44c4:	681b      	ldr	r3, [r3, #0]
   d44c6:	695b      	ldr	r3, [r3, #20]
   d44c8:	9301      	str	r3, [sp, #4]
   d44ca:	bd08      	pop	{r3, pc}
   d44cc:	00030264 	.word	0x00030264

000d44d0 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d44d0:	b508      	push	{r3, lr}
   d44d2:	4b02      	ldr	r3, [pc, #8]	; (d44dc <os_thread_is_current+0xc>)
   d44d4:	681b      	ldr	r3, [r3, #0]
   d44d6:	689b      	ldr	r3, [r3, #8]
   d44d8:	9301      	str	r3, [sp, #4]
   d44da:	bd08      	pop	{r3, pc}
   d44dc:	00030248 	.word	0x00030248

000d44e0 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d44e0:	b508      	push	{r3, lr}
   d44e2:	4b02      	ldr	r3, [pc, #8]	; (d44ec <os_thread_join+0xc>)
   d44e4:	681b      	ldr	r3, [r3, #0]
   d44e6:	691b      	ldr	r3, [r3, #16]
   d44e8:	9301      	str	r3, [sp, #4]
   d44ea:	bd08      	pop	{r3, pc}
   d44ec:	00030248 	.word	0x00030248

000d44f0 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d44f0:	b508      	push	{r3, lr}
   d44f2:	4b02      	ldr	r3, [pc, #8]	; (d44fc <os_thread_cleanup+0xc>)
   d44f4:	681b      	ldr	r3, [r3, #0]
   d44f6:	695b      	ldr	r3, [r3, #20]
   d44f8:	9301      	str	r3, [sp, #4]
   d44fa:	bd08      	pop	{r3, pc}
   d44fc:	00030248 	.word	0x00030248

000d4500 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4500:	b508      	push	{r3, lr}
   d4502:	4b02      	ldr	r3, [pc, #8]	; (d450c <os_mutex_recursive_create+0xc>)
   d4504:	681b      	ldr	r3, [r3, #0]
   d4506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4508:	9301      	str	r3, [sp, #4]
   d450a:	bd08      	pop	{r3, pc}
   d450c:	00030248 	.word	0x00030248

000d4510 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4510:	b508      	push	{r3, lr}
   d4512:	4b02      	ldr	r3, [pc, #8]	; (d451c <os_mutex_recursive_destroy+0xc>)
   d4514:	681b      	ldr	r3, [r3, #0]
   d4516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4518:	9301      	str	r3, [sp, #4]
   d451a:	bd08      	pop	{r3, pc}
   d451c:	00030248 	.word	0x00030248

000d4520 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4520:	b508      	push	{r3, lr}
   d4522:	4b02      	ldr	r3, [pc, #8]	; (d452c <HAL_RNG_GetRandomNumber+0xc>)
   d4524:	681b      	ldr	r3, [r3, #0]
   d4526:	685b      	ldr	r3, [r3, #4]
   d4528:	9301      	str	r3, [sp, #4]
   d452a:	bd08      	pop	{r3, pc}
   d452c:	00030218 	.word	0x00030218

000d4530 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4530:	b508      	push	{r3, lr}
   d4532:	4b02      	ldr	r3, [pc, #8]	; (d453c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4534:	681b      	ldr	r3, [r3, #0]
   d4536:	695b      	ldr	r3, [r3, #20]
   d4538:	9301      	str	r3, [sp, #4]
   d453a:	bd08      	pop	{r3, pc}
   d453c:	00030218 	.word	0x00030218

000d4540 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4540:	b508      	push	{r3, lr}
   d4542:	4b02      	ldr	r3, [pc, #8]	; (d454c <HAL_Pin_Map+0xc>)
   d4544:	681b      	ldr	r3, [r3, #0]
   d4546:	681b      	ldr	r3, [r3, #0]
   d4548:	9301      	str	r3, [sp, #4]
   d454a:	bd08      	pop	{r3, pc}
   d454c:	0003022c 	.word	0x0003022c

000d4550 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4550:	b508      	push	{r3, lr}
   d4552:	4b02      	ldr	r3, [pc, #8]	; (d455c <netdb_freeaddrinfo+0xc>)
   d4554:	681b      	ldr	r3, [r3, #0]
   d4556:	689b      	ldr	r3, [r3, #8]
   d4558:	9301      	str	r3, [sp, #4]
   d455a:	bd08      	pop	{r3, pc}
   d455c:	00030268 	.word	0x00030268

000d4560 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4560:	b508      	push	{r3, lr}
   d4562:	4b02      	ldr	r3, [pc, #8]	; (d456c <netdb_getaddrinfo+0xc>)
   d4564:	681b      	ldr	r3, [r3, #0]
   d4566:	68db      	ldr	r3, [r3, #12]
   d4568:	9301      	str	r3, [sp, #4]
   d456a:	bd08      	pop	{r3, pc}
   d456c:	00030268 	.word	0x00030268

000d4570 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4570:	b508      	push	{r3, lr}
   d4572:	4b02      	ldr	r3, [pc, #8]	; (d457c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4574:	681b      	ldr	r3, [r3, #0]
   d4576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4578:	9301      	str	r3, [sp, #4]
   d457a:	bd08      	pop	{r3, pc}
   d457c:	00030244 	.word	0x00030244

000d4580 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4580:	b508      	push	{r3, lr}
   d4582:	4b02      	ldr	r3, [pc, #8]	; (d458c <network_connect+0xc>)
   d4584:	681b      	ldr	r3, [r3, #0]
   d4586:	685b      	ldr	r3, [r3, #4]
   d4588:	9301      	str	r3, [sp, #4]
   d458a:	bd08      	pop	{r3, pc}
   d458c:	00030240 	.word	0x00030240

000d4590 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4590:	b508      	push	{r3, lr}
   d4592:	4b02      	ldr	r3, [pc, #8]	; (d459c <network_connecting+0xc>)
   d4594:	681b      	ldr	r3, [r3, #0]
   d4596:	689b      	ldr	r3, [r3, #8]
   d4598:	9301      	str	r3, [sp, #4]
   d459a:	bd08      	pop	{r3, pc}
   d459c:	00030240 	.word	0x00030240

000d45a0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d45a0:	b508      	push	{r3, lr}
   d45a2:	4b02      	ldr	r3, [pc, #8]	; (d45ac <network_disconnect+0xc>)
   d45a4:	681b      	ldr	r3, [r3, #0]
   d45a6:	68db      	ldr	r3, [r3, #12]
   d45a8:	9301      	str	r3, [sp, #4]
   d45aa:	bd08      	pop	{r3, pc}
   d45ac:	00030240 	.word	0x00030240

000d45b0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d45b0:	b508      	push	{r3, lr}
   d45b2:	4b02      	ldr	r3, [pc, #8]	; (d45bc <network_ready+0xc>)
   d45b4:	681b      	ldr	r3, [r3, #0]
   d45b6:	691b      	ldr	r3, [r3, #16]
   d45b8:	9301      	str	r3, [sp, #4]
   d45ba:	bd08      	pop	{r3, pc}
   d45bc:	00030240 	.word	0x00030240

000d45c0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d45c0:	b508      	push	{r3, lr}
   d45c2:	4b02      	ldr	r3, [pc, #8]	; (d45cc <network_on+0xc>)
   d45c4:	681b      	ldr	r3, [r3, #0]
   d45c6:	695b      	ldr	r3, [r3, #20]
   d45c8:	9301      	str	r3, [sp, #4]
   d45ca:	bd08      	pop	{r3, pc}
   d45cc:	00030240 	.word	0x00030240

000d45d0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d45d0:	b508      	push	{r3, lr}
   d45d2:	4b02      	ldr	r3, [pc, #8]	; (d45dc <network_off+0xc>)
   d45d4:	681b      	ldr	r3, [r3, #0]
   d45d6:	699b      	ldr	r3, [r3, #24]
   d45d8:	9301      	str	r3, [sp, #4]
   d45da:	bd08      	pop	{r3, pc}
   d45dc:	00030240 	.word	0x00030240

000d45e0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d45e0:	b508      	push	{r3, lr}
   d45e2:	4b02      	ldr	r3, [pc, #8]	; (d45ec <network_listen+0xc>)
   d45e4:	681b      	ldr	r3, [r3, #0]
   d45e6:	69db      	ldr	r3, [r3, #28]
   d45e8:	9301      	str	r3, [sp, #4]
   d45ea:	bd08      	pop	{r3, pc}
   d45ec:	00030240 	.word	0x00030240

000d45f0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d45f0:	b508      	push	{r3, lr}
   d45f2:	4b02      	ldr	r3, [pc, #8]	; (d45fc <network_listening+0xc>)
   d45f4:	681b      	ldr	r3, [r3, #0]
   d45f6:	6a1b      	ldr	r3, [r3, #32]
   d45f8:	9301      	str	r3, [sp, #4]
   d45fa:	bd08      	pop	{r3, pc}
   d45fc:	00030240 	.word	0x00030240

000d4600 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4600:	b508      	push	{r3, lr}
   d4602:	4b02      	ldr	r3, [pc, #8]	; (d460c <network_set_listen_timeout+0xc>)
   d4604:	681b      	ldr	r3, [r3, #0]
   d4606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4608:	9301      	str	r3, [sp, #4]
   d460a:	bd08      	pop	{r3, pc}
   d460c:	00030240 	.word	0x00030240

000d4610 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4610:	b508      	push	{r3, lr}
   d4612:	4b02      	ldr	r3, [pc, #8]	; (d461c <network_get_listen_timeout+0xc>)
   d4614:	681b      	ldr	r3, [r3, #0]
   d4616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4618:	9301      	str	r3, [sp, #4]
   d461a:	bd08      	pop	{r3, pc}
   d461c:	00030240 	.word	0x00030240

000d4620 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4620:	b508      	push	{r3, lr}
   d4622:	4b02      	ldr	r3, [pc, #8]	; (d462c <set_system_mode+0xc>)
   d4624:	681b      	ldr	r3, [r3, #0]
   d4626:	685b      	ldr	r3, [r3, #4]
   d4628:	9301      	str	r3, [sp, #4]
   d462a:	bd08      	pop	{r3, pc}
   d462c:	00030220 	.word	0x00030220

000d4630 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4630:	b508      	push	{r3, lr}
   d4632:	4b02      	ldr	r3, [pc, #8]	; (d463c <system_delay_ms+0xc>)
   d4634:	681b      	ldr	r3, [r3, #0]
   d4636:	695b      	ldr	r3, [r3, #20]
   d4638:	9301      	str	r3, [sp, #4]
   d463a:	bd08      	pop	{r3, pc}
   d463c:	00030220 	.word	0x00030220

000d4640 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4640:	b508      	push	{r3, lr}
   d4642:	4b03      	ldr	r3, [pc, #12]	; (d4650 <system_ctrl_set_app_request_handler+0x10>)
   d4644:	681b      	ldr	r3, [r3, #0]
   d4646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d464a:	9301      	str	r3, [sp, #4]
   d464c:	bd08      	pop	{r3, pc}
   d464e:	0000      	.short	0x0000
   d4650:	00030220 	.word	0x00030220

000d4654 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b03      	ldr	r3, [pc, #12]	; (d4664 <system_ctrl_set_result+0x10>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d465e:	9301      	str	r3, [sp, #4]
   d4660:	bd08      	pop	{r3, pc}
   d4662:	0000      	.short	0x0000
   d4664:	00030220 	.word	0x00030220

000d4668 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4668:	b508      	push	{r3, lr}
   d466a:	4b02      	ldr	r3, [pc, #8]	; (d4674 <malloc+0xc>)
   d466c:	681b      	ldr	r3, [r3, #0]
   d466e:	681b      	ldr	r3, [r3, #0]
   d4670:	9301      	str	r3, [sp, #4]
   d4672:	bd08      	pop	{r3, pc}
   d4674:	0003021c 	.word	0x0003021c

000d4678 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4678:	b508      	push	{r3, lr}
   d467a:	4b02      	ldr	r3, [pc, #8]	; (d4684 <free+0xc>)
   d467c:	681b      	ldr	r3, [r3, #0]
   d467e:	685b      	ldr	r3, [r3, #4]
   d4680:	9301      	str	r3, [sp, #4]
   d4682:	bd08      	pop	{r3, pc}
   d4684:	0003021c 	.word	0x0003021c

000d4688 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4688:	b508      	push	{r3, lr}
   d468a:	4b02      	ldr	r3, [pc, #8]	; (d4694 <vsnprintf+0xc>)
   d468c:	681b      	ldr	r3, [r3, #0]
   d468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4690:	9301      	str	r3, [sp, #4]
   d4692:	bd08      	pop	{r3, pc}
   d4694:	0003021c 	.word	0x0003021c

000d4698 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d4698:	b508      	push	{r3, lr}
   d469a:	4b02      	ldr	r3, [pc, #8]	; (d46a4 <__errno+0xc>)
   d469c:	681b      	ldr	r3, [r3, #0]
   d469e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d46a0:	9301      	str	r3, [sp, #4]
   d46a2:	bd08      	pop	{r3, pc}
   d46a4:	0003021c 	.word	0x0003021c

000d46a8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d46a8:	2300      	movs	r3, #0
   d46aa:	461a      	mov	r2, r3
   d46ac:	6840      	ldr	r0, [r0, #4]
   d46ae:	f7ff bf67 	b.w	d4580 <network_connect>

000d46b2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d46b2:	2200      	movs	r2, #0
   d46b4:	2102      	movs	r1, #2
   d46b6:	6840      	ldr	r0, [r0, #4]
   d46b8:	f7ff bf72 	b.w	d45a0 <network_disconnect>

000d46bc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d46bc:	2200      	movs	r2, #0
   d46be:	4611      	mov	r1, r2
   d46c0:	6840      	ldr	r0, [r0, #4]
   d46c2:	f7ff bf65 	b.w	d4590 <network_connecting>

000d46c6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d46c6:	2200      	movs	r2, #0
   d46c8:	4611      	mov	r1, r2
   d46ca:	6840      	ldr	r0, [r0, #4]
   d46cc:	f7ff bf70 	b.w	d45b0 <network_ready>

000d46d0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d46d0:	2300      	movs	r3, #0
   d46d2:	461a      	mov	r2, r3
   d46d4:	4619      	mov	r1, r3
   d46d6:	6840      	ldr	r0, [r0, #4]
   d46d8:	f7ff bf72 	b.w	d45c0 <network_on>

000d46dc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d46dc:	2300      	movs	r3, #0
   d46de:	461a      	mov	r2, r3
   d46e0:	4619      	mov	r1, r3
   d46e2:	6840      	ldr	r0, [r0, #4]
   d46e4:	f7ff bf74 	b.w	d45d0 <network_off>

000d46e8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d46e8:	2200      	movs	r2, #0
   d46ea:	f081 0101 	eor.w	r1, r1, #1
   d46ee:	6840      	ldr	r0, [r0, #4]
   d46f0:	f7ff bf76 	b.w	d45e0 <network_listen>

000d46f4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d46f4:	2200      	movs	r2, #0
   d46f6:	6840      	ldr	r0, [r0, #4]
   d46f8:	f7ff bf82 	b.w	d4600 <network_set_listen_timeout>

000d46fc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d46fc:	2200      	movs	r2, #0
   d46fe:	4611      	mov	r1, r2
   d4700:	6840      	ldr	r0, [r0, #4]
   d4702:	f7ff bf85 	b.w	d4610 <network_get_listen_timeout>

000d4706 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4706:	2200      	movs	r2, #0
   d4708:	4611      	mov	r1, r2
   d470a:	6840      	ldr	r0, [r0, #4]
   d470c:	f7ff bf70 	b.w	d45f0 <network_listening>

000d4710 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4714:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d4716:	b095      	sub	sp, #84	; 0x54
   d4718:	4616      	mov	r6, r2
   d471a:	460d      	mov	r5, r1
   d471c:	4607      	mov	r7, r0
    IPAddress addr;
   d471e:	f000 faa9 	bl	d4c74 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d4722:	4621      	mov	r1, r4
   d4724:	2220      	movs	r2, #32
   d4726:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4728:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d472a:	f001 fcd4 	bl	d60d6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d472e:	2340      	movs	r3, #64	; 0x40
   d4730:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4732:	4621      	mov	r1, r4
   d4734:	466b      	mov	r3, sp
   d4736:	aa0c      	add	r2, sp, #48	; 0x30
   d4738:	4630      	mov	r0, r6
   d473a:	f7ff ff11 	bl	d4560 <netdb_getaddrinfo>
    if (!r) {
   d473e:	4604      	mov	r4, r0
   d4740:	2800      	cmp	r0, #0
   d4742:	d144      	bne.n	d47ce <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4744:	4602      	mov	r2, r0
   d4746:	2101      	movs	r1, #1
   d4748:	6868      	ldr	r0, [r5, #4]
   d474a:	f7ff ff31 	bl	d45b0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d474e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4750:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4752:	4622      	mov	r2, r4
   d4754:	6868      	ldr	r0, [r5, #4]
   d4756:	f7ff ff2b 	bl	d45b0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d475a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d475c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d475e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4760:	2e00      	cmp	r6, #0
   d4762:	d034      	beq.n	d47ce <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d4764:	2900      	cmp	r1, #0
   d4766:	d132      	bne.n	d47ce <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4768:	6873      	ldr	r3, [r6, #4]
   d476a:	2b02      	cmp	r3, #2
   d476c:	d002      	beq.n	d4774 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d476e:	2b0a      	cmp	r3, #10
   d4770:	d009      	beq.n	d4786 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d4772:	e02a      	b.n	d47ca <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d4774:	f1b8 0f00 	cmp.w	r8, #0
   d4778:	d027      	beq.n	d47ca <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d477a:	6971      	ldr	r1, [r6, #20]
   d477c:	4638      	mov	r0, r7
   d477e:	3104      	adds	r1, #4
   d4780:	f000 faa5 	bl	d4cce <_ZN9IPAddressaSEPKh>
   d4784:	e020      	b.n	d47c8 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4786:	f1b9 0f00 	cmp.w	r9, #0
   d478a:	d01e      	beq.n	d47ca <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d478c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d478e:	2211      	movs	r2, #17
   d4790:	a801      	add	r0, sp, #4
   d4792:	f001 fca0 	bl	d60d6 <memset>
                    a.v = 6;
   d4796:	2306      	movs	r3, #6
   d4798:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d479c:	ad01      	add	r5, sp, #4
   d479e:	f104 0308 	add.w	r3, r4, #8
   d47a2:	3418      	adds	r4, #24
   d47a4:	6818      	ldr	r0, [r3, #0]
   d47a6:	6859      	ldr	r1, [r3, #4]
   d47a8:	462a      	mov	r2, r5
   d47aa:	c203      	stmia	r2!, {r0, r1}
   d47ac:	3308      	adds	r3, #8
   d47ae:	42a3      	cmp	r3, r4
   d47b0:	4615      	mov	r5, r2
   d47b2:	d1f7      	bne.n	d47a4 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d47b4:	a901      	add	r1, sp, #4
   d47b6:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d47b8:	ad07      	add	r5, sp, #28
   d47ba:	f000 fa69 	bl	d4c90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d47be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d47c0:	1d3c      	adds	r4, r7, #4
   d47c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d47c4:	682b      	ldr	r3, [r5, #0]
   d47c6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d47c8:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d47ca:	69f6      	ldr	r6, [r6, #28]
   d47cc:	e7c8      	b.n	d4760 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d47ce:	9800      	ldr	r0, [sp, #0]
   d47d0:	f7ff febe 	bl	d4550 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d47d4:	4638      	mov	r0, r7
   d47d6:	b015      	add	sp, #84	; 0x54
   d47d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d47dc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d47dc:	4b02      	ldr	r3, [pc, #8]	; (d47e8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d47de:	4a03      	ldr	r2, [pc, #12]	; (d47ec <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d47e0:	601a      	str	r2, [r3, #0]
   d47e2:	2200      	movs	r2, #0
   d47e4:	605a      	str	r2, [r3, #4]
   d47e6:	4770      	bx	lr
   d47e8:	2003e3dc 	.word	0x2003e3dc
   d47ec:	000d6208 	.word	0x000d6208

000d47f0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d47f0:	2200      	movs	r2, #0
   d47f2:	4611      	mov	r1, r2
   d47f4:	6840      	ldr	r0, [r0, #4]
   d47f6:	f7ff bedb 	b.w	d45b0 <network_ready>

000d47fa <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d47fa:	2200      	movs	r2, #0
   d47fc:	4611      	mov	r1, r2
   d47fe:	6840      	ldr	r0, [r0, #4]
   d4800:	f7ff bef6 	b.w	d45f0 <network_listening>

000d4804 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4804:	2200      	movs	r2, #0
   d4806:	4611      	mov	r1, r2
   d4808:	6840      	ldr	r0, [r0, #4]
   d480a:	f7ff bf01 	b.w	d4610 <network_get_listen_timeout>

000d480e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d480e:	2200      	movs	r2, #0
   d4810:	6840      	ldr	r0, [r0, #4]
   d4812:	f7ff bef5 	b.w	d4600 <network_set_listen_timeout>

000d4816 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4816:	2200      	movs	r2, #0
   d4818:	f081 0101 	eor.w	r1, r1, #1
   d481c:	6840      	ldr	r0, [r0, #4]
   d481e:	f7ff bedf 	b.w	d45e0 <network_listen>

000d4822 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d4822:	2300      	movs	r3, #0
   d4824:	461a      	mov	r2, r3
   d4826:	4619      	mov	r1, r3
   d4828:	6840      	ldr	r0, [r0, #4]
   d482a:	f7ff bed1 	b.w	d45d0 <network_off>

000d482e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d482e:	2300      	movs	r3, #0
   d4830:	461a      	mov	r2, r3
   d4832:	4619      	mov	r1, r3
   d4834:	6840      	ldr	r0, [r0, #4]
   d4836:	f7ff bec3 	b.w	d45c0 <network_on>

000d483a <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d483a:	2200      	movs	r2, #0
   d483c:	4611      	mov	r1, r2
   d483e:	6840      	ldr	r0, [r0, #4]
   d4840:	f7ff bea6 	b.w	d4590 <network_connecting>

000d4844 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4844:	2200      	movs	r2, #0
   d4846:	2102      	movs	r1, #2
   d4848:	6840      	ldr	r0, [r0, #4]
   d484a:	f7ff bea9 	b.w	d45a0 <network_disconnect>

000d484e <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d484e:	2300      	movs	r3, #0
   d4850:	461a      	mov	r2, r3
   d4852:	6840      	ldr	r0, [r0, #4]
   d4854:	f7ff be94 	b.w	d4580 <network_connect>

000d4858 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d4858:	4b02      	ldr	r3, [pc, #8]	; (d4864 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d485a:	2204      	movs	r2, #4
   d485c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d485e:	4a02      	ldr	r2, [pc, #8]	; (d4868 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d4860:	601a      	str	r2, [r3, #0]
   d4862:	4770      	bx	lr
   d4864:	2003e3e4 	.word	0x2003e3e4
   d4868:	000d623c 	.word	0x000d623c

000d486c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d486c:	2200      	movs	r2, #0
   d486e:	4611      	mov	r1, r2
   d4870:	6840      	ldr	r0, [r0, #4]
   d4872:	f7ff bebd 	b.w	d45f0 <network_listening>

000d4876 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4876:	2200      	movs	r2, #0
   d4878:	4611      	mov	r1, r2
   d487a:	6840      	ldr	r0, [r0, #4]
   d487c:	f7ff bec8 	b.w	d4610 <network_get_listen_timeout>

000d4880 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4880:	2200      	movs	r2, #0
   d4882:	6840      	ldr	r0, [r0, #4]
   d4884:	f7ff bebc 	b.w	d4600 <network_set_listen_timeout>

000d4888 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4888:	2200      	movs	r2, #0
   d488a:	f081 0101 	eor.w	r1, r1, #1
   d488e:	6840      	ldr	r0, [r0, #4]
   d4890:	f7ff bea6 	b.w	d45e0 <network_listen>

000d4894 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d4894:	2300      	movs	r3, #0
   d4896:	461a      	mov	r2, r3
   d4898:	2101      	movs	r1, #1
   d489a:	6840      	ldr	r0, [r0, #4]
   d489c:	f7ff be98 	b.w	d45d0 <network_off>

000d48a0 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d48a0:	2300      	movs	r3, #0
   d48a2:	461a      	mov	r2, r3
   d48a4:	4619      	mov	r1, r3
   d48a6:	6840      	ldr	r0, [r0, #4]
   d48a8:	f7ff be8a 	b.w	d45c0 <network_on>

000d48ac <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d48ac:	2200      	movs	r2, #0
   d48ae:	4611      	mov	r1, r2
   d48b0:	6840      	ldr	r0, [r0, #4]
   d48b2:	f7ff be7d 	b.w	d45b0 <network_ready>

000d48b6 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d48b6:	2200      	movs	r2, #0
   d48b8:	4611      	mov	r1, r2
   d48ba:	6840      	ldr	r0, [r0, #4]
   d48bc:	f7ff be68 	b.w	d4590 <network_connecting>

000d48c0 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d48c0:	2200      	movs	r2, #0
   d48c2:	2102      	movs	r1, #2
   d48c4:	6840      	ldr	r0, [r0, #4]
   d48c6:	f7ff be6b 	b.w	d45a0 <network_disconnect>

000d48ca <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d48ca:	2300      	movs	r3, #0
   d48cc:	461a      	mov	r2, r3
   d48ce:	6840      	ldr	r0, [r0, #4]
   d48d0:	f7ff be56 	b.w	d4580 <network_connect>

000d48d4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d48d4:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d48d6:	4605      	mov	r5, r0
   d48d8:	b188      	cbz	r0, d48fe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d48da:	6804      	ldr	r4, [r0, #0]
   d48dc:	b14c      	cbz	r4, d48f2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d48de:	68a3      	ldr	r3, [r4, #8]
   d48e0:	b11b      	cbz	r3, d48ea <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d48e2:	2203      	movs	r2, #3
   d48e4:	4621      	mov	r1, r4
   d48e6:	4620      	mov	r0, r4
   d48e8:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d48ea:	2110      	movs	r1, #16
   d48ec:	4620      	mov	r0, r4
   d48ee:	f000 fc93 	bl	d5218 <_ZdlPvj>
   d48f2:	4628      	mov	r0, r5
   d48f4:	2114      	movs	r1, #20
      }
   d48f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d48fa:	f000 bc8d 	b.w	d5218 <_ZdlPvj>
   d48fe:	bd38      	pop	{r3, r4, r5, pc}

000d4900 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4900:	b110      	cbz	r0, d4908 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d4902:	6803      	ldr	r3, [r0, #0]
   d4904:	685b      	ldr	r3, [r3, #4]
   d4906:	4718      	bx	r3
   d4908:	4770      	bx	lr

000d490a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d490a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d490c:	6803      	ldr	r3, [r0, #0]
   d490e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4910:	b1bb      	cbz	r3, d4942 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4912:	6858      	ldr	r0, [r3, #4]
   d4914:	f7ff fddc 	bl	d44d0 <os_thread_is_current>
   d4918:	b978      	cbnz	r0, d493a <_ZN6ThreadD1Ev+0x30>
   d491a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d491c:	7c5a      	ldrb	r2, [r3, #17]
   d491e:	b912      	cbnz	r2, d4926 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4920:	6858      	ldr	r0, [r3, #4]
   d4922:	f7ff fddd 	bl	d44e0 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4926:	6823      	ldr	r3, [r4, #0]
   d4928:	6858      	ldr	r0, [r3, #4]
   d492a:	f7ff fde1 	bl	d44f0 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d492e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4930:	2300      	movs	r3, #0
   d4932:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4934:	b128      	cbz	r0, d4942 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4936:	f7ff ffcd 	bl	d48d4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d493a:	6820      	ldr	r0, [r4, #0]
   d493c:	b108      	cbz	r0, d4942 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d493e:	f7ff ffc9 	bl	d48d4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d4942:	4620      	mov	r0, r4
   d4944:	bd10      	pop	{r4, pc}

000d4946 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d4946:	b538      	push	{r3, r4, r5, lr}
   d4948:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d494a:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d494e:	b108      	cbz	r0, d4954 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4950:	f7ff fba5 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4954:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d4958:	b108      	cbz	r0, d495e <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d495a:	f7ff fdd9 	bl	d4510 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d495e:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d4962:	b135      	cbz	r5, d4972 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4964:	4628      	mov	r0, r5
   d4966:	f7ff ffd0 	bl	d490a <_ZN6ThreadD1Ev>
   d496a:	2104      	movs	r1, #4
   d496c:	4628      	mov	r0, r5
   d496e:	f000 fc53 	bl	d5218 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4972:	6820      	ldr	r0, [r4, #0]
   d4974:	b108      	cbz	r0, d497a <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d4976:	f7ff ffc3 	bl	d4900 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d497a:	4620      	mov	r0, r4
   d497c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4980 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4980:	b510      	push	{r4, lr}
   d4982:	4b04      	ldr	r3, [pc, #16]	; (d4994 <_ZN5spark9MeshClassD1Ev+0x14>)
   d4984:	4604      	mov	r4, r0
   d4986:	f840 3b08 	str.w	r3, [r0], #8
   d498a:	f7ff ffdc 	bl	d4946 <_ZN5spark11MeshPublishD1Ev>
   d498e:	4620      	mov	r0, r4
   d4990:	bd10      	pop	{r4, pc}
   d4992:	bf00      	nop
   d4994:	000d6270 	.word	0x000d6270

000d4998 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4998:	b538      	push	{r3, r4, r5, lr}
   d499a:	4c0e      	ldr	r4, [pc, #56]	; (d49d4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d499c:	4b0e      	ldr	r3, [pc, #56]	; (d49d8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d499e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d49a0:	2500      	movs	r5, #0
   d49a2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d49a4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d49a8:	6063      	str	r3, [r4, #4]
   d49aa:	60a5      	str	r5, [r4, #8]
   d49ac:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d49b0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d49b4:	f7ff fda4 	bl	d4500 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d49b8:	4b08      	ldr	r3, [pc, #32]	; (d49dc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d49ba:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d49be:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d49c2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d49c4:	4620      	mov	r0, r4
   d49c6:	4a06      	ldr	r2, [pc, #24]	; (d49e0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d49c8:	4906      	ldr	r1, [pc, #24]	; (d49e4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d49ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d49ce:	f000 bc15 	b.w	d51fc <__aeabi_atexit>
   d49d2:	bf00      	nop
   d49d4:	2003e3ec 	.word	0x2003e3ec
   d49d8:	000d6208 	.word	0x000d6208
   d49dc:	000d6270 	.word	0x000d6270
   d49e0:	2003e3b4 	.word	0x2003e3b4
   d49e4:	000d4981 	.word	0x000d4981

000d49e8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d49e8:	4770      	bx	lr

000d49ea <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d49ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d49ec:	4606      	mov	r6, r0
   d49ee:	4615      	mov	r5, r2
   d49f0:	460c      	mov	r4, r1
   d49f2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d49f4:	42bc      	cmp	r4, r7
   d49f6:	d006      	beq.n	d4a06 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d49f8:	6833      	ldr	r3, [r6, #0]
   d49fa:	f814 1b01 	ldrb.w	r1, [r4], #1
   d49fe:	689b      	ldr	r3, [r3, #8]
   d4a00:	4630      	mov	r0, r6
   d4a02:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4a04:	e7f6      	b.n	d49f4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4a06:	4628      	mov	r0, r5
   d4a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4a0a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4a0a:	2200      	movs	r2, #0
   d4a0c:	7c00      	ldrb	r0, [r0, #16]
   d4a0e:	f7ff bce7 	b.w	d43e0 <HAL_I2C_Write_Data>

000d4a12 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4a12:	2100      	movs	r1, #0
   d4a14:	7c00      	ldrb	r0, [r0, #16]
   d4a16:	f7ff bceb 	b.w	d43f0 <HAL_I2C_Available_Data>

000d4a1a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4a1a:	2100      	movs	r1, #0
   d4a1c:	7c00      	ldrb	r0, [r0, #16]
   d4a1e:	f7ff bcef 	b.w	d4400 <HAL_I2C_Read_Data>

000d4a22 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4a22:	2100      	movs	r1, #0
   d4a24:	7c00      	ldrb	r0, [r0, #16]
   d4a26:	f7ff bcf3 	b.w	d4410 <HAL_I2C_Peek_Data>

000d4a2a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4a2a:	2100      	movs	r1, #0
   d4a2c:	7c00      	ldrb	r0, [r0, #16]
   d4a2e:	f7ff bcf7 	b.w	d4420 <HAL_I2C_Flush_Data>

000d4a32 <_ZN7TwoWireD0Ev>:
   d4a32:	b510      	push	{r4, lr}
   d4a34:	2114      	movs	r1, #20
   d4a36:	4604      	mov	r4, r0
   d4a38:	f000 fbee 	bl	d5218 <_ZdlPvj>
   d4a3c:	4620      	mov	r0, r4
   d4a3e:	bd10      	pop	{r4, pc}

000d4a40 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4a40:	b510      	push	{r4, lr}
   d4a42:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4a44:	2300      	movs	r3, #0
   d4a46:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4a48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4a4c:	60a3      	str	r3, [r4, #8]
   d4a4e:	4b04      	ldr	r3, [pc, #16]	; (d4a60 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d4a50:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4a52:	4608      	mov	r0, r1
   d4a54:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d4a56:	4611      	mov	r1, r2
   d4a58:	f7ff fcea 	bl	d4430 <HAL_I2C_Init>
}
   d4a5c:	4620      	mov	r0, r4
   d4a5e:	bd10      	pop	{r4, pc}
   d4a60:	000d62a4 	.word	0x000d62a4

000d4a64 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d4a64:	2300      	movs	r3, #0
   d4a66:	461a      	mov	r2, r3
   d4a68:	4619      	mov	r1, r3
   d4a6a:	7c00      	ldrb	r0, [r0, #16]
   d4a6c:	f7ff bca0 	b.w	d43b0 <HAL_I2C_Begin>

000d4a70 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d4a70:	b570      	push	{r4, r5, r6, lr}
   d4a72:	460c      	mov	r4, r1
   d4a74:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d4a76:	2514      	movs	r5, #20
   d4a78:	4606      	mov	r6, r0
   d4a7a:	462a      	mov	r2, r5
   d4a7c:	2100      	movs	r1, #0
   d4a7e:	a801      	add	r0, sp, #4
   d4a80:	f001 fb29 	bl	d60d6 <memset>
   d4a84:	7823      	ldrb	r3, [r4, #0]
   d4a86:	f88d 3008 	strb.w	r3, [sp, #8]
   d4a8a:	6863      	ldr	r3, [r4, #4]
   d4a8c:	9303      	str	r3, [sp, #12]
   d4a8e:	68e3      	ldr	r3, [r4, #12]
   d4a90:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d4a92:	2200      	movs	r2, #0
   d4a94:	7a23      	ldrb	r3, [r4, #8]
   d4a96:	7c30      	ldrb	r0, [r6, #16]
   d4a98:	f8ad 5004 	strh.w	r5, [sp, #4]
   d4a9c:	a901      	add	r1, sp, #4
   d4a9e:	9305      	str	r3, [sp, #20]
   d4aa0:	f7ff fcce 	bl	d4440 <HAL_I2C_Request_Data_Ex>
}
   d4aa4:	b006      	add	sp, #24
   d4aa6:	bd70      	pop	{r4, r5, r6, pc}

000d4aa8 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d4aa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d4aaa:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d4aac:	f88d 1000 	strb.w	r1, [sp]
   d4ab0:	f04f 0164 	mov.w	r1, #100	; 0x64
   d4ab4:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d4ab6:	bf18      	it	ne
   d4ab8:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d4aba:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d4abc:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d4abe:	f88d 3008 	strb.w	r3, [sp, #8]
   d4ac2:	f7ff ffd5 	bl	d4a70 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d4ac6:	b005      	add	sp, #20
   d4ac8:	f85d fb04 	ldr.w	pc, [sp], #4

000d4acc <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d4acc:	2301      	movs	r3, #1
   d4ace:	f7ff bfeb 	b.w	d4aa8 <_ZN7TwoWire11requestFromEhjh>

000d4ad2 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d4ad2:	2200      	movs	r2, #0
   d4ad4:	7c00      	ldrb	r0, [r0, #16]
   d4ad6:	f7ff bc73 	b.w	d43c0 <HAL_I2C_Begin_Transmission>

000d4ada <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d4ada:	b2c9      	uxtb	r1, r1
   d4adc:	f7ff bff9 	b.w	d4ad2 <_ZN7TwoWire17beginTransmissionEh>

000d4ae0 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d4ae0:	2200      	movs	r2, #0
   d4ae2:	7c00      	ldrb	r0, [r0, #16]
   d4ae4:	f7ff bc74 	b.w	d43d0 <HAL_I2C_End_Transmission>

000d4ae8 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d4ae8:	2101      	movs	r1, #1
   d4aea:	f7ff bff9 	b.w	d4ae0 <_ZN7TwoWire15endTransmissionEh>

000d4aee <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4aee:	7441      	strb	r1, [r0, #17]
   d4af0:	4770      	bx	lr

000d4af2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4af2:	4770      	bx	lr

000d4af4 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4af4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4af6:	2100      	movs	r1, #0
   d4af8:	7c00      	ldrb	r0, [r0, #16]
   d4afa:	f7ff fc41 	bl	d4380 <HAL_USB_USART_Receive_Data>
}
   d4afe:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4b02:	bf28      	it	cs
   d4b04:	f04f 30ff 	movcs.w	r0, #4294967295
   d4b08:	bd08      	pop	{r3, pc}

000d4b0a <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4b0a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4b0c:	2101      	movs	r1, #1
   d4b0e:	7c00      	ldrb	r0, [r0, #16]
   d4b10:	f7ff fc36 	bl	d4380 <HAL_USB_USART_Receive_Data>
}
   d4b14:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4b18:	bf28      	it	cs
   d4b1a:	f04f 30ff 	movcs.w	r0, #4294967295
   d4b1e:	bd08      	pop	{r3, pc}

000d4b20 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4b20:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4b22:	7c00      	ldrb	r0, [r0, #16]
   d4b24:	f7ff fc24 	bl	d4370 <HAL_USB_USART_Available_Data_For_Write>
}
   d4b28:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4b2c:	bd08      	pop	{r3, pc}

000d4b2e <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4b2e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4b30:	7c00      	ldrb	r0, [r0, #16]
   d4b32:	f7ff fc15 	bl	d4360 <HAL_USB_USART_Available_Data>
}
   d4b36:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4b3a:	bd08      	pop	{r3, pc}

000d4b3c <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4b3c:	7c00      	ldrb	r0, [r0, #16]
   d4b3e:	f7ff bc2f 	b.w	d43a0 <HAL_USB_USART_Flush_Data>

000d4b42 <_ZN9USBSerialD0Ev>:
   d4b42:	b510      	push	{r4, lr}
   d4b44:	2114      	movs	r1, #20
   d4b46:	4604      	mov	r4, r0
   d4b48:	f000 fb66 	bl	d5218 <_ZdlPvj>
   d4b4c:	4620      	mov	r0, r4
   d4b4e:	bd10      	pop	{r4, pc}

000d4b50 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4b50:	b538      	push	{r3, r4, r5, lr}
   d4b52:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4b54:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4b56:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4b58:	f7ff fc0a 	bl	d4370 <HAL_USB_USART_Available_Data_For_Write>
   d4b5c:	2800      	cmp	r0, #0
   d4b5e:	dc01      	bgt.n	d4b64 <_ZN9USBSerial5writeEh+0x14>
   d4b60:	7c60      	ldrb	r0, [r4, #17]
   d4b62:	b128      	cbz	r0, d4b70 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4b64:	4629      	mov	r1, r5
   d4b66:	7c20      	ldrb	r0, [r4, #16]
   d4b68:	f7ff fc12 	bl	d4390 <HAL_USB_USART_Send_Data>
   d4b6c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4b70:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4b74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4b74:	b510      	push	{r4, lr}
   d4b76:	4604      	mov	r4, r0
   d4b78:	2300      	movs	r3, #0
   d4b7a:	6063      	str	r3, [r4, #4]
   d4b7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4b80:	60a3      	str	r3, [r4, #8]
   d4b82:	4b05      	ldr	r3, [pc, #20]	; (d4b98 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4b84:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4b86:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4b88:	4608      	mov	r0, r1
{
  _serial = serial;
   d4b8a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4b8c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4b8e:	4611      	mov	r1, r2
   d4b90:	f7ff fbd6 	bl	d4340 <HAL_USB_USART_Init>
}
   d4b94:	4620      	mov	r0, r4
   d4b96:	bd10      	pop	{r4, pc}
   d4b98:	000d62cc 	.word	0x000d62cc

000d4b9c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4b9c:	2200      	movs	r2, #0
   d4b9e:	7c00      	ldrb	r0, [r0, #16]
   d4ba0:	f7ff bbd6 	b.w	d4350 <HAL_USB_USART_Begin>

000d4ba4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4ba4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4ba6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4ba8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4baa:	2100      	movs	r1, #0
   d4bac:	f001 fa93 	bl	d60d6 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4bb0:	4620      	mov	r0, r4
   d4bb2:	bd10      	pop	{r4, pc}

000d4bb4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4bb4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4bb6:	4d0e      	ldr	r5, [pc, #56]	; (d4bf0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4bb8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4bba:	a801      	add	r0, sp, #4
   d4bbc:	f7ff fff2 	bl	d4ba4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4bc0:	6829      	ldr	r1, [r5, #0]
   d4bc2:	f011 0401 	ands.w	r4, r1, #1
   d4bc6:	d110      	bne.n	d4bea <_Z16_fetch_usbserialv+0x36>
   d4bc8:	4628      	mov	r0, r5
   d4bca:	f7ff fa6a 	bl	d40a2 <__cxa_guard_acquire>
   d4bce:	b160      	cbz	r0, d4bea <_Z16_fetch_usbserialv+0x36>
   d4bd0:	aa01      	add	r2, sp, #4
   d4bd2:	4621      	mov	r1, r4
   d4bd4:	4807      	ldr	r0, [pc, #28]	; (d4bf4 <_Z16_fetch_usbserialv+0x40>)
   d4bd6:	f7ff ffcd 	bl	d4b74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4bda:	4628      	mov	r0, r5
   d4bdc:	f7ff fa66 	bl	d40ac <__cxa_guard_release>
   d4be0:	4a05      	ldr	r2, [pc, #20]	; (d4bf8 <_Z16_fetch_usbserialv+0x44>)
   d4be2:	4906      	ldr	r1, [pc, #24]	; (d4bfc <_Z16_fetch_usbserialv+0x48>)
   d4be4:	4803      	ldr	r0, [pc, #12]	; (d4bf4 <_Z16_fetch_usbserialv+0x40>)
   d4be6:	f000 fb09 	bl	d51fc <__aeabi_atexit>
	return _usbserial;
}
   d4bea:	4802      	ldr	r0, [pc, #8]	; (d4bf4 <_Z16_fetch_usbserialv+0x40>)
   d4bec:	b007      	add	sp, #28
   d4bee:	bd30      	pop	{r4, r5, pc}
   d4bf0:	2003e5c0 	.word	0x2003e5c0
   d4bf4:	2003e5c4 	.word	0x2003e5c4
   d4bf8:	2003e3b4 	.word	0x2003e3b4
   d4bfc:	000d4af3 	.word	0x000d4af3

000d4c00 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4c00:	4770      	bx	lr

000d4c02 <_ZN9IPAddressD0Ev>:
   d4c02:	b510      	push	{r4, lr}
   d4c04:	2118      	movs	r1, #24
   d4c06:	4604      	mov	r4, r0
   d4c08:	f000 fb06 	bl	d5218 <_ZdlPvj>
   d4c0c:	4620      	mov	r0, r4
   d4c0e:	bd10      	pop	{r4, pc}

000d4c10 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4c10:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4c12:	7d03      	ldrb	r3, [r0, #20]
   d4c14:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4c16:	b08d      	sub	sp, #52	; 0x34
   d4c18:	460e      	mov	r6, r1
   d4c1a:	f100 0704 	add.w	r7, r0, #4
   d4c1e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4c22:	d002      	beq.n	d4c2a <_ZNK9IPAddress7printToER5Print+0x1a>
   d4c24:	f100 0508 	add.w	r5, r0, #8
   d4c28:	e018      	b.n	d4c5c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4c2a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4c2c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4c2e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4c32:	232f      	movs	r3, #47	; 0x2f
   d4c34:	462a      	mov	r2, r5
   d4c36:	200a      	movs	r0, #10
   d4c38:	f7ff fc42 	bl	d44c0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4c3c:	4628      	mov	r0, r5
   d4c3e:	f001 fa7b 	bl	d6138 <strlen>
   d4c42:	6833      	ldr	r3, [r6, #0]
   d4c44:	4602      	mov	r2, r0
   d4c46:	68db      	ldr	r3, [r3, #12]
   d4c48:	4629      	mov	r1, r5
   d4c4a:	4630      	mov	r0, r6
   d4c4c:	4798      	blx	r3
   d4c4e:	e00f      	b.n	d4c70 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4c50:	b124      	cbz	r4, d4c5c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4c52:	212e      	movs	r1, #46	; 0x2e
   d4c54:	4630      	mov	r0, r6
   d4c56:	f000 f925 	bl	d4ea4 <_ZN5Print5printEc>
   d4c5a:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4c5c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4c60:	220a      	movs	r2, #10
   d4c62:	4630      	mov	r0, r6
   d4c64:	f000 f92d 	bl	d4ec2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4c68:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4c6a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4c6c:	d1f0      	bne.n	d4c50 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4c6e:	4620      	mov	r0, r4
    }
    return n;
}
   d4c70:	b00d      	add	sp, #52	; 0x34
   d4c72:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4c74 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4c74:	b510      	push	{r4, lr}
   d4c76:	4b05      	ldr	r3, [pc, #20]	; (d4c8c <_ZN9IPAddressC1Ev+0x18>)
   d4c78:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4c7a:	2211      	movs	r2, #17
   d4c7c:	f840 3b04 	str.w	r3, [r0], #4
   d4c80:	2100      	movs	r1, #0
   d4c82:	f001 fa28 	bl	d60d6 <memset>
{
    clear();
}
   d4c86:	4620      	mov	r0, r4
   d4c88:	bd10      	pop	{r4, pc}
   d4c8a:	bf00      	nop
   d4c8c:	000d62fc 	.word	0x000d62fc

000d4c90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4c90:	4603      	mov	r3, r0
   d4c92:	4a07      	ldr	r2, [pc, #28]	; (d4cb0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4c94:	b510      	push	{r4, lr}
   d4c96:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4c9a:	f101 0210 	add.w	r2, r1, #16
   d4c9e:	f851 4b04 	ldr.w	r4, [r1], #4
   d4ca2:	f843 4b04 	str.w	r4, [r3], #4
   d4ca6:	4291      	cmp	r1, r2
   d4ca8:	d1f9      	bne.n	d4c9e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4caa:	780a      	ldrb	r2, [r1, #0]
   d4cac:	701a      	strb	r2, [r3, #0]
}
   d4cae:	bd10      	pop	{r4, pc}
   d4cb0:	000d62fc 	.word	0x000d62fc

000d4cb4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4cb4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4cb6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4cba:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4cbe:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4cc2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4cc6:	2304      	movs	r3, #4
   d4cc8:	6041      	str	r1, [r0, #4]
   d4cca:	7503      	strb	r3, [r0, #20]
   d4ccc:	bd10      	pop	{r4, pc}

000d4cce <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4cce:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4cd0:	780d      	ldrb	r5, [r1, #0]
   d4cd2:	788b      	ldrb	r3, [r1, #2]
   d4cd4:	784a      	ldrb	r2, [r1, #1]
   d4cd6:	78c9      	ldrb	r1, [r1, #3]
   d4cd8:	9100      	str	r1, [sp, #0]
   d4cda:	4629      	mov	r1, r5
   d4cdc:	f7ff ffea 	bl	d4cb4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4ce0:	b003      	add	sp, #12
   d4ce2:	bd30      	pop	{r4, r5, pc}

000d4ce4 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4ce4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4ce6:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4ce8:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4cea:	b113      	cbz	r3, d4cf2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4cec:	2203      	movs	r2, #3
   d4cee:	4601      	mov	r1, r0
   d4cf0:	4798      	blx	r3
    }
   d4cf2:	4620      	mov	r0, r4
   d4cf4:	bd10      	pop	{r4, pc}

000d4cf6 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4cf6:	2100      	movs	r1, #0
   d4cf8:	f7ff bc9a 	b.w	d4630 <system_delay_ms>

000d4cfc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4cfc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4cfe:	4b0c      	ldr	r3, [pc, #48]	; (d4d30 <serialEventRun+0x34>)
   d4d00:	b133      	cbz	r3, d4d10 <serialEventRun+0x14>
   d4d02:	f7ff ff57 	bl	d4bb4 <_Z16_fetch_usbserialv>
   d4d06:	6803      	ldr	r3, [r0, #0]
   d4d08:	691b      	ldr	r3, [r3, #16]
   d4d0a:	4798      	blx	r3
   d4d0c:	2800      	cmp	r0, #0
   d4d0e:	dc09      	bgt.n	d4d24 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4d10:	4b08      	ldr	r3, [pc, #32]	; (d4d34 <serialEventRun+0x38>)
   d4d12:	b163      	cbz	r3, d4d2e <serialEventRun+0x32>
   d4d14:	f000 f9a4 	bl	d5060 <_Z22__fetch_global_Serial1v>
   d4d18:	6803      	ldr	r3, [r0, #0]
   d4d1a:	691b      	ldr	r3, [r3, #16]
   d4d1c:	4798      	blx	r3
   d4d1e:	2800      	cmp	r0, #0
   d4d20:	dc03      	bgt.n	d4d2a <serialEventRun+0x2e>
   d4d22:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4d24:	f3af 8000 	nop.w
   d4d28:	e7f2      	b.n	d4d10 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4d2a:	f3af 8000 	nop.w
   d4d2e:	bd08      	pop	{r3, pc}
	...

000d4d38 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4d38:	b508      	push	{r3, lr}
	serialEventRun();
   d4d3a:	f7ff ffdf 	bl	d4cfc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4d3e:	f7ff fbf7 	bl	d4530 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4d42:	4b01      	ldr	r3, [pc, #4]	; (d4d48 <_post_loop+0x10>)
   d4d44:	6018      	str	r0, [r3, #0]
   d4d46:	bd08      	pop	{r3, pc}
   d4d48:	2003e748 	.word	0x2003e748

000d4d4c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4d4c:	4802      	ldr	r0, [pc, #8]	; (d4d58 <_Z33system_initialize_user_backup_ramv+0xc>)
   d4d4e:	4a03      	ldr	r2, [pc, #12]	; (d4d5c <_Z33system_initialize_user_backup_ramv+0x10>)
   d4d50:	4903      	ldr	r1, [pc, #12]	; (d4d60 <_Z33system_initialize_user_backup_ramv+0x14>)
   d4d52:	1a12      	subs	r2, r2, r0
   d4d54:	f001 b9b4 	b.w	d60c0 <memcpy>
   d4d58:	2003f400 	.word	0x2003f400
   d4d5c:	2003f404 	.word	0x2003f404
   d4d60:	000d6520 	.word	0x000d6520

000d4d64 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4d64:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4d66:	2300      	movs	r3, #0
   d4d68:	9300      	str	r3, [sp, #0]
   d4d6a:	461a      	mov	r2, r3
   d4d6c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4d70:	f7ff fc70 	bl	d4654 <system_ctrl_set_result>
}
   d4d74:	b003      	add	sp, #12
   d4d76:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4d7c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4d7c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4d7e:	8843      	ldrh	r3, [r0, #2]
   d4d80:	2b0a      	cmp	r3, #10
   d4d82:	d008      	beq.n	d4d96 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4d84:	2b50      	cmp	r3, #80	; 0x50
   d4d86:	d109      	bne.n	d4d9c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4d88:	4b09      	ldr	r3, [pc, #36]	; (d4db0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4d8a:	681b      	ldr	r3, [r3, #0]
   d4d8c:	b13b      	cbz	r3, d4d9e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4d8e:	b003      	add	sp, #12
   d4d90:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4d94:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4d96:	f7ff ffe5 	bl	d4d64 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4d9a:	e006      	b.n	d4daa <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4d9c:	2300      	movs	r3, #0
   d4d9e:	9300      	str	r3, [sp, #0]
   d4da0:	461a      	mov	r2, r3
   d4da2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4da6:	f7ff fc55 	bl	d4654 <system_ctrl_set_result>
        break;
    }
}
   d4daa:	b003      	add	sp, #12
   d4dac:	f85d fb04 	ldr.w	pc, [sp], #4
   d4db0:	2003e5d8 	.word	0x2003e5d8

000d4db4 <module_user_init_hook>:

void module_user_init_hook()
{
   d4db4:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4db6:	4c10      	ldr	r4, [pc, #64]	; (d4df8 <module_user_init_hook+0x44>)
   d4db8:	4d10      	ldr	r5, [pc, #64]	; (d4dfc <module_user_init_hook+0x48>)
   d4dba:	6823      	ldr	r3, [r4, #0]
   d4dbc:	42ab      	cmp	r3, r5
   d4dbe:	4b10      	ldr	r3, [pc, #64]	; (d4e00 <module_user_init_hook+0x4c>)
   d4dc0:	bf0c      	ite	eq
   d4dc2:	2201      	moveq	r2, #1
   d4dc4:	2200      	movne	r2, #0
   d4dc6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4dc8:	d002      	beq.n	d4dd0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d4dca:	f7ff ffbf 	bl	d4d4c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4dce:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4dd0:	f7ff fba6 	bl	d4520 <HAL_RNG_GetRandomNumber>
   d4dd4:	4604      	mov	r4, r0
    srand(seed);
   d4dd6:	f001 f987 	bl	d60e8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4dda:	4b0a      	ldr	r3, [pc, #40]	; (d4e04 <module_user_init_hook+0x50>)
   d4ddc:	b113      	cbz	r3, d4de4 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d4dde:	4620      	mov	r0, r4
   d4de0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4de4:	2100      	movs	r1, #0
   d4de6:	4807      	ldr	r0, [pc, #28]	; (d4e04 <module_user_init_hook+0x50>)
   d4de8:	f7ff fbc2 	bl	d4570 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4dec:	2100      	movs	r1, #0
   d4dee:	4806      	ldr	r0, [pc, #24]	; (d4e08 <module_user_init_hook+0x54>)
}
   d4df0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4df4:	f7ff bc24 	b.w	d4640 <system_ctrl_set_app_request_handler>
   d4df8:	2003f400 	.word	0x2003f400
   d4dfc:	9a271c1e 	.word	0x9a271c1e
   d4e00:	2003e5dc 	.word	0x2003e5dc
   d4e04:	00000000 	.word	0x00000000
   d4e08:	000d4d7d 	.word	0x000d4d7d

000d4e0c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4e0c:	b510      	push	{r4, lr}
   d4e0e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4e10:	f7ff ff68 	bl	d4ce4 <_ZNSt14_Function_baseD1Ev>
   d4e14:	4620      	mov	r0, r4
   d4e16:	bd10      	pop	{r4, pc}

000d4e18 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4e18:	4803      	ldr	r0, [pc, #12]	; (d4e28 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4e1a:	4a04      	ldr	r2, [pc, #16]	; (d4e2c <_GLOBAL__sub_I_RGB+0x14>)
   d4e1c:	4904      	ldr	r1, [pc, #16]	; (d4e30 <_GLOBAL__sub_I_RGB+0x18>)
   d4e1e:	2300      	movs	r3, #0
   d4e20:	6083      	str	r3, [r0, #8]
   d4e22:	f000 b9eb 	b.w	d51fc <__aeabi_atexit>
   d4e26:	bf00      	nop
   d4e28:	2003e5e0 	.word	0x2003e5e0
   d4e2c:	2003e3b4 	.word	0x2003e3b4
   d4e30:	000d4e0d 	.word	0x000d4e0d

000d4e34 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4e34:	4b02      	ldr	r3, [pc, #8]	; (d4e40 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4e36:	681a      	ldr	r2, [r3, #0]
   d4e38:	4b02      	ldr	r3, [pc, #8]	; (d4e44 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4e3a:	601a      	str	r2, [r3, #0]
   d4e3c:	4770      	bx	lr
   d4e3e:	bf00      	nop
   d4e40:	2003e348 	.word	0x2003e348
   d4e44:	2003e5f0 	.word	0x2003e5f0

000d4e48 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4e48:	4b01      	ldr	r3, [pc, #4]	; (d4e50 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4e4a:	4a02      	ldr	r2, [pc, #8]	; (d4e54 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4e4c:	601a      	str	r2, [r3, #0]
   d4e4e:	4770      	bx	lr
   d4e50:	2003e5f4 	.word	0x2003e5f4
   d4e54:	000d63a4 	.word	0x000d63a4

000d4e58 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4e5a:	4606      	mov	r6, r0
   d4e5c:	460d      	mov	r5, r1
   d4e5e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4e60:	2400      	movs	r4, #0
  while (size--) {
   d4e62:	42bd      	cmp	r5, r7
   d4e64:	d00c      	beq.n	d4e80 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4e66:	6833      	ldr	r3, [r6, #0]
   d4e68:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4e6c:	689b      	ldr	r3, [r3, #8]
   d4e6e:	4630      	mov	r0, r6
   d4e70:	4798      	blx	r3
     if (chunk>=0)
   d4e72:	2800      	cmp	r0, #0
   d4e74:	db01      	blt.n	d4e7a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4e76:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4e78:	e7f3      	b.n	d4e62 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4e7a:	2c00      	cmp	r4, #0
   d4e7c:	bf08      	it	eq
   d4e7e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4e80:	4620      	mov	r0, r4
   d4e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4e84 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4e84:	b570      	push	{r4, r5, r6, lr}
   d4e86:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4e88:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4e8a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4e8c:	b149      	cbz	r1, d4ea2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4e8e:	f001 f953 	bl	d6138 <strlen>
   d4e92:	682b      	ldr	r3, [r5, #0]
   d4e94:	4602      	mov	r2, r0
   d4e96:	4621      	mov	r1, r4
   d4e98:	4628      	mov	r0, r5
   d4e9a:	68db      	ldr	r3, [r3, #12]
    }
   d4e9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4ea0:	4718      	bx	r3
    }
   d4ea2:	bd70      	pop	{r4, r5, r6, pc}

000d4ea4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4ea4:	6803      	ldr	r3, [r0, #0]
   d4ea6:	689b      	ldr	r3, [r3, #8]
   d4ea8:	4718      	bx	r3

000d4eaa <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4eaa:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4eac:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4eae:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4eb0:	f7ff fff8 	bl	d4ea4 <_ZN5Print5printEc>
  n += print('\n');
   d4eb4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4eb6:	4604      	mov	r4, r0
  n += print('\n');
   d4eb8:	4628      	mov	r0, r5
   d4eba:	f7ff fff3 	bl	d4ea4 <_ZN5Print5printEc>
  return n;
}
   d4ebe:	4420      	add	r0, r4
   d4ec0:	bd38      	pop	{r3, r4, r5, pc}

000d4ec2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4ec2:	b530      	push	{r4, r5, lr}
   d4ec4:	b08b      	sub	sp, #44	; 0x2c
   d4ec6:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4ec8:	2100      	movs	r1, #0
   d4eca:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4ece:	2a01      	cmp	r2, #1
   d4ed0:	bf98      	it	ls
   d4ed2:	220a      	movls	r2, #10
   d4ed4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d4ed8:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d4edc:	fb05 3312 	mls	r3, r5, r2, r3
   d4ee0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4ee4:	2b09      	cmp	r3, #9
   d4ee6:	bf94      	ite	ls
   d4ee8:	3330      	addls	r3, #48	; 0x30
   d4eea:	3337      	addhi	r3, #55	; 0x37
   d4eec:	b2db      	uxtb	r3, r3
   d4eee:	4621      	mov	r1, r4
   d4ef0:	f804 3901 	strb.w	r3, [r4], #-1
   d4ef4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4ef6:	2d00      	cmp	r5, #0
   d4ef8:	d1ee      	bne.n	d4ed8 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4efa:	f7ff ffc3 	bl	d4e84 <_ZN5Print5writeEPKc>
}
   d4efe:	b00b      	add	sp, #44	; 0x2c
   d4f00:	bd30      	pop	{r4, r5, pc}

000d4f02 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4f02:	b40c      	push	{r2, r3}
   d4f04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4f08:	b087      	sub	sp, #28
   d4f0a:	af00      	add	r7, sp, #0
   d4f0c:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d4f10:	4605      	mov	r5, r0
   d4f12:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d4f16:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4f18:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d4f1a:	4623      	mov	r3, r4
   d4f1c:	464a      	mov	r2, r9
   d4f1e:	2114      	movs	r1, #20
   d4f20:	1d38      	adds	r0, r7, #4
   d4f22:	f7ff fbb1 	bl	d4688 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d4f26:	2813      	cmp	r0, #19
   d4f28:	d805      	bhi.n	d4f36 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4f2a:	1d39      	adds	r1, r7, #4
   d4f2c:	4628      	mov	r0, r5
   d4f2e:	f7ff ffa9 	bl	d4e84 <_ZN5Print5writeEPKc>
   d4f32:	4604      	mov	r4, r0
   d4f34:	e013      	b.n	d4f5e <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4f36:	f100 0308 	add.w	r3, r0, #8
   d4f3a:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d4f3e:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4f40:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d4f44:	1c41      	adds	r1, r0, #1
   d4f46:	4623      	mov	r3, r4
   d4f48:	464a      	mov	r2, r9
   d4f4a:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d4f4c:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d4f4e:	f7ff fb9b 	bl	d4688 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4f52:	4669      	mov	r1, sp
   d4f54:	4628      	mov	r0, r5
   d4f56:	f7ff ff95 	bl	d4e84 <_ZN5Print5writeEPKc>
   d4f5a:	4604      	mov	r4, r0
   d4f5c:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d4f5e:	b11e      	cbz	r6, d4f68 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d4f60:	4628      	mov	r0, r5
   d4f62:	f7ff ffa2 	bl	d4eaa <_ZN5Print7printlnEv>
   d4f66:	4404      	add	r4, r0
    return n;
}
   d4f68:	4620      	mov	r0, r4
   d4f6a:	371c      	adds	r7, #28
   d4f6c:	46bd      	mov	sp, r7
   d4f6e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4f72:	b002      	add	sp, #8
   d4f74:	4770      	bx	lr

000d4f76 <_ZN14RecursiveMutexD1Ev>:
    }

    ~RecursiveMutex() {
   d4f76:	b510      	push	{r4, lr}
   d4f78:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4f7a:	6800      	ldr	r0, [r0, #0]
   d4f7c:	b108      	cbz	r0, d4f82 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4f7e:	f7ff fac7 	bl	d4510 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4f82:	4620      	mov	r0, r4
   d4f84:	bd10      	pop	{r4, pc}
	...

000d4f88 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4f88:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4f8a:	4c06      	ldr	r4, [pc, #24]	; (d4fa4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4f8c:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4f8e:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4f90:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4f92:	f7ff fab5 	bl	d4500 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4f96:	4620      	mov	r0, r4
   d4f98:	4a03      	ldr	r2, [pc, #12]	; (d4fa8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4f9a:	4904      	ldr	r1, [pc, #16]	; (d4fac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4fa0:	f000 b92c 	b.w	d51fc <__aeabi_atexit>
   d4fa4:	2003e5f8 	.word	0x2003e5f8
   d4fa8:	2003e3b4 	.word	0x2003e3b4
   d4fac:	000d4f77 	.word	0x000d4f77

000d4fb0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4fb0:	4770      	bx	lr

000d4fb2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4fb2:	7441      	strb	r1, [r0, #17]
   d4fb4:	4770      	bx	lr

000d4fb6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4fb6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4fb8:	7c00      	ldrb	r0, [r0, #16]
   d4fba:	f7ff fa79 	bl	d44b0 <HAL_USART_Available_Data_For_Write>
}
   d4fbe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4fc2:	bd08      	pop	{r3, pc}

000d4fc4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4fc4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d4fc6:	7c00      	ldrb	r0, [r0, #16]
   d4fc8:	f7ff fa52 	bl	d4470 <HAL_USART_Available_Data>
}
   d4fcc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4fd0:	bd08      	pop	{r3, pc}

000d4fd2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4fd2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4fd4:	7c00      	ldrb	r0, [r0, #16]
   d4fd6:	f7ff fa5b 	bl	d4490 <HAL_USART_Peek_Data>
}
   d4fda:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4fde:	bf28      	it	cs
   d4fe0:	f04f 30ff 	movcs.w	r0, #4294967295
   d4fe4:	bd08      	pop	{r3, pc}

000d4fe6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4fe6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d4fe8:	7c00      	ldrb	r0, [r0, #16]
   d4fea:	f7ff fa49 	bl	d4480 <HAL_USART_Read_Data>
}
   d4fee:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4ff2:	bf28      	it	cs
   d4ff4:	f04f 30ff 	movcs.w	r0, #4294967295
   d4ff8:	bd08      	pop	{r3, pc}

000d4ffa <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4ffa:	7c00      	ldrb	r0, [r0, #16]
   d4ffc:	f7ff ba50 	b.w	d44a0 <HAL_USART_Flush_Data>

000d5000 <_ZN11USARTSerialD0Ev>:
   d5000:	b510      	push	{r4, lr}
   d5002:	2114      	movs	r1, #20
   d5004:	4604      	mov	r4, r0
   d5006:	f000 f907 	bl	d5218 <_ZdlPvj>
   d500a:	4620      	mov	r0, r4
   d500c:	bd10      	pop	{r4, pc}

000d500e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d500e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5010:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5012:	4604      	mov	r4, r0
   d5014:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5016:	b925      	cbnz	r5, d5022 <_ZN11USARTSerial5writeEh+0x14>
   d5018:	7c00      	ldrb	r0, [r0, #16]
   d501a:	f7ff fa49 	bl	d44b0 <HAL_USART_Available_Data_For_Write>
   d501e:	2800      	cmp	r0, #0
   d5020:	dd05      	ble.n	d502e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5022:	4631      	mov	r1, r6
   d5024:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5026:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d502a:	f7ff ba19 	b.w	d4460 <HAL_USART_Write_Data>
  }
  return 0;
}
   d502e:	4628      	mov	r0, r5
   d5030:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5034 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5034:	b510      	push	{r4, lr}
   d5036:	4604      	mov	r4, r0
   d5038:	4608      	mov	r0, r1
   d503a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d503c:	2200      	movs	r2, #0
   d503e:	6062      	str	r2, [r4, #4]
   d5040:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5044:	60a2      	str	r2, [r4, #8]
   d5046:	4a05      	ldr	r2, [pc, #20]	; (d505c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5048:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d504a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d504c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d504e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5050:	461a      	mov	r2, r3
   d5052:	f7ff f9fd 	bl	d4450 <HAL_USART_Init>
}
   d5056:	4620      	mov	r0, r4
   d5058:	bd10      	pop	{r4, pc}
   d505a:	bf00      	nop
   d505c:	000d641c 	.word	0x000d641c

000d5060 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5060:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5062:	4d0c      	ldr	r5, [pc, #48]	; (d5094 <_Z22__fetch_global_Serial1v+0x34>)
   d5064:	6829      	ldr	r1, [r5, #0]
   d5066:	f011 0401 	ands.w	r4, r1, #1
   d506a:	d111      	bne.n	d5090 <_Z22__fetch_global_Serial1v+0x30>
   d506c:	4628      	mov	r0, r5
   d506e:	f7ff f818 	bl	d40a2 <__cxa_guard_acquire>
   d5072:	b168      	cbz	r0, d5090 <_Z22__fetch_global_Serial1v+0x30>
   d5074:	4a08      	ldr	r2, [pc, #32]	; (d5098 <_Z22__fetch_global_Serial1v+0x38>)
   d5076:	4b09      	ldr	r3, [pc, #36]	; (d509c <_Z22__fetch_global_Serial1v+0x3c>)
   d5078:	4809      	ldr	r0, [pc, #36]	; (d50a0 <_Z22__fetch_global_Serial1v+0x40>)
   d507a:	4621      	mov	r1, r4
   d507c:	f7ff ffda 	bl	d5034 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5080:	4628      	mov	r0, r5
   d5082:	f7ff f813 	bl	d40ac <__cxa_guard_release>
   d5086:	4a07      	ldr	r2, [pc, #28]	; (d50a4 <_Z22__fetch_global_Serial1v+0x44>)
   d5088:	4907      	ldr	r1, [pc, #28]	; (d50a8 <_Z22__fetch_global_Serial1v+0x48>)
   d508a:	4805      	ldr	r0, [pc, #20]	; (d50a0 <_Z22__fetch_global_Serial1v+0x40>)
   d508c:	f000 f8b6 	bl	d51fc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5090:	4803      	ldr	r0, [pc, #12]	; (d50a0 <_Z22__fetch_global_Serial1v+0x40>)
   d5092:	bd38      	pop	{r3, r4, r5, pc}
   d5094:	2003e694 	.word	0x2003e694
   d5098:	2003e698 	.word	0x2003e698
   d509c:	2003e610 	.word	0x2003e610
   d50a0:	2003e5fc 	.word	0x2003e5fc
   d50a4:	2003e3b4 	.word	0x2003e3b4
   d50a8:	000d4fb1 	.word	0x000d4fb1

000d50ac <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d50ac:	b510      	push	{r4, lr}
   d50ae:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d50b0:	6800      	ldr	r0, [r0, #0]
   d50b2:	b118      	cbz	r0, d50bc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d50b4:	f7ff fae0 	bl	d4678 <free>
            wakeupSource_ = nullptr;
   d50b8:	2300      	movs	r3, #0
   d50ba:	6023      	str	r3, [r4, #0]
   d50bc:	bd10      	pop	{r4, pc}

000d50be <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d50be:	b510      	push	{r4, lr}
   d50c0:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d50c2:	f7ff fff3 	bl	d50ac <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d50c6:	4620      	mov	r0, r4
   d50c8:	bd10      	pop	{r4, pc}
	...

000d50cc <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d50cc:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d50ce:	4c09      	ldr	r4, [pc, #36]	; (d50f4 <_GLOBAL__sub_I_System+0x28>)
   d50d0:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d50d2:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d50d6:	6020      	str	r0, [r4, #0]
   d50d8:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d50da:	71a0      	strb	r0, [r4, #6]
   d50dc:	8120      	strh	r0, [r4, #8]
   d50de:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d50e0:	f7ff fa9e 	bl	d4620 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d50e4:	4620      	mov	r0, r4
   d50e6:	4a04      	ldr	r2, [pc, #16]	; (d50f8 <_GLOBAL__sub_I_System+0x2c>)
   d50e8:	4904      	ldr	r1, [pc, #16]	; (d50fc <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d50ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d50ee:	f000 b885 	b.w	d51fc <__aeabi_atexit>
   d50f2:	bf00      	nop
   d50f4:	2003e71c 	.word	0x2003e71c
   d50f8:	2003e3b4 	.word	0x2003e3b4
   d50fc:	000d50bf 	.word	0x000d50bf

000d5100 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5100:	2200      	movs	r2, #0
   d5102:	4611      	mov	r1, r2
   d5104:	6840      	ldr	r0, [r0, #4]
   d5106:	f7ff ba73 	b.w	d45f0 <network_listening>

000d510a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d510a:	2200      	movs	r2, #0
   d510c:	4611      	mov	r1, r2
   d510e:	6840      	ldr	r0, [r0, #4]
   d5110:	f7ff ba7e 	b.w	d4610 <network_get_listen_timeout>

000d5114 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5114:	2200      	movs	r2, #0
   d5116:	6840      	ldr	r0, [r0, #4]
   d5118:	f7ff ba72 	b.w	d4600 <network_set_listen_timeout>

000d511c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d511c:	2200      	movs	r2, #0
   d511e:	f081 0101 	eor.w	r1, r1, #1
   d5122:	6840      	ldr	r0, [r0, #4]
   d5124:	f7ff ba5c 	b.w	d45e0 <network_listen>

000d5128 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5128:	2300      	movs	r3, #0
   d512a:	461a      	mov	r2, r3
   d512c:	4619      	mov	r1, r3
   d512e:	6840      	ldr	r0, [r0, #4]
   d5130:	f7ff ba4e 	b.w	d45d0 <network_off>

000d5134 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5134:	2300      	movs	r3, #0
   d5136:	461a      	mov	r2, r3
   d5138:	4619      	mov	r1, r3
   d513a:	6840      	ldr	r0, [r0, #4]
   d513c:	f7ff ba40 	b.w	d45c0 <network_on>

000d5140 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5140:	2200      	movs	r2, #0
   d5142:	4611      	mov	r1, r2
   d5144:	6840      	ldr	r0, [r0, #4]
   d5146:	f7ff ba33 	b.w	d45b0 <network_ready>

000d514a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d514a:	2200      	movs	r2, #0
   d514c:	4611      	mov	r1, r2
   d514e:	6840      	ldr	r0, [r0, #4]
   d5150:	f7ff ba1e 	b.w	d4590 <network_connecting>

000d5154 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5154:	2200      	movs	r2, #0
   d5156:	2102      	movs	r1, #2
   d5158:	6840      	ldr	r0, [r0, #4]
   d515a:	f7ff ba21 	b.w	d45a0 <network_disconnect>

000d515e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d515e:	2300      	movs	r3, #0
   d5160:	461a      	mov	r2, r3
   d5162:	6840      	ldr	r0, [r0, #4]
   d5164:	f7ff ba0c 	b.w	d4580 <network_connect>

000d5168 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d5168:	4b02      	ldr	r3, [pc, #8]	; (d5174 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d516a:	2203      	movs	r2, #3
   d516c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d516e:	4a02      	ldr	r2, [pc, #8]	; (d5178 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5170:	601a      	str	r2, [r3, #0]
   d5172:	4770      	bx	lr
   d5174:	2003e728 	.word	0x2003e728
   d5178:	000d644c 	.word	0x000d644c

000d517c <_Z17acquireWireBufferv>:
   d517c:	b570      	push	{r4, r5, r6, lr}
   d517e:	4604      	mov	r4, r0
   d5180:	2514      	movs	r5, #20
   d5182:	462a      	mov	r2, r5
   d5184:	4e09      	ldr	r6, [pc, #36]	; (d51ac <_Z17acquireWireBufferv+0x30>)
   d5186:	2100      	movs	r1, #0
   d5188:	f000 ffa5 	bl	d60d6 <memset>
   d518c:	8025      	strh	r5, [r4, #0]
   d518e:	2520      	movs	r5, #32
   d5190:	4631      	mov	r1, r6
   d5192:	60a5      	str	r5, [r4, #8]
   d5194:	6125      	str	r5, [r4, #16]
   d5196:	4628      	mov	r0, r5
   d5198:	f000 f840 	bl	d521c <_ZnajRKSt9nothrow_t>
   d519c:	4631      	mov	r1, r6
   d519e:	6060      	str	r0, [r4, #4]
   d51a0:	4628      	mov	r0, r5
   d51a2:	f000 f83b 	bl	d521c <_ZnajRKSt9nothrow_t>
   d51a6:	60e0      	str	r0, [r4, #12]
   d51a8:	4620      	mov	r0, r4
   d51aa:	bd70      	pop	{r4, r5, r6, pc}
   d51ac:	000d6478 	.word	0x000d6478

000d51b0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d51b0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d51b2:	4d0e      	ldr	r5, [pc, #56]	; (d51ec <_Z19__fetch_global_Wirev+0x3c>)
   d51b4:	6829      	ldr	r1, [r5, #0]
   d51b6:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d51ba:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d51bc:	d113      	bne.n	d51e6 <_Z19__fetch_global_Wirev+0x36>
   d51be:	4628      	mov	r0, r5
   d51c0:	f7fe ff6f 	bl	d40a2 <__cxa_guard_acquire>
   d51c4:	b178      	cbz	r0, d51e6 <_Z19__fetch_global_Wirev+0x36>
   d51c6:	a801      	add	r0, sp, #4
   d51c8:	f7ff ffd8 	bl	d517c <_Z17acquireWireBufferv>
   d51cc:	aa01      	add	r2, sp, #4
   d51ce:	4621      	mov	r1, r4
   d51d0:	4807      	ldr	r0, [pc, #28]	; (d51f0 <_Z19__fetch_global_Wirev+0x40>)
   d51d2:	f7ff fc35 	bl	d4a40 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d51d6:	4628      	mov	r0, r5
   d51d8:	f7fe ff68 	bl	d40ac <__cxa_guard_release>
   d51dc:	4a05      	ldr	r2, [pc, #20]	; (d51f4 <_Z19__fetch_global_Wirev+0x44>)
   d51de:	4906      	ldr	r1, [pc, #24]	; (d51f8 <_Z19__fetch_global_Wirev+0x48>)
   d51e0:	4803      	ldr	r0, [pc, #12]	; (d51f0 <_Z19__fetch_global_Wirev+0x40>)
   d51e2:	f000 f80b 	bl	d51fc <__aeabi_atexit>
	return wire;
}
   d51e6:	4802      	ldr	r0, [pc, #8]	; (d51f0 <_Z19__fetch_global_Wirev+0x40>)
   d51e8:	b007      	add	sp, #28
   d51ea:	bd30      	pop	{r4, r5, pc}
   d51ec:	2003e730 	.word	0x2003e730
   d51f0:	2003e734 	.word	0x2003e734
   d51f4:	2003e3b4 	.word	0x2003e3b4
   d51f8:	000d49e9 	.word	0x000d49e9

000d51fc <__aeabi_atexit>:
   d51fc:	460b      	mov	r3, r1
   d51fe:	4601      	mov	r1, r0
   d5200:	4618      	mov	r0, r3
   d5202:	f000 bf4f 	b.w	d60a4 <__cxa_atexit>
	...

000d5208 <_ZSt15get_new_handlerv>:
   d5208:	4b02      	ldr	r3, [pc, #8]	; (d5214 <_ZSt15get_new_handlerv+0xc>)
   d520a:	6818      	ldr	r0, [r3, #0]
   d520c:	f3bf 8f5f 	dmb	sy
   d5210:	4770      	bx	lr
   d5212:	bf00      	nop
   d5214:	2003e74c 	.word	0x2003e74c

000d5218 <_ZdlPvj>:
   d5218:	f7fe bf3f 	b.w	d409a <_ZdlPv>

000d521c <_ZnajRKSt9nothrow_t>:
   d521c:	f000 b800 	b.w	d5220 <_ZnwjRKSt9nothrow_t>

000d5220 <_ZnwjRKSt9nothrow_t>:
   d5220:	b510      	push	{r4, lr}
   d5222:	2800      	cmp	r0, #0
   d5224:	bf14      	ite	ne
   d5226:	4604      	movne	r4, r0
   d5228:	2401      	moveq	r4, #1
   d522a:	4620      	mov	r0, r4
   d522c:	f7ff fa1c 	bl	d4668 <malloc>
   d5230:	b920      	cbnz	r0, d523c <_ZnwjRKSt9nothrow_t+0x1c>
   d5232:	f7ff ffe9 	bl	d5208 <_ZSt15get_new_handlerv>
   d5236:	b108      	cbz	r0, d523c <_ZnwjRKSt9nothrow_t+0x1c>
   d5238:	4780      	blx	r0
   d523a:	e7f6      	b.n	d522a <_ZnwjRKSt9nothrow_t+0xa>
   d523c:	bd10      	pop	{r4, pc}
	...

000d5240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5240:	4b18      	ldr	r3, [pc, #96]	; (d52a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5242:	681a      	ldr	r2, [r3, #0]
   d5244:	07d1      	lsls	r1, r2, #31
   d5246:	bf5c      	itt	pl
   d5248:	2201      	movpl	r2, #1
   d524a:	601a      	strpl	r2, [r3, #0]
   d524c:	4b16      	ldr	r3, [pc, #88]	; (d52a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d524e:	681a      	ldr	r2, [r3, #0]
   d5250:	07d2      	lsls	r2, r2, #31
   d5252:	bf5c      	itt	pl
   d5254:	2201      	movpl	r2, #1
   d5256:	601a      	strpl	r2, [r3, #0]
   d5258:	4b14      	ldr	r3, [pc, #80]	; (d52ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d525a:	681a      	ldr	r2, [r3, #0]
   d525c:	07d0      	lsls	r0, r2, #31
   d525e:	bf5c      	itt	pl
   d5260:	2201      	movpl	r2, #1
   d5262:	601a      	strpl	r2, [r3, #0]
   d5264:	4b12      	ldr	r3, [pc, #72]	; (d52b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5266:	681a      	ldr	r2, [r3, #0]
   d5268:	07d1      	lsls	r1, r2, #31
   d526a:	bf5c      	itt	pl
   d526c:	2201      	movpl	r2, #1
   d526e:	601a      	strpl	r2, [r3, #0]
   d5270:	4b10      	ldr	r3, [pc, #64]	; (d52b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5272:	681a      	ldr	r2, [r3, #0]
   d5274:	07d2      	lsls	r2, r2, #31
   d5276:	bf5c      	itt	pl
   d5278:	2201      	movpl	r2, #1
   d527a:	601a      	strpl	r2, [r3, #0]
   d527c:	4b0e      	ldr	r3, [pc, #56]	; (d52b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d527e:	681a      	ldr	r2, [r3, #0]
   d5280:	07d0      	lsls	r0, r2, #31
   d5282:	bf5c      	itt	pl
   d5284:	2201      	movpl	r2, #1
   d5286:	601a      	strpl	r2, [r3, #0]
   d5288:	4b0c      	ldr	r3, [pc, #48]	; (d52bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d528a:	681a      	ldr	r2, [r3, #0]
   d528c:	07d1      	lsls	r1, r2, #31
   d528e:	bf5c      	itt	pl
   d5290:	2201      	movpl	r2, #1
   d5292:	601a      	strpl	r2, [r3, #0]
   d5294:	4b0a      	ldr	r3, [pc, #40]	; (d52c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5296:	681a      	ldr	r2, [r3, #0]
   d5298:	07d2      	lsls	r2, r2, #31
   d529a:	bf5c      	itt	pl
   d529c:	2201      	movpl	r2, #1
   d529e:	601a      	strpl	r2, [r3, #0]
   d52a0:	4770      	bx	lr
   d52a2:	bf00      	nop
   d52a4:	2003e76c 	.word	0x2003e76c
   d52a8:	2003e768 	.word	0x2003e768
   d52ac:	2003e764 	.word	0x2003e764
   d52b0:	2003e760 	.word	0x2003e760
   d52b4:	2003e75c 	.word	0x2003e75c
   d52b8:	2003e758 	.word	0x2003e758
   d52bc:	2003e754 	.word	0x2003e754
   d52c0:	2003e750 	.word	0x2003e750

000d52c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d52c4:	4b24      	ldr	r3, [pc, #144]	; (d5358 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d52c6:	681a      	ldr	r2, [r3, #0]
   d52c8:	07d0      	lsls	r0, r2, #31
   d52ca:	bf5c      	itt	pl
   d52cc:	2201      	movpl	r2, #1
   d52ce:	601a      	strpl	r2, [r3, #0]
   d52d0:	4b22      	ldr	r3, [pc, #136]	; (d535c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d52d2:	681a      	ldr	r2, [r3, #0]
   d52d4:	07d1      	lsls	r1, r2, #31
   d52d6:	bf5c      	itt	pl
   d52d8:	2201      	movpl	r2, #1
   d52da:	601a      	strpl	r2, [r3, #0]
   d52dc:	4b20      	ldr	r3, [pc, #128]	; (d5360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d52de:	681a      	ldr	r2, [r3, #0]
   d52e0:	07d2      	lsls	r2, r2, #31
   d52e2:	bf5c      	itt	pl
   d52e4:	2201      	movpl	r2, #1
   d52e6:	601a      	strpl	r2, [r3, #0]
   d52e8:	4b1e      	ldr	r3, [pc, #120]	; (d5364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d52ea:	681a      	ldr	r2, [r3, #0]
   d52ec:	07d0      	lsls	r0, r2, #31
   d52ee:	bf5c      	itt	pl
   d52f0:	2201      	movpl	r2, #1
   d52f2:	601a      	strpl	r2, [r3, #0]
   d52f4:	4b1c      	ldr	r3, [pc, #112]	; (d5368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d52f6:	681a      	ldr	r2, [r3, #0]
   d52f8:	07d1      	lsls	r1, r2, #31
   d52fa:	bf5c      	itt	pl
   d52fc:	2201      	movpl	r2, #1
   d52fe:	601a      	strpl	r2, [r3, #0]
   d5300:	4b1a      	ldr	r3, [pc, #104]	; (d536c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5302:	681a      	ldr	r2, [r3, #0]
   d5304:	07d2      	lsls	r2, r2, #31
   d5306:	bf5c      	itt	pl
   d5308:	2201      	movpl	r2, #1
   d530a:	601a      	strpl	r2, [r3, #0]
   d530c:	4b18      	ldr	r3, [pc, #96]	; (d5370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d530e:	681a      	ldr	r2, [r3, #0]
   d5310:	07d0      	lsls	r0, r2, #31
   d5312:	bf5c      	itt	pl
   d5314:	2201      	movpl	r2, #1
   d5316:	601a      	strpl	r2, [r3, #0]
   d5318:	4b16      	ldr	r3, [pc, #88]	; (d5374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d531a:	681a      	ldr	r2, [r3, #0]
   d531c:	07d1      	lsls	r1, r2, #31
   d531e:	bf5c      	itt	pl
   d5320:	2201      	movpl	r2, #1
   d5322:	601a      	strpl	r2, [r3, #0]
   d5324:	4b14      	ldr	r3, [pc, #80]	; (d5378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5326:	681a      	ldr	r2, [r3, #0]
   d5328:	07d2      	lsls	r2, r2, #31
   d532a:	bf5c      	itt	pl
   d532c:	2201      	movpl	r2, #1
   d532e:	601a      	strpl	r2, [r3, #0]
   d5330:	4b12      	ldr	r3, [pc, #72]	; (d537c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5332:	681a      	ldr	r2, [r3, #0]
   d5334:	07d0      	lsls	r0, r2, #31
   d5336:	bf5c      	itt	pl
   d5338:	2201      	movpl	r2, #1
   d533a:	601a      	strpl	r2, [r3, #0]
   d533c:	4b10      	ldr	r3, [pc, #64]	; (d5380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d533e:	681a      	ldr	r2, [r3, #0]
   d5340:	07d1      	lsls	r1, r2, #31
   d5342:	bf5c      	itt	pl
   d5344:	2201      	movpl	r2, #1
   d5346:	601a      	strpl	r2, [r3, #0]
   d5348:	4b0e      	ldr	r3, [pc, #56]	; (d5384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d534a:	681a      	ldr	r2, [r3, #0]
   d534c:	07d2      	lsls	r2, r2, #31
   d534e:	bf5c      	itt	pl
   d5350:	2201      	movpl	r2, #1
   d5352:	601a      	strpl	r2, [r3, #0]
   d5354:	4770      	bx	lr
   d5356:	bf00      	nop
   d5358:	2003e79c 	.word	0x2003e79c
   d535c:	2003e798 	.word	0x2003e798
   d5360:	2003e794 	.word	0x2003e794
   d5364:	2003e790 	.word	0x2003e790
   d5368:	2003e78c 	.word	0x2003e78c
   d536c:	2003e788 	.word	0x2003e788
   d5370:	2003e784 	.word	0x2003e784
   d5374:	2003e780 	.word	0x2003e780
   d5378:	2003e77c 	.word	0x2003e77c
   d537c:	2003e778 	.word	0x2003e778
   d5380:	2003e774 	.word	0x2003e774
   d5384:	2003e770 	.word	0x2003e770

000d5388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5388:	4b24      	ldr	r3, [pc, #144]	; (d541c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d538a:	681a      	ldr	r2, [r3, #0]
   d538c:	07d0      	lsls	r0, r2, #31
   d538e:	bf5c      	itt	pl
   d5390:	2201      	movpl	r2, #1
   d5392:	601a      	strpl	r2, [r3, #0]
   d5394:	4b22      	ldr	r3, [pc, #136]	; (d5420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5396:	681a      	ldr	r2, [r3, #0]
   d5398:	07d1      	lsls	r1, r2, #31
   d539a:	bf5c      	itt	pl
   d539c:	2201      	movpl	r2, #1
   d539e:	601a      	strpl	r2, [r3, #0]
   d53a0:	4b20      	ldr	r3, [pc, #128]	; (d5424 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d53a2:	681a      	ldr	r2, [r3, #0]
   d53a4:	07d2      	lsls	r2, r2, #31
   d53a6:	bf5c      	itt	pl
   d53a8:	2201      	movpl	r2, #1
   d53aa:	601a      	strpl	r2, [r3, #0]
   d53ac:	4b1e      	ldr	r3, [pc, #120]	; (d5428 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d53ae:	681a      	ldr	r2, [r3, #0]
   d53b0:	07d0      	lsls	r0, r2, #31
   d53b2:	bf5c      	itt	pl
   d53b4:	2201      	movpl	r2, #1
   d53b6:	601a      	strpl	r2, [r3, #0]
   d53b8:	4b1c      	ldr	r3, [pc, #112]	; (d542c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d53ba:	681a      	ldr	r2, [r3, #0]
   d53bc:	07d1      	lsls	r1, r2, #31
   d53be:	bf5c      	itt	pl
   d53c0:	2201      	movpl	r2, #1
   d53c2:	601a      	strpl	r2, [r3, #0]
   d53c4:	4b1a      	ldr	r3, [pc, #104]	; (d5430 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d53c6:	681a      	ldr	r2, [r3, #0]
   d53c8:	07d2      	lsls	r2, r2, #31
   d53ca:	bf5c      	itt	pl
   d53cc:	2201      	movpl	r2, #1
   d53ce:	601a      	strpl	r2, [r3, #0]
   d53d0:	4b18      	ldr	r3, [pc, #96]	; (d5434 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d53d2:	681a      	ldr	r2, [r3, #0]
   d53d4:	07d0      	lsls	r0, r2, #31
   d53d6:	bf5c      	itt	pl
   d53d8:	2201      	movpl	r2, #1
   d53da:	601a      	strpl	r2, [r3, #0]
   d53dc:	4b16      	ldr	r3, [pc, #88]	; (d5438 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d53de:	681a      	ldr	r2, [r3, #0]
   d53e0:	07d1      	lsls	r1, r2, #31
   d53e2:	bf5c      	itt	pl
   d53e4:	2201      	movpl	r2, #1
   d53e6:	601a      	strpl	r2, [r3, #0]
   d53e8:	4b14      	ldr	r3, [pc, #80]	; (d543c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d53ea:	681a      	ldr	r2, [r3, #0]
   d53ec:	07d2      	lsls	r2, r2, #31
   d53ee:	bf5c      	itt	pl
   d53f0:	2201      	movpl	r2, #1
   d53f2:	601a      	strpl	r2, [r3, #0]
   d53f4:	4b12      	ldr	r3, [pc, #72]	; (d5440 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d53f6:	681a      	ldr	r2, [r3, #0]
   d53f8:	07d0      	lsls	r0, r2, #31
   d53fa:	bf5c      	itt	pl
   d53fc:	2201      	movpl	r2, #1
   d53fe:	601a      	strpl	r2, [r3, #0]
   d5400:	4b10      	ldr	r3, [pc, #64]	; (d5444 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5402:	681a      	ldr	r2, [r3, #0]
   d5404:	07d1      	lsls	r1, r2, #31
   d5406:	bf5c      	itt	pl
   d5408:	2201      	movpl	r2, #1
   d540a:	601a      	strpl	r2, [r3, #0]
   d540c:	4b0e      	ldr	r3, [pc, #56]	; (d5448 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d540e:	681a      	ldr	r2, [r3, #0]
   d5410:	07d2      	lsls	r2, r2, #31
   d5412:	bf5c      	itt	pl
   d5414:	2201      	movpl	r2, #1
   d5416:	601a      	strpl	r2, [r3, #0]
   d5418:	4770      	bx	lr
   d541a:	bf00      	nop
   d541c:	2003e7cc 	.word	0x2003e7cc
   d5420:	2003e7c8 	.word	0x2003e7c8
   d5424:	2003e7c4 	.word	0x2003e7c4
   d5428:	2003e7c0 	.word	0x2003e7c0
   d542c:	2003e7bc 	.word	0x2003e7bc
   d5430:	2003e7b8 	.word	0x2003e7b8
   d5434:	2003e7b4 	.word	0x2003e7b4
   d5438:	2003e7b0 	.word	0x2003e7b0
   d543c:	2003e7ac 	.word	0x2003e7ac
   d5440:	2003e7a8 	.word	0x2003e7a8
   d5444:	2003e7a4 	.word	0x2003e7a4
   d5448:	2003e7a0 	.word	0x2003e7a0

000d544c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d544c:	4b18      	ldr	r3, [pc, #96]	; (d54b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d544e:	681a      	ldr	r2, [r3, #0]
   d5450:	07d1      	lsls	r1, r2, #31
   d5452:	bf5c      	itt	pl
   d5454:	2201      	movpl	r2, #1
   d5456:	601a      	strpl	r2, [r3, #0]
   d5458:	4b16      	ldr	r3, [pc, #88]	; (d54b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d545a:	681a      	ldr	r2, [r3, #0]
   d545c:	07d2      	lsls	r2, r2, #31
   d545e:	bf5c      	itt	pl
   d5460:	2201      	movpl	r2, #1
   d5462:	601a      	strpl	r2, [r3, #0]
   d5464:	4b14      	ldr	r3, [pc, #80]	; (d54b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5466:	681a      	ldr	r2, [r3, #0]
   d5468:	07d0      	lsls	r0, r2, #31
   d546a:	bf5c      	itt	pl
   d546c:	2201      	movpl	r2, #1
   d546e:	601a      	strpl	r2, [r3, #0]
   d5470:	4b12      	ldr	r3, [pc, #72]	; (d54bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5472:	681a      	ldr	r2, [r3, #0]
   d5474:	07d1      	lsls	r1, r2, #31
   d5476:	bf5c      	itt	pl
   d5478:	2201      	movpl	r2, #1
   d547a:	601a      	strpl	r2, [r3, #0]
   d547c:	4b10      	ldr	r3, [pc, #64]	; (d54c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d547e:	681a      	ldr	r2, [r3, #0]
   d5480:	07d2      	lsls	r2, r2, #31
   d5482:	bf5c      	itt	pl
   d5484:	2201      	movpl	r2, #1
   d5486:	601a      	strpl	r2, [r3, #0]
   d5488:	4b0e      	ldr	r3, [pc, #56]	; (d54c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d548a:	681a      	ldr	r2, [r3, #0]
   d548c:	07d0      	lsls	r0, r2, #31
   d548e:	bf5c      	itt	pl
   d5490:	2201      	movpl	r2, #1
   d5492:	601a      	strpl	r2, [r3, #0]
   d5494:	4b0c      	ldr	r3, [pc, #48]	; (d54c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5496:	681a      	ldr	r2, [r3, #0]
   d5498:	07d1      	lsls	r1, r2, #31
   d549a:	bf5c      	itt	pl
   d549c:	2201      	movpl	r2, #1
   d549e:	601a      	strpl	r2, [r3, #0]
   d54a0:	4b0a      	ldr	r3, [pc, #40]	; (d54cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d54a2:	681a      	ldr	r2, [r3, #0]
   d54a4:	07d2      	lsls	r2, r2, #31
   d54a6:	bf5c      	itt	pl
   d54a8:	2201      	movpl	r2, #1
   d54aa:	601a      	strpl	r2, [r3, #0]
   d54ac:	4770      	bx	lr
   d54ae:	bf00      	nop
   d54b0:	2003e7ec 	.word	0x2003e7ec
   d54b4:	2003e7e8 	.word	0x2003e7e8
   d54b8:	2003e7e4 	.word	0x2003e7e4
   d54bc:	2003e7e0 	.word	0x2003e7e0
   d54c0:	2003e7dc 	.word	0x2003e7dc
   d54c4:	2003e7d8 	.word	0x2003e7d8
   d54c8:	2003e7d4 	.word	0x2003e7d4
   d54cc:	2003e7d0 	.word	0x2003e7d0

000d54d0 <sqrt>:
   d54d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d54d4:	ed2d 8b02 	vpush	{d8}
   d54d8:	b08b      	sub	sp, #44	; 0x2c
   d54da:	ec55 4b10 	vmov	r4, r5, d0
   d54de:	f000 f857 	bl	d5590 <__ieee754_sqrt>
   d54e2:	4b29      	ldr	r3, [pc, #164]	; (d5588 <sqrt+0xb8>)
   d54e4:	eeb0 8a40 	vmov.f32	s16, s0
   d54e8:	eef0 8a60 	vmov.f32	s17, s1
   d54ec:	f993 6000 	ldrsb.w	r6, [r3]
   d54f0:	1c73      	adds	r3, r6, #1
   d54f2:	d012      	beq.n	d551a <sqrt+0x4a>
   d54f4:	4622      	mov	r2, r4
   d54f6:	462b      	mov	r3, r5
   d54f8:	4620      	mov	r0, r4
   d54fa:	4629      	mov	r1, r5
   d54fc:	f000 fd6c 	bl	d5fd8 <__aeabi_dcmpun>
   d5500:	4607      	mov	r7, r0
   d5502:	b950      	cbnz	r0, d551a <sqrt+0x4a>
   d5504:	f04f 0800 	mov.w	r8, #0
   d5508:	f04f 0900 	mov.w	r9, #0
   d550c:	4620      	mov	r0, r4
   d550e:	4629      	mov	r1, r5
   d5510:	4642      	mov	r2, r8
   d5512:	464b      	mov	r3, r9
   d5514:	f000 fd38 	bl	d5f88 <__aeabi_dcmplt>
   d5518:	b940      	cbnz	r0, d552c <sqrt+0x5c>
   d551a:	eeb0 0a48 	vmov.f32	s0, s16
   d551e:	eef0 0a68 	vmov.f32	s1, s17
   d5522:	b00b      	add	sp, #44	; 0x2c
   d5524:	ecbd 8b02 	vpop	{d8}
   d5528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d552c:	4b17      	ldr	r3, [pc, #92]	; (d558c <sqrt+0xbc>)
   d552e:	9708      	str	r7, [sp, #32]
   d5530:	2201      	movs	r2, #1
   d5532:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d5536:	e9cd 4502 	strd	r4, r5, [sp, #8]
   d553a:	e88d 000c 	stmia.w	sp, {r2, r3}
   d553e:	b1b6      	cbz	r6, d556e <sqrt+0x9e>
   d5540:	4642      	mov	r2, r8
   d5542:	464b      	mov	r3, r9
   d5544:	4640      	mov	r0, r8
   d5546:	4649      	mov	r1, r9
   d5548:	f000 fbd6 	bl	d5cf8 <__aeabi_ddiv>
   d554c:	2e02      	cmp	r6, #2
   d554e:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d5552:	d10e      	bne.n	d5572 <sqrt+0xa2>
   d5554:	f7ff f8a0 	bl	d4698 <__errno>
   d5558:	2321      	movs	r3, #33	; 0x21
   d555a:	6003      	str	r3, [r0, #0]
   d555c:	9b08      	ldr	r3, [sp, #32]
   d555e:	b973      	cbnz	r3, d557e <sqrt+0xae>
   d5560:	ed9d 0b06 	vldr	d0, [sp, #24]
   d5564:	b00b      	add	sp, #44	; 0x2c
   d5566:	ecbd 8b02 	vpop	{d8}
   d556a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d556e:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d5572:	4668      	mov	r0, sp
   d5574:	f000 f8dc 	bl	d5730 <matherr>
   d5578:	2800      	cmp	r0, #0
   d557a:	d1ef      	bne.n	d555c <sqrt+0x8c>
   d557c:	e7ea      	b.n	d5554 <sqrt+0x84>
   d557e:	f7ff f88b 	bl	d4698 <__errno>
   d5582:	9b08      	ldr	r3, [sp, #32]
   d5584:	6003      	str	r3, [r0, #0]
   d5586:	e7eb      	b.n	d5560 <sqrt+0x90>
   d5588:	2003e34c 	.word	0x2003e34c
   d558c:	000d647c 	.word	0x000d647c

000d5590 <__ieee754_sqrt>:
   d5590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5594:	4965      	ldr	r1, [pc, #404]	; (d572c <__ieee754_sqrt+0x19c>)
   d5596:	ec55 4b10 	vmov	r4, r5, d0
   d559a:	460e      	mov	r6, r1
   d559c:	4029      	ands	r1, r5
   d559e:	42b1      	cmp	r1, r6
   d55a0:	f000 8097 	beq.w	d56d2 <__ieee754_sqrt+0x142>
   d55a4:	2d00      	cmp	r5, #0
   d55a6:	462b      	mov	r3, r5
   d55a8:	ee10 2a10 	vmov	r2, s0
   d55ac:	dd74      	ble.n	d5698 <__ieee754_sqrt+0x108>
   d55ae:	152f      	asrs	r7, r5, #20
   d55b0:	d07f      	beq.n	d56b2 <__ieee754_sqrt+0x122>
   d55b2:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d55b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d55ba:	07f9      	lsls	r1, r7, #31
   d55bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d55c0:	d465      	bmi.n	d568e <__ieee754_sqrt+0xfe>
   d55c2:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d55c6:	2600      	movs	r6, #0
   d55c8:	440b      	add	r3, r1
   d55ca:	107f      	asrs	r7, r7, #1
   d55cc:	0052      	lsls	r2, r2, #1
   d55ce:	46b6      	mov	lr, r6
   d55d0:	2016      	movs	r0, #22
   d55d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d55d6:	eb0e 0401 	add.w	r4, lr, r1
   d55da:	429c      	cmp	r4, r3
   d55dc:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d55e0:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d55e4:	dc03      	bgt.n	d55ee <__ieee754_sqrt+0x5e>
   d55e6:	1b1b      	subs	r3, r3, r4
   d55e8:	eb04 0e01 	add.w	lr, r4, r1
   d55ec:	440e      	add	r6, r1
   d55ee:	3801      	subs	r0, #1
   d55f0:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d55f4:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d55f8:	d1ed      	bne.n	d55d6 <__ieee754_sqrt+0x46>
   d55fa:	4684      	mov	ip, r0
   d55fc:	2420      	movs	r4, #32
   d55fe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d5602:	e009      	b.n	d5618 <__ieee754_sqrt+0x88>
   d5604:	d020      	beq.n	d5648 <__ieee754_sqrt+0xb8>
   d5606:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d560a:	3c01      	subs	r4, #1
   d560c:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d5610:	442b      	add	r3, r5
   d5612:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d5616:	d020      	beq.n	d565a <__ieee754_sqrt+0xca>
   d5618:	459e      	cmp	lr, r3
   d561a:	eb01 050c 	add.w	r5, r1, ip
   d561e:	daf1      	bge.n	d5604 <__ieee754_sqrt+0x74>
   d5620:	2d00      	cmp	r5, #0
   d5622:	eb05 0c01 	add.w	ip, r5, r1
   d5626:	db09      	blt.n	d563c <__ieee754_sqrt+0xac>
   d5628:	46f0      	mov	r8, lr
   d562a:	4295      	cmp	r5, r2
   d562c:	ebce 0303 	rsb	r3, lr, r3
   d5630:	d900      	bls.n	d5634 <__ieee754_sqrt+0xa4>
   d5632:	3b01      	subs	r3, #1
   d5634:	1b52      	subs	r2, r2, r5
   d5636:	4408      	add	r0, r1
   d5638:	46c6      	mov	lr, r8
   d563a:	e7e4      	b.n	d5606 <__ieee754_sqrt+0x76>
   d563c:	f1bc 0f00 	cmp.w	ip, #0
   d5640:	dbf2      	blt.n	d5628 <__ieee754_sqrt+0x98>
   d5642:	f10e 0801 	add.w	r8, lr, #1
   d5646:	e7f0      	b.n	d562a <__ieee754_sqrt+0x9a>
   d5648:	4295      	cmp	r5, r2
   d564a:	d81e      	bhi.n	d568a <__ieee754_sqrt+0xfa>
   d564c:	2d00      	cmp	r5, #0
   d564e:	eb05 0c01 	add.w	ip, r5, r1
   d5652:	db50      	blt.n	d56f6 <__ieee754_sqrt+0x166>
   d5654:	4698      	mov	r8, r3
   d5656:	2300      	movs	r3, #0
   d5658:	e7ec      	b.n	d5634 <__ieee754_sqrt+0xa4>
   d565a:	4313      	orrs	r3, r2
   d565c:	d004      	beq.n	d5668 <__ieee754_sqrt+0xd8>
   d565e:	1c42      	adds	r2, r0, #1
   d5660:	d04d      	beq.n	d56fe <__ieee754_sqrt+0x16e>
   d5662:	f000 0301 	and.w	r3, r0, #1
   d5666:	4418      	add	r0, r3
   d5668:	0840      	lsrs	r0, r0, #1
   d566a:	1071      	asrs	r1, r6, #1
   d566c:	07f3      	lsls	r3, r6, #31
   d566e:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d5672:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d5676:	bf48      	it	mi
   d5678:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d567c:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d5680:	4602      	mov	r2, r0
   d5682:	ec43 2b10 	vmov	d0, r2, r3
   d5686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d568a:	4673      	mov	r3, lr
   d568c:	e7bb      	b.n	d5606 <__ieee754_sqrt+0x76>
   d568e:	005b      	lsls	r3, r3, #1
   d5690:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d5694:	0052      	lsls	r2, r2, #1
   d5696:	e794      	b.n	d55c2 <__ieee754_sqrt+0x32>
   d5698:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d569c:	4321      	orrs	r1, r4
   d569e:	d028      	beq.n	d56f2 <__ieee754_sqrt+0x162>
   d56a0:	bbad      	cbnz	r5, d570e <__ieee754_sqrt+0x17e>
   d56a2:	462f      	mov	r7, r5
   d56a4:	0ad3      	lsrs	r3, r2, #11
   d56a6:	3f15      	subs	r7, #21
   d56a8:	0552      	lsls	r2, r2, #21
   d56aa:	2b00      	cmp	r3, #0
   d56ac:	d0fa      	beq.n	d56a4 <__ieee754_sqrt+0x114>
   d56ae:	02dd      	lsls	r5, r3, #11
   d56b0:	d428      	bmi.n	d5704 <__ieee754_sqrt+0x174>
   d56b2:	2100      	movs	r1, #0
   d56b4:	e000      	b.n	d56b8 <__ieee754_sqrt+0x128>
   d56b6:	4601      	mov	r1, r0
   d56b8:	005b      	lsls	r3, r3, #1
   d56ba:	02dc      	lsls	r4, r3, #11
   d56bc:	f101 0001 	add.w	r0, r1, #1
   d56c0:	d5f9      	bpl.n	d56b6 <__ieee754_sqrt+0x126>
   d56c2:	f1c0 0420 	rsb	r4, r0, #32
   d56c6:	fa22 f404 	lsr.w	r4, r2, r4
   d56ca:	4323      	orrs	r3, r4
   d56cc:	1a7f      	subs	r7, r7, r1
   d56ce:	4082      	lsls	r2, r0
   d56d0:	e76f      	b.n	d55b2 <__ieee754_sqrt+0x22>
   d56d2:	ee10 2a10 	vmov	r2, s0
   d56d6:	462b      	mov	r3, r5
   d56d8:	ee10 0a10 	vmov	r0, s0
   d56dc:	4629      	mov	r1, r5
   d56de:	f000 f9e1 	bl	d5aa4 <__aeabi_dmul>
   d56e2:	4622      	mov	r2, r4
   d56e4:	462b      	mov	r3, r5
   d56e6:	f000 f82b 	bl	d5740 <__adddf3>
   d56ea:	ec41 0b10 	vmov	d0, r0, r1
   d56ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d56f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d56f6:	f1bc 0f00 	cmp.w	ip, #0
   d56fa:	daa2      	bge.n	d5642 <__ieee754_sqrt+0xb2>
   d56fc:	e7aa      	b.n	d5654 <__ieee754_sqrt+0xc4>
   d56fe:	3601      	adds	r6, #1
   d5700:	4620      	mov	r0, r4
   d5702:	e7b2      	b.n	d566a <__ieee754_sqrt+0xda>
   d5704:	2420      	movs	r4, #32
   d5706:	f04f 31ff 	mov.w	r1, #4294967295
   d570a:	2000      	movs	r0, #0
   d570c:	e7db      	b.n	d56c6 <__ieee754_sqrt+0x136>
   d570e:	ee10 2a10 	vmov	r2, s0
   d5712:	462b      	mov	r3, r5
   d5714:	4620      	mov	r0, r4
   d5716:	4629      	mov	r1, r5
   d5718:	f000 f810 	bl	d573c <__aeabi_dsub>
   d571c:	4602      	mov	r2, r0
   d571e:	460b      	mov	r3, r1
   d5720:	f000 faea 	bl	d5cf8 <__aeabi_ddiv>
   d5724:	ec41 0b10 	vmov	d0, r0, r1
   d5728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d572c:	7ff00000 	.word	0x7ff00000

000d5730 <matherr>:
   d5730:	2000      	movs	r0, #0
   d5732:	4770      	bx	lr

000d5734 <__aeabi_drsub>:
   d5734:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5738:	e002      	b.n	d5740 <__adddf3>
   d573a:	bf00      	nop

000d573c <__aeabi_dsub>:
   d573c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5740 <__adddf3>:
   d5740:	b530      	push	{r4, r5, lr}
   d5742:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5746:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d574a:	ea94 0f05 	teq	r4, r5
   d574e:	bf08      	it	eq
   d5750:	ea90 0f02 	teqeq	r0, r2
   d5754:	bf1f      	itttt	ne
   d5756:	ea54 0c00 	orrsne.w	ip, r4, r0
   d575a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d575e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5762:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5766:	f000 80e2 	beq.w	d592e <__adddf3+0x1ee>
   d576a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d576e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5772:	bfb8      	it	lt
   d5774:	426d      	neglt	r5, r5
   d5776:	dd0c      	ble.n	d5792 <__adddf3+0x52>
   d5778:	442c      	add	r4, r5
   d577a:	ea80 0202 	eor.w	r2, r0, r2
   d577e:	ea81 0303 	eor.w	r3, r1, r3
   d5782:	ea82 0000 	eor.w	r0, r2, r0
   d5786:	ea83 0101 	eor.w	r1, r3, r1
   d578a:	ea80 0202 	eor.w	r2, r0, r2
   d578e:	ea81 0303 	eor.w	r3, r1, r3
   d5792:	2d36      	cmp	r5, #54	; 0x36
   d5794:	bf88      	it	hi
   d5796:	bd30      	pophi	{r4, r5, pc}
   d5798:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d579c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d57a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d57a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d57a8:	d002      	beq.n	d57b0 <__adddf3+0x70>
   d57aa:	4240      	negs	r0, r0
   d57ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d57b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d57b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d57b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d57bc:	d002      	beq.n	d57c4 <__adddf3+0x84>
   d57be:	4252      	negs	r2, r2
   d57c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d57c4:	ea94 0f05 	teq	r4, r5
   d57c8:	f000 80a7 	beq.w	d591a <__adddf3+0x1da>
   d57cc:	f1a4 0401 	sub.w	r4, r4, #1
   d57d0:	f1d5 0e20 	rsbs	lr, r5, #32
   d57d4:	db0d      	blt.n	d57f2 <__adddf3+0xb2>
   d57d6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d57da:	fa22 f205 	lsr.w	r2, r2, r5
   d57de:	1880      	adds	r0, r0, r2
   d57e0:	f141 0100 	adc.w	r1, r1, #0
   d57e4:	fa03 f20e 	lsl.w	r2, r3, lr
   d57e8:	1880      	adds	r0, r0, r2
   d57ea:	fa43 f305 	asr.w	r3, r3, r5
   d57ee:	4159      	adcs	r1, r3
   d57f0:	e00e      	b.n	d5810 <__adddf3+0xd0>
   d57f2:	f1a5 0520 	sub.w	r5, r5, #32
   d57f6:	f10e 0e20 	add.w	lr, lr, #32
   d57fa:	2a01      	cmp	r2, #1
   d57fc:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5800:	bf28      	it	cs
   d5802:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5806:	fa43 f305 	asr.w	r3, r3, r5
   d580a:	18c0      	adds	r0, r0, r3
   d580c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5810:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5814:	d507      	bpl.n	d5826 <__adddf3+0xe6>
   d5816:	f04f 0e00 	mov.w	lr, #0
   d581a:	f1dc 0c00 	rsbs	ip, ip, #0
   d581e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5822:	eb6e 0101 	sbc.w	r1, lr, r1
   d5826:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d582a:	d31b      	bcc.n	d5864 <__adddf3+0x124>
   d582c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5830:	d30c      	bcc.n	d584c <__adddf3+0x10c>
   d5832:	0849      	lsrs	r1, r1, #1
   d5834:	ea5f 0030 	movs.w	r0, r0, rrx
   d5838:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d583c:	f104 0401 	add.w	r4, r4, #1
   d5840:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5844:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5848:	f080 809a 	bcs.w	d5980 <__adddf3+0x240>
   d584c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5850:	bf08      	it	eq
   d5852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5856:	f150 0000 	adcs.w	r0, r0, #0
   d585a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d585e:	ea41 0105 	orr.w	r1, r1, r5
   d5862:	bd30      	pop	{r4, r5, pc}
   d5864:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5868:	4140      	adcs	r0, r0
   d586a:	eb41 0101 	adc.w	r1, r1, r1
   d586e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5872:	f1a4 0401 	sub.w	r4, r4, #1
   d5876:	d1e9      	bne.n	d584c <__adddf3+0x10c>
   d5878:	f091 0f00 	teq	r1, #0
   d587c:	bf04      	itt	eq
   d587e:	4601      	moveq	r1, r0
   d5880:	2000      	moveq	r0, #0
   d5882:	fab1 f381 	clz	r3, r1
   d5886:	bf08      	it	eq
   d5888:	3320      	addeq	r3, #32
   d588a:	f1a3 030b 	sub.w	r3, r3, #11
   d588e:	f1b3 0220 	subs.w	r2, r3, #32
   d5892:	da0c      	bge.n	d58ae <__adddf3+0x16e>
   d5894:	320c      	adds	r2, #12
   d5896:	dd08      	ble.n	d58aa <__adddf3+0x16a>
   d5898:	f102 0c14 	add.w	ip, r2, #20
   d589c:	f1c2 020c 	rsb	r2, r2, #12
   d58a0:	fa01 f00c 	lsl.w	r0, r1, ip
   d58a4:	fa21 f102 	lsr.w	r1, r1, r2
   d58a8:	e00c      	b.n	d58c4 <__adddf3+0x184>
   d58aa:	f102 0214 	add.w	r2, r2, #20
   d58ae:	bfd8      	it	le
   d58b0:	f1c2 0c20 	rsble	ip, r2, #32
   d58b4:	fa01 f102 	lsl.w	r1, r1, r2
   d58b8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d58bc:	bfdc      	itt	le
   d58be:	ea41 010c 	orrle.w	r1, r1, ip
   d58c2:	4090      	lslle	r0, r2
   d58c4:	1ae4      	subs	r4, r4, r3
   d58c6:	bfa2      	ittt	ge
   d58c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d58cc:	4329      	orrge	r1, r5
   d58ce:	bd30      	popge	{r4, r5, pc}
   d58d0:	ea6f 0404 	mvn.w	r4, r4
   d58d4:	3c1f      	subs	r4, #31
   d58d6:	da1c      	bge.n	d5912 <__adddf3+0x1d2>
   d58d8:	340c      	adds	r4, #12
   d58da:	dc0e      	bgt.n	d58fa <__adddf3+0x1ba>
   d58dc:	f104 0414 	add.w	r4, r4, #20
   d58e0:	f1c4 0220 	rsb	r2, r4, #32
   d58e4:	fa20 f004 	lsr.w	r0, r0, r4
   d58e8:	fa01 f302 	lsl.w	r3, r1, r2
   d58ec:	ea40 0003 	orr.w	r0, r0, r3
   d58f0:	fa21 f304 	lsr.w	r3, r1, r4
   d58f4:	ea45 0103 	orr.w	r1, r5, r3
   d58f8:	bd30      	pop	{r4, r5, pc}
   d58fa:	f1c4 040c 	rsb	r4, r4, #12
   d58fe:	f1c4 0220 	rsb	r2, r4, #32
   d5902:	fa20 f002 	lsr.w	r0, r0, r2
   d5906:	fa01 f304 	lsl.w	r3, r1, r4
   d590a:	ea40 0003 	orr.w	r0, r0, r3
   d590e:	4629      	mov	r1, r5
   d5910:	bd30      	pop	{r4, r5, pc}
   d5912:	fa21 f004 	lsr.w	r0, r1, r4
   d5916:	4629      	mov	r1, r5
   d5918:	bd30      	pop	{r4, r5, pc}
   d591a:	f094 0f00 	teq	r4, #0
   d591e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5922:	bf06      	itte	eq
   d5924:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5928:	3401      	addeq	r4, #1
   d592a:	3d01      	subne	r5, #1
   d592c:	e74e      	b.n	d57cc <__adddf3+0x8c>
   d592e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5932:	bf18      	it	ne
   d5934:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5938:	d029      	beq.n	d598e <__adddf3+0x24e>
   d593a:	ea94 0f05 	teq	r4, r5
   d593e:	bf08      	it	eq
   d5940:	ea90 0f02 	teqeq	r0, r2
   d5944:	d005      	beq.n	d5952 <__adddf3+0x212>
   d5946:	ea54 0c00 	orrs.w	ip, r4, r0
   d594a:	bf04      	itt	eq
   d594c:	4619      	moveq	r1, r3
   d594e:	4610      	moveq	r0, r2
   d5950:	bd30      	pop	{r4, r5, pc}
   d5952:	ea91 0f03 	teq	r1, r3
   d5956:	bf1e      	ittt	ne
   d5958:	2100      	movne	r1, #0
   d595a:	2000      	movne	r0, #0
   d595c:	bd30      	popne	{r4, r5, pc}
   d595e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5962:	d105      	bne.n	d5970 <__adddf3+0x230>
   d5964:	0040      	lsls	r0, r0, #1
   d5966:	4149      	adcs	r1, r1
   d5968:	bf28      	it	cs
   d596a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d596e:	bd30      	pop	{r4, r5, pc}
   d5970:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5974:	bf3c      	itt	cc
   d5976:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d597a:	bd30      	popcc	{r4, r5, pc}
   d597c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5980:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5984:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5988:	f04f 0000 	mov.w	r0, #0
   d598c:	bd30      	pop	{r4, r5, pc}
   d598e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5992:	bf1a      	itte	ne
   d5994:	4619      	movne	r1, r3
   d5996:	4610      	movne	r0, r2
   d5998:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d599c:	bf1c      	itt	ne
   d599e:	460b      	movne	r3, r1
   d59a0:	4602      	movne	r2, r0
   d59a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d59a6:	bf06      	itte	eq
   d59a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d59ac:	ea91 0f03 	teqeq	r1, r3
   d59b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d59b4:	bd30      	pop	{r4, r5, pc}
   d59b6:	bf00      	nop

000d59b8 <__aeabi_ui2d>:
   d59b8:	f090 0f00 	teq	r0, #0
   d59bc:	bf04      	itt	eq
   d59be:	2100      	moveq	r1, #0
   d59c0:	4770      	bxeq	lr
   d59c2:	b530      	push	{r4, r5, lr}
   d59c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d59c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d59cc:	f04f 0500 	mov.w	r5, #0
   d59d0:	f04f 0100 	mov.w	r1, #0
   d59d4:	e750      	b.n	d5878 <__adddf3+0x138>
   d59d6:	bf00      	nop

000d59d8 <__aeabi_i2d>:
   d59d8:	f090 0f00 	teq	r0, #0
   d59dc:	bf04      	itt	eq
   d59de:	2100      	moveq	r1, #0
   d59e0:	4770      	bxeq	lr
   d59e2:	b530      	push	{r4, r5, lr}
   d59e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d59e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d59ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d59f0:	bf48      	it	mi
   d59f2:	4240      	negmi	r0, r0
   d59f4:	f04f 0100 	mov.w	r1, #0
   d59f8:	e73e      	b.n	d5878 <__adddf3+0x138>
   d59fa:	bf00      	nop

000d59fc <__aeabi_f2d>:
   d59fc:	0042      	lsls	r2, r0, #1
   d59fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5a02:	ea4f 0131 	mov.w	r1, r1, rrx
   d5a06:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5a0a:	bf1f      	itttt	ne
   d5a0c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5a10:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5a14:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5a18:	4770      	bxne	lr
   d5a1a:	f092 0f00 	teq	r2, #0
   d5a1e:	bf14      	ite	ne
   d5a20:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5a24:	4770      	bxeq	lr
   d5a26:	b530      	push	{r4, r5, lr}
   d5a28:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5a2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5a30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5a34:	e720      	b.n	d5878 <__adddf3+0x138>
   d5a36:	bf00      	nop

000d5a38 <__aeabi_ul2d>:
   d5a38:	ea50 0201 	orrs.w	r2, r0, r1
   d5a3c:	bf08      	it	eq
   d5a3e:	4770      	bxeq	lr
   d5a40:	b530      	push	{r4, r5, lr}
   d5a42:	f04f 0500 	mov.w	r5, #0
   d5a46:	e00a      	b.n	d5a5e <__aeabi_l2d+0x16>

000d5a48 <__aeabi_l2d>:
   d5a48:	ea50 0201 	orrs.w	r2, r0, r1
   d5a4c:	bf08      	it	eq
   d5a4e:	4770      	bxeq	lr
   d5a50:	b530      	push	{r4, r5, lr}
   d5a52:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5a56:	d502      	bpl.n	d5a5e <__aeabi_l2d+0x16>
   d5a58:	4240      	negs	r0, r0
   d5a5a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5a5e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5a62:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5a66:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5a6a:	f43f aedc 	beq.w	d5826 <__adddf3+0xe6>
   d5a6e:	f04f 0203 	mov.w	r2, #3
   d5a72:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5a76:	bf18      	it	ne
   d5a78:	3203      	addne	r2, #3
   d5a7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5a7e:	bf18      	it	ne
   d5a80:	3203      	addne	r2, #3
   d5a82:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5a86:	f1c2 0320 	rsb	r3, r2, #32
   d5a8a:	fa00 fc03 	lsl.w	ip, r0, r3
   d5a8e:	fa20 f002 	lsr.w	r0, r0, r2
   d5a92:	fa01 fe03 	lsl.w	lr, r1, r3
   d5a96:	ea40 000e 	orr.w	r0, r0, lr
   d5a9a:	fa21 f102 	lsr.w	r1, r1, r2
   d5a9e:	4414      	add	r4, r2
   d5aa0:	e6c1      	b.n	d5826 <__adddf3+0xe6>
   d5aa2:	bf00      	nop

000d5aa4 <__aeabi_dmul>:
   d5aa4:	b570      	push	{r4, r5, r6, lr}
   d5aa6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5aaa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5aae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5ab2:	bf1d      	ittte	ne
   d5ab4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5ab8:	ea94 0f0c 	teqne	r4, ip
   d5abc:	ea95 0f0c 	teqne	r5, ip
   d5ac0:	f000 f8de 	bleq	d5c80 <__aeabi_dmul+0x1dc>
   d5ac4:	442c      	add	r4, r5
   d5ac6:	ea81 0603 	eor.w	r6, r1, r3
   d5aca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d5ace:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d5ad2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5ad6:	bf18      	it	ne
   d5ad8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5adc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5ae0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5ae4:	d038      	beq.n	d5b58 <__aeabi_dmul+0xb4>
   d5ae6:	fba0 ce02 	umull	ip, lr, r0, r2
   d5aea:	f04f 0500 	mov.w	r5, #0
   d5aee:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5af2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5af6:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5afa:	f04f 0600 	mov.w	r6, #0
   d5afe:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5b02:	f09c 0f00 	teq	ip, #0
   d5b06:	bf18      	it	ne
   d5b08:	f04e 0e01 	orrne.w	lr, lr, #1
   d5b0c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5b10:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5b14:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5b18:	d204      	bcs.n	d5b24 <__aeabi_dmul+0x80>
   d5b1a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5b1e:	416d      	adcs	r5, r5
   d5b20:	eb46 0606 	adc.w	r6, r6, r6
   d5b24:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d5b28:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5b2c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d5b30:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5b34:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d5b38:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5b3c:	bf88      	it	hi
   d5b3e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5b42:	d81e      	bhi.n	d5b82 <__aeabi_dmul+0xde>
   d5b44:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5b48:	bf08      	it	eq
   d5b4a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d5b4e:	f150 0000 	adcs.w	r0, r0, #0
   d5b52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5b56:	bd70      	pop	{r4, r5, r6, pc}
   d5b58:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5b5c:	ea46 0101 	orr.w	r1, r6, r1
   d5b60:	ea40 0002 	orr.w	r0, r0, r2
   d5b64:	ea81 0103 	eor.w	r1, r1, r3
   d5b68:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5b6c:	bfc2      	ittt	gt
   d5b6e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5b72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5b76:	bd70      	popgt	{r4, r5, r6, pc}
   d5b78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5b7c:	f04f 0e00 	mov.w	lr, #0
   d5b80:	3c01      	subs	r4, #1
   d5b82:	f300 80ab 	bgt.w	d5cdc <__aeabi_dmul+0x238>
   d5b86:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d5b8a:	bfde      	ittt	le
   d5b8c:	2000      	movle	r0, #0
   d5b8e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d5b92:	bd70      	pople	{r4, r5, r6, pc}
   d5b94:	f1c4 0400 	rsb	r4, r4, #0
   d5b98:	3c20      	subs	r4, #32
   d5b9a:	da35      	bge.n	d5c08 <__aeabi_dmul+0x164>
   d5b9c:	340c      	adds	r4, #12
   d5b9e:	dc1b      	bgt.n	d5bd8 <__aeabi_dmul+0x134>
   d5ba0:	f104 0414 	add.w	r4, r4, #20
   d5ba4:	f1c4 0520 	rsb	r5, r4, #32
   d5ba8:	fa00 f305 	lsl.w	r3, r0, r5
   d5bac:	fa20 f004 	lsr.w	r0, r0, r4
   d5bb0:	fa01 f205 	lsl.w	r2, r1, r5
   d5bb4:	ea40 0002 	orr.w	r0, r0, r2
   d5bb8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d5bbc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5bc0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5bc4:	fa21 f604 	lsr.w	r6, r1, r4
   d5bc8:	eb42 0106 	adc.w	r1, r2, r6
   d5bcc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5bd0:	bf08      	it	eq
   d5bd2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5bd6:	bd70      	pop	{r4, r5, r6, pc}
   d5bd8:	f1c4 040c 	rsb	r4, r4, #12
   d5bdc:	f1c4 0520 	rsb	r5, r4, #32
   d5be0:	fa00 f304 	lsl.w	r3, r0, r4
   d5be4:	fa20 f005 	lsr.w	r0, r0, r5
   d5be8:	fa01 f204 	lsl.w	r2, r1, r4
   d5bec:	ea40 0002 	orr.w	r0, r0, r2
   d5bf0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5bf4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5bf8:	f141 0100 	adc.w	r1, r1, #0
   d5bfc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5c00:	bf08      	it	eq
   d5c02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5c06:	bd70      	pop	{r4, r5, r6, pc}
   d5c08:	f1c4 0520 	rsb	r5, r4, #32
   d5c0c:	fa00 f205 	lsl.w	r2, r0, r5
   d5c10:	ea4e 0e02 	orr.w	lr, lr, r2
   d5c14:	fa20 f304 	lsr.w	r3, r0, r4
   d5c18:	fa01 f205 	lsl.w	r2, r1, r5
   d5c1c:	ea43 0302 	orr.w	r3, r3, r2
   d5c20:	fa21 f004 	lsr.w	r0, r1, r4
   d5c24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5c28:	fa21 f204 	lsr.w	r2, r1, r4
   d5c2c:	ea20 0002 	bic.w	r0, r0, r2
   d5c30:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d5c34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5c38:	bf08      	it	eq
   d5c3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5c3e:	bd70      	pop	{r4, r5, r6, pc}
   d5c40:	f094 0f00 	teq	r4, #0
   d5c44:	d10f      	bne.n	d5c66 <__aeabi_dmul+0x1c2>
   d5c46:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d5c4a:	0040      	lsls	r0, r0, #1
   d5c4c:	eb41 0101 	adc.w	r1, r1, r1
   d5c50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5c54:	bf08      	it	eq
   d5c56:	3c01      	subeq	r4, #1
   d5c58:	d0f7      	beq.n	d5c4a <__aeabi_dmul+0x1a6>
   d5c5a:	ea41 0106 	orr.w	r1, r1, r6
   d5c5e:	f095 0f00 	teq	r5, #0
   d5c62:	bf18      	it	ne
   d5c64:	4770      	bxne	lr
   d5c66:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d5c6a:	0052      	lsls	r2, r2, #1
   d5c6c:	eb43 0303 	adc.w	r3, r3, r3
   d5c70:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d5c74:	bf08      	it	eq
   d5c76:	3d01      	subeq	r5, #1
   d5c78:	d0f7      	beq.n	d5c6a <__aeabi_dmul+0x1c6>
   d5c7a:	ea43 0306 	orr.w	r3, r3, r6
   d5c7e:	4770      	bx	lr
   d5c80:	ea94 0f0c 	teq	r4, ip
   d5c84:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5c88:	bf18      	it	ne
   d5c8a:	ea95 0f0c 	teqne	r5, ip
   d5c8e:	d00c      	beq.n	d5caa <__aeabi_dmul+0x206>
   d5c90:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5c94:	bf18      	it	ne
   d5c96:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5c9a:	d1d1      	bne.n	d5c40 <__aeabi_dmul+0x19c>
   d5c9c:	ea81 0103 	eor.w	r1, r1, r3
   d5ca0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5ca4:	f04f 0000 	mov.w	r0, #0
   d5ca8:	bd70      	pop	{r4, r5, r6, pc}
   d5caa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5cae:	bf06      	itte	eq
   d5cb0:	4610      	moveq	r0, r2
   d5cb2:	4619      	moveq	r1, r3
   d5cb4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5cb8:	d019      	beq.n	d5cee <__aeabi_dmul+0x24a>
   d5cba:	ea94 0f0c 	teq	r4, ip
   d5cbe:	d102      	bne.n	d5cc6 <__aeabi_dmul+0x222>
   d5cc0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d5cc4:	d113      	bne.n	d5cee <__aeabi_dmul+0x24a>
   d5cc6:	ea95 0f0c 	teq	r5, ip
   d5cca:	d105      	bne.n	d5cd8 <__aeabi_dmul+0x234>
   d5ccc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d5cd0:	bf1c      	itt	ne
   d5cd2:	4610      	movne	r0, r2
   d5cd4:	4619      	movne	r1, r3
   d5cd6:	d10a      	bne.n	d5cee <__aeabi_dmul+0x24a>
   d5cd8:	ea81 0103 	eor.w	r1, r1, r3
   d5cdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5ce0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5ce4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5ce8:	f04f 0000 	mov.w	r0, #0
   d5cec:	bd70      	pop	{r4, r5, r6, pc}
   d5cee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5cf2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d5cf6:	bd70      	pop	{r4, r5, r6, pc}

000d5cf8 <__aeabi_ddiv>:
   d5cf8:	b570      	push	{r4, r5, r6, lr}
   d5cfa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5cfe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5d02:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5d06:	bf1d      	ittte	ne
   d5d08:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5d0c:	ea94 0f0c 	teqne	r4, ip
   d5d10:	ea95 0f0c 	teqne	r5, ip
   d5d14:	f000 f8a7 	bleq	d5e66 <__aeabi_ddiv+0x16e>
   d5d18:	eba4 0405 	sub.w	r4, r4, r5
   d5d1c:	ea81 0e03 	eor.w	lr, r1, r3
   d5d20:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5d24:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5d28:	f000 8088 	beq.w	d5e3c <__aeabi_ddiv+0x144>
   d5d2c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5d30:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d5d34:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d5d38:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d5d3c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d5d40:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d5d44:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d5d48:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d5d4c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d5d50:	429d      	cmp	r5, r3
   d5d52:	bf08      	it	eq
   d5d54:	4296      	cmpeq	r6, r2
   d5d56:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d5d5a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d5d5e:	d202      	bcs.n	d5d66 <__aeabi_ddiv+0x6e>
   d5d60:	085b      	lsrs	r3, r3, #1
   d5d62:	ea4f 0232 	mov.w	r2, r2, rrx
   d5d66:	1ab6      	subs	r6, r6, r2
   d5d68:	eb65 0503 	sbc.w	r5, r5, r3
   d5d6c:	085b      	lsrs	r3, r3, #1
   d5d6e:	ea4f 0232 	mov.w	r2, r2, rrx
   d5d72:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d5d76:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d5d7a:	ebb6 0e02 	subs.w	lr, r6, r2
   d5d7e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5d82:	bf22      	ittt	cs
   d5d84:	1ab6      	subcs	r6, r6, r2
   d5d86:	4675      	movcs	r5, lr
   d5d88:	ea40 000c 	orrcs.w	r0, r0, ip
   d5d8c:	085b      	lsrs	r3, r3, #1
   d5d8e:	ea4f 0232 	mov.w	r2, r2, rrx
   d5d92:	ebb6 0e02 	subs.w	lr, r6, r2
   d5d96:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5d9a:	bf22      	ittt	cs
   d5d9c:	1ab6      	subcs	r6, r6, r2
   d5d9e:	4675      	movcs	r5, lr
   d5da0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d5da4:	085b      	lsrs	r3, r3, #1
   d5da6:	ea4f 0232 	mov.w	r2, r2, rrx
   d5daa:	ebb6 0e02 	subs.w	lr, r6, r2
   d5dae:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5db2:	bf22      	ittt	cs
   d5db4:	1ab6      	subcs	r6, r6, r2
   d5db6:	4675      	movcs	r5, lr
   d5db8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d5dbc:	085b      	lsrs	r3, r3, #1
   d5dbe:	ea4f 0232 	mov.w	r2, r2, rrx
   d5dc2:	ebb6 0e02 	subs.w	lr, r6, r2
   d5dc6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5dca:	bf22      	ittt	cs
   d5dcc:	1ab6      	subcs	r6, r6, r2
   d5dce:	4675      	movcs	r5, lr
   d5dd0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d5dd4:	ea55 0e06 	orrs.w	lr, r5, r6
   d5dd8:	d018      	beq.n	d5e0c <__aeabi_ddiv+0x114>
   d5dda:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d5dde:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d5de2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d5de6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d5dea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d5dee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d5df2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d5df6:	d1c0      	bne.n	d5d7a <__aeabi_ddiv+0x82>
   d5df8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5dfc:	d10b      	bne.n	d5e16 <__aeabi_ddiv+0x11e>
   d5dfe:	ea41 0100 	orr.w	r1, r1, r0
   d5e02:	f04f 0000 	mov.w	r0, #0
   d5e06:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d5e0a:	e7b6      	b.n	d5d7a <__aeabi_ddiv+0x82>
   d5e0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5e10:	bf04      	itt	eq
   d5e12:	4301      	orreq	r1, r0
   d5e14:	2000      	moveq	r0, #0
   d5e16:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5e1a:	bf88      	it	hi
   d5e1c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5e20:	f63f aeaf 	bhi.w	d5b82 <__aeabi_dmul+0xde>
   d5e24:	ebb5 0c03 	subs.w	ip, r5, r3
   d5e28:	bf04      	itt	eq
   d5e2a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d5e2e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5e32:	f150 0000 	adcs.w	r0, r0, #0
   d5e36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5e3a:	bd70      	pop	{r4, r5, r6, pc}
   d5e3c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d5e40:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d5e44:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d5e48:	bfc2      	ittt	gt
   d5e4a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5e4e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5e52:	bd70      	popgt	{r4, r5, r6, pc}
   d5e54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5e58:	f04f 0e00 	mov.w	lr, #0
   d5e5c:	3c01      	subs	r4, #1
   d5e5e:	e690      	b.n	d5b82 <__aeabi_dmul+0xde>
   d5e60:	ea45 0e06 	orr.w	lr, r5, r6
   d5e64:	e68d      	b.n	d5b82 <__aeabi_dmul+0xde>
   d5e66:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5e6a:	ea94 0f0c 	teq	r4, ip
   d5e6e:	bf08      	it	eq
   d5e70:	ea95 0f0c 	teqeq	r5, ip
   d5e74:	f43f af3b 	beq.w	d5cee <__aeabi_dmul+0x24a>
   d5e78:	ea94 0f0c 	teq	r4, ip
   d5e7c:	d10a      	bne.n	d5e94 <__aeabi_ddiv+0x19c>
   d5e7e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5e82:	f47f af34 	bne.w	d5cee <__aeabi_dmul+0x24a>
   d5e86:	ea95 0f0c 	teq	r5, ip
   d5e8a:	f47f af25 	bne.w	d5cd8 <__aeabi_dmul+0x234>
   d5e8e:	4610      	mov	r0, r2
   d5e90:	4619      	mov	r1, r3
   d5e92:	e72c      	b.n	d5cee <__aeabi_dmul+0x24a>
   d5e94:	ea95 0f0c 	teq	r5, ip
   d5e98:	d106      	bne.n	d5ea8 <__aeabi_ddiv+0x1b0>
   d5e9a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5e9e:	f43f aefd 	beq.w	d5c9c <__aeabi_dmul+0x1f8>
   d5ea2:	4610      	mov	r0, r2
   d5ea4:	4619      	mov	r1, r3
   d5ea6:	e722      	b.n	d5cee <__aeabi_dmul+0x24a>
   d5ea8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5eac:	bf18      	it	ne
   d5eae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5eb2:	f47f aec5 	bne.w	d5c40 <__aeabi_dmul+0x19c>
   d5eb6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d5eba:	f47f af0d 	bne.w	d5cd8 <__aeabi_dmul+0x234>
   d5ebe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d5ec2:	f47f aeeb 	bne.w	d5c9c <__aeabi_dmul+0x1f8>
   d5ec6:	e712      	b.n	d5cee <__aeabi_dmul+0x24a>

000d5ec8 <__gedf2>:
   d5ec8:	f04f 3cff 	mov.w	ip, #4294967295
   d5ecc:	e006      	b.n	d5edc <__cmpdf2+0x4>
   d5ece:	bf00      	nop

000d5ed0 <__ledf2>:
   d5ed0:	f04f 0c01 	mov.w	ip, #1
   d5ed4:	e002      	b.n	d5edc <__cmpdf2+0x4>
   d5ed6:	bf00      	nop

000d5ed8 <__cmpdf2>:
   d5ed8:	f04f 0c01 	mov.w	ip, #1
   d5edc:	f84d cd04 	str.w	ip, [sp, #-4]!
   d5ee0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5ee4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5ee8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5eec:	bf18      	it	ne
   d5eee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d5ef2:	d01b      	beq.n	d5f2c <__cmpdf2+0x54>
   d5ef4:	b001      	add	sp, #4
   d5ef6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d5efa:	bf0c      	ite	eq
   d5efc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d5f00:	ea91 0f03 	teqne	r1, r3
   d5f04:	bf02      	ittt	eq
   d5f06:	ea90 0f02 	teqeq	r0, r2
   d5f0a:	2000      	moveq	r0, #0
   d5f0c:	4770      	bxeq	lr
   d5f0e:	f110 0f00 	cmn.w	r0, #0
   d5f12:	ea91 0f03 	teq	r1, r3
   d5f16:	bf58      	it	pl
   d5f18:	4299      	cmppl	r1, r3
   d5f1a:	bf08      	it	eq
   d5f1c:	4290      	cmpeq	r0, r2
   d5f1e:	bf2c      	ite	cs
   d5f20:	17d8      	asrcs	r0, r3, #31
   d5f22:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d5f26:	f040 0001 	orr.w	r0, r0, #1
   d5f2a:	4770      	bx	lr
   d5f2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5f30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5f34:	d102      	bne.n	d5f3c <__cmpdf2+0x64>
   d5f36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d5f3a:	d107      	bne.n	d5f4c <__cmpdf2+0x74>
   d5f3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5f40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5f44:	d1d6      	bne.n	d5ef4 <__cmpdf2+0x1c>
   d5f46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d5f4a:	d0d3      	beq.n	d5ef4 <__cmpdf2+0x1c>
   d5f4c:	f85d 0b04 	ldr.w	r0, [sp], #4
   d5f50:	4770      	bx	lr
   d5f52:	bf00      	nop

000d5f54 <__aeabi_cdrcmple>:
   d5f54:	4684      	mov	ip, r0
   d5f56:	4610      	mov	r0, r2
   d5f58:	4662      	mov	r2, ip
   d5f5a:	468c      	mov	ip, r1
   d5f5c:	4619      	mov	r1, r3
   d5f5e:	4663      	mov	r3, ip
   d5f60:	e000      	b.n	d5f64 <__aeabi_cdcmpeq>
   d5f62:	bf00      	nop

000d5f64 <__aeabi_cdcmpeq>:
   d5f64:	b501      	push	{r0, lr}
   d5f66:	f7ff ffb7 	bl	d5ed8 <__cmpdf2>
   d5f6a:	2800      	cmp	r0, #0
   d5f6c:	bf48      	it	mi
   d5f6e:	f110 0f00 	cmnmi.w	r0, #0
   d5f72:	bd01      	pop	{r0, pc}

000d5f74 <__aeabi_dcmpeq>:
   d5f74:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5f78:	f7ff fff4 	bl	d5f64 <__aeabi_cdcmpeq>
   d5f7c:	bf0c      	ite	eq
   d5f7e:	2001      	moveq	r0, #1
   d5f80:	2000      	movne	r0, #0
   d5f82:	f85d fb08 	ldr.w	pc, [sp], #8
   d5f86:	bf00      	nop

000d5f88 <__aeabi_dcmplt>:
   d5f88:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5f8c:	f7ff ffea 	bl	d5f64 <__aeabi_cdcmpeq>
   d5f90:	bf34      	ite	cc
   d5f92:	2001      	movcc	r0, #1
   d5f94:	2000      	movcs	r0, #0
   d5f96:	f85d fb08 	ldr.w	pc, [sp], #8
   d5f9a:	bf00      	nop

000d5f9c <__aeabi_dcmple>:
   d5f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5fa0:	f7ff ffe0 	bl	d5f64 <__aeabi_cdcmpeq>
   d5fa4:	bf94      	ite	ls
   d5fa6:	2001      	movls	r0, #1
   d5fa8:	2000      	movhi	r0, #0
   d5faa:	f85d fb08 	ldr.w	pc, [sp], #8
   d5fae:	bf00      	nop

000d5fb0 <__aeabi_dcmpge>:
   d5fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5fb4:	f7ff ffce 	bl	d5f54 <__aeabi_cdrcmple>
   d5fb8:	bf94      	ite	ls
   d5fba:	2001      	movls	r0, #1
   d5fbc:	2000      	movhi	r0, #0
   d5fbe:	f85d fb08 	ldr.w	pc, [sp], #8
   d5fc2:	bf00      	nop

000d5fc4 <__aeabi_dcmpgt>:
   d5fc4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5fc8:	f7ff ffc4 	bl	d5f54 <__aeabi_cdrcmple>
   d5fcc:	bf34      	ite	cc
   d5fce:	2001      	movcc	r0, #1
   d5fd0:	2000      	movcs	r0, #0
   d5fd2:	f85d fb08 	ldr.w	pc, [sp], #8
   d5fd6:	bf00      	nop

000d5fd8 <__aeabi_dcmpun>:
   d5fd8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5fdc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5fe0:	d102      	bne.n	d5fe8 <__aeabi_dcmpun+0x10>
   d5fe2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d5fe6:	d10a      	bne.n	d5ffe <__aeabi_dcmpun+0x26>
   d5fe8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5fec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5ff0:	d102      	bne.n	d5ff8 <__aeabi_dcmpun+0x20>
   d5ff2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d5ff6:	d102      	bne.n	d5ffe <__aeabi_dcmpun+0x26>
   d5ff8:	f04f 0000 	mov.w	r0, #0
   d5ffc:	4770      	bx	lr
   d5ffe:	f04f 0001 	mov.w	r0, #1
   d6002:	4770      	bx	lr

000d6004 <__aeabi_d2f>:
   d6004:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6008:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d600c:	bf24      	itt	cs
   d600e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d6012:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d6016:	d90d      	bls.n	d6034 <__aeabi_d2f+0x30>
   d6018:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d601c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6020:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6024:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6028:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d602c:	bf08      	it	eq
   d602e:	f020 0001 	biceq.w	r0, r0, #1
   d6032:	4770      	bx	lr
   d6034:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6038:	d121      	bne.n	d607e <__aeabi_d2f+0x7a>
   d603a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d603e:	bfbc      	itt	lt
   d6040:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6044:	4770      	bxlt	lr
   d6046:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d604a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d604e:	f1c2 0218 	rsb	r2, r2, #24
   d6052:	f1c2 0c20 	rsb	ip, r2, #32
   d6056:	fa10 f30c 	lsls.w	r3, r0, ip
   d605a:	fa20 f002 	lsr.w	r0, r0, r2
   d605e:	bf18      	it	ne
   d6060:	f040 0001 	orrne.w	r0, r0, #1
   d6064:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6068:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d606c:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6070:	ea40 000c 	orr.w	r0, r0, ip
   d6074:	fa23 f302 	lsr.w	r3, r3, r2
   d6078:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d607c:	e7cc      	b.n	d6018 <__aeabi_d2f+0x14>
   d607e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d6082:	d107      	bne.n	d6094 <__aeabi_d2f+0x90>
   d6084:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6088:	bf1e      	ittt	ne
   d608a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d608e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d6092:	4770      	bxne	lr
   d6094:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6098:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d609c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d60a0:	4770      	bx	lr
   d60a2:	bf00      	nop

000d60a4 <__cxa_atexit>:
   d60a4:	b510      	push	{r4, lr}
   d60a6:	4c05      	ldr	r4, [pc, #20]	; (d60bc <__cxa_atexit+0x18>)
   d60a8:	4613      	mov	r3, r2
   d60aa:	b12c      	cbz	r4, d60b8 <__cxa_atexit+0x14>
   d60ac:	460a      	mov	r2, r1
   d60ae:	4601      	mov	r1, r0
   d60b0:	2002      	movs	r0, #2
   d60b2:	f3af 8000 	nop.w
   d60b6:	bd10      	pop	{r4, pc}
   d60b8:	4620      	mov	r0, r4
   d60ba:	bd10      	pop	{r4, pc}
   d60bc:	00000000 	.word	0x00000000

000d60c0 <memcpy>:
   d60c0:	b510      	push	{r4, lr}
   d60c2:	1e43      	subs	r3, r0, #1
   d60c4:	440a      	add	r2, r1
   d60c6:	4291      	cmp	r1, r2
   d60c8:	d004      	beq.n	d60d4 <memcpy+0x14>
   d60ca:	f811 4b01 	ldrb.w	r4, [r1], #1
   d60ce:	f803 4f01 	strb.w	r4, [r3, #1]!
   d60d2:	e7f8      	b.n	d60c6 <memcpy+0x6>
   d60d4:	bd10      	pop	{r4, pc}

000d60d6 <memset>:
   d60d6:	4402      	add	r2, r0
   d60d8:	4603      	mov	r3, r0
   d60da:	4293      	cmp	r3, r2
   d60dc:	d002      	beq.n	d60e4 <memset+0xe>
   d60de:	f803 1b01 	strb.w	r1, [r3], #1
   d60e2:	e7fa      	b.n	d60da <memset+0x4>
   d60e4:	4770      	bx	lr
	...

000d60e8 <srand>:
   d60e8:	b538      	push	{r3, r4, r5, lr}
   d60ea:	4b12      	ldr	r3, [pc, #72]	; (d6134 <srand+0x4c>)
   d60ec:	681c      	ldr	r4, [r3, #0]
   d60ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d60f0:	4605      	mov	r5, r0
   d60f2:	b9d3      	cbnz	r3, d612a <srand+0x42>
   d60f4:	2018      	movs	r0, #24
   d60f6:	f7fe fab7 	bl	d4668 <malloc>
   d60fa:	f243 330e 	movw	r3, #13070	; 0x330e
   d60fe:	63a0      	str	r0, [r4, #56]	; 0x38
   d6100:	8003      	strh	r3, [r0, #0]
   d6102:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6106:	8043      	strh	r3, [r0, #2]
   d6108:	f241 2334 	movw	r3, #4660	; 0x1234
   d610c:	8083      	strh	r3, [r0, #4]
   d610e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6112:	80c3      	strh	r3, [r0, #6]
   d6114:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6118:	8103      	strh	r3, [r0, #8]
   d611a:	2305      	movs	r3, #5
   d611c:	8143      	strh	r3, [r0, #10]
   d611e:	230b      	movs	r3, #11
   d6120:	8183      	strh	r3, [r0, #12]
   d6122:	2201      	movs	r2, #1
   d6124:	2300      	movs	r3, #0
   d6126:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d612a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d612c:	2200      	movs	r2, #0
   d612e:	611d      	str	r5, [r3, #16]
   d6130:	615a      	str	r2, [r3, #20]
   d6132:	bd38      	pop	{r3, r4, r5, pc}
   d6134:	2003e3b0 	.word	0x2003e3b0

000d6138 <strlen>:
   d6138:	4603      	mov	r3, r0
   d613a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d613e:	2a00      	cmp	r2, #0
   d6140:	d1fb      	bne.n	d613a <strlen+0x2>
   d6142:	1a18      	subs	r0, r3, r0
   d6144:	3801      	subs	r0, #1
   d6146:	4770      	bx	lr

000d6148 <dynalib_user>:
   d6148:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d6158:	0000 0000 2d2d 2d2d 2d2d 2d2d 2d2d 412d     ....-----------A
   d6168:	6363 6c65 7265 7461 6f69 2d6e 2d2d 2d2d     cceleration-----
   d6178:	2d2d 2d2d 2d2d 2d2d 2d2d 000a 6341 6563     ----------..Acce
   d6188:	656c 6172 6974 6e6f 6920 206e 2d58 7841     leration in X-Ax
   d6198:	7369 203a 3025 322e 2066 000a 6341 6563     is: %0.2f ..Acce
   d61a8:	656c 6172 6974 6e6f 6920 206e 2d59 7841     leration in Y-Ax
   d61b8:	7369 203a 3025 322e 2066 000a 6341 6563     is: %0.2f ..Acce
   d61c8:	656c 6172 6974 6e6f 6920 206e 2d5a 7841     leration in Z-Ax
   d61d8:	7369 203a 3025 322e 2066 000a 6f54 6174     is: %0.2f ..Tota
   d61e8:	206c 6341 6563 656c 6172 6974 6e6f 203a     l Acceleration: 
   d61f8:	3025 322e 2066 000a                         %0.2f ..

000d6200 <_ZTVN5spark12NetworkClassE>:
	...
   d6208:	46a9 000d 46b3 000d 46bd 000d 46c7 000d     .F...F...F...F..
   d6218:	46d1 000d 46dd 000d 46e9 000d 46f5 000d     .F...F...F...F..
   d6228:	46fd 000d 4707 000d 4711 000d               .F...G...G..

000d6234 <_ZTVN5spark9WiFiClassE>:
	...
   d623c:	484f 000d 4845 000d 483b 000d 47f1 000d     OH..EH..;H...G..
   d624c:	482f 000d 4823 000d 4817 000d 480f 000d     /H..#H...H...H..
   d625c:	4805 000d 47fb 000d 4711 000d               .H...G...G..

000d6268 <_ZTVN5spark9MeshClassE>:
	...
   d6270:	48cb 000d 48c1 000d 48b7 000d 48ad 000d     .H...H...H...H..
   d6280:	48a1 000d 4895 000d 4889 000d 4881 000d     .H...H...H...H..
   d6290:	4877 000d 486d 000d 4711 000d               wH..mH...G..

000d629c <_ZTV7TwoWire>:
	...
   d62a4:	49e9 000d 4a33 000d 4a0b 000d 49eb 000d     .I..3J...J...I..
   d62b4:	4a13 000d 4a1b 000d 4a23 000d 4a2b 000d     .J...J..#J..+J..

000d62c4 <_ZTV9USBSerial>:
	...
   d62cc:	4af3 000d 4b43 000d 4b51 000d 4e59 000d     .J..CK..QK..YN..
   d62dc:	4b2f 000d 4af5 000d 4b0b 000d 4b3d 000d     /K...J...K..=K..
   d62ec:	4b21 000d 4aef 000d                         !K...J..

000d62f4 <_ZTV9IPAddress>:
	...
   d62fc:	4c11 000d 4c01 000d 4c03 000d 005a 2b25     .L...L...L..Z.%+
   d630c:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
   d631c:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
   d632c:	6974 656d 6200 7561 0064 6553 6972 6c61     time.baud.Serial
   d633c:	5300 7265 6169 316c 7400 7079 0065 6170     .Serial1.type.pa
   d634c:	6172 006d 6d63 0064 6469 6800 646e 7300     ram.cmd.id.hnd.s
   d635c:	7274 006d 6966 746c 6c00 6c76 6100 6464     trm.filt.lvl.add
   d636c:	6148 646e 656c 0072 6572 6f6d 6576 6148     Handler.removeHa
   d637c:	646e 656c 0072 6e65 6d75 6148 646e 656c     ndler.enumHandle
   d638c:	7372 4a00 4f53 534e 7274 6165 4c6d 676f     rs.JSONStreamLog
   d639c:	6148 646e 656c 0072 7061 0070 3025 3031     Handler.app.%010
   d63ac:	2075 5d00 0020 6425 2c00 0020 2928 203a     u .] .%d., .(): 
   d63bc:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
   d63cc:	7465 6961 736c 3d20 0020 0a0d 6600 6c00     etails = ....f.l
   d63dc:	006e 6e66 6300 646f 0065 6564 6174 6c69     n.fn.code.detail
   d63ec:	6e00 6e6f 0065 7274 6361 0065 6e69 6f66     .none.trace.info
   d63fc:	7700 7261 006e 7265 6f72 0072 6170 696e     .warn.error.pani
   d640c:	0063 6c61 006c 0000                         c.all...

000d6414 <_ZTV11USARTSerial>:
	...
   d641c:	4fb1 000d 5001 000d 500f 000d 4e59 000d     .O...P...P..YN..
   d642c:	4fc5 000d 4fe7 000d 4fd3 000d 4ffb 000d     .O...O...O...O..
   d643c:	4fb3 000d 4fb7 000d                         .O...O..

000d6444 <_ZTVN5spark13EthernetClassE>:
	...
   d644c:	515f 000d 5155 000d 514b 000d 5141 000d     _Q..UQ..KQ..AQ..
   d645c:	5135 000d 5129 000d 511d 000d 5115 000d     5Q..)Q...Q...Q..
   d646c:	510b 000d 5101 000d 4711 000d               .Q...Q...G..

000d6478 <_ZSt7nothrow>:
   d6478:	0000 0000 7173 7472 0000 0000               ....sqrt....

000d6484 <__sf_fake_stdin>:
	...

000d64a4 <__sf_fake_stdout>:
	...

000d64c4 <__sf_fake_stderr>:
	...
   d64e4:	0043                                        C.

000d64e6 <link_const_variable_data_end>:
	...

000d64e8 <link_constructors_location>:
   d64e8:	000d433d 	.word	0x000d433d
   d64ec:	000d47dd 	.word	0x000d47dd
   d64f0:	000d4859 	.word	0x000d4859
   d64f4:	000d4999 	.word	0x000d4999
   d64f8:	000d4e19 	.word	0x000d4e19
   d64fc:	000d4e35 	.word	0x000d4e35
   d6500:	000d4e49 	.word	0x000d4e49
   d6504:	000d4f89 	.word	0x000d4f89
   d6508:	000d50cd 	.word	0x000d50cd
   d650c:	000d5169 	.word	0x000d5169
   d6510:	000d5241 	.word	0x000d5241
   d6514:	000d52c5 	.word	0x000d52c5
   d6518:	000d5389 	.word	0x000d5389
   d651c:	000d544d 	.word	0x000d544d
