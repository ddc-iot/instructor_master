
c:/Users/IoT_Instructor/Documents/IoT/instructor_master/NCD/AMS5812/target/1.5.2/argon/AMS5812.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002e10  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d6e30  000d6e30  00006e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000d6e38  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  2003e358  000d6e3c  0001e358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000430  2003e3c0  2003e3c0  0002e3c0  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000d6ea4  000d6ea4  00026ea4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d6ecc  000d6ecc  00026ecc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000d196f  00000000  00000000  00026ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000fa06  00000000  00000000  000f883f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001db21  00000000  00000000  00108245  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002358  00000000  00000000  00125d66  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000044e0  00000000  00000000  001280be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00031e18  00000000  00000000  0012c59e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00024fbb  00000000  00000000  0015e3b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00103ff2  00000000  00000000  00183371  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000cb08  00000000  00000000  00287364  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 fcbd 	bl	d69b0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 fcc2 	bl	d69c6 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e358 	.word	0x2003e358
   d404c:	000d6e3c 	.word	0x000d6e3c
   d4050:	2003e3c0 	.word	0x2003e3c0
   d4054:	2003e3c0 	.word	0x2003e3c0
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f000 fdeb 	bl	d4c38 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d6e30 	.word	0x000d6e30
   d4084:	000d6df8 	.word	0x000d6df8

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b815 	b.w	d40b6 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f823 	bl	d40d8 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f000 bd91 	b.w	d4bbc <_post_loop>

000d409a <_Znwj>:
   d409a:	f000 bab7 	b.w	d460c <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 babd 	b.w	d461c <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 babb 	b.w	d461c <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <setup>:
float pressure = 0.0;
float cTemp = 0.0;
float fTemp = 0.0;

void setup()
{
   d40b6:	b508      	push	{r3, lr}
  Wire.begin();
   d40b8:	f001 fc68 	bl	d598c <_Z19__fetch_global_Wirev>
   d40bc:	f001 fa76 	bl	d55ac <_ZN7TwoWire5beginEv>
  Serial.begin(9600);
   d40c0:	f001 f97e 	bl	d53c0 <_Z16_fetch_usbserialv>
   d40c4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40c8:	f001 f96e 	bl	d53a8 <_ZN9USBSerial5beginEl>
  delay(300);
   d40cc:	f44f 7096 	mov.w	r0, #300	; 0x12c
}
   d40d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void setup()
{
  Wire.begin();
  Serial.begin(9600);
  delay(300);
   d40d4:	f000 bd24 	b.w	d4b20 <delay>

000d40d8 <loop>:
}

void loop()
{
   d40d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d40dc:	b08a      	sub	sp, #40	; 0x28
  // Request 4 bytes of data
  Wire.requestFrom(Addr, 4);
   d40de:	f001 fc55 	bl	d598c <_Z19__fetch_global_Wirev>
   d40e2:	2204      	movs	r2, #4
   d40e4:	2178      	movs	r1, #120	; 0x78
   d40e6:	f001 fa95 	bl	d5614 <_ZN7TwoWire11requestFromEhj>

  // Read 4 bytes of data
  // pressure msb, pressure lsb, temp msb, temp lsb
  if (Wire.available() == 4)
   d40ea:	f001 fc4f 	bl	d598c <_Z19__fetch_global_Wirev>
   d40ee:	6803      	ldr	r3, [r0, #0]
   d40f0:	4c63      	ldr	r4, [pc, #396]	; (d4280 <loop+0x1a8>)
   d40f2:	691b      	ldr	r3, [r3, #16]
   d40f4:	4798      	blx	r3
   d40f6:	2804      	cmp	r0, #4
   d40f8:	d117      	bne.n	d412a <loop+0x52>
  {
    data[0] = Wire.read();
   d40fa:	f001 fc47 	bl	d598c <_Z19__fetch_global_Wirev>
   d40fe:	6803      	ldr	r3, [r0, #0]
   d4100:	695b      	ldr	r3, [r3, #20]
   d4102:	4798      	blx	r3
   d4104:	7020      	strb	r0, [r4, #0]
    data[1] = Wire.read();
   d4106:	f001 fc41 	bl	d598c <_Z19__fetch_global_Wirev>
   d410a:	6803      	ldr	r3, [r0, #0]
   d410c:	695b      	ldr	r3, [r3, #20]
   d410e:	4798      	blx	r3
   d4110:	7060      	strb	r0, [r4, #1]
    data[2] = Wire.read();
   d4112:	f001 fc3b 	bl	d598c <_Z19__fetch_global_Wirev>
   d4116:	6803      	ldr	r3, [r0, #0]
   d4118:	695b      	ldr	r3, [r3, #20]
   d411a:	4798      	blx	r3
   d411c:	70a0      	strb	r0, [r4, #2]
    data[3] = Wire.read();
   d411e:	f001 fc35 	bl	d598c <_Z19__fetch_global_Wirev>
   d4122:	6803      	ldr	r3, [r0, #0]
   d4124:	695b      	ldr	r3, [r3, #20]
   d4126:	4798      	blx	r3
   d4128:	70e0      	strb	r0, [r4, #3]
  } 

  // Convert the data
  ptemp = data[0]<<8 | data[1];
   d412a:	7863      	ldrb	r3, [r4, #1]
   d412c:	7820      	ldrb	r0, [r4, #0]
  temp = data[2]<<8 | data[3];
   d412e:	78a2      	ldrb	r2, [r4, #2]
    data[2] = Wire.read();
    data[3] = Wire.read();
  } 

  // Convert the data
  ptemp = data[0]<<8 | data[1];
   d4130:	4e54      	ldr	r6, [pc, #336]	; (d4284 <loop+0x1ac>)
  temp = data[2]<<8 | data[3];

  pressure = ((ptemp - 3277.0) / ((26214.0) / 5.0));
   d4132:	4d55      	ldr	r5, [pc, #340]	; (d4288 <loop+0x1b0>)
  cTemp = ((temp - 3277.0) / ((26214.0) / 110.0)) - 25.0;
   d4134:	4f55      	ldr	r7, [pc, #340]	; (d428c <loop+0x1b4>)
    data[2] = Wire.read();
    data[3] = Wire.read();
  } 

  // Convert the data
  ptemp = data[0]<<8 | data[1];
   d4136:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  temp = data[2]<<8 | data[3];
   d413a:	78e3      	ldrb	r3, [r4, #3]
   d413c:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
   d4140:	4b53      	ldr	r3, [pc, #332]	; (d4290 <loop+0x1b8>)
   d4142:	b224      	sxth	r4, r4
   d4144:	801c      	strh	r4, [r3, #0]
    data[2] = Wire.read();
    data[3] = Wire.read();
  } 

  // Convert the data
  ptemp = data[0]<<8 | data[1];
   d4146:	b200      	sxth	r0, r0
   d4148:	8030      	strh	r0, [r6, #0]
  temp = data[2]<<8 | data[3];

  pressure = ((ptemp - 3277.0) / ((26214.0) / 5.0));
   d414a:	f001 ff03 	bl	d5f54 <__aeabi_i2d>
   d414e:	a344      	add	r3, pc, #272	; (adr r3, d4260 <loop+0x188>)
   d4150:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4154:	f001 fdb0 	bl	d5cb8 <__aeabi_dsub>
   d4158:	a343      	add	r3, pc, #268	; (adr r3, d4268 <loop+0x190>)
   d415a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d415e:	f002 f889 	bl	d6274 <__aeabi_ddiv>
   d4162:	f002 fa17 	bl	d6594 <__aeabi_d2f>
   d4166:	6028      	str	r0, [r5, #0]
  cTemp = ((temp - 3277.0) / ((26214.0) / 110.0)) - 25.0;
   d4168:	4620      	mov	r0, r4
   d416a:	f001 fef3 	bl	d5f54 <__aeabi_i2d>
   d416e:	a33c      	add	r3, pc, #240	; (adr r3, d4260 <loop+0x188>)
   d4170:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4174:	f001 fda0 	bl	d5cb8 <__aeabi_dsub>
   d4178:	a33d      	add	r3, pc, #244	; (adr r3, d4270 <loop+0x198>)
   d417a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d417e:	f002 f879 	bl	d6274 <__aeabi_ddiv>
   d4182:	2200      	movs	r2, #0
   d4184:	4b43      	ldr	r3, [pc, #268]	; (d4294 <loop+0x1bc>)
  fTemp = (cTemp * 1.8 ) + 32;
   d4186:	4c44      	ldr	r4, [pc, #272]	; (d4298 <loop+0x1c0>)
  // Convert the data
  ptemp = data[0]<<8 | data[1];
  temp = data[2]<<8 | data[3];

  pressure = ((ptemp - 3277.0) / ((26214.0) / 5.0));
  cTemp = ((temp - 3277.0) / ((26214.0) / 110.0)) - 25.0;
   d4188:	f001 fd96 	bl	d5cb8 <__aeabi_dsub>
   d418c:	f002 fa02 	bl	d6594 <__aeabi_d2f>
   d4190:	6038      	str	r0, [r7, #0]
  fTemp = (cTemp * 1.8 ) + 32;
   d4192:	f001 fef1 	bl	d5f78 <__aeabi_f2d>
   d4196:	a338      	add	r3, pc, #224	; (adr r3, d4278 <loop+0x1a0>)
   d4198:	e9d3 2300 	ldrd	r2, r3, [r3]
   d419c:	f001 ff40 	bl	d6020 <__aeabi_dmul>
   d41a0:	4b3e      	ldr	r3, [pc, #248]	; (d429c <loop+0x1c4>)
   d41a2:	2200      	movs	r2, #0
   d41a4:	f001 fd8a 	bl	d5cbc <__adddf3>
   d41a8:	f002 f9f4 	bl	d6594 <__aeabi_d2f>
   d41ac:	6020      	str	r0, [r4, #0]

  Serial.printf("Temperature in Celsius: %0.2f \n", cTemp);
   d41ae:	f001 f907 	bl	d53c0 <_Z16_fetch_usbserialv>
   d41b2:	4680      	mov	r8, r0
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d41b4:	6838      	ldr	r0, [r7, #0]
   d41b6:	f001 fedf 	bl	d5f78 <__aeabi_f2d>
   d41ba:	4a39      	ldr	r2, [pc, #228]	; (d42a0 <loop+0x1c8>)
   d41bc:	e9cd 0100 	strd	r0, r1, [sp]
   d41c0:	2100      	movs	r1, #0
   d41c2:	4640      	mov	r0, r8
   d41c4:	f000 fc5f 	bl	d4a86 <_ZN5Print11printf_implEbPKcz>
  Serial.printf("Temperature in Fahrenheit: %0.2f \n",fTemp);
   d41c8:	f001 f8fa 	bl	d53c0 <_Z16_fetch_usbserialv>
   d41cc:	4607      	mov	r7, r0
   d41ce:	6820      	ldr	r0, [r4, #0]
   d41d0:	f001 fed2 	bl	d5f78 <__aeabi_f2d>
   d41d4:	4a33      	ldr	r2, [pc, #204]	; (d42a4 <loop+0x1cc>)
   d41d6:	e9cd 0100 	strd	r0, r1, [sp]
   d41da:	2100      	movs	r1, #0
   d41dc:	4638      	mov	r0, r7
   d41de:	f000 fc52 	bl	d4a86 <_ZN5Print11printf_implEbPKcz>
  Serial.printf("Pressure in psi: %0.2f, Raw Reading: %i\n", pressure,ptemp);
   d41e2:	f001 f8ed 	bl	d53c0 <_Z16_fetch_usbserialv>
   d41e6:	f9b6 3000 	ldrsh.w	r3, [r6]
   d41ea:	9302      	str	r3, [sp, #8]
   d41ec:	4604      	mov	r4, r0
   d41ee:	6828      	ldr	r0, [r5, #0]
   d41f0:	f001 fec2 	bl	d5f78 <__aeabi_f2d>
   d41f4:	4a2c      	ldr	r2, [pc, #176]	; (d42a8 <loop+0x1d0>)
   d41f6:	e9cd 0100 	strd	r0, r1, [sp]
   d41fa:	2100      	movs	r1, #0
   d41fc:	4620      	mov	r0, r4
   d41fe:	f000 fc42 	bl	d4a86 <_ZN5Print11printf_implEbPKcz>
  Particle.publish("Pressure", String(pressure));
   d4202:	2106      	movs	r1, #6
   d4204:	ed95 0a00 	vldr	s0, [r5]
   d4208:	a806      	add	r0, sp, #24
   d420a:	f000 fb8d 	bl	d4928 <_ZN6StringC1Efi>
   d420e:	4b27      	ldr	r3, [pc, #156]	; (d42ac <loop+0x1d4>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4210:	9a06      	ldr	r2, [sp, #24]
   d4212:	781b      	ldrb	r3, [r3, #0]
   d4214:	f88d 3000 	strb.w	r3, [sp]
   d4218:	4925      	ldr	r1, [pc, #148]	; (d42b0 <loop+0x1d8>)
   d421a:	233c      	movs	r3, #60	; 0x3c
   d421c:	a804      	add	r0, sp, #16
   d421e:	f000 fe79 	bl	d4f14 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4222:	9c05      	ldr	r4, [sp, #20]
   d4224:	b17c      	cbz	r4, d4246 <loop+0x16e>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4226:	6863      	ldr	r3, [r4, #4]
   d4228:	3b01      	subs	r3, #1
   d422a:	6063      	str	r3, [r4, #4]
   d422c:	b95b      	cbnz	r3, d4246 <loop+0x16e>
        {
          _M_dispose();
   d422e:	6823      	ldr	r3, [r4, #0]
   d4230:	4620      	mov	r0, r4
   d4232:	689b      	ldr	r3, [r3, #8]
   d4234:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4236:	68a3      	ldr	r3, [r4, #8]
   d4238:	3b01      	subs	r3, #1
   d423a:	60a3      	str	r3, [r4, #8]
   d423c:	b91b      	cbnz	r3, d4246 <loop+0x16e>
            _M_destroy();
   d423e:	6823      	ldr	r3, [r4, #0]
   d4240:	4620      	mov	r0, r4
   d4242:	68db      	ldr	r3, [r3, #12]
   d4244:	4798      	blx	r3
   d4246:	a806      	add	r0, sp, #24
   d4248:	f000 fb16 	bl	d4878 <_ZN6StringD1Ev>
  delay(10000);
   d424c:	f242 7010 	movw	r0, #10000	; 0x2710
   d4250:	f000 fc66 	bl	d4b20 <delay>
   d4254:	b00a      	add	sp, #40	; 0x28
   d4256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d425a:	bf00      	nop
   d425c:	f3af 8000 	nop.w
   d4260:	00000000 	.word	0x00000000
   d4264:	40a99a00 	.word	0x40a99a00
   d4268:	cccccccd 	.word	0xcccccccd
   d426c:	40b47acc 	.word	0x40b47acc
   d4270:	129e412a 	.word	0x129e412a
   d4274:	406dc9e4 	.word	0x406dc9e4
   d4278:	cccccccd 	.word	0xcccccccd
   d427c:	3ffccccc 	.word	0x3ffccccc
   d4280:	2003e3d0 	.word	0x2003e3d0
   d4284:	2003e3ce 	.word	0x2003e3ce
   d4288:	2003e3c4 	.word	0x2003e3c4
   d428c:	2003e3d8 	.word	0x2003e3d8
   d4290:	2003e3d4 	.word	0x2003e3d4
   d4294:	40390000 	.word	0x40390000
   d4298:	2003e3c8 	.word	0x2003e3c8
   d429c:	40400000 	.word	0x40400000
   d42a0:	000d6a84 	.word	0x000d6a84
   d42a4:	000d6aa4 	.word	0x000d6aa4
   d42a8:	000d6ac7 	.word	0x000d6ac7
   d42ac:	2003e3cc 	.word	0x2003e3cc
   d42b0:	000d6af0 	.word	0x000d6af0

000d42b4 <_GLOBAL__sub_I_data>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d42b4:	4b02      	ldr	r3, [pc, #8]	; (d42c0 <_GLOBAL__sub_I_data+0xc>)
   d42b6:	2200      	movs	r2, #0
   d42b8:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d42ba:	f000 b813 	b.w	d42e4 <HAL_Pin_Map>
   d42be:	bf00      	nop
   d42c0:	2003e3cc 	.word	0x2003e3cc

000d42c4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d42c4:	b508      	push	{r3, lr}
   d42c6:	4b02      	ldr	r3, [pc, #8]	; (d42d0 <netdb_freeaddrinfo+0xc>)
   d42c8:	681b      	ldr	r3, [r3, #0]
   d42ca:	689b      	ldr	r3, [r3, #8]
   d42cc:	9301      	str	r3, [sp, #4]
   d42ce:	bd08      	pop	{r3, pc}
   d42d0:	00030268 	.word	0x00030268

000d42d4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d42d4:	b508      	push	{r3, lr}
   d42d6:	4b02      	ldr	r3, [pc, #8]	; (d42e0 <netdb_getaddrinfo+0xc>)
   d42d8:	681b      	ldr	r3, [r3, #0]
   d42da:	68db      	ldr	r3, [r3, #12]
   d42dc:	9301      	str	r3, [sp, #4]
   d42de:	bd08      	pop	{r3, pc}
   d42e0:	00030268 	.word	0x00030268

000d42e4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d42e4:	b508      	push	{r3, lr}
   d42e6:	4b02      	ldr	r3, [pc, #8]	; (d42f0 <HAL_Pin_Map+0xc>)
   d42e8:	681b      	ldr	r3, [r3, #0]
   d42ea:	681b      	ldr	r3, [r3, #0]
   d42ec:	9301      	str	r3, [sp, #4]
   d42ee:	bd08      	pop	{r3, pc}
   d42f0:	0003022c 	.word	0x0003022c

000d42f4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d42f4:	b508      	push	{r3, lr}
   d42f6:	4b02      	ldr	r3, [pc, #8]	; (d4300 <HAL_RNG_GetRandomNumber+0xc>)
   d42f8:	681b      	ldr	r3, [r3, #0]
   d42fa:	685b      	ldr	r3, [r3, #4]
   d42fc:	9301      	str	r3, [sp, #4]
   d42fe:	bd08      	pop	{r3, pc}
   d4300:	00030218 	.word	0x00030218

000d4304 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4304:	b508      	push	{r3, lr}
   d4306:	4b02      	ldr	r3, [pc, #8]	; (d4310 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4308:	681b      	ldr	r3, [r3, #0]
   d430a:	695b      	ldr	r3, [r3, #20]
   d430c:	9301      	str	r3, [sp, #4]
   d430e:	bd08      	pop	{r3, pc}
   d4310:	00030218 	.word	0x00030218

000d4314 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4314:	b508      	push	{r3, lr}
   d4316:	4b02      	ldr	r3, [pc, #8]	; (d4320 <os_thread_is_current+0xc>)
   d4318:	681b      	ldr	r3, [r3, #0]
   d431a:	689b      	ldr	r3, [r3, #8]
   d431c:	9301      	str	r3, [sp, #4]
   d431e:	bd08      	pop	{r3, pc}
   d4320:	00030248 	.word	0x00030248

000d4324 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4324:	b508      	push	{r3, lr}
   d4326:	4b02      	ldr	r3, [pc, #8]	; (d4330 <os_thread_join+0xc>)
   d4328:	681b      	ldr	r3, [r3, #0]
   d432a:	691b      	ldr	r3, [r3, #16]
   d432c:	9301      	str	r3, [sp, #4]
   d432e:	bd08      	pop	{r3, pc}
   d4330:	00030248 	.word	0x00030248

000d4334 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4334:	b508      	push	{r3, lr}
   d4336:	4b02      	ldr	r3, [pc, #8]	; (d4340 <os_thread_cleanup+0xc>)
   d4338:	681b      	ldr	r3, [r3, #0]
   d433a:	695b      	ldr	r3, [r3, #20]
   d433c:	9301      	str	r3, [sp, #4]
   d433e:	bd08      	pop	{r3, pc}
   d4340:	00030248 	.word	0x00030248

000d4344 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4344:	b508      	push	{r3, lr}
   d4346:	4b02      	ldr	r3, [pc, #8]	; (d4350 <os_mutex_recursive_create+0xc>)
   d4348:	681b      	ldr	r3, [r3, #0]
   d434a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d434c:	9301      	str	r3, [sp, #4]
   d434e:	bd08      	pop	{r3, pc}
   d4350:	00030248 	.word	0x00030248

000d4354 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4354:	b508      	push	{r3, lr}
   d4356:	4b02      	ldr	r3, [pc, #8]	; (d4360 <os_mutex_recursive_destroy+0xc>)
   d4358:	681b      	ldr	r3, [r3, #0]
   d435a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d435c:	9301      	str	r3, [sp, #4]
   d435e:	bd08      	pop	{r3, pc}
   d4360:	00030248 	.word	0x00030248

000d4364 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4364:	b508      	push	{r3, lr}
   d4366:	4b02      	ldr	r3, [pc, #8]	; (d4370 <inet_inet_ntop+0xc>)
   d4368:	681b      	ldr	r3, [r3, #0]
   d436a:	695b      	ldr	r3, [r3, #20]
   d436c:	9301      	str	r3, [sp, #4]
   d436e:	bd08      	pop	{r3, pc}
   d4370:	00030264 	.word	0x00030264

000d4374 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4374:	b508      	push	{r3, lr}
   d4376:	4b02      	ldr	r3, [pc, #8]	; (d4380 <HAL_USART_Init+0xc>)
   d4378:	681b      	ldr	r3, [r3, #0]
   d437a:	681b      	ldr	r3, [r3, #0]
   d437c:	9301      	str	r3, [sp, #4]
   d437e:	bd08      	pop	{r3, pc}
   d4380:	0003023c 	.word	0x0003023c

000d4384 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4384:	b508      	push	{r3, lr}
   d4386:	4b02      	ldr	r3, [pc, #8]	; (d4390 <HAL_USART_Write_Data+0xc>)
   d4388:	681b      	ldr	r3, [r3, #0]
   d438a:	68db      	ldr	r3, [r3, #12]
   d438c:	9301      	str	r3, [sp, #4]
   d438e:	bd08      	pop	{r3, pc}
   d4390:	0003023c 	.word	0x0003023c

000d4394 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4394:	b508      	push	{r3, lr}
   d4396:	4b02      	ldr	r3, [pc, #8]	; (d43a0 <HAL_USART_Available_Data+0xc>)
   d4398:	681b      	ldr	r3, [r3, #0]
   d439a:	691b      	ldr	r3, [r3, #16]
   d439c:	9301      	str	r3, [sp, #4]
   d439e:	bd08      	pop	{r3, pc}
   d43a0:	0003023c 	.word	0x0003023c

000d43a4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d43a4:	b508      	push	{r3, lr}
   d43a6:	4b02      	ldr	r3, [pc, #8]	; (d43b0 <HAL_USART_Read_Data+0xc>)
   d43a8:	681b      	ldr	r3, [r3, #0]
   d43aa:	695b      	ldr	r3, [r3, #20]
   d43ac:	9301      	str	r3, [sp, #4]
   d43ae:	bd08      	pop	{r3, pc}
   d43b0:	0003023c 	.word	0x0003023c

000d43b4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d43b4:	b508      	push	{r3, lr}
   d43b6:	4b02      	ldr	r3, [pc, #8]	; (d43c0 <HAL_USART_Peek_Data+0xc>)
   d43b8:	681b      	ldr	r3, [r3, #0]
   d43ba:	699b      	ldr	r3, [r3, #24]
   d43bc:	9301      	str	r3, [sp, #4]
   d43be:	bd08      	pop	{r3, pc}
   d43c0:	0003023c 	.word	0x0003023c

000d43c4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d43c4:	b508      	push	{r3, lr}
   d43c6:	4b02      	ldr	r3, [pc, #8]	; (d43d0 <HAL_USART_Flush_Data+0xc>)
   d43c8:	681b      	ldr	r3, [r3, #0]
   d43ca:	69db      	ldr	r3, [r3, #28]
   d43cc:	9301      	str	r3, [sp, #4]
   d43ce:	bd08      	pop	{r3, pc}
   d43d0:	0003023c 	.word	0x0003023c

000d43d4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d43d4:	b508      	push	{r3, lr}
   d43d6:	4b02      	ldr	r3, [pc, #8]	; (d43e0 <HAL_USART_Available_Data_For_Write+0xc>)
   d43d8:	681b      	ldr	r3, [r3, #0]
   d43da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d43dc:	9301      	str	r3, [sp, #4]
   d43de:	bd08      	pop	{r3, pc}
   d43e0:	0003023c 	.word	0x0003023c

000d43e4 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d43e4:	b508      	push	{r3, lr}
   d43e6:	4b02      	ldr	r3, [pc, #8]	; (d43f0 <HAL_I2C_Begin+0xc>)
   d43e8:	681b      	ldr	r3, [r3, #0]
   d43ea:	68db      	ldr	r3, [r3, #12]
   d43ec:	9301      	str	r3, [sp, #4]
   d43ee:	bd08      	pop	{r3, pc}
   d43f0:	00030228 	.word	0x00030228

000d43f4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d43f4:	b508      	push	{r3, lr}
   d43f6:	4b02      	ldr	r3, [pc, #8]	; (d4400 <HAL_I2C_Write_Data+0xc>)
   d43f8:	681b      	ldr	r3, [r3, #0]
   d43fa:	6a1b      	ldr	r3, [r3, #32]
   d43fc:	9301      	str	r3, [sp, #4]
   d43fe:	bd08      	pop	{r3, pc}
   d4400:	00030228 	.word	0x00030228

000d4404 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4404:	b508      	push	{r3, lr}
   d4406:	4b02      	ldr	r3, [pc, #8]	; (d4410 <HAL_I2C_Available_Data+0xc>)
   d4408:	681b      	ldr	r3, [r3, #0]
   d440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d440c:	9301      	str	r3, [sp, #4]
   d440e:	bd08      	pop	{r3, pc}
   d4410:	00030228 	.word	0x00030228

000d4414 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4414:	b508      	push	{r3, lr}
   d4416:	4b02      	ldr	r3, [pc, #8]	; (d4420 <HAL_I2C_Read_Data+0xc>)
   d4418:	681b      	ldr	r3, [r3, #0]
   d441a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d441c:	9301      	str	r3, [sp, #4]
   d441e:	bd08      	pop	{r3, pc}
   d4420:	00030228 	.word	0x00030228

000d4424 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4424:	b508      	push	{r3, lr}
   d4426:	4b02      	ldr	r3, [pc, #8]	; (d4430 <HAL_I2C_Peek_Data+0xc>)
   d4428:	681b      	ldr	r3, [r3, #0]
   d442a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d442c:	9301      	str	r3, [sp, #4]
   d442e:	bd08      	pop	{r3, pc}
   d4430:	00030228 	.word	0x00030228

000d4434 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4434:	b508      	push	{r3, lr}
   d4436:	4b02      	ldr	r3, [pc, #8]	; (d4440 <HAL_I2C_Flush_Data+0xc>)
   d4438:	681b      	ldr	r3, [r3, #0]
   d443a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d443c:	9301      	str	r3, [sp, #4]
   d443e:	bd08      	pop	{r3, pc}
   d4440:	00030228 	.word	0x00030228

000d4444 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4444:	b508      	push	{r3, lr}
   d4446:	4b02      	ldr	r3, [pc, #8]	; (d4450 <HAL_I2C_Init+0xc>)
   d4448:	681b      	ldr	r3, [r3, #0]
   d444a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d444c:	9301      	str	r3, [sp, #4]
   d444e:	bd08      	pop	{r3, pc}
   d4450:	00030228 	.word	0x00030228

000d4454 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d4454:	b508      	push	{r3, lr}
   d4456:	4b02      	ldr	r3, [pc, #8]	; (d4460 <HAL_I2C_Request_Data_Ex+0xc>)
   d4458:	681b      	ldr	r3, [r3, #0]
   d445a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d445c:	9301      	str	r3, [sp, #4]
   d445e:	bd08      	pop	{r3, pc}
   d4460:	00030228 	.word	0x00030228

000d4464 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4464:	b508      	push	{r3, lr}
   d4466:	4b02      	ldr	r3, [pc, #8]	; (d4470 <HAL_USB_USART_Init+0xc>)
   d4468:	681b      	ldr	r3, [r3, #0]
   d446a:	681b      	ldr	r3, [r3, #0]
   d446c:	9301      	str	r3, [sp, #4]
   d446e:	bd08      	pop	{r3, pc}
   d4470:	0003024c 	.word	0x0003024c

000d4474 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4474:	b508      	push	{r3, lr}
   d4476:	4b02      	ldr	r3, [pc, #8]	; (d4480 <HAL_USB_USART_Begin+0xc>)
   d4478:	681b      	ldr	r3, [r3, #0]
   d447a:	685b      	ldr	r3, [r3, #4]
   d447c:	9301      	str	r3, [sp, #4]
   d447e:	bd08      	pop	{r3, pc}
   d4480:	0003024c 	.word	0x0003024c

000d4484 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4484:	b508      	push	{r3, lr}
   d4486:	4b02      	ldr	r3, [pc, #8]	; (d4490 <HAL_USB_USART_Available_Data+0xc>)
   d4488:	681b      	ldr	r3, [r3, #0]
   d448a:	691b      	ldr	r3, [r3, #16]
   d448c:	9301      	str	r3, [sp, #4]
   d448e:	bd08      	pop	{r3, pc}
   d4490:	0003024c 	.word	0x0003024c

000d4494 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4494:	b508      	push	{r3, lr}
   d4496:	4b02      	ldr	r3, [pc, #8]	; (d44a0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4498:	681b      	ldr	r3, [r3, #0]
   d449a:	695b      	ldr	r3, [r3, #20]
   d449c:	9301      	str	r3, [sp, #4]
   d449e:	bd08      	pop	{r3, pc}
   d44a0:	0003024c 	.word	0x0003024c

000d44a4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d44a4:	b508      	push	{r3, lr}
   d44a6:	4b02      	ldr	r3, [pc, #8]	; (d44b0 <HAL_USB_USART_Receive_Data+0xc>)
   d44a8:	681b      	ldr	r3, [r3, #0]
   d44aa:	699b      	ldr	r3, [r3, #24]
   d44ac:	9301      	str	r3, [sp, #4]
   d44ae:	bd08      	pop	{r3, pc}
   d44b0:	0003024c 	.word	0x0003024c

000d44b4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d44b4:	b508      	push	{r3, lr}
   d44b6:	4b02      	ldr	r3, [pc, #8]	; (d44c0 <HAL_USB_USART_Send_Data+0xc>)
   d44b8:	681b      	ldr	r3, [r3, #0]
   d44ba:	69db      	ldr	r3, [r3, #28]
   d44bc:	9301      	str	r3, [sp, #4]
   d44be:	bd08      	pop	{r3, pc}
   d44c0:	0003024c 	.word	0x0003024c

000d44c4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <HAL_USB_USART_Flush_Data+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	6a1b      	ldr	r3, [r3, #32]
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	0003024c 	.word	0x0003024c

000d44d4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <set_system_mode+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	685b      	ldr	r3, [r3, #4]
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	00030220 	.word	0x00030220

000d44e4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <system_delay_ms+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	695b      	ldr	r3, [r3, #20]
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	00030220 	.word	0x00030220

000d44f4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b02      	ldr	r3, [pc, #8]	; (d4500 <application_thread_current+0xc>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d44fc:	9301      	str	r3, [sp, #4]
   d44fe:	bd08      	pop	{r3, pc}
   d4500:	00030220 	.word	0x00030220

000d4504 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b02      	ldr	r3, [pc, #8]	; (d4510 <application_thread_invoke+0xc>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d450c:	9301      	str	r3, [sp, #4]
   d450e:	bd08      	pop	{r3, pc}
   d4510:	00030220 	.word	0x00030220

000d4514 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4514:	b508      	push	{r3, lr}
   d4516:	4b03      	ldr	r3, [pc, #12]	; (d4524 <system_ctrl_set_app_request_handler+0x10>)
   d4518:	681b      	ldr	r3, [r3, #0]
   d451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d451e:	9301      	str	r3, [sp, #4]
   d4520:	bd08      	pop	{r3, pc}
   d4522:	0000      	.short	0x0000
   d4524:	00030220 	.word	0x00030220

000d4528 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4528:	b508      	push	{r3, lr}
   d452a:	4b03      	ldr	r3, [pc, #12]	; (d4538 <system_ctrl_set_result+0x10>)
   d452c:	681b      	ldr	r3, [r3, #0]
   d452e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4532:	9301      	str	r3, [sp, #4]
   d4534:	bd08      	pop	{r3, pc}
   d4536:	0000      	.short	0x0000
   d4538:	00030220 	.word	0x00030220

000d453c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d453c:	b508      	push	{r3, lr}
   d453e:	4b02      	ldr	r3, [pc, #8]	; (d4548 <network_connect+0xc>)
   d4540:	681b      	ldr	r3, [r3, #0]
   d4542:	685b      	ldr	r3, [r3, #4]
   d4544:	9301      	str	r3, [sp, #4]
   d4546:	bd08      	pop	{r3, pc}
   d4548:	00030240 	.word	0x00030240

000d454c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d454c:	b508      	push	{r3, lr}
   d454e:	4b02      	ldr	r3, [pc, #8]	; (d4558 <network_connecting+0xc>)
   d4550:	681b      	ldr	r3, [r3, #0]
   d4552:	689b      	ldr	r3, [r3, #8]
   d4554:	9301      	str	r3, [sp, #4]
   d4556:	bd08      	pop	{r3, pc}
   d4558:	00030240 	.word	0x00030240

000d455c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d455c:	b508      	push	{r3, lr}
   d455e:	4b02      	ldr	r3, [pc, #8]	; (d4568 <network_disconnect+0xc>)
   d4560:	681b      	ldr	r3, [r3, #0]
   d4562:	68db      	ldr	r3, [r3, #12]
   d4564:	9301      	str	r3, [sp, #4]
   d4566:	bd08      	pop	{r3, pc}
   d4568:	00030240 	.word	0x00030240

000d456c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d456c:	b508      	push	{r3, lr}
   d456e:	4b02      	ldr	r3, [pc, #8]	; (d4578 <network_ready+0xc>)
   d4570:	681b      	ldr	r3, [r3, #0]
   d4572:	691b      	ldr	r3, [r3, #16]
   d4574:	9301      	str	r3, [sp, #4]
   d4576:	bd08      	pop	{r3, pc}
   d4578:	00030240 	.word	0x00030240

000d457c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d457c:	b508      	push	{r3, lr}
   d457e:	4b02      	ldr	r3, [pc, #8]	; (d4588 <network_on+0xc>)
   d4580:	681b      	ldr	r3, [r3, #0]
   d4582:	695b      	ldr	r3, [r3, #20]
   d4584:	9301      	str	r3, [sp, #4]
   d4586:	bd08      	pop	{r3, pc}
   d4588:	00030240 	.word	0x00030240

000d458c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d458c:	b508      	push	{r3, lr}
   d458e:	4b02      	ldr	r3, [pc, #8]	; (d4598 <network_off+0xc>)
   d4590:	681b      	ldr	r3, [r3, #0]
   d4592:	699b      	ldr	r3, [r3, #24]
   d4594:	9301      	str	r3, [sp, #4]
   d4596:	bd08      	pop	{r3, pc}
   d4598:	00030240 	.word	0x00030240

000d459c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d459c:	b508      	push	{r3, lr}
   d459e:	4b02      	ldr	r3, [pc, #8]	; (d45a8 <network_listen+0xc>)
   d45a0:	681b      	ldr	r3, [r3, #0]
   d45a2:	69db      	ldr	r3, [r3, #28]
   d45a4:	9301      	str	r3, [sp, #4]
   d45a6:	bd08      	pop	{r3, pc}
   d45a8:	00030240 	.word	0x00030240

000d45ac <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d45ac:	b508      	push	{r3, lr}
   d45ae:	4b02      	ldr	r3, [pc, #8]	; (d45b8 <network_listening+0xc>)
   d45b0:	681b      	ldr	r3, [r3, #0]
   d45b2:	6a1b      	ldr	r3, [r3, #32]
   d45b4:	9301      	str	r3, [sp, #4]
   d45b6:	bd08      	pop	{r3, pc}
   d45b8:	00030240 	.word	0x00030240

000d45bc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d45bc:	b508      	push	{r3, lr}
   d45be:	4b02      	ldr	r3, [pc, #8]	; (d45c8 <network_set_listen_timeout+0xc>)
   d45c0:	681b      	ldr	r3, [r3, #0]
   d45c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d45c4:	9301      	str	r3, [sp, #4]
   d45c6:	bd08      	pop	{r3, pc}
   d45c8:	00030240 	.word	0x00030240

000d45cc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d45cc:	b508      	push	{r3, lr}
   d45ce:	4b02      	ldr	r3, [pc, #8]	; (d45d8 <network_get_listen_timeout+0xc>)
   d45d0:	681b      	ldr	r3, [r3, #0]
   d45d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d45d4:	9301      	str	r3, [sp, #4]
   d45d6:	bd08      	pop	{r3, pc}
   d45d8:	00030240 	.word	0x00030240

000d45dc <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d45dc:	b508      	push	{r3, lr}
   d45de:	4b02      	ldr	r3, [pc, #8]	; (d45e8 <spark_cloud_flag_connected+0xc>)
   d45e0:	681b      	ldr	r3, [r3, #0]
   d45e2:	695b      	ldr	r3, [r3, #20]
   d45e4:	9301      	str	r3, [sp, #4]
   d45e6:	bd08      	pop	{r3, pc}
   d45e8:	00030244 	.word	0x00030244

000d45ec <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d45ec:	b508      	push	{r3, lr}
   d45ee:	4b02      	ldr	r3, [pc, #8]	; (d45f8 <spark_send_event+0xc>)
   d45f0:	681b      	ldr	r3, [r3, #0]
   d45f2:	6a1b      	ldr	r3, [r3, #32]
   d45f4:	9301      	str	r3, [sp, #4]
   d45f6:	bd08      	pop	{r3, pc}
   d45f8:	00030244 	.word	0x00030244

000d45fc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d45fc:	b508      	push	{r3, lr}
   d45fe:	4b02      	ldr	r3, [pc, #8]	; (d4608 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4600:	681b      	ldr	r3, [r3, #0]
   d4602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4604:	9301      	str	r3, [sp, #4]
   d4606:	bd08      	pop	{r3, pc}
   d4608:	00030244 	.word	0x00030244

000d460c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d460c:	b508      	push	{r3, lr}
   d460e:	4b02      	ldr	r3, [pc, #8]	; (d4618 <malloc+0xc>)
   d4610:	681b      	ldr	r3, [r3, #0]
   d4612:	681b      	ldr	r3, [r3, #0]
   d4614:	9301      	str	r3, [sp, #4]
   d4616:	bd08      	pop	{r3, pc}
   d4618:	0003021c 	.word	0x0003021c

000d461c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d461c:	b508      	push	{r3, lr}
   d461e:	4b02      	ldr	r3, [pc, #8]	; (d4628 <free+0xc>)
   d4620:	681b      	ldr	r3, [r3, #0]
   d4622:	685b      	ldr	r3, [r3, #4]
   d4624:	9301      	str	r3, [sp, #4]
   d4626:	bd08      	pop	{r3, pc}
   d4628:	0003021c 	.word	0x0003021c

000d462c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d462c:	b508      	push	{r3, lr}
   d462e:	4b02      	ldr	r3, [pc, #8]	; (d4638 <realloc+0xc>)
   d4630:	681b      	ldr	r3, [r3, #0]
   d4632:	689b      	ldr	r3, [r3, #8]
   d4634:	9301      	str	r3, [sp, #4]
   d4636:	bd08      	pop	{r3, pc}
   d4638:	0003021c 	.word	0x0003021c

000d463c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d463c:	b508      	push	{r3, lr}
   d463e:	4b02      	ldr	r3, [pc, #8]	; (d4648 <vsnprintf+0xc>)
   d4640:	681b      	ldr	r3, [r3, #0]
   d4642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4644:	9301      	str	r3, [sp, #4]
   d4646:	bd08      	pop	{r3, pc}
   d4648:	0003021c 	.word	0x0003021c

000d464c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d464c:	b508      	push	{r3, lr}
   d464e:	4b02      	ldr	r3, [pc, #8]	; (d4658 <abort+0xc>)
   d4650:	681b      	ldr	r3, [r3, #0]
   d4652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4654:	9301      	str	r3, [sp, #4]
   d4656:	bd08      	pop	{r3, pc}
   d4658:	0003021c 	.word	0x0003021c

000d465c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d465c:	b508      	push	{r3, lr}
   d465e:	4b02      	ldr	r3, [pc, #8]	; (d4668 <_malloc_r+0xc>)
   d4660:	681b      	ldr	r3, [r3, #0]
   d4662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4664:	9301      	str	r3, [sp, #4]
   d4666:	bd08      	pop	{r3, pc}
   d4668:	0003021c 	.word	0x0003021c

000d466c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d466c:	2200      	movs	r2, #0
   d466e:	4611      	mov	r1, r2
   d4670:	6840      	ldr	r0, [r0, #4]
   d4672:	f7ff bf9b 	b.w	d45ac <network_listening>

000d4676 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4676:	2200      	movs	r2, #0
   d4678:	4611      	mov	r1, r2
   d467a:	6840      	ldr	r0, [r0, #4]
   d467c:	f7ff bfa6 	b.w	d45cc <network_get_listen_timeout>

000d4680 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4680:	2200      	movs	r2, #0
   d4682:	6840      	ldr	r0, [r0, #4]
   d4684:	f7ff bf9a 	b.w	d45bc <network_set_listen_timeout>

000d4688 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4688:	2200      	movs	r2, #0
   d468a:	f081 0101 	eor.w	r1, r1, #1
   d468e:	6840      	ldr	r0, [r0, #4]
   d4690:	f7ff bf84 	b.w	d459c <network_listen>

000d4694 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4694:	2300      	movs	r3, #0
   d4696:	461a      	mov	r2, r3
   d4698:	4619      	mov	r1, r3
   d469a:	6840      	ldr	r0, [r0, #4]
   d469c:	f7ff bf76 	b.w	d458c <network_off>

000d46a0 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d46a0:	2300      	movs	r3, #0
   d46a2:	461a      	mov	r2, r3
   d46a4:	4619      	mov	r1, r3
   d46a6:	6840      	ldr	r0, [r0, #4]
   d46a8:	f7ff bf68 	b.w	d457c <network_on>

000d46ac <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d46ac:	2200      	movs	r2, #0
   d46ae:	4611      	mov	r1, r2
   d46b0:	6840      	ldr	r0, [r0, #4]
   d46b2:	f7ff bf5b 	b.w	d456c <network_ready>

000d46b6 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d46b6:	2200      	movs	r2, #0
   d46b8:	4611      	mov	r1, r2
   d46ba:	6840      	ldr	r0, [r0, #4]
   d46bc:	f7ff bf46 	b.w	d454c <network_connecting>

000d46c0 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d46c0:	2200      	movs	r2, #0
   d46c2:	2102      	movs	r1, #2
   d46c4:	6840      	ldr	r0, [r0, #4]
   d46c6:	f7ff bf49 	b.w	d455c <network_disconnect>

000d46ca <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d46ca:	2300      	movs	r3, #0
   d46cc:	461a      	mov	r2, r3
   d46ce:	6840      	ldr	r0, [r0, #4]
   d46d0:	f7ff bf34 	b.w	d453c <network_connect>

000d46d4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d46d4:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d46d6:	2203      	movs	r2, #3
   d46d8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d46da:	4a02      	ldr	r2, [pc, #8]	; (d46e4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d46dc:	601a      	str	r2, [r3, #0]
   d46de:	4770      	bx	lr
   d46e0:	2003e3dc 	.word	0x2003e3dc
   d46e4:	000d6b04 	.word	0x000d6b04

000d46e8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d46e8:	b510      	push	{r4, lr}
   d46ea:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d46ec:	6800      	ldr	r0, [r0, #0]
   d46ee:	b118      	cbz	r0, d46f8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d46f0:	f7ff ff94 	bl	d461c <free>
            wakeupSource_ = nullptr;
   d46f4:	2300      	movs	r3, #0
   d46f6:	6023      	str	r3, [r4, #0]
   d46f8:	bd10      	pop	{r4, pc}

000d46fa <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d46fa:	b510      	push	{r4, lr}
   d46fc:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d46fe:	f7ff fff3 	bl	d46e8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4702:	4620      	mov	r0, r4
   d4704:	bd10      	pop	{r4, pc}
	...

000d4708 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4708:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d470a:	4c09      	ldr	r4, [pc, #36]	; (d4730 <_GLOBAL__sub_I_System+0x28>)
   d470c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d470e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4712:	6020      	str	r0, [r4, #0]
   d4714:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4716:	71a0      	strb	r0, [r4, #6]
   d4718:	8120      	strh	r0, [r4, #8]
   d471a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d471c:	f7ff feda 	bl	d44d4 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4720:	4620      	mov	r0, r4
   d4722:	4a04      	ldr	r2, [pc, #16]	; (d4734 <_GLOBAL__sub_I_System+0x2c>)
   d4724:	4904      	ldr	r1, [pc, #16]	; (d4738 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d472a:	f001 b955 	b.w	d59d8 <__aeabi_atexit>
   d472e:	bf00      	nop
   d4730:	2003e3e4 	.word	0x2003e3e4
   d4734:	2003e3c0 	.word	0x2003e3c0
   d4738:	000d46fb 	.word	0x000d46fb

000d473c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d473c:	b510      	push	{r4, lr}
   d473e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d4740:	f002 f98d 	bl	d6a5e <strlen>
   d4744:	3801      	subs	r0, #1
   d4746:	1823      	adds	r3, r4, r0
   d4748:	4620      	mov	r0, r4
	while(i<j){
   d474a:	4298      	cmp	r0, r3
   d474c:	d206      	bcs.n	d475c <_Z11str_reversePc+0x20>
		c = *i;
   d474e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d4750:	7819      	ldrb	r1, [r3, #0]
   d4752:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d4756:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d475a:	e7f6      	b.n	d474a <_Z11str_reversePc+0xe>
   d475c:	bd10      	pop	{r4, pc}

000d475e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d475e:	b570      	push	{r4, r5, r6, lr}
   d4760:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d4762:	1e91      	subs	r1, r2, #2
   d4764:	2922      	cmp	r1, #34	; 0x22
   d4766:	d820      	bhi.n	d47aa <ultoa+0x4c>
   d4768:	4625      	mov	r5, r4
   d476a:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d476c:	b910      	cbnz	r0, d4774 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d476e:	4423      	add	r3, r4
            *ptr++ = '0';
   d4770:	2230      	movs	r2, #48	; 0x30
   d4772:	e00e      	b.n	d4792 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d4774:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d4778:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d477c:	b2c1      	uxtb	r1, r0
   d477e:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d4782:	2809      	cmp	r0, #9
                *ptr += '0';
   d4784:	bf94      	ite	ls
   d4786:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d4788:	3157      	addhi	r1, #87	; 0x57
   d478a:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d478e:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d4790:	e7eb      	b.n	d476a <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4792:	4299      	cmp	r1, r3
   d4794:	d202      	bcs.n	d479c <ultoa+0x3e>
            *ptr++ = '0';
   d4796:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d479a:	e7fa      	b.n	d4792 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d479c:	2300      	movs	r3, #0
	str_reverse(buffer);
   d479e:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d47a0:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d47a2:	f7ff ffcb 	bl	d473c <_Z11str_reversePc>
	return buffer;
   d47a6:	4620      	mov	r0, r4
   d47a8:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d47aa:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d47ac:	bd70      	pop	{r4, r5, r6, pc}
	...

000d47b0 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d47b0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d47b4:	ec59 8b10 	vmov	r8, r9, d0
   d47b8:	4607      	mov	r7, r0
   d47ba:	460e      	mov	r6, r1
    bool negative = val<0;
    if (negative) {
   d47bc:	2200      	movs	r2, #0
   d47be:	2300      	movs	r3, #0
   d47c0:	ee10 0a10 	vmov	r0, s0
   d47c4:	4649      	mov	r1, r9
   d47c6:	f001 fe9d 	bl	d6504 <__aeabi_dcmplt>
   d47ca:	b128      	cbz	r0, d47d8 <_Z4dtoadhPc+0x28>
        val = -val;
   d47cc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d47d0:	4699      	mov	r9, r3
        *sout++ = '-';
   d47d2:	232d      	movs	r3, #45	; 0x2d
   d47d4:	7033      	strb	r3, [r6, #0]
   d47d6:	3601      	adds	r6, #1
   d47d8:	2300      	movs	r3, #0
    }
    long scale = 1;
   d47da:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d47dc:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d47de:	b2d9      	uxtb	r1, r3
   d47e0:	428f      	cmp	r7, r1
   d47e2:	d902      	bls.n	d47ea <_Z4dtoadhPc+0x3a>
        scale *= 10;
   d47e4:	4354      	muls	r4, r2
   d47e6:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d47e8:	e7f9      	b.n	d47de <_Z4dtoadhPc+0x2e>
        scale *= 10;
    val *= scale;   // capture all the significant digits
   d47ea:	4620      	mov	r0, r4
   d47ec:	f001 fbb2 	bl	d5f54 <__aeabi_i2d>
   d47f0:	4642      	mov	r2, r8
   d47f2:	464b      	mov	r3, r9
   d47f4:	f001 fc14 	bl	d6020 <__aeabi_dmul>
   d47f8:	4682      	mov	sl, r0
   d47fa:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
   d47fc:	f001 ff32 	bl	d6664 <__aeabi_d2ulz>
   d4800:	4680      	mov	r8, r0
   d4802:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
   d4804:	f001 fbd6 	bl	d5fb4 <__aeabi_ul2d>
   d4808:	4602      	mov	r2, r0
   d480a:	460b      	mov	r3, r1
   d480c:	4650      	mov	r0, sl
   d480e:	4659      	mov	r1, fp
   d4810:	f001 fa52 	bl	d5cb8 <__aeabi_dsub>
   d4814:	2200      	movs	r2, #0
   d4816:	4b17      	ldr	r3, [pc, #92]	; (d4874 <_Z4dtoadhPc+0xc4>)
   d4818:	f001 fe88 	bl	d652c <__aeabi_dcmpge>
   d481c:	b118      	cbz	r0, d4826 <_Z4dtoadhPc+0x76>
        fixed++;
   d481e:	f118 0801 	adds.w	r8, r8, #1
   d4822:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d4826:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d4828:	4622      	mov	r2, r4
   d482a:	462b      	mov	r3, r5
   d482c:	4640      	mov	r0, r8
   d482e:	4649      	mov	r1, r9
   d4830:	f001 ff00 	bl	d6634 <__aeabi_uldivmod>
   d4834:	2301      	movs	r3, #1
   d4836:	220a      	movs	r2, #10
   d4838:	4631      	mov	r1, r6
   d483a:	f7ff ff90 	bl	d475e <ultoa>
    if (prec) {
   d483e:	b1af      	cbz	r7, d486c <_Z4dtoadhPc+0xbc>
        sout += strlen(sout);
   d4840:	4630      	mov	r0, r6
   d4842:	f002 f90c 	bl	d6a5e <strlen>
        *sout++ = '.';
   d4846:	232e      	movs	r3, #46	; 0x2e
   d4848:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
   d484a:	3001      	adds	r0, #1
   d484c:	4406      	add	r6, r0
   d484e:	4622      	mov	r2, r4
   d4850:	462b      	mov	r3, r5
   d4852:	4640      	mov	r0, r8
   d4854:	4649      	mov	r1, r9
   d4856:	f001 feed 	bl	d6634 <__aeabi_uldivmod>
   d485a:	463b      	mov	r3, r7
   d485c:	4610      	mov	r0, r2
   d485e:	4631      	mov	r1, r6
   d4860:	220a      	movs	r2, #10
    }
}
   d4862:	b001      	add	sp, #4
   d4864:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
   d4868:	f7ff bf79 	b.w	d475e <ultoa>
    }
}
   d486c:	b001      	add	sp, #4
   d486e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4872:	bf00      	nop
   d4874:	3fe00000 	.word	0x3fe00000

000d4878 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4878:	b510      	push	{r4, lr}
   d487a:	4604      	mov	r4, r0
{
	free(buffer);
   d487c:	6800      	ldr	r0, [r0, #0]
   d487e:	f7ff fecd 	bl	d461c <free>
}
   d4882:	4620      	mov	r0, r4
   d4884:	bd10      	pop	{r4, pc}

000d4886 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4886:	b510      	push	{r4, lr}
   d4888:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d488a:	6800      	ldr	r0, [r0, #0]
   d488c:	b108      	cbz	r0, d4892 <_ZN6String10invalidateEv+0xc>
   d488e:	f7ff fec5 	bl	d461c <free>
	buffer = NULL;
   d4892:	2300      	movs	r3, #0
   d4894:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4896:	60a3      	str	r3, [r4, #8]
   d4898:	6063      	str	r3, [r4, #4]
   d489a:	bd10      	pop	{r4, pc}

000d489c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d489c:	b538      	push	{r3, r4, r5, lr}
   d489e:	4604      	mov	r4, r0
   d48a0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d48a2:	6800      	ldr	r0, [r0, #0]
   d48a4:	3101      	adds	r1, #1
   d48a6:	f7ff fec1 	bl	d462c <realloc>
	if (newbuffer) {
   d48aa:	b110      	cbz	r0, d48b2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d48ac:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d48b0:	2001      	movs	r0, #1
	}
	return 0;
}
   d48b2:	bd38      	pop	{r3, r4, r5, pc}

000d48b4 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d48b4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d48b6:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d48b8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d48ba:	b113      	cbz	r3, d48c2 <_ZN6String7reserveEj+0xe>
   d48bc:	6843      	ldr	r3, [r0, #4]
   d48be:	428b      	cmp	r3, r1
   d48c0:	d207      	bcs.n	d48d2 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d48c2:	4620      	mov	r0, r4
   d48c4:	f7ff ffea 	bl	d489c <_ZN6String12changeBufferEj>
   d48c8:	b120      	cbz	r0, d48d4 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d48ca:	68a3      	ldr	r3, [r4, #8]
   d48cc:	b90b      	cbnz	r3, d48d2 <_ZN6String7reserveEj+0x1e>
   d48ce:	6822      	ldr	r2, [r4, #0]
   d48d0:	7013      	strb	r3, [r2, #0]
   d48d2:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d48d4:	bd10      	pop	{r4, pc}

000d48d6 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d48d6:	b570      	push	{r4, r5, r6, lr}
   d48d8:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d48da:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d48dc:	4604      	mov	r4, r0
   d48de:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d48e0:	f7ff ffe8 	bl	d48b4 <_ZN6String7reserveEj>
   d48e4:	b918      	cbnz	r0, d48ee <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d48e6:	4620      	mov	r0, r4
   d48e8:	f7ff ffcd 	bl	d4886 <_ZN6String10invalidateEv>
		return *this;
   d48ec:	e009      	b.n	d4902 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d48ee:	462a      	mov	r2, r5
   d48f0:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d48f2:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d48f4:	6820      	ldr	r0, [r4, #0]
   d48f6:	f002 f85b 	bl	d69b0 <memcpy>
	buffer[len] = 0;
   d48fa:	6822      	ldr	r2, [r4, #0]
   d48fc:	68a3      	ldr	r3, [r4, #8]
   d48fe:	2100      	movs	r1, #0
   d4900:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4902:	4620      	mov	r0, r4
   d4904:	bd70      	pop	{r4, r5, r6, pc}

000d4906 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d4906:	b538      	push	{r3, r4, r5, lr}
   d4908:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d490a:	460c      	mov	r4, r1
   d490c:	b141      	cbz	r1, d4920 <_ZN6StringaSEPKc+0x1a>
   d490e:	4608      	mov	r0, r1
   d4910:	f002 f8a5 	bl	d6a5e <strlen>
   d4914:	4621      	mov	r1, r4
   d4916:	4602      	mov	r2, r0
   d4918:	4628      	mov	r0, r5
   d491a:	f7ff ffdc 	bl	d48d6 <_ZN6String4copyEPKcj>
   d491e:	e001      	b.n	d4924 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d4920:	f7ff ffb1 	bl	d4886 <_ZN6String10invalidateEv>

	return *this;
}
   d4924:	4628      	mov	r0, r5
   d4926:	bd38      	pop	{r3, r4, r5, pc}

000d4928 <_ZN6StringC1Efi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d4928:	b530      	push	{r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d492a:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d492c:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d492e:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4930:	6043      	str	r3, [r0, #4]
	len = 0;
   d4932:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4934:	7303      	strb	r3, [r0, #12]
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d4936:	4604      	mov	r4, r0
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   d4938:	ee10 0a10 	vmov	r0, s0
   d493c:	b2cd      	uxtb	r5, r1
   d493e:	f001 fb1b 	bl	d5f78 <__aeabi_f2d>
   d4942:	ec41 0b10 	vmov	d0, r0, r1
   d4946:	a901      	add	r1, sp, #4
   d4948:	4628      	mov	r0, r5
   d494a:	f7ff ff31 	bl	d47b0 <_Z4dtoadhPc>
        *this = buf;
   d494e:	a901      	add	r1, sp, #4
   d4950:	4620      	mov	r0, r4
   d4952:	f7ff ffd8 	bl	d4906 <_ZN6StringaSEPKc>
}
   d4956:	4620      	mov	r0, r4
   d4958:	b00b      	add	sp, #44	; 0x2c
   d495a:	bd30      	pop	{r4, r5, pc}

000d495c <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d495c:	b510      	push	{r4, lr}
   d495e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4960:	6800      	ldr	r0, [r0, #0]
   d4962:	b108      	cbz	r0, d4968 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4964:	f7ff fcf6 	bl	d4354 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4968:	4620      	mov	r0, r4
   d496a:	bd10      	pop	{r4, pc}

000d496c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d496c:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d496e:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4970:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4972:	689b      	ldr	r3, [r3, #8]
   d4974:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4976:	68a3      	ldr	r3, [r4, #8]
   d4978:	3b01      	subs	r3, #1
   d497a:	60a3      	str	r3, [r4, #8]
   d497c:	b92b      	cbnz	r3, d498a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d497e:	6823      	ldr	r3, [r4, #0]
   d4980:	4620      	mov	r0, r4
   d4982:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4988:	4718      	bx	r3
   d498a:	bd10      	pop	{r4, pc}

000d498c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d498c:	680b      	ldr	r3, [r1, #0]
   d498e:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4990:	b113      	cbz	r3, d4998 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4992:	685a      	ldr	r2, [r3, #4]
   d4994:	3201      	adds	r2, #1
   d4996:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4998:	4770      	bx	lr

000d499a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d499a:	b510      	push	{r4, lr}
   d499c:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d499e:	6800      	ldr	r0, [r0, #0]
   d49a0:	b128      	cbz	r0, d49ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d49a2:	6843      	ldr	r3, [r0, #4]
   d49a4:	3b01      	subs	r3, #1
   d49a6:	6043      	str	r3, [r0, #4]
   d49a8:	b90b      	cbnz	r3, d49ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d49aa:	f7ff ffdf 	bl	d496c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d49ae:	4620      	mov	r0, r4
   d49b0:	bd10      	pop	{r4, pc}
	...

000d49b4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d49b4:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d49b6:	4c06      	ldr	r4, [pc, #24]	; (d49d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d49b8:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d49ba:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d49bc:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d49be:	f7ff fcc1 	bl	d4344 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d49c2:	4620      	mov	r0, r4
   d49c4:	4a03      	ldr	r2, [pc, #12]	; (d49d4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d49c6:	4904      	ldr	r1, [pc, #16]	; (d49d8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d49c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d49cc:	f001 b804 	b.w	d59d8 <__aeabi_atexit>
   d49d0:	2003e3f0 	.word	0x2003e3f0
   d49d4:	2003e3c0 	.word	0x2003e3c0
   d49d8:	000d495d 	.word	0x000d495d

000d49dc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d49dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d49de:	4606      	mov	r6, r0
   d49e0:	460d      	mov	r5, r1
   d49e2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d49e4:	2400      	movs	r4, #0
  while (size--) {
   d49e6:	42bd      	cmp	r5, r7
   d49e8:	d00c      	beq.n	d4a04 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d49ea:	6833      	ldr	r3, [r6, #0]
   d49ec:	f815 1b01 	ldrb.w	r1, [r5], #1
   d49f0:	689b      	ldr	r3, [r3, #8]
   d49f2:	4630      	mov	r0, r6
   d49f4:	4798      	blx	r3
     if (chunk>=0)
   d49f6:	2800      	cmp	r0, #0
   d49f8:	db01      	blt.n	d49fe <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d49fa:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d49fc:	e7f3      	b.n	d49e6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d49fe:	2c00      	cmp	r4, #0
   d4a00:	bf08      	it	eq
   d4a02:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4a04:	4620      	mov	r0, r4
   d4a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4a08 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4a08:	b570      	push	{r4, r5, r6, lr}
   d4a0a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4a0c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4a0e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4a10:	b149      	cbz	r1, d4a26 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4a12:	f002 f824 	bl	d6a5e <strlen>
   d4a16:	682b      	ldr	r3, [r5, #0]
   d4a18:	4602      	mov	r2, r0
   d4a1a:	4621      	mov	r1, r4
   d4a1c:	4628      	mov	r0, r5
   d4a1e:	68db      	ldr	r3, [r3, #12]
    }
   d4a20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4a24:	4718      	bx	r3
    }
   d4a26:	bd70      	pop	{r4, r5, r6, pc}

000d4a28 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4a28:	6803      	ldr	r3, [r0, #0]
   d4a2a:	689b      	ldr	r3, [r3, #8]
   d4a2c:	4718      	bx	r3

000d4a2e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4a2e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4a30:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4a32:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4a34:	f7ff fff8 	bl	d4a28 <_ZN5Print5printEc>
  n += print('\n');
   d4a38:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4a3a:	4604      	mov	r4, r0
  n += print('\n');
   d4a3c:	4628      	mov	r0, r5
   d4a3e:	f7ff fff3 	bl	d4a28 <_ZN5Print5printEc>
  return n;
}
   d4a42:	4420      	add	r0, r4
   d4a44:	bd38      	pop	{r3, r4, r5, pc}

000d4a46 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4a46:	b530      	push	{r4, r5, lr}
   d4a48:	b08b      	sub	sp, #44	; 0x2c
   d4a4a:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4a4c:	2100      	movs	r1, #0
   d4a4e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4a52:	2a01      	cmp	r2, #1
   d4a54:	bf98      	it	ls
   d4a56:	220a      	movls	r2, #10
   d4a58:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d4a5c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d4a60:	fb05 3312 	mls	r3, r5, r2, r3
   d4a64:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4a68:	2b09      	cmp	r3, #9
   d4a6a:	bf94      	ite	ls
   d4a6c:	3330      	addls	r3, #48	; 0x30
   d4a6e:	3337      	addhi	r3, #55	; 0x37
   d4a70:	b2db      	uxtb	r3, r3
   d4a72:	4621      	mov	r1, r4
   d4a74:	f804 3901 	strb.w	r3, [r4], #-1
   d4a78:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4a7a:	2d00      	cmp	r5, #0
   d4a7c:	d1ee      	bne.n	d4a5c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4a7e:	f7ff ffc3 	bl	d4a08 <_ZN5Print5writeEPKc>
}
   d4a82:	b00b      	add	sp, #44	; 0x2c
   d4a84:	bd30      	pop	{r4, r5, pc}

000d4a86 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4a86:	b40c      	push	{r2, r3}
   d4a88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4a8c:	b087      	sub	sp, #28
   d4a8e:	af00      	add	r7, sp, #0
   d4a90:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d4a94:	4605      	mov	r5, r0
   d4a96:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d4a9a:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4a9c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d4a9e:	4623      	mov	r3, r4
   d4aa0:	464a      	mov	r2, r9
   d4aa2:	2114      	movs	r1, #20
   d4aa4:	1d38      	adds	r0, r7, #4
   d4aa6:	f7ff fdc9 	bl	d463c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d4aaa:	2813      	cmp	r0, #19
   d4aac:	d805      	bhi.n	d4aba <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4aae:	1d39      	adds	r1, r7, #4
   d4ab0:	4628      	mov	r0, r5
   d4ab2:	f7ff ffa9 	bl	d4a08 <_ZN5Print5writeEPKc>
   d4ab6:	4604      	mov	r4, r0
   d4ab8:	e013      	b.n	d4ae2 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4aba:	f100 0308 	add.w	r3, r0, #8
   d4abe:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d4ac2:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4ac4:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d4ac8:	1c41      	adds	r1, r0, #1
   d4aca:	4623      	mov	r3, r4
   d4acc:	464a      	mov	r2, r9
   d4ace:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d4ad0:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d4ad2:	f7ff fdb3 	bl	d463c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4ad6:	4669      	mov	r1, sp
   d4ad8:	4628      	mov	r0, r5
   d4ada:	f7ff ff95 	bl	d4a08 <_ZN5Print5writeEPKc>
   d4ade:	4604      	mov	r4, r0
   d4ae0:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d4ae2:	b11e      	cbz	r6, d4aec <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d4ae4:	4628      	mov	r0, r5
   d4ae6:	f7ff ffa2 	bl	d4a2e <_ZN5Print7printlnEv>
   d4aea:	4404      	add	r4, r0
    return n;
}
   d4aec:	4620      	mov	r0, r4
   d4aee:	371c      	adds	r7, #28
   d4af0:	46bd      	mov	sp, r7
   d4af2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4af6:	b002      	add	sp, #8
   d4af8:	4770      	bx	lr
	...

000d4afc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4afc:	4b01      	ldr	r3, [pc, #4]	; (d4b04 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4afe:	4a02      	ldr	r2, [pc, #8]	; (d4b08 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4b00:	601a      	str	r2, [r3, #0]
   d4b02:	4770      	bx	lr
   d4b04:	2003e3f4 	.word	0x2003e3f4
   d4b08:	000d6ba3 	.word	0x000d6ba3

000d4b0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4b0c:	4b02      	ldr	r3, [pc, #8]	; (d4b18 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4b0e:	681a      	ldr	r2, [r3, #0]
   d4b10:	4b02      	ldr	r3, [pc, #8]	; (d4b1c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4b12:	601a      	str	r2, [r3, #0]
   d4b14:	4770      	bx	lr
   d4b16:	bf00      	nop
   d4b18:	2003e358 	.word	0x2003e358
   d4b1c:	2003e3f8 	.word	0x2003e3f8

000d4b20 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4b20:	2100      	movs	r1, #0
   d4b22:	f7ff bcdf 	b.w	d44e4 <system_delay_ms>

000d4b26 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4b26:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4b28:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4b2a:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4b2c:	b113      	cbz	r3, d4b34 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4b2e:	2203      	movs	r2, #3
   d4b30:	4601      	mov	r1, r0
   d4b32:	4798      	blx	r3
    }
   d4b34:	4620      	mov	r0, r4
   d4b36:	bd10      	pop	{r4, pc}

000d4b38 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4b38:	b510      	push	{r4, lr}
   d4b3a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4b3c:	f7ff fff3 	bl	d4b26 <_ZNSt14_Function_baseD1Ev>
   d4b40:	4620      	mov	r0, r4
   d4b42:	bd10      	pop	{r4, pc}

000d4b44 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4b44:	b513      	push	{r0, r1, r4, lr}
   d4b46:	460b      	mov	r3, r1
   d4b48:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4b4a:	c803      	ldmia	r0, {r0, r1}
   d4b4c:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4b50:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4b54:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4b58:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4b5c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4b60:	b002      	add	sp, #8
   d4b62:	bd10      	pop	{r4, pc}

000d4b64 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4b64:	4803      	ldr	r0, [pc, #12]	; (d4b74 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4b66:	4a04      	ldr	r2, [pc, #16]	; (d4b78 <_GLOBAL__sub_I_RGB+0x14>)
   d4b68:	4904      	ldr	r1, [pc, #16]	; (d4b7c <_GLOBAL__sub_I_RGB+0x18>)
   d4b6a:	2300      	movs	r3, #0
   d4b6c:	6083      	str	r3, [r0, #8]
   d4b6e:	f000 bf33 	b.w	d59d8 <__aeabi_atexit>
   d4b72:	bf00      	nop
   d4b74:	2003e3fc 	.word	0x2003e3fc
   d4b78:	2003e3c0 	.word	0x2003e3c0
   d4b7c:	000d4b39 	.word	0x000d4b39

000d4b80 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4b80:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4b82:	4b0c      	ldr	r3, [pc, #48]	; (d4bb4 <serialEventRun+0x34>)
   d4b84:	b133      	cbz	r3, d4b94 <serialEventRun+0x14>
   d4b86:	f000 fc1b 	bl	d53c0 <_Z16_fetch_usbserialv>
   d4b8a:	6803      	ldr	r3, [r0, #0]
   d4b8c:	691b      	ldr	r3, [r3, #16]
   d4b8e:	4798      	blx	r3
   d4b90:	2800      	cmp	r0, #0
   d4b92:	dc09      	bgt.n	d4ba8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4b94:	4b08      	ldr	r3, [pc, #32]	; (d4bb8 <serialEventRun+0x38>)
   d4b96:	b163      	cbz	r3, d4bb2 <serialEventRun+0x32>
   d4b98:	f000 fc90 	bl	d54bc <_Z22__fetch_global_Serial1v>
   d4b9c:	6803      	ldr	r3, [r0, #0]
   d4b9e:	691b      	ldr	r3, [r3, #16]
   d4ba0:	4798      	blx	r3
   d4ba2:	2800      	cmp	r0, #0
   d4ba4:	dc03      	bgt.n	d4bae <serialEventRun+0x2e>
   d4ba6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4ba8:	f3af 8000 	nop.w
   d4bac:	e7f2      	b.n	d4b94 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4bae:	f3af 8000 	nop.w
   d4bb2:	bd08      	pop	{r3, pc}
	...

000d4bbc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4bbc:	b508      	push	{r3, lr}
	serialEventRun();
   d4bbe:	f7ff ffdf 	bl	d4b80 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4bc2:	f7ff fb9f 	bl	d4304 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4bc6:	4b01      	ldr	r3, [pc, #4]	; (d4bcc <_post_loop+0x10>)
   d4bc8:	6018      	str	r0, [r3, #0]
   d4bca:	bd08      	pop	{r3, pc}
   d4bcc:	2003e730 	.word	0x2003e730

000d4bd0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4bd0:	4802      	ldr	r0, [pc, #8]	; (d4bdc <_Z33system_initialize_user_backup_ramv+0xc>)
   d4bd2:	4a03      	ldr	r2, [pc, #12]	; (d4be0 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4bd4:	4903      	ldr	r1, [pc, #12]	; (d4be4 <_Z33system_initialize_user_backup_ramv+0x14>)
   d4bd6:	1a12      	subs	r2, r2, r0
   d4bd8:	f001 beea 	b.w	d69b0 <memcpy>
   d4bdc:	2003f400 	.word	0x2003f400
   d4be0:	2003f404 	.word	0x2003f404
   d4be4:	000d6e38 	.word	0x000d6e38

000d4be8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4be8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4bea:	2300      	movs	r3, #0
   d4bec:	9300      	str	r3, [sp, #0]
   d4bee:	461a      	mov	r2, r3
   d4bf0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4bf4:	f7ff fc98 	bl	d4528 <system_ctrl_set_result>
}
   d4bf8:	b003      	add	sp, #12
   d4bfa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4c00 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4c00:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4c02:	8843      	ldrh	r3, [r0, #2]
   d4c04:	2b0a      	cmp	r3, #10
   d4c06:	d008      	beq.n	d4c1a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4c08:	2b50      	cmp	r3, #80	; 0x50
   d4c0a:	d109      	bne.n	d4c20 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4c0c:	4b09      	ldr	r3, [pc, #36]	; (d4c34 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4c0e:	681b      	ldr	r3, [r3, #0]
   d4c10:	b13b      	cbz	r3, d4c22 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4c12:	b003      	add	sp, #12
   d4c14:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4c18:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4c1a:	f7ff ffe5 	bl	d4be8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4c1e:	e006      	b.n	d4c2e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4c20:	2300      	movs	r3, #0
   d4c22:	9300      	str	r3, [sp, #0]
   d4c24:	461a      	mov	r2, r3
   d4c26:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4c2a:	f7ff fc7d 	bl	d4528 <system_ctrl_set_result>
        break;
    }
}
   d4c2e:	b003      	add	sp, #12
   d4c30:	f85d fb04 	ldr.w	pc, [sp], #4
   d4c34:	2003e40c 	.word	0x2003e40c

000d4c38 <module_user_init_hook>:

void module_user_init_hook()
{
   d4c38:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4c3a:	4c10      	ldr	r4, [pc, #64]	; (d4c7c <module_user_init_hook+0x44>)
   d4c3c:	4d10      	ldr	r5, [pc, #64]	; (d4c80 <module_user_init_hook+0x48>)
   d4c3e:	6823      	ldr	r3, [r4, #0]
   d4c40:	42ab      	cmp	r3, r5
   d4c42:	4b10      	ldr	r3, [pc, #64]	; (d4c84 <module_user_init_hook+0x4c>)
   d4c44:	bf0c      	ite	eq
   d4c46:	2201      	moveq	r2, #1
   d4c48:	2200      	movne	r2, #0
   d4c4a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4c4c:	d002      	beq.n	d4c54 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d4c4e:	f7ff ffbf 	bl	d4bd0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4c52:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4c54:	f7ff fb4e 	bl	d42f4 <HAL_RNG_GetRandomNumber>
   d4c58:	4604      	mov	r4, r0
    srand(seed);
   d4c5a:	f001 febd 	bl	d69d8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4c5e:	4b0a      	ldr	r3, [pc, #40]	; (d4c88 <module_user_init_hook+0x50>)
   d4c60:	b113      	cbz	r3, d4c68 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d4c62:	4620      	mov	r0, r4
   d4c64:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4c68:	2100      	movs	r1, #0
   d4c6a:	4807      	ldr	r0, [pc, #28]	; (d4c88 <module_user_init_hook+0x50>)
   d4c6c:	f7ff fcc6 	bl	d45fc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4c70:	2100      	movs	r1, #0
   d4c72:	4806      	ldr	r0, [pc, #24]	; (d4c8c <module_user_init_hook+0x54>)
}
   d4c74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4c78:	f7ff bc4c 	b.w	d4514 <system_ctrl_set_app_request_handler>
   d4c7c:	2003f400 	.word	0x2003f400
   d4c80:	9a271c1e 	.word	0x9a271c1e
   d4c84:	2003e410 	.word	0x2003e410
   d4c88:	00000000 	.word	0x00000000
   d4c8c:	000d4c01 	.word	0x000d4c01

000d4c90 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4c90:	4770      	bx	lr

000d4c92 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4c92:	2000      	movs	r0, #0
   d4c94:	4770      	bx	lr

000d4c96 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4c96:	b510      	push	{r4, lr}
   d4c98:	2110      	movs	r1, #16
   d4c9a:	4604      	mov	r4, r0
   d4c9c:	f000 feaa 	bl	d59f4 <_ZdlPvj>
   d4ca0:	4620      	mov	r0, r4
   d4ca2:	bd10      	pop	{r4, pc}

000d4ca4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4ca4:	b508      	push	{r3, lr}
      { delete this; }
   d4ca6:	b108      	cbz	r0, d4cac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4ca8:	f7ff fff5 	bl	d4c96 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4cac:	bd08      	pop	{r3, pc}

000d4cae <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4cae:	2200      	movs	r2, #0
   d4cb0:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4cb2:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4cb4:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d4cb8:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4cba:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d4cbe:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4cc0:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4cc2:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4cc4:	680c      	ldr	r4, [r1, #0]
   d4cc6:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4cc8:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d4cca:	bd10      	pop	{r4, pc}

000d4ccc <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4ccc:	b510      	push	{r4, lr}
   d4cce:	4604      	mov	r4, r0
    free((void*)msg_);
   d4cd0:	6800      	ldr	r0, [r0, #0]
   d4cd2:	f7ff fca3 	bl	d461c <free>
}
   d4cd6:	4620      	mov	r0, r4
   d4cd8:	bd10      	pop	{r4, pc}

000d4cda <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4cda:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4cdc:	68c4      	ldr	r4, [r0, #12]
   d4cde:	b1f4      	cbz	r4, d4d1e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4ce0:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4ce2:	2b02      	cmp	r3, #2
   d4ce4:	d103      	bne.n	d4cee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4ce6:	f104 000c 	add.w	r0, r4, #12
   d4cea:	f7ff ffef 	bl	d4ccc <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4cee:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4cf0:	b135      	cbz	r5, d4d00 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4cf2:	4628      	mov	r0, r5
   d4cf4:	f7ff ff17 	bl	d4b26 <_ZNSt14_Function_baseD1Ev>
   d4cf8:	2110      	movs	r1, #16
   d4cfa:	4628      	mov	r0, r5
   d4cfc:	f000 fe7a 	bl	d59f4 <_ZdlPvj>
   d4d00:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4d02:	b135      	cbz	r5, d4d12 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4d04:	4628      	mov	r0, r5
   d4d06:	f7ff ff0e 	bl	d4b26 <_ZNSt14_Function_baseD1Ev>
   d4d0a:	2110      	movs	r1, #16
   d4d0c:	4628      	mov	r0, r5
   d4d0e:	f000 fe71 	bl	d59f4 <_ZdlPvj>
   d4d12:	4620      	mov	r0, r4
   d4d14:	2114      	movs	r1, #20
   d4d16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4d1a:	f000 be6b 	b.w	d59f4 <_ZdlPvj>
   d4d1e:	bd38      	pop	{r3, r4, r5, pc}

000d4d20 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4d20:	b513      	push	{r0, r1, r4, lr}
   d4d22:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4d24:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d4d28:	2300      	movs	r3, #0
   d4d2a:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4d2c:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4d2e:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4d30:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4d32:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4d34:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4d36:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4d38:	f7ff fe2f 	bl	d499a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d3c:	4620      	mov	r0, r4
   d4d3e:	b002      	add	sp, #8
   d4d40:	bd10      	pop	{r4, pc}

000d4d42 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4d42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4d44:	460c      	mov	r4, r1
   d4d46:	ad02      	add	r5, sp, #8
   d4d48:	f854 3b04 	ldr.w	r3, [r4], #4
   d4d4c:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4d50:	4606      	mov	r6, r0
   d4d52:	460f      	mov	r7, r1
   d4d54:	a801      	add	r0, sp, #4
   d4d56:	4621      	mov	r1, r4
   d4d58:	f7ff fe18 	bl	d498c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4d5c:	4629      	mov	r1, r5
   d4d5e:	4630      	mov	r0, r6
   d4d60:	f7ff ffde 	bl	d4d20 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4d64:	a801      	add	r0, sp, #4
   d4d66:	f7ff fe18 	bl	d499a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d6a:	4620      	mov	r0, r4
   d4d6c:	f7ff fe15 	bl	d499a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4d70:	4638      	mov	r0, r7
   d4d72:	2108      	movs	r1, #8
   d4d74:	f000 fe3e 	bl	d59f4 <_ZdlPvj>
        return p;
    }
   d4d78:	4630      	mov	r0, r6
   d4d7a:	b003      	add	sp, #12
   d4d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4d80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4d80:	b538      	push	{r3, r4, r5, lr}
   d4d82:	2300      	movs	r3, #0
   d4d84:	4604      	mov	r4, r0
   d4d86:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4d88:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4d8a:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4d8c:	f7ff f985 	bl	d409a <_Znwj>
   d4d90:	b128      	cbz	r0, d4d9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4d92:	2301      	movs	r3, #1
   d4d94:	6043      	str	r3, [r0, #4]
   d4d96:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d4d98:	4b02      	ldr	r3, [pc, #8]	; (d4da4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4d9a:	6003      	str	r3, [r0, #0]
   d4d9c:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4d9e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d4da0:	4620      	mov	r0, r4
   d4da2:	bd38      	pop	{r3, r4, r5, pc}
   d4da4:	000d6c44 	.word	0x000d6c44

000d4da8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4da8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4daa:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4dac:	b90a      	cbnz	r2, d4db2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4dae:	f000 fe34 	bl	d5a1a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4db2:	68c3      	ldr	r3, [r0, #12]
    }
   d4db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4db8:	4718      	bx	r3

000d4dba <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4dba:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4dbc:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4dbe:	f100 0110 	add.w	r1, r0, #16
   d4dc2:	f7ff fff1 	bl	d4da8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4dc6:	bd08      	pop	{r3, pc}

000d4dc8 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4dc8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4dca:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4dcc:	b90a      	cbnz	r2, d4dd2 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4dce:	f000 fe24 	bl	d5a1a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4dd2:	68c3      	ldr	r3, [r0, #12]
    }
   d4dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4dd8:	4718      	bx	r3

000d4dda <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4dda:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4ddc:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4dde:	f100 0110 	add.w	r1, r0, #16
   d4de2:	f7ff fff1 	bl	d4dc8 <_ZNKSt8functionIFvRKbEEclES1_>
   d4de6:	bd08      	pop	{r3, pc}

000d4de8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4de8:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4dea:	2300      	movs	r3, #0
   d4dec:	6083      	str	r3, [r0, #8]
   d4dee:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4df0:	4604      	mov	r4, r0
   d4df2:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4df4:	b12b      	cbz	r3, d4e02 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4df6:	2202      	movs	r2, #2
   d4df8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4dfa:	68eb      	ldr	r3, [r5, #12]
   d4dfc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4dfe:	68ab      	ldr	r3, [r5, #8]
   d4e00:	60a3      	str	r3, [r4, #8]
	}
    }
   d4e02:	4620      	mov	r0, r4
   d4e04:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4e08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d4e08:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4e0a:	b089      	sub	sp, #36	; 0x24
   d4e0c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d4e0e:	4668      	mov	r0, sp
   d4e10:	f7ff ff4d 	bl	d4cae <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4e14:	2300      	movs	r3, #0
   d4e16:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4e1a:	f04f 0202 	mov.w	r2, #2
   d4e1e:	e8d4 3f4f 	ldrexb	r3, [r4]
   d4e22:	2b00      	cmp	r3, #0
   d4e24:	d103      	bne.n	d4e2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d4e26:	e8c4 2f41 	strexb	r1, r2, [r4]
   d4e2a:	2900      	cmp	r1, #0
   d4e2c:	d1f7      	bne.n	d4e1e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d4e2e:	d002      	beq.n	d4e36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d4e30:	f88d 3008 	strb.w	r3, [sp, #8]
   d4e34:	e063      	b.n	d4efe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d4e36:	f114 050c 	adds.w	r5, r4, #12
   d4e3a:	d003      	beq.n	d4e44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d4e3c:	4669      	mov	r1, sp
   d4e3e:	4628      	mov	r0, r5
   d4e40:	f7ff ff35 	bl	d4cae <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4e44:	f3bf 8f5f 	dmb	sy
   d4e48:	2301      	movs	r3, #1
   d4e4a:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4e4c:	2000      	movs	r0, #0
   d4e4e:	f104 0308 	add.w	r3, r4, #8
   d4e52:	f3bf 8f5f 	dmb	sy
   d4e56:	e853 6f00 	ldrex	r6, [r3]
   d4e5a:	e843 0200 	strex	r2, r0, [r3]
   d4e5e:	2a00      	cmp	r2, #0
   d4e60:	d1f9      	bne.n	d4e56 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d4e62:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4e66:	2e00      	cmp	r6, #0
   d4e68:	d049      	beq.n	d4efe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4e6a:	f7ff fb43 	bl	d44f4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4e6e:	b120      	cbz	r0, d4e7a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4e70:	4629      	mov	r1, r5
   d4e72:	4630      	mov	r0, r6
   d4e74:	f7ff ff98 	bl	d4da8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4e78:	e03a      	b.n	d4ef0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4e7a:	4631      	mov	r1, r6
   d4e7c:	a802      	add	r0, sp, #8
   d4e7e:	f7ff ffb3 	bl	d4de8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4e82:	68e0      	ldr	r0, [r4, #12]
   d4e84:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4e88:	b108      	cbz	r0, d4e8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d4e8a:	f001 fdcd 	bl	d6a28 <strdup>
   d4e8e:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4e90:	2010      	movs	r0, #16
   d4e92:	f8ad 501c 	strh.w	r5, [sp, #28]
   d4e96:	f7ff f900 	bl	d409a <_Znwj>
   d4e9a:	4605      	mov	r5, r0
   d4e9c:	b1e8      	cbz	r0, d4eda <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4e9e:	2700      	movs	r7, #0
   d4ea0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4ea2:	2018      	movs	r0, #24
   d4ea4:	f7ff f8f9 	bl	d409a <_Znwj>
   d4ea8:	4604      	mov	r4, r0
   d4eaa:	b188      	cbz	r0, d4ed0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4eac:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4eae:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4eb0:	a802      	add	r0, sp, #8
   d4eb2:	f7ff fe47 	bl	d4b44 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4eb6:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4eb8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4eba:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4ebc:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4ebe:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4ec0:	a906      	add	r1, sp, #24
   d4ec2:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ec4:	60e3      	str	r3, [r4, #12]
   d4ec6:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4eca:	9205      	str	r2, [sp, #20]
   d4ecc:	f7ff feef 	bl	d4cae <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4ed0:	4b0d      	ldr	r3, [pc, #52]	; (d4f08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d4ed2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4ed4:	4b0d      	ldr	r3, [pc, #52]	; (d4f0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4ed6:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4ed8:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d4eda:	a806      	add	r0, sp, #24
   d4edc:	f7ff fef6 	bl	d4ccc <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4ee0:	a802      	add	r0, sp, #8
   d4ee2:	f7ff fe20 	bl	d4b26 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4ee6:	2200      	movs	r2, #0
   d4ee8:	4629      	mov	r1, r5
   d4eea:	4809      	ldr	r0, [pc, #36]	; (d4f10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d4eec:	f7ff fb0a 	bl	d4504 <application_thread_invoke>
   d4ef0:	4630      	mov	r0, r6
   d4ef2:	f7ff fe18 	bl	d4b26 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4ef6:	2110      	movs	r1, #16
   d4ef8:	4630      	mov	r0, r6
   d4efa:	f000 fd7b 	bl	d59f4 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d4efe:	4668      	mov	r0, sp
   d4f00:	f7ff fee4 	bl	d4ccc <_ZN8particle5ErrorD1Ev>
    }
   d4f04:	b009      	add	sp, #36	; 0x24
   d4f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4f08:	000d4dbb 	.word	0x000d4dbb
   d4f0c:	000d5031 	.word	0x000d5031
   d4f10:	000d5509 	.word	0x000d5509

000d4f14 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4f18:	b08b      	sub	sp, #44	; 0x2c
   d4f1a:	4606      	mov	r6, r0
   d4f1c:	460f      	mov	r7, r1
   d4f1e:	4690      	mov	r8, r2
   d4f20:	4699      	mov	r9, r3
   d4f22:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4f26:	f7ff fb59 	bl	d45dc <spark_cloud_flag_connected>
   d4f2a:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d4f2c:	4683      	mov	fp, r0
   d4f2e:	bb30      	cbnz	r0, d4f7e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4f30:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d4f34:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4f36:	a905      	add	r1, sp, #20
   d4f38:	4628      	mov	r0, r5
   d4f3a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4f3e:	f7ff feb6 	bl	d4cae <_ZN8particle5ErrorC1EOS0_>
   d4f42:	2014      	movs	r0, #20
   d4f44:	f7ff f8a9 	bl	d409a <_Znwj>
   d4f48:	4604      	mov	r4, r0
   d4f4a:	b158      	cbz	r0, d4f64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4f4c:	2302      	movs	r3, #2
   d4f4e:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4f50:	2301      	movs	r3, #1
   d4f52:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4f54:	f8c0 b004 	str.w	fp, [r0, #4]
   d4f58:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d4f5c:	4629      	mov	r1, r5
   d4f5e:	300c      	adds	r0, #12
   d4f60:	f7ff fea5 	bl	d4cae <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d4f64:	4630      	mov	r0, r6
   d4f66:	4621      	mov	r1, r4
   d4f68:	f840 4b04 	str.w	r4, [r0], #4
   d4f6c:	f7ff ff08 	bl	d4d80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4f70:	4628      	mov	r0, r5
   d4f72:	f7ff feab 	bl	d4ccc <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d4f76:	a805      	add	r0, sp, #20
   d4f78:	f7ff fea8 	bl	d4ccc <_ZN8particle5ErrorD1Ev>
   d4f7c:	e052      	b.n	d5024 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4f7e:	2400      	movs	r4, #0
   d4f80:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4f82:	2014      	movs	r0, #20
   d4f84:	606c      	str	r4, [r5, #4]
   d4f86:	60ac      	str	r4, [r5, #8]
   d4f88:	9307      	str	r3, [sp, #28]
   d4f8a:	f7ff f886 	bl	d409a <_Znwj>
   d4f8e:	4601      	mov	r1, r0
   d4f90:	b118      	cbz	r0, d4f9a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d4f92:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4f94:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4f96:	6044      	str	r4, [r0, #4]
   d4f98:	6084      	str	r4, [r0, #8]
   d4f9a:	a804      	add	r0, sp, #16
   d4f9c:	9103      	str	r1, [sp, #12]
   d4f9e:	f7ff feef 	bl	d4d80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d4fa2:	4b22      	ldr	r3, [pc, #136]	; (d502c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d4fa4:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4fa6:	2008      	movs	r0, #8
   d4fa8:	f7ff f877 	bl	d409a <_Znwj>
   d4fac:	4604      	mov	r4, r0
   d4fae:	b128      	cbz	r0, d4fbc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4fb0:	9b03      	ldr	r3, [sp, #12]
   d4fb2:	f840 3b04 	str.w	r3, [r0], #4
   d4fb6:	a904      	add	r1, sp, #16
   d4fb8:	f7ff fce8 	bl	d498c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4fbc:	9500      	str	r5, [sp, #0]
   d4fbe:	fa5f f38a 	uxtb.w	r3, sl
   d4fc2:	464a      	mov	r2, r9
   d4fc4:	4641      	mov	r1, r8
   d4fc6:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d4fc8:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4fca:	f7ff fb0f 	bl	d45ec <spark_send_event>
   d4fce:	b920      	cbnz	r0, d4fda <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d4fd0:	9b03      	ldr	r3, [sp, #12]
   d4fd2:	785b      	ldrb	r3, [r3, #1]
   d4fd4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4fd8:	b183      	cbz	r3, d4ffc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d4fda:	9b03      	ldr	r3, [sp, #12]
   d4fdc:	9305      	str	r3, [sp, #20]
   d4fde:	a904      	add	r1, sp, #16
   d4fe0:	a806      	add	r0, sp, #24
   d4fe2:	f7ff fcd3 	bl	d498c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d4fe6:	a905      	add	r1, sp, #20
   d4fe8:	4630      	mov	r0, r6
   d4fea:	f7ff fe99 	bl	d4d20 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4fee:	a806      	add	r0, sp, #24
   d4ff0:	f7ff fcd3 	bl	d499a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ff4:	a804      	add	r0, sp, #16
   d4ff6:	f7ff fcd0 	bl	d499a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ffa:	e013      	b.n	d5024 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d4ffc:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d5000:	a905      	add	r1, sp, #20
   d5002:	a803      	add	r0, sp, #12
   d5004:	9205      	str	r2, [sp, #20]
   d5006:	f8ad 3018 	strh.w	r3, [sp, #24]
   d500a:	f7ff fefd 	bl	d4e08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d500e:	a805      	add	r0, sp, #20
   d5010:	f7ff fe5c 	bl	d4ccc <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5014:	a805      	add	r0, sp, #20
   d5016:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5018:	f7ff fe93 	bl	d4d42 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d501c:	a806      	add	r0, sp, #24
   d501e:	f7ff fcbc 	bl	d499a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5022:	e7da      	b.n	d4fda <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d5024:	4630      	mov	r0, r6
   d5026:	b00b      	add	sp, #44	; 0x2c
   d5028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d502c:	000d51a1 	.word	0x000d51a1

000d5030 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5030:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5034:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5036:	d006      	beq.n	d5046 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d5038:	2a03      	cmp	r2, #3
   d503a:	d017      	beq.n	d506c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d503c:	2a01      	cmp	r2, #1
   d503e:	d122      	bne.n	d5086 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5040:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5042:	6003      	str	r3, [r0, #0]
	      break;
   d5044:	e01f      	b.n	d5086 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5046:	2018      	movs	r0, #24
   d5048:	680e      	ldr	r6, [r1, #0]
   d504a:	f7ff f826 	bl	d409a <_Znwj>
   d504e:	4605      	mov	r5, r0
   d5050:	b150      	cbz	r0, d5068 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5052:	4631      	mov	r1, r6
   d5054:	f7ff fec8 	bl	d4de8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5058:	6930      	ldr	r0, [r6, #16]
   d505a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d505e:	b108      	cbz	r0, d5064 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5060:	f001 fce2 	bl	d6a28 <strdup>
   d5064:	6128      	str	r0, [r5, #16]
   d5066:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5068:	6025      	str	r5, [r4, #0]
   d506a:	e00c      	b.n	d5086 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d506c:	6804      	ldr	r4, [r0, #0]
   d506e:	b154      	cbz	r4, d5086 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d5070:	f104 0010 	add.w	r0, r4, #16
   d5074:	f7ff fe2a 	bl	d4ccc <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5078:	4620      	mov	r0, r4
   d507a:	f7ff fd54 	bl	d4b26 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d507e:	2118      	movs	r1, #24
   d5080:	4620      	mov	r0, r4
   d5082:	f000 fcb7 	bl	d59f4 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5086:	2000      	movs	r0, #0
   d5088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d508a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d508a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d508c:	2300      	movs	r3, #0
   d508e:	6083      	str	r3, [r0, #8]
   d5090:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5092:	4604      	mov	r4, r0
   d5094:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5096:	b12b      	cbz	r3, d50a4 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5098:	2202      	movs	r2, #2
   d509a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d509c:	68eb      	ldr	r3, [r5, #12]
   d509e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d50a0:	68ab      	ldr	r3, [r5, #8]
   d50a2:	60a3      	str	r3, [r4, #8]
	}
    }
   d50a4:	4620      	mov	r0, r4
   d50a6:	bd38      	pop	{r3, r4, r5, pc}

000d50a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d50a8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d50aa:	b570      	push	{r4, r5, r6, lr}
   d50ac:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d50ae:	d006      	beq.n	d50be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d50b0:	2a03      	cmp	r2, #3
   d50b2:	d011      	beq.n	d50d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d50b4:	2a01      	cmp	r2, #1
   d50b6:	d118      	bne.n	d50ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d50b8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d50ba:	6003      	str	r3, [r0, #0]
	      break;
   d50bc:	e015      	b.n	d50ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d50be:	2014      	movs	r0, #20
   d50c0:	680e      	ldr	r6, [r1, #0]
   d50c2:	f7fe ffea 	bl	d409a <_Znwj>
   d50c6:	4605      	mov	r5, r0
   d50c8:	b120      	cbz	r0, d50d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d50ca:	4631      	mov	r1, r6
   d50cc:	f7ff ffdd 	bl	d508a <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d50d0:	7c33      	ldrb	r3, [r6, #16]
   d50d2:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d50d4:	6025      	str	r5, [r4, #0]
   d50d6:	e008      	b.n	d50ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d50d8:	6804      	ldr	r4, [r0, #0]
   d50da:	b134      	cbz	r4, d50ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d50dc:	4620      	mov	r0, r4
   d50de:	f7ff fd22 	bl	d4b26 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d50e2:	2114      	movs	r1, #20
   d50e4:	4620      	mov	r0, r4
   d50e6:	f000 fc85 	bl	d59f4 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d50ea:	2000      	movs	r0, #0
   d50ec:	bd70      	pop	{r4, r5, r6, pc}
	...

000d50f0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d50f0:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d50f2:	2300      	movs	r3, #0
   d50f4:	b087      	sub	sp, #28
   d50f6:	460c      	mov	r4, r1
   d50f8:	f3bf 8f5f 	dmb	sy
   d50fc:	e850 6f00 	ldrex	r6, [r0]
   d5100:	e840 3200 	strex	r2, r3, [r0]
   d5104:	2a00      	cmp	r2, #0
   d5106:	d1f9      	bne.n	d50fc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5108:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d510c:	2e00      	cmp	r6, #0
   d510e:	d03f      	beq.n	d5190 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5110:	4618      	mov	r0, r3
   d5112:	f7ff f9ef 	bl	d44f4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5116:	4607      	mov	r7, r0
   d5118:	b120      	cbz	r0, d5124 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d511a:	4621      	mov	r1, r4
   d511c:	4630      	mov	r0, r6
   d511e:	f7ff fe53 	bl	d4dc8 <_ZNKSt8functionIFvRKbEEclES1_>
   d5122:	e02e      	b.n	d5182 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5124:	4631      	mov	r1, r6
   d5126:	a801      	add	r0, sp, #4
   d5128:	f7ff ffaf 	bl	d508a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d512c:	7823      	ldrb	r3, [r4, #0]
   d512e:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5132:	2010      	movs	r0, #16
   d5134:	f7fe ffb1 	bl	d409a <_Znwj>
   d5138:	4605      	mov	r5, r0
   d513a:	b1d0      	cbz	r0, d5172 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d513c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d513e:	2014      	movs	r0, #20
   d5140:	f7fe ffab 	bl	d409a <_Znwj>
   d5144:	4604      	mov	r4, r0
   d5146:	b178      	cbz	r0, d5168 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5148:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d514a:	4601      	mov	r1, r0
   d514c:	a801      	add	r0, sp, #4
   d514e:	f7ff fcf9 	bl	d4b44 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5152:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5154:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5156:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5158:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d515a:	9203      	str	r2, [sp, #12]
   d515c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d515e:	60e3      	str	r3, [r4, #12]
   d5160:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5164:	9204      	str	r2, [sp, #16]
   d5166:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5168:	4b0a      	ldr	r3, [pc, #40]	; (d5194 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d516a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d516c:	4b0a      	ldr	r3, [pc, #40]	; (d5198 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d516e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5170:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5172:	a801      	add	r0, sp, #4
   d5174:	f7ff fcd7 	bl	d4b26 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5178:	2200      	movs	r2, #0
   d517a:	4629      	mov	r1, r5
   d517c:	4807      	ldr	r0, [pc, #28]	; (d519c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d517e:	f7ff f9c1 	bl	d4504 <application_thread_invoke>
   d5182:	4630      	mov	r0, r6
   d5184:	f7ff fccf 	bl	d4b26 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5188:	2110      	movs	r1, #16
   d518a:	4630      	mov	r0, r6
   d518c:	f000 fc32 	bl	d59f4 <_ZdlPvj>
        }
    }
   d5190:	b007      	add	sp, #28
   d5192:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5194:	000d4ddb 	.word	0x000d4ddb
   d5198:	000d50a9 	.word	0x000d50a9
   d519c:	000d5509 	.word	0x000d5509

000d51a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d51a0:	b530      	push	{r4, r5, lr}
   d51a2:	b085      	sub	sp, #20
   d51a4:	4604      	mov	r4, r0
   d51a6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d51a8:	4668      	mov	r0, sp
   d51aa:	4611      	mov	r1, r2
   d51ac:	f7ff fdc9 	bl	d4d42 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d51b0:	b17c      	cbz	r4, d51d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d51b2:	b224      	sxth	r4, r4
   d51b4:	4628      	mov	r0, r5
   d51b6:	b10d      	cbz	r5, d51bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d51b8:	f001 fc36 	bl	d6a28 <strdup>
   d51bc:	9002      	str	r0, [sp, #8]
   d51be:	a902      	add	r1, sp, #8
   d51c0:	4668      	mov	r0, sp
   d51c2:	f8ad 400c 	strh.w	r4, [sp, #12]
   d51c6:	f7ff fe1f 	bl	d4e08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d51ca:	a802      	add	r0, sp, #8
   d51cc:	f7ff fd7e 	bl	d4ccc <_ZN8particle5ErrorD1Ev>
   d51d0:	e01d      	b.n	d520e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d51d2:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d51d4:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d51d8:	f04f 0201 	mov.w	r2, #1
   d51dc:	e8d0 3f4f 	ldrexb	r3, [r0]
   d51e0:	42a3      	cmp	r3, r4
   d51e2:	d103      	bne.n	d51ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d51e4:	e8c0 2f41 	strexb	r1, r2, [r0]
   d51e8:	2900      	cmp	r1, #0
   d51ea:	d1f7      	bne.n	d51dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d51ec:	d002      	beq.n	d51f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d51ee:	f88d 3008 	strb.w	r3, [sp, #8]
   d51f2:	e00c      	b.n	d520e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d51f4:	f110 010c 	adds.w	r1, r0, #12
   d51f8:	f04f 0301 	mov.w	r3, #1
   d51fc:	bf18      	it	ne
   d51fe:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5200:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5204:	3004      	adds	r0, #4
   d5206:	f800 3c03 	strb.w	r3, [r0, #-3]
   d520a:	f7ff ff71 	bl	d50f0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d520e:	a801      	add	r0, sp, #4
   d5210:	f7ff fbc3 	bl	d499a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5214:	b005      	add	sp, #20
   d5216:	bd30      	pop	{r4, r5, pc}

000d5218 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5218:	4770      	bx	lr

000d521a <_ZN9IPAddressD0Ev>:
   d521a:	b510      	push	{r4, lr}
   d521c:	2118      	movs	r1, #24
   d521e:	4604      	mov	r4, r0
   d5220:	f000 fbe8 	bl	d59f4 <_ZdlPvj>
   d5224:	4620      	mov	r0, r4
   d5226:	bd10      	pop	{r4, pc}

000d5228 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5228:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d522a:	7d03      	ldrb	r3, [r0, #20]
   d522c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d522e:	b08d      	sub	sp, #52	; 0x34
   d5230:	460e      	mov	r6, r1
   d5232:	f100 0704 	add.w	r7, r0, #4
   d5236:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d523a:	d002      	beq.n	d5242 <_ZNK9IPAddress7printToER5Print+0x1a>
   d523c:	f100 0508 	add.w	r5, r0, #8
   d5240:	e018      	b.n	d5274 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5242:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5244:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5246:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d524a:	232f      	movs	r3, #47	; 0x2f
   d524c:	462a      	mov	r2, r5
   d524e:	200a      	movs	r0, #10
   d5250:	f7ff f888 	bl	d4364 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5254:	4628      	mov	r0, r5
   d5256:	f001 fc02 	bl	d6a5e <strlen>
   d525a:	6833      	ldr	r3, [r6, #0]
   d525c:	4602      	mov	r2, r0
   d525e:	68db      	ldr	r3, [r3, #12]
   d5260:	4629      	mov	r1, r5
   d5262:	4630      	mov	r0, r6
   d5264:	4798      	blx	r3
   d5266:	e00f      	b.n	d5288 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5268:	b124      	cbz	r4, d5274 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d526a:	212e      	movs	r1, #46	; 0x2e
   d526c:	4630      	mov	r0, r6
   d526e:	f7ff fbdb 	bl	d4a28 <_ZN5Print5printEc>
   d5272:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5274:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5278:	220a      	movs	r2, #10
   d527a:	4630      	mov	r0, r6
   d527c:	f7ff fbe3 	bl	d4a46 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5280:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5282:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5284:	d1f0      	bne.n	d5268 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5286:	4620      	mov	r0, r4
    }
    return n;
}
   d5288:	b00d      	add	sp, #52	; 0x34
   d528a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d528c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d528c:	b510      	push	{r4, lr}
   d528e:	4b05      	ldr	r3, [pc, #20]	; (d52a4 <_ZN9IPAddressC1Ev+0x18>)
   d5290:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5292:	2211      	movs	r2, #17
   d5294:	f840 3b04 	str.w	r3, [r0], #4
   d5298:	2100      	movs	r1, #0
   d529a:	f001 fb94 	bl	d69c6 <memset>
{
    clear();
}
   d529e:	4620      	mov	r0, r4
   d52a0:	bd10      	pop	{r4, pc}
   d52a2:	bf00      	nop
   d52a4:	000d6c60 	.word	0x000d6c60

000d52a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d52a8:	4603      	mov	r3, r0
   d52aa:	4a07      	ldr	r2, [pc, #28]	; (d52c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d52ac:	b510      	push	{r4, lr}
   d52ae:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d52b2:	f101 0210 	add.w	r2, r1, #16
   d52b6:	f851 4b04 	ldr.w	r4, [r1], #4
   d52ba:	f843 4b04 	str.w	r4, [r3], #4
   d52be:	4291      	cmp	r1, r2
   d52c0:	d1f9      	bne.n	d52b6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d52c2:	780a      	ldrb	r2, [r1, #0]
   d52c4:	701a      	strb	r2, [r3, #0]
}
   d52c6:	bd10      	pop	{r4, pc}
   d52c8:	000d6c60 	.word	0x000d6c60

000d52cc <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d52cc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d52ce:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d52d2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d52d6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d52da:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d52de:	2304      	movs	r3, #4
   d52e0:	6041      	str	r1, [r0, #4]
   d52e2:	7503      	strb	r3, [r0, #20]
   d52e4:	bd10      	pop	{r4, pc}

000d52e6 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d52e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d52e8:	780d      	ldrb	r5, [r1, #0]
   d52ea:	788b      	ldrb	r3, [r1, #2]
   d52ec:	784a      	ldrb	r2, [r1, #1]
   d52ee:	78c9      	ldrb	r1, [r1, #3]
   d52f0:	9100      	str	r1, [sp, #0]
   d52f2:	4629      	mov	r1, r5
   d52f4:	f7ff ffea 	bl	d52cc <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d52f8:	b003      	add	sp, #12
   d52fa:	bd30      	pop	{r4, r5, pc}

000d52fc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d52fc:	7441      	strb	r1, [r0, #17]
   d52fe:	4770      	bx	lr

000d5300 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5300:	4770      	bx	lr

000d5302 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5302:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5304:	2100      	movs	r1, #0
   d5306:	7c00      	ldrb	r0, [r0, #16]
   d5308:	f7ff f8cc 	bl	d44a4 <HAL_USB_USART_Receive_Data>
}
   d530c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5310:	bf28      	it	cs
   d5312:	f04f 30ff 	movcs.w	r0, #4294967295
   d5316:	bd08      	pop	{r3, pc}

000d5318 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5318:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d531a:	2101      	movs	r1, #1
   d531c:	7c00      	ldrb	r0, [r0, #16]
   d531e:	f7ff f8c1 	bl	d44a4 <HAL_USB_USART_Receive_Data>
}
   d5322:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5326:	bf28      	it	cs
   d5328:	f04f 30ff 	movcs.w	r0, #4294967295
   d532c:	bd08      	pop	{r3, pc}

000d532e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d532e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5330:	7c00      	ldrb	r0, [r0, #16]
   d5332:	f7ff f8af 	bl	d4494 <HAL_USB_USART_Available_Data_For_Write>
}
   d5336:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d533a:	bd08      	pop	{r3, pc}

000d533c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d533c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d533e:	7c00      	ldrb	r0, [r0, #16]
   d5340:	f7ff f8a0 	bl	d4484 <HAL_USB_USART_Available_Data>
}
   d5344:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5348:	bd08      	pop	{r3, pc}

000d534a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d534a:	7c00      	ldrb	r0, [r0, #16]
   d534c:	f7ff b8ba 	b.w	d44c4 <HAL_USB_USART_Flush_Data>

000d5350 <_ZN9USBSerialD0Ev>:
   d5350:	b510      	push	{r4, lr}
   d5352:	2114      	movs	r1, #20
   d5354:	4604      	mov	r4, r0
   d5356:	f000 fb4d 	bl	d59f4 <_ZdlPvj>
   d535a:	4620      	mov	r0, r4
   d535c:	bd10      	pop	{r4, pc}

000d535e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d535e:	b538      	push	{r3, r4, r5, lr}
   d5360:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5362:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5364:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5366:	f7ff f895 	bl	d4494 <HAL_USB_USART_Available_Data_For_Write>
   d536a:	2800      	cmp	r0, #0
   d536c:	dc01      	bgt.n	d5372 <_ZN9USBSerial5writeEh+0x14>
   d536e:	7c60      	ldrb	r0, [r4, #17]
   d5370:	b128      	cbz	r0, d537e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5372:	4629      	mov	r1, r5
   d5374:	7c20      	ldrb	r0, [r4, #16]
   d5376:	f7ff f89d 	bl	d44b4 <HAL_USB_USART_Send_Data>
   d537a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d537e:	bd38      	pop	{r3, r4, r5, pc}

000d5380 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5380:	b510      	push	{r4, lr}
   d5382:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5384:	2300      	movs	r3, #0
   d5386:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5388:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d538c:	60a3      	str	r3, [r4, #8]
   d538e:	4b05      	ldr	r3, [pc, #20]	; (d53a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5390:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5392:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5394:	4608      	mov	r0, r1
{
  _serial = serial;
   d5396:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5398:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d539a:	4611      	mov	r1, r2
   d539c:	f7ff f862 	bl	d4464 <HAL_USB_USART_Init>
}
   d53a0:	4620      	mov	r0, r4
   d53a2:	bd10      	pop	{r4, pc}
   d53a4:	000d6c74 	.word	0x000d6c74

000d53a8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d53a8:	2200      	movs	r2, #0
   d53aa:	7c00      	ldrb	r0, [r0, #16]
   d53ac:	f7ff b862 	b.w	d4474 <HAL_USB_USART_Begin>

000d53b0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d53b0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d53b2:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d53b4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d53b6:	2100      	movs	r1, #0
   d53b8:	f001 fb05 	bl	d69c6 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d53bc:	4620      	mov	r0, r4
   d53be:	bd10      	pop	{r4, pc}

000d53c0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d53c0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d53c2:	4d0e      	ldr	r5, [pc, #56]	; (d53fc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d53c4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d53c6:	a801      	add	r0, sp, #4
   d53c8:	f7ff fff2 	bl	d53b0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d53cc:	6829      	ldr	r1, [r5, #0]
   d53ce:	f011 0401 	ands.w	r4, r1, #1
   d53d2:	d110      	bne.n	d53f6 <_Z16_fetch_usbserialv+0x36>
   d53d4:	4628      	mov	r0, r5
   d53d6:	f7fe fe66 	bl	d40a6 <__cxa_guard_acquire>
   d53da:	b160      	cbz	r0, d53f6 <_Z16_fetch_usbserialv+0x36>
   d53dc:	aa01      	add	r2, sp, #4
   d53de:	4621      	mov	r1, r4
   d53e0:	4807      	ldr	r0, [pc, #28]	; (d5400 <_Z16_fetch_usbserialv+0x40>)
   d53e2:	f7ff ffcd 	bl	d5380 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d53e6:	4628      	mov	r0, r5
   d53e8:	f7fe fe62 	bl	d40b0 <__cxa_guard_release>
   d53ec:	4a05      	ldr	r2, [pc, #20]	; (d5404 <_Z16_fetch_usbserialv+0x44>)
   d53ee:	4906      	ldr	r1, [pc, #24]	; (d5408 <_Z16_fetch_usbserialv+0x48>)
   d53f0:	4803      	ldr	r0, [pc, #12]	; (d5400 <_Z16_fetch_usbserialv+0x40>)
   d53f2:	f000 faf1 	bl	d59d8 <__aeabi_atexit>
	return _usbserial;
}
   d53f6:	4802      	ldr	r0, [pc, #8]	; (d5400 <_Z16_fetch_usbserialv+0x40>)
   d53f8:	b007      	add	sp, #28
   d53fa:	bd30      	pop	{r4, r5, pc}
   d53fc:	2003e414 	.word	0x2003e414
   d5400:	2003e418 	.word	0x2003e418
   d5404:	2003e3c0 	.word	0x2003e3c0
   d5408:	000d5301 	.word	0x000d5301

000d540c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d540c:	4770      	bx	lr

000d540e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d540e:	7441      	strb	r1, [r0, #17]
   d5410:	4770      	bx	lr

000d5412 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5412:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5414:	7c00      	ldrb	r0, [r0, #16]
   d5416:	f7fe ffdd 	bl	d43d4 <HAL_USART_Available_Data_For_Write>
}
   d541a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d541e:	bd08      	pop	{r3, pc}

000d5420 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5420:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5422:	7c00      	ldrb	r0, [r0, #16]
   d5424:	f7fe ffb6 	bl	d4394 <HAL_USART_Available_Data>
}
   d5428:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d542c:	bd08      	pop	{r3, pc}

000d542e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d542e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5430:	7c00      	ldrb	r0, [r0, #16]
   d5432:	f7fe ffbf 	bl	d43b4 <HAL_USART_Peek_Data>
}
   d5436:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d543a:	bf28      	it	cs
   d543c:	f04f 30ff 	movcs.w	r0, #4294967295
   d5440:	bd08      	pop	{r3, pc}

000d5442 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5442:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5444:	7c00      	ldrb	r0, [r0, #16]
   d5446:	f7fe ffad 	bl	d43a4 <HAL_USART_Read_Data>
}
   d544a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d544e:	bf28      	it	cs
   d5450:	f04f 30ff 	movcs.w	r0, #4294967295
   d5454:	bd08      	pop	{r3, pc}

000d5456 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5456:	7c00      	ldrb	r0, [r0, #16]
   d5458:	f7fe bfb4 	b.w	d43c4 <HAL_USART_Flush_Data>

000d545c <_ZN11USARTSerialD0Ev>:
   d545c:	b510      	push	{r4, lr}
   d545e:	2114      	movs	r1, #20
   d5460:	4604      	mov	r4, r0
   d5462:	f000 fac7 	bl	d59f4 <_ZdlPvj>
   d5466:	4620      	mov	r0, r4
   d5468:	bd10      	pop	{r4, pc}

000d546a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d546a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d546c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d546e:	4604      	mov	r4, r0
   d5470:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5472:	b925      	cbnz	r5, d547e <_ZN11USARTSerial5writeEh+0x14>
   d5474:	7c00      	ldrb	r0, [r0, #16]
   d5476:	f7fe ffad 	bl	d43d4 <HAL_USART_Available_Data_For_Write>
   d547a:	2800      	cmp	r0, #0
   d547c:	dd05      	ble.n	d548a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d547e:	4631      	mov	r1, r6
   d5480:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5482:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5486:	f7fe bf7d 	b.w	d4384 <HAL_USART_Write_Data>
  }
  return 0;
}
   d548a:	4628      	mov	r0, r5
   d548c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5490 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5490:	b510      	push	{r4, lr}
   d5492:	4604      	mov	r4, r0
   d5494:	4608      	mov	r0, r1
   d5496:	4611      	mov	r1, r2
   d5498:	2200      	movs	r2, #0
   d549a:	6062      	str	r2, [r4, #4]
   d549c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d54a0:	60a2      	str	r2, [r4, #8]
   d54a2:	4a05      	ldr	r2, [pc, #20]	; (d54b8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d54a4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d54a6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d54a8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d54aa:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d54ac:	461a      	mov	r2, r3
   d54ae:	f7fe ff61 	bl	d4374 <HAL_USART_Init>
}
   d54b2:	4620      	mov	r0, r4
   d54b4:	bd10      	pop	{r4, pc}
   d54b6:	bf00      	nop
   d54b8:	000d6ca4 	.word	0x000d6ca4

000d54bc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d54bc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d54be:	4d0c      	ldr	r5, [pc, #48]	; (d54f0 <_Z22__fetch_global_Serial1v+0x34>)
   d54c0:	6829      	ldr	r1, [r5, #0]
   d54c2:	f011 0401 	ands.w	r4, r1, #1
   d54c6:	d111      	bne.n	d54ec <_Z22__fetch_global_Serial1v+0x30>
   d54c8:	4628      	mov	r0, r5
   d54ca:	f7fe fdec 	bl	d40a6 <__cxa_guard_acquire>
   d54ce:	b168      	cbz	r0, d54ec <_Z22__fetch_global_Serial1v+0x30>
   d54d0:	4a08      	ldr	r2, [pc, #32]	; (d54f4 <_Z22__fetch_global_Serial1v+0x38>)
   d54d2:	4b09      	ldr	r3, [pc, #36]	; (d54f8 <_Z22__fetch_global_Serial1v+0x3c>)
   d54d4:	4809      	ldr	r0, [pc, #36]	; (d54fc <_Z22__fetch_global_Serial1v+0x40>)
   d54d6:	4621      	mov	r1, r4
   d54d8:	f7ff ffda 	bl	d5490 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d54dc:	4628      	mov	r0, r5
   d54de:	f7fe fde7 	bl	d40b0 <__cxa_guard_release>
   d54e2:	4a07      	ldr	r2, [pc, #28]	; (d5500 <_Z22__fetch_global_Serial1v+0x44>)
   d54e4:	4907      	ldr	r1, [pc, #28]	; (d5504 <_Z22__fetch_global_Serial1v+0x48>)
   d54e6:	4805      	ldr	r0, [pc, #20]	; (d54fc <_Z22__fetch_global_Serial1v+0x40>)
   d54e8:	f000 fa76 	bl	d59d8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d54ec:	4803      	ldr	r0, [pc, #12]	; (d54fc <_Z22__fetch_global_Serial1v+0x40>)
   d54ee:	bd38      	pop	{r3, r4, r5, pc}
   d54f0:	2003e4c4 	.word	0x2003e4c4
   d54f4:	2003e4c8 	.word	0x2003e4c8
   d54f8:	2003e440 	.word	0x2003e440
   d54fc:	2003e42c 	.word	0x2003e42c
   d5500:	2003e3c0 	.word	0x2003e3c0
   d5504:	000d540d 	.word	0x000d540d

000d5508 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5508:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d550a:	6883      	ldr	r3, [r0, #8]
   d550c:	4604      	mov	r4, r0
   d550e:	b90b      	cbnz	r3, d5514 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5510:	f000 fa83 	bl	d5a1a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5514:	68c3      	ldr	r3, [r0, #12]
   d5516:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5518:	68a3      	ldr	r3, [r4, #8]
   d551a:	b11b      	cbz	r3, d5524 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d551c:	2203      	movs	r2, #3
   d551e:	4621      	mov	r1, r4
   d5520:	4620      	mov	r0, r4
   d5522:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5524:	4620      	mov	r0, r4
   d5526:	2110      	movs	r1, #16
}
   d5528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d552c:	f000 ba62 	b.w	d59f4 <_ZdlPvj>

000d5530 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d5530:	4770      	bx	lr

000d5532 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5534:	4606      	mov	r6, r0
   d5536:	4615      	mov	r5, r2
   d5538:	460c      	mov	r4, r1
   d553a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d553c:	42bc      	cmp	r4, r7
   d553e:	d006      	beq.n	d554e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5540:	6833      	ldr	r3, [r6, #0]
   d5542:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5546:	689b      	ldr	r3, [r3, #8]
   d5548:	4630      	mov	r0, r6
   d554a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d554c:	e7f6      	b.n	d553c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d554e:	4628      	mov	r0, r5
   d5550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5552 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5552:	2200      	movs	r2, #0
   d5554:	7c00      	ldrb	r0, [r0, #16]
   d5556:	f7fe bf4d 	b.w	d43f4 <HAL_I2C_Write_Data>

000d555a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d555a:	2100      	movs	r1, #0
   d555c:	7c00      	ldrb	r0, [r0, #16]
   d555e:	f7fe bf51 	b.w	d4404 <HAL_I2C_Available_Data>

000d5562 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5562:	2100      	movs	r1, #0
   d5564:	7c00      	ldrb	r0, [r0, #16]
   d5566:	f7fe bf55 	b.w	d4414 <HAL_I2C_Read_Data>

000d556a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d556a:	2100      	movs	r1, #0
   d556c:	7c00      	ldrb	r0, [r0, #16]
   d556e:	f7fe bf59 	b.w	d4424 <HAL_I2C_Peek_Data>

000d5572 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5572:	2100      	movs	r1, #0
   d5574:	7c00      	ldrb	r0, [r0, #16]
   d5576:	f7fe bf5d 	b.w	d4434 <HAL_I2C_Flush_Data>

000d557a <_ZN7TwoWireD0Ev>:
   d557a:	b510      	push	{r4, lr}
   d557c:	2114      	movs	r1, #20
   d557e:	4604      	mov	r4, r0
   d5580:	f000 fa38 	bl	d59f4 <_ZdlPvj>
   d5584:	4620      	mov	r0, r4
   d5586:	bd10      	pop	{r4, pc}

000d5588 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5588:	b510      	push	{r4, lr}
   d558a:	4604      	mov	r4, r0
   d558c:	2300      	movs	r3, #0
   d558e:	6063      	str	r3, [r4, #4]
   d5590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5594:	60a3      	str	r3, [r4, #8]
   d5596:	4b04      	ldr	r3, [pc, #16]	; (d55a8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d5598:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d559a:	4608      	mov	r0, r1
   d559c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d559e:	4611      	mov	r1, r2
   d55a0:	f7fe ff50 	bl	d4444 <HAL_I2C_Init>
}
   d55a4:	4620      	mov	r0, r4
   d55a6:	bd10      	pop	{r4, pc}
   d55a8:	000d6cd4 	.word	0x000d6cd4

000d55ac <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d55ac:	2300      	movs	r3, #0
   d55ae:	461a      	mov	r2, r3
   d55b0:	4619      	mov	r1, r3
   d55b2:	7c00      	ldrb	r0, [r0, #16]
   d55b4:	f7fe bf16 	b.w	d43e4 <HAL_I2C_Begin>

000d55b8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d55b8:	b570      	push	{r4, r5, r6, lr}
   d55ba:	460c      	mov	r4, r1
   d55bc:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d55be:	2514      	movs	r5, #20
   d55c0:	4606      	mov	r6, r0
   d55c2:	462a      	mov	r2, r5
   d55c4:	2100      	movs	r1, #0
   d55c6:	a801      	add	r0, sp, #4
   d55c8:	f001 f9fd 	bl	d69c6 <memset>
   d55cc:	7823      	ldrb	r3, [r4, #0]
   d55ce:	f88d 3008 	strb.w	r3, [sp, #8]
   d55d2:	6863      	ldr	r3, [r4, #4]
   d55d4:	9303      	str	r3, [sp, #12]
   d55d6:	68e3      	ldr	r3, [r4, #12]
   d55d8:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d55da:	2200      	movs	r2, #0
   d55dc:	7a23      	ldrb	r3, [r4, #8]
   d55de:	7c30      	ldrb	r0, [r6, #16]
   d55e0:	f8ad 5004 	strh.w	r5, [sp, #4]
   d55e4:	a901      	add	r1, sp, #4
   d55e6:	9305      	str	r3, [sp, #20]
   d55e8:	f7fe ff34 	bl	d4454 <HAL_I2C_Request_Data_Ex>
}
   d55ec:	b006      	add	sp, #24
   d55ee:	bd70      	pop	{r4, r5, r6, pc}

000d55f0 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d55f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d55f2:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d55f4:	f88d 1000 	strb.w	r1, [sp]
   d55f8:	f04f 0164 	mov.w	r1, #100	; 0x64
   d55fc:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d55fe:	bf18      	it	ne
   d5600:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d5602:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d5604:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5606:	f88d 3008 	strb.w	r3, [sp, #8]
   d560a:	f7ff ffd5 	bl	d55b8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d560e:	b005      	add	sp, #20
   d5610:	f85d fb04 	ldr.w	pc, [sp], #4

000d5614 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d5614:	2301      	movs	r3, #1
   d5616:	f7ff bfeb 	b.w	d55f0 <_ZN7TwoWire11requestFromEhjh>

000d561a <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d561a:	2200      	movs	r2, #0
   d561c:	4611      	mov	r1, r2
   d561e:	6840      	ldr	r0, [r0, #4]
   d5620:	f7fe bfc4 	b.w	d45ac <network_listening>

000d5624 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5624:	2200      	movs	r2, #0
   d5626:	4611      	mov	r1, r2
   d5628:	6840      	ldr	r0, [r0, #4]
   d562a:	f7fe bfcf 	b.w	d45cc <network_get_listen_timeout>

000d562e <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d562e:	2200      	movs	r2, #0
   d5630:	6840      	ldr	r0, [r0, #4]
   d5632:	f7fe bfc3 	b.w	d45bc <network_set_listen_timeout>

000d5636 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5636:	2200      	movs	r2, #0
   d5638:	f081 0101 	eor.w	r1, r1, #1
   d563c:	6840      	ldr	r0, [r0, #4]
   d563e:	f7fe bfad 	b.w	d459c <network_listen>

000d5642 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5642:	2300      	movs	r3, #0
   d5644:	461a      	mov	r2, r3
   d5646:	2101      	movs	r1, #1
   d5648:	6840      	ldr	r0, [r0, #4]
   d564a:	f7fe bf9f 	b.w	d458c <network_off>

000d564e <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d564e:	2300      	movs	r3, #0
   d5650:	461a      	mov	r2, r3
   d5652:	4619      	mov	r1, r3
   d5654:	6840      	ldr	r0, [r0, #4]
   d5656:	f7fe bf91 	b.w	d457c <network_on>

000d565a <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d565a:	2200      	movs	r2, #0
   d565c:	4611      	mov	r1, r2
   d565e:	6840      	ldr	r0, [r0, #4]
   d5660:	f7fe bf84 	b.w	d456c <network_ready>

000d5664 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5664:	2200      	movs	r2, #0
   d5666:	4611      	mov	r1, r2
   d5668:	6840      	ldr	r0, [r0, #4]
   d566a:	f7fe bf6f 	b.w	d454c <network_connecting>

000d566e <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d566e:	2200      	movs	r2, #0
   d5670:	2102      	movs	r1, #2
   d5672:	6840      	ldr	r0, [r0, #4]
   d5674:	f7fe bf72 	b.w	d455c <network_disconnect>

000d5678 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5678:	2300      	movs	r3, #0
   d567a:	461a      	mov	r2, r3
   d567c:	6840      	ldr	r0, [r0, #4]
   d567e:	f7fe bf5d 	b.w	d453c <network_connect>

000d5682 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5682:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5684:	4605      	mov	r5, r0
   d5686:	b188      	cbz	r0, d56ac <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5688:	6804      	ldr	r4, [r0, #0]
   d568a:	b14c      	cbz	r4, d56a0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d568c:	68a3      	ldr	r3, [r4, #8]
   d568e:	b11b      	cbz	r3, d5698 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5690:	2203      	movs	r2, #3
   d5692:	4621      	mov	r1, r4
   d5694:	4620      	mov	r0, r4
   d5696:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5698:	2110      	movs	r1, #16
   d569a:	4620      	mov	r0, r4
   d569c:	f000 f9aa 	bl	d59f4 <_ZdlPvj>
   d56a0:	4628      	mov	r0, r5
   d56a2:	2114      	movs	r1, #20
      }
   d56a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d56a8:	f000 b9a4 	b.w	d59f4 <_ZdlPvj>
   d56ac:	bd38      	pop	{r3, r4, r5, pc}

000d56ae <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d56ae:	b110      	cbz	r0, d56b6 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d56b0:	6803      	ldr	r3, [r0, #0]
   d56b2:	685b      	ldr	r3, [r3, #4]
   d56b4:	4718      	bx	r3
   d56b6:	4770      	bx	lr

000d56b8 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d56b8:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d56ba:	6803      	ldr	r3, [r0, #0]
   d56bc:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d56be:	b1bb      	cbz	r3, d56f0 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d56c0:	6858      	ldr	r0, [r3, #4]
   d56c2:	f7fe fe27 	bl	d4314 <os_thread_is_current>
   d56c6:	b978      	cbnz	r0, d56e8 <_ZN6ThreadD1Ev+0x30>
   d56c8:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d56ca:	7c5a      	ldrb	r2, [r3, #17]
   d56cc:	b912      	cbnz	r2, d56d4 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d56ce:	6858      	ldr	r0, [r3, #4]
   d56d0:	f7fe fe28 	bl	d4324 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d56d4:	6823      	ldr	r3, [r4, #0]
   d56d6:	6858      	ldr	r0, [r3, #4]
   d56d8:	f7fe fe2c 	bl	d4334 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d56dc:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d56de:	2300      	movs	r3, #0
   d56e0:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d56e2:	b128      	cbz	r0, d56f0 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d56e4:	f7ff ffcd 	bl	d5682 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d56e8:	6820      	ldr	r0, [r4, #0]
   d56ea:	b108      	cbz	r0, d56f0 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d56ec:	f7ff ffc9 	bl	d5682 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d56f0:	4620      	mov	r0, r4
   d56f2:	bd10      	pop	{r4, pc}

000d56f4 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d56f4:	b538      	push	{r3, r4, r5, lr}
   d56f6:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d56f8:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d56fc:	b108      	cbz	r0, d5702 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d56fe:	f7fe fcd0 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5702:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5706:	b108      	cbz	r0, d570c <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d5708:	f7fe fe24 	bl	d4354 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d570c:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d5710:	b135      	cbz	r5, d5720 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5712:	4628      	mov	r0, r5
   d5714:	f7ff ffd0 	bl	d56b8 <_ZN6ThreadD1Ev>
   d5718:	2104      	movs	r1, #4
   d571a:	4628      	mov	r0, r5
   d571c:	f000 f96a 	bl	d59f4 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5720:	6820      	ldr	r0, [r4, #0]
   d5722:	b108      	cbz	r0, d5728 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5724:	f7ff ffc3 	bl	d56ae <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5728:	4620      	mov	r0, r4
   d572a:	bd38      	pop	{r3, r4, r5, pc}

000d572c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d572c:	b510      	push	{r4, lr}
   d572e:	4b04      	ldr	r3, [pc, #16]	; (d5740 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5730:	4604      	mov	r4, r0
   d5732:	f840 3b08 	str.w	r3, [r0], #8
   d5736:	f7ff ffdd 	bl	d56f4 <_ZN5spark11MeshPublishD1Ev>
   d573a:	4620      	mov	r0, r4
   d573c:	bd10      	pop	{r4, pc}
   d573e:	bf00      	nop
   d5740:	000d6cfc 	.word	0x000d6cfc

000d5744 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5744:	b538      	push	{r3, r4, r5, lr}
   d5746:	4c0e      	ldr	r4, [pc, #56]	; (d5780 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5748:	4b0e      	ldr	r3, [pc, #56]	; (d5784 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d574a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d574c:	2500      	movs	r5, #0
   d574e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5750:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5754:	6063      	str	r3, [r4, #4]
   d5756:	60a5      	str	r5, [r4, #8]
   d5758:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d575c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5760:	f7fe fdf0 	bl	d4344 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5764:	4b08      	ldr	r3, [pc, #32]	; (d5788 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5766:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d576a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d576e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5770:	4620      	mov	r0, r4
   d5772:	4a06      	ldr	r2, [pc, #24]	; (d578c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5774:	4906      	ldr	r1, [pc, #24]	; (d5790 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d577a:	f000 b92d 	b.w	d59d8 <__aeabi_atexit>
   d577e:	bf00      	nop
   d5780:	2003e54c 	.word	0x2003e54c
   d5784:	000d6d64 	.word	0x000d6d64
   d5788:	000d6cfc 	.word	0x000d6cfc
   d578c:	2003e3c0 	.word	0x2003e3c0
   d5790:	000d572d 	.word	0x000d572d

000d5794 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5794:	2200      	movs	r2, #0
   d5796:	4611      	mov	r1, r2
   d5798:	6840      	ldr	r0, [r0, #4]
   d579a:	f7fe bee7 	b.w	d456c <network_ready>

000d579e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d579e:	2200      	movs	r2, #0
   d57a0:	4611      	mov	r1, r2
   d57a2:	6840      	ldr	r0, [r0, #4]
   d57a4:	f7fe bf02 	b.w	d45ac <network_listening>

000d57a8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d57a8:	2200      	movs	r2, #0
   d57aa:	4611      	mov	r1, r2
   d57ac:	6840      	ldr	r0, [r0, #4]
   d57ae:	f7fe bf0d 	b.w	d45cc <network_get_listen_timeout>

000d57b2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d57b2:	2200      	movs	r2, #0
   d57b4:	6840      	ldr	r0, [r0, #4]
   d57b6:	f7fe bf01 	b.w	d45bc <network_set_listen_timeout>

000d57ba <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d57ba:	2200      	movs	r2, #0
   d57bc:	f081 0101 	eor.w	r1, r1, #1
   d57c0:	6840      	ldr	r0, [r0, #4]
   d57c2:	f7fe beeb 	b.w	d459c <network_listen>

000d57c6 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d57c6:	2300      	movs	r3, #0
   d57c8:	461a      	mov	r2, r3
   d57ca:	4619      	mov	r1, r3
   d57cc:	6840      	ldr	r0, [r0, #4]
   d57ce:	f7fe bedd 	b.w	d458c <network_off>

000d57d2 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d57d2:	2300      	movs	r3, #0
   d57d4:	461a      	mov	r2, r3
   d57d6:	4619      	mov	r1, r3
   d57d8:	6840      	ldr	r0, [r0, #4]
   d57da:	f7fe becf 	b.w	d457c <network_on>

000d57de <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d57de:	2200      	movs	r2, #0
   d57e0:	4611      	mov	r1, r2
   d57e2:	6840      	ldr	r0, [r0, #4]
   d57e4:	f7fe beb2 	b.w	d454c <network_connecting>

000d57e8 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d57e8:	2200      	movs	r2, #0
   d57ea:	2102      	movs	r1, #2
   d57ec:	6840      	ldr	r0, [r0, #4]
   d57ee:	f7fe beb5 	b.w	d455c <network_disconnect>

000d57f2 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d57f2:	2300      	movs	r3, #0
   d57f4:	461a      	mov	r2, r3
   d57f6:	6840      	ldr	r0, [r0, #4]
   d57f8:	f7fe bea0 	b.w	d453c <network_connect>

000d57fc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d57fc:	4b02      	ldr	r3, [pc, #8]	; (d5808 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d57fe:	2204      	movs	r2, #4
   d5800:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5802:	4a02      	ldr	r2, [pc, #8]	; (d580c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5804:	601a      	str	r2, [r3, #0]
   d5806:	4770      	bx	lr
   d5808:	2003e720 	.word	0x2003e720
   d580c:	000d6d30 	.word	0x000d6d30

000d5810 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5810:	2300      	movs	r3, #0
   d5812:	461a      	mov	r2, r3
   d5814:	6840      	ldr	r0, [r0, #4]
   d5816:	f7fe be91 	b.w	d453c <network_connect>

000d581a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d581a:	2200      	movs	r2, #0
   d581c:	2102      	movs	r1, #2
   d581e:	6840      	ldr	r0, [r0, #4]
   d5820:	f7fe be9c 	b.w	d455c <network_disconnect>

000d5824 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5824:	2200      	movs	r2, #0
   d5826:	4611      	mov	r1, r2
   d5828:	6840      	ldr	r0, [r0, #4]
   d582a:	f7fe be8f 	b.w	d454c <network_connecting>

000d582e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d582e:	2200      	movs	r2, #0
   d5830:	4611      	mov	r1, r2
   d5832:	6840      	ldr	r0, [r0, #4]
   d5834:	f7fe be9a 	b.w	d456c <network_ready>

000d5838 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5838:	2300      	movs	r3, #0
   d583a:	461a      	mov	r2, r3
   d583c:	4619      	mov	r1, r3
   d583e:	6840      	ldr	r0, [r0, #4]
   d5840:	f7fe be9c 	b.w	d457c <network_on>

000d5844 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5844:	2300      	movs	r3, #0
   d5846:	461a      	mov	r2, r3
   d5848:	4619      	mov	r1, r3
   d584a:	6840      	ldr	r0, [r0, #4]
   d584c:	f7fe be9e 	b.w	d458c <network_off>

000d5850 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5850:	2200      	movs	r2, #0
   d5852:	f081 0101 	eor.w	r1, r1, #1
   d5856:	6840      	ldr	r0, [r0, #4]
   d5858:	f7fe bea0 	b.w	d459c <network_listen>

000d585c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d585c:	2200      	movs	r2, #0
   d585e:	6840      	ldr	r0, [r0, #4]
   d5860:	f7fe beac 	b.w	d45bc <network_set_listen_timeout>

000d5864 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5864:	2200      	movs	r2, #0
   d5866:	4611      	mov	r1, r2
   d5868:	6840      	ldr	r0, [r0, #4]
   d586a:	f7fe beaf 	b.w	d45cc <network_get_listen_timeout>

000d586e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d586e:	2200      	movs	r2, #0
   d5870:	4611      	mov	r1, r2
   d5872:	6840      	ldr	r0, [r0, #4]
   d5874:	f7fe be9a 	b.w	d45ac <network_listening>

000d5878 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d587c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d587e:	b095      	sub	sp, #84	; 0x54
   d5880:	4616      	mov	r6, r2
   d5882:	460d      	mov	r5, r1
   d5884:	4607      	mov	r7, r0
    IPAddress addr;
   d5886:	f7ff fd01 	bl	d528c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d588a:	4621      	mov	r1, r4
   d588c:	2220      	movs	r2, #32
   d588e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5890:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5892:	f001 f898 	bl	d69c6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5896:	2340      	movs	r3, #64	; 0x40
   d5898:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d589a:	4621      	mov	r1, r4
   d589c:	466b      	mov	r3, sp
   d589e:	aa0c      	add	r2, sp, #48	; 0x30
   d58a0:	4630      	mov	r0, r6
   d58a2:	f7fe fd17 	bl	d42d4 <netdb_getaddrinfo>
    if (!r) {
   d58a6:	4604      	mov	r4, r0
   d58a8:	2800      	cmp	r0, #0
   d58aa:	d144      	bne.n	d5936 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d58ac:	4602      	mov	r2, r0
   d58ae:	2101      	movs	r1, #1
   d58b0:	6868      	ldr	r0, [r5, #4]
   d58b2:	f7fe fe5b 	bl	d456c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d58b6:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d58b8:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d58ba:	4622      	mov	r2, r4
   d58bc:	6868      	ldr	r0, [r5, #4]
   d58be:	f7fe fe55 	bl	d456c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d58c2:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d58c4:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d58c6:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d58c8:	2e00      	cmp	r6, #0
   d58ca:	d034      	beq.n	d5936 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d58cc:	2900      	cmp	r1, #0
   d58ce:	d132      	bne.n	d5936 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d58d0:	6873      	ldr	r3, [r6, #4]
   d58d2:	2b02      	cmp	r3, #2
   d58d4:	d002      	beq.n	d58dc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d58d6:	2b0a      	cmp	r3, #10
   d58d8:	d009      	beq.n	d58ee <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d58da:	e02a      	b.n	d5932 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d58dc:	f1b8 0f00 	cmp.w	r8, #0
   d58e0:	d027      	beq.n	d5932 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d58e2:	6971      	ldr	r1, [r6, #20]
   d58e4:	4638      	mov	r0, r7
   d58e6:	3104      	adds	r1, #4
   d58e8:	f7ff fcfd 	bl	d52e6 <_ZN9IPAddressaSEPKh>
   d58ec:	e020      	b.n	d5930 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d58ee:	f1b9 0f00 	cmp.w	r9, #0
   d58f2:	d01e      	beq.n	d5932 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d58f4:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d58f6:	2211      	movs	r2, #17
   d58f8:	a801      	add	r0, sp, #4
   d58fa:	f001 f864 	bl	d69c6 <memset>
                    a.v = 6;
   d58fe:	2306      	movs	r3, #6
   d5900:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5904:	ad01      	add	r5, sp, #4
   d5906:	f104 0308 	add.w	r3, r4, #8
   d590a:	3418      	adds	r4, #24
   d590c:	6818      	ldr	r0, [r3, #0]
   d590e:	6859      	ldr	r1, [r3, #4]
   d5910:	462a      	mov	r2, r5
   d5912:	c203      	stmia	r2!, {r0, r1}
   d5914:	3308      	adds	r3, #8
   d5916:	42a3      	cmp	r3, r4
   d5918:	4615      	mov	r5, r2
   d591a:	d1f7      	bne.n	d590c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d591c:	a901      	add	r1, sp, #4
   d591e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5920:	ad07      	add	r5, sp, #28
   d5922:	f7ff fcc1 	bl	d52a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5926:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5928:	1d3c      	adds	r4, r7, #4
   d592a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d592c:	682b      	ldr	r3, [r5, #0]
   d592e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5930:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5932:	69f6      	ldr	r6, [r6, #28]
   d5934:	e7c8      	b.n	d58c8 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5936:	9800      	ldr	r0, [sp, #0]
   d5938:	f7fe fcc4 	bl	d42c4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d593c:	4638      	mov	r0, r7
   d593e:	b015      	add	sp, #84	; 0x54
   d5940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5944 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5944:	4b02      	ldr	r3, [pc, #8]	; (d5950 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5946:	4a03      	ldr	r2, [pc, #12]	; (d5954 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5948:	601a      	str	r2, [r3, #0]
   d594a:	2200      	movs	r2, #0
   d594c:	605a      	str	r2, [r3, #4]
   d594e:	4770      	bx	lr
   d5950:	2003e728 	.word	0x2003e728
   d5954:	000d6d64 	.word	0x000d6d64

000d5958 <_Z17acquireWireBufferv>:
   d5958:	b570      	push	{r4, r5, r6, lr}
   d595a:	4604      	mov	r4, r0
   d595c:	2514      	movs	r5, #20
   d595e:	462a      	mov	r2, r5
   d5960:	4e09      	ldr	r6, [pc, #36]	; (d5988 <_Z17acquireWireBufferv+0x30>)
   d5962:	2100      	movs	r1, #0
   d5964:	f001 f82f 	bl	d69c6 <memset>
   d5968:	8025      	strh	r5, [r4, #0]
   d596a:	2520      	movs	r5, #32
   d596c:	4631      	mov	r1, r6
   d596e:	60a5      	str	r5, [r4, #8]
   d5970:	6125      	str	r5, [r4, #16]
   d5972:	4628      	mov	r0, r5
   d5974:	f000 f840 	bl	d59f8 <_ZnajRKSt9nothrow_t>
   d5978:	4631      	mov	r1, r6
   d597a:	6060      	str	r0, [r4, #4]
   d597c:	4628      	mov	r0, r5
   d597e:	f000 f83b 	bl	d59f8 <_ZnajRKSt9nothrow_t>
   d5982:	60e0      	str	r0, [r4, #12]
   d5984:	4620      	mov	r0, r4
   d5986:	bd70      	pop	{r4, r5, r6, pc}
   d5988:	000d6d90 	.word	0x000d6d90

000d598c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d598c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d598e:	4d0e      	ldr	r5, [pc, #56]	; (d59c8 <_Z19__fetch_global_Wirev+0x3c>)
   d5990:	6829      	ldr	r1, [r5, #0]
   d5992:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5996:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5998:	d113      	bne.n	d59c2 <_Z19__fetch_global_Wirev+0x36>
   d599a:	4628      	mov	r0, r5
   d599c:	f7fe fb83 	bl	d40a6 <__cxa_guard_acquire>
   d59a0:	b178      	cbz	r0, d59c2 <_Z19__fetch_global_Wirev+0x36>
   d59a2:	a801      	add	r0, sp, #4
   d59a4:	f7ff ffd8 	bl	d5958 <_Z17acquireWireBufferv>
   d59a8:	aa01      	add	r2, sp, #4
   d59aa:	4621      	mov	r1, r4
   d59ac:	4807      	ldr	r0, [pc, #28]	; (d59cc <_Z19__fetch_global_Wirev+0x40>)
   d59ae:	f7ff fdeb 	bl	d5588 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d59b2:	4628      	mov	r0, r5
   d59b4:	f7fe fb7c 	bl	d40b0 <__cxa_guard_release>
   d59b8:	4a05      	ldr	r2, [pc, #20]	; (d59d0 <_Z19__fetch_global_Wirev+0x44>)
   d59ba:	4906      	ldr	r1, [pc, #24]	; (d59d4 <_Z19__fetch_global_Wirev+0x48>)
   d59bc:	4803      	ldr	r0, [pc, #12]	; (d59cc <_Z19__fetch_global_Wirev+0x40>)
   d59be:	f000 f80b 	bl	d59d8 <__aeabi_atexit>
	return wire;
}
   d59c2:	4802      	ldr	r0, [pc, #8]	; (d59cc <_Z19__fetch_global_Wirev+0x40>)
   d59c4:	b007      	add	sp, #28
   d59c6:	bd30      	pop	{r4, r5, pc}
   d59c8:	2003e734 	.word	0x2003e734
   d59cc:	2003e738 	.word	0x2003e738
   d59d0:	2003e3c0 	.word	0x2003e3c0
   d59d4:	000d5531 	.word	0x000d5531

000d59d8 <__aeabi_atexit>:
   d59d8:	460b      	mov	r3, r1
   d59da:	4601      	mov	r1, r0
   d59dc:	4618      	mov	r0, r3
   d59de:	f000 bfd9 	b.w	d6994 <__cxa_atexit>
	...

000d59e4 <_ZSt15get_new_handlerv>:
   d59e4:	4b02      	ldr	r3, [pc, #8]	; (d59f0 <_ZSt15get_new_handlerv+0xc>)
   d59e6:	6818      	ldr	r0, [r3, #0]
   d59e8:	f3bf 8f5f 	dmb	sy
   d59ec:	4770      	bx	lr
   d59ee:	bf00      	nop
   d59f0:	2003e74c 	.word	0x2003e74c

000d59f4 <_ZdlPvj>:
   d59f4:	f7fe bb53 	b.w	d409e <_ZdlPv>

000d59f8 <_ZnajRKSt9nothrow_t>:
   d59f8:	f000 b800 	b.w	d59fc <_ZnwjRKSt9nothrow_t>

000d59fc <_ZnwjRKSt9nothrow_t>:
   d59fc:	b510      	push	{r4, lr}
   d59fe:	2800      	cmp	r0, #0
   d5a00:	bf14      	ite	ne
   d5a02:	4604      	movne	r4, r0
   d5a04:	2401      	moveq	r4, #1
   d5a06:	4620      	mov	r0, r4
   d5a08:	f7fe fe00 	bl	d460c <malloc>
   d5a0c:	b920      	cbnz	r0, d5a18 <_ZnwjRKSt9nothrow_t+0x1c>
   d5a0e:	f7ff ffe9 	bl	d59e4 <_ZSt15get_new_handlerv>
   d5a12:	b108      	cbz	r0, d5a18 <_ZnwjRKSt9nothrow_t+0x1c>
   d5a14:	4780      	blx	r0
   d5a16:	e7f6      	b.n	d5a06 <_ZnwjRKSt9nothrow_t+0xa>
   d5a18:	bd10      	pop	{r4, pc}

000d5a1a <_ZSt25__throw_bad_function_callv>:
   d5a1a:	b508      	push	{r3, lr}
   d5a1c:	f7fe fe16 	bl	d464c <abort>

000d5a20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5a20:	4b18      	ldr	r3, [pc, #96]	; (d5a84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5a22:	681a      	ldr	r2, [r3, #0]
   d5a24:	07d1      	lsls	r1, r2, #31
   d5a26:	bf5c      	itt	pl
   d5a28:	2201      	movpl	r2, #1
   d5a2a:	601a      	strpl	r2, [r3, #0]
   d5a2c:	4b16      	ldr	r3, [pc, #88]	; (d5a88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5a2e:	681a      	ldr	r2, [r3, #0]
   d5a30:	07d2      	lsls	r2, r2, #31
   d5a32:	bf5c      	itt	pl
   d5a34:	2201      	movpl	r2, #1
   d5a36:	601a      	strpl	r2, [r3, #0]
   d5a38:	4b14      	ldr	r3, [pc, #80]	; (d5a8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5a3a:	681a      	ldr	r2, [r3, #0]
   d5a3c:	07d0      	lsls	r0, r2, #31
   d5a3e:	bf5c      	itt	pl
   d5a40:	2201      	movpl	r2, #1
   d5a42:	601a      	strpl	r2, [r3, #0]
   d5a44:	4b12      	ldr	r3, [pc, #72]	; (d5a90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5a46:	681a      	ldr	r2, [r3, #0]
   d5a48:	07d1      	lsls	r1, r2, #31
   d5a4a:	bf5c      	itt	pl
   d5a4c:	2201      	movpl	r2, #1
   d5a4e:	601a      	strpl	r2, [r3, #0]
   d5a50:	4b10      	ldr	r3, [pc, #64]	; (d5a94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5a52:	681a      	ldr	r2, [r3, #0]
   d5a54:	07d2      	lsls	r2, r2, #31
   d5a56:	bf5c      	itt	pl
   d5a58:	2201      	movpl	r2, #1
   d5a5a:	601a      	strpl	r2, [r3, #0]
   d5a5c:	4b0e      	ldr	r3, [pc, #56]	; (d5a98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5a5e:	681a      	ldr	r2, [r3, #0]
   d5a60:	07d0      	lsls	r0, r2, #31
   d5a62:	bf5c      	itt	pl
   d5a64:	2201      	movpl	r2, #1
   d5a66:	601a      	strpl	r2, [r3, #0]
   d5a68:	4b0c      	ldr	r3, [pc, #48]	; (d5a9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5a6a:	681a      	ldr	r2, [r3, #0]
   d5a6c:	07d1      	lsls	r1, r2, #31
   d5a6e:	bf5c      	itt	pl
   d5a70:	2201      	movpl	r2, #1
   d5a72:	601a      	strpl	r2, [r3, #0]
   d5a74:	4b0a      	ldr	r3, [pc, #40]	; (d5aa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5a76:	681a      	ldr	r2, [r3, #0]
   d5a78:	07d2      	lsls	r2, r2, #31
   d5a7a:	bf5c      	itt	pl
   d5a7c:	2201      	movpl	r2, #1
   d5a7e:	601a      	strpl	r2, [r3, #0]
   d5a80:	4770      	bx	lr
   d5a82:	bf00      	nop
   d5a84:	2003e76c 	.word	0x2003e76c
   d5a88:	2003e768 	.word	0x2003e768
   d5a8c:	2003e764 	.word	0x2003e764
   d5a90:	2003e760 	.word	0x2003e760
   d5a94:	2003e75c 	.word	0x2003e75c
   d5a98:	2003e758 	.word	0x2003e758
   d5a9c:	2003e754 	.word	0x2003e754
   d5aa0:	2003e750 	.word	0x2003e750

000d5aa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5aa4:	4b24      	ldr	r3, [pc, #144]	; (d5b38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5aa6:	681a      	ldr	r2, [r3, #0]
   d5aa8:	07d0      	lsls	r0, r2, #31
   d5aaa:	bf5c      	itt	pl
   d5aac:	2201      	movpl	r2, #1
   d5aae:	601a      	strpl	r2, [r3, #0]
   d5ab0:	4b22      	ldr	r3, [pc, #136]	; (d5b3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5ab2:	681a      	ldr	r2, [r3, #0]
   d5ab4:	07d1      	lsls	r1, r2, #31
   d5ab6:	bf5c      	itt	pl
   d5ab8:	2201      	movpl	r2, #1
   d5aba:	601a      	strpl	r2, [r3, #0]
   d5abc:	4b20      	ldr	r3, [pc, #128]	; (d5b40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5abe:	681a      	ldr	r2, [r3, #0]
   d5ac0:	07d2      	lsls	r2, r2, #31
   d5ac2:	bf5c      	itt	pl
   d5ac4:	2201      	movpl	r2, #1
   d5ac6:	601a      	strpl	r2, [r3, #0]
   d5ac8:	4b1e      	ldr	r3, [pc, #120]	; (d5b44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5aca:	681a      	ldr	r2, [r3, #0]
   d5acc:	07d0      	lsls	r0, r2, #31
   d5ace:	bf5c      	itt	pl
   d5ad0:	2201      	movpl	r2, #1
   d5ad2:	601a      	strpl	r2, [r3, #0]
   d5ad4:	4b1c      	ldr	r3, [pc, #112]	; (d5b48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5ad6:	681a      	ldr	r2, [r3, #0]
   d5ad8:	07d1      	lsls	r1, r2, #31
   d5ada:	bf5c      	itt	pl
   d5adc:	2201      	movpl	r2, #1
   d5ade:	601a      	strpl	r2, [r3, #0]
   d5ae0:	4b1a      	ldr	r3, [pc, #104]	; (d5b4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5ae2:	681a      	ldr	r2, [r3, #0]
   d5ae4:	07d2      	lsls	r2, r2, #31
   d5ae6:	bf5c      	itt	pl
   d5ae8:	2201      	movpl	r2, #1
   d5aea:	601a      	strpl	r2, [r3, #0]
   d5aec:	4b18      	ldr	r3, [pc, #96]	; (d5b50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5aee:	681a      	ldr	r2, [r3, #0]
   d5af0:	07d0      	lsls	r0, r2, #31
   d5af2:	bf5c      	itt	pl
   d5af4:	2201      	movpl	r2, #1
   d5af6:	601a      	strpl	r2, [r3, #0]
   d5af8:	4b16      	ldr	r3, [pc, #88]	; (d5b54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5afa:	681a      	ldr	r2, [r3, #0]
   d5afc:	07d1      	lsls	r1, r2, #31
   d5afe:	bf5c      	itt	pl
   d5b00:	2201      	movpl	r2, #1
   d5b02:	601a      	strpl	r2, [r3, #0]
   d5b04:	4b14      	ldr	r3, [pc, #80]	; (d5b58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5b06:	681a      	ldr	r2, [r3, #0]
   d5b08:	07d2      	lsls	r2, r2, #31
   d5b0a:	bf5c      	itt	pl
   d5b0c:	2201      	movpl	r2, #1
   d5b0e:	601a      	strpl	r2, [r3, #0]
   d5b10:	4b12      	ldr	r3, [pc, #72]	; (d5b5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5b12:	681a      	ldr	r2, [r3, #0]
   d5b14:	07d0      	lsls	r0, r2, #31
   d5b16:	bf5c      	itt	pl
   d5b18:	2201      	movpl	r2, #1
   d5b1a:	601a      	strpl	r2, [r3, #0]
   d5b1c:	4b10      	ldr	r3, [pc, #64]	; (d5b60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5b1e:	681a      	ldr	r2, [r3, #0]
   d5b20:	07d1      	lsls	r1, r2, #31
   d5b22:	bf5c      	itt	pl
   d5b24:	2201      	movpl	r2, #1
   d5b26:	601a      	strpl	r2, [r3, #0]
   d5b28:	4b0e      	ldr	r3, [pc, #56]	; (d5b64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5b2a:	681a      	ldr	r2, [r3, #0]
   d5b2c:	07d2      	lsls	r2, r2, #31
   d5b2e:	bf5c      	itt	pl
   d5b30:	2201      	movpl	r2, #1
   d5b32:	601a      	strpl	r2, [r3, #0]
   d5b34:	4770      	bx	lr
   d5b36:	bf00      	nop
   d5b38:	2003e79c 	.word	0x2003e79c
   d5b3c:	2003e798 	.word	0x2003e798
   d5b40:	2003e794 	.word	0x2003e794
   d5b44:	2003e790 	.word	0x2003e790
   d5b48:	2003e78c 	.word	0x2003e78c
   d5b4c:	2003e788 	.word	0x2003e788
   d5b50:	2003e784 	.word	0x2003e784
   d5b54:	2003e780 	.word	0x2003e780
   d5b58:	2003e77c 	.word	0x2003e77c
   d5b5c:	2003e778 	.word	0x2003e778
   d5b60:	2003e774 	.word	0x2003e774
   d5b64:	2003e770 	.word	0x2003e770

000d5b68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5b68:	4b24      	ldr	r3, [pc, #144]	; (d5bfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5b6a:	681a      	ldr	r2, [r3, #0]
   d5b6c:	07d0      	lsls	r0, r2, #31
   d5b6e:	bf5c      	itt	pl
   d5b70:	2201      	movpl	r2, #1
   d5b72:	601a      	strpl	r2, [r3, #0]
   d5b74:	4b22      	ldr	r3, [pc, #136]	; (d5c00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5b76:	681a      	ldr	r2, [r3, #0]
   d5b78:	07d1      	lsls	r1, r2, #31
   d5b7a:	bf5c      	itt	pl
   d5b7c:	2201      	movpl	r2, #1
   d5b7e:	601a      	strpl	r2, [r3, #0]
   d5b80:	4b20      	ldr	r3, [pc, #128]	; (d5c04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5b82:	681a      	ldr	r2, [r3, #0]
   d5b84:	07d2      	lsls	r2, r2, #31
   d5b86:	bf5c      	itt	pl
   d5b88:	2201      	movpl	r2, #1
   d5b8a:	601a      	strpl	r2, [r3, #0]
   d5b8c:	4b1e      	ldr	r3, [pc, #120]	; (d5c08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5b8e:	681a      	ldr	r2, [r3, #0]
   d5b90:	07d0      	lsls	r0, r2, #31
   d5b92:	bf5c      	itt	pl
   d5b94:	2201      	movpl	r2, #1
   d5b96:	601a      	strpl	r2, [r3, #0]
   d5b98:	4b1c      	ldr	r3, [pc, #112]	; (d5c0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5b9a:	681a      	ldr	r2, [r3, #0]
   d5b9c:	07d1      	lsls	r1, r2, #31
   d5b9e:	bf5c      	itt	pl
   d5ba0:	2201      	movpl	r2, #1
   d5ba2:	601a      	strpl	r2, [r3, #0]
   d5ba4:	4b1a      	ldr	r3, [pc, #104]	; (d5c10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5ba6:	681a      	ldr	r2, [r3, #0]
   d5ba8:	07d2      	lsls	r2, r2, #31
   d5baa:	bf5c      	itt	pl
   d5bac:	2201      	movpl	r2, #1
   d5bae:	601a      	strpl	r2, [r3, #0]
   d5bb0:	4b18      	ldr	r3, [pc, #96]	; (d5c14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5bb2:	681a      	ldr	r2, [r3, #0]
   d5bb4:	07d0      	lsls	r0, r2, #31
   d5bb6:	bf5c      	itt	pl
   d5bb8:	2201      	movpl	r2, #1
   d5bba:	601a      	strpl	r2, [r3, #0]
   d5bbc:	4b16      	ldr	r3, [pc, #88]	; (d5c18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5bbe:	681a      	ldr	r2, [r3, #0]
   d5bc0:	07d1      	lsls	r1, r2, #31
   d5bc2:	bf5c      	itt	pl
   d5bc4:	2201      	movpl	r2, #1
   d5bc6:	601a      	strpl	r2, [r3, #0]
   d5bc8:	4b14      	ldr	r3, [pc, #80]	; (d5c1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5bca:	681a      	ldr	r2, [r3, #0]
   d5bcc:	07d2      	lsls	r2, r2, #31
   d5bce:	bf5c      	itt	pl
   d5bd0:	2201      	movpl	r2, #1
   d5bd2:	601a      	strpl	r2, [r3, #0]
   d5bd4:	4b12      	ldr	r3, [pc, #72]	; (d5c20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5bd6:	681a      	ldr	r2, [r3, #0]
   d5bd8:	07d0      	lsls	r0, r2, #31
   d5bda:	bf5c      	itt	pl
   d5bdc:	2201      	movpl	r2, #1
   d5bde:	601a      	strpl	r2, [r3, #0]
   d5be0:	4b10      	ldr	r3, [pc, #64]	; (d5c24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5be2:	681a      	ldr	r2, [r3, #0]
   d5be4:	07d1      	lsls	r1, r2, #31
   d5be6:	bf5c      	itt	pl
   d5be8:	2201      	movpl	r2, #1
   d5bea:	601a      	strpl	r2, [r3, #0]
   d5bec:	4b0e      	ldr	r3, [pc, #56]	; (d5c28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5bee:	681a      	ldr	r2, [r3, #0]
   d5bf0:	07d2      	lsls	r2, r2, #31
   d5bf2:	bf5c      	itt	pl
   d5bf4:	2201      	movpl	r2, #1
   d5bf6:	601a      	strpl	r2, [r3, #0]
   d5bf8:	4770      	bx	lr
   d5bfa:	bf00      	nop
   d5bfc:	2003e7cc 	.word	0x2003e7cc
   d5c00:	2003e7c8 	.word	0x2003e7c8
   d5c04:	2003e7c4 	.word	0x2003e7c4
   d5c08:	2003e7c0 	.word	0x2003e7c0
   d5c0c:	2003e7bc 	.word	0x2003e7bc
   d5c10:	2003e7b8 	.word	0x2003e7b8
   d5c14:	2003e7b4 	.word	0x2003e7b4
   d5c18:	2003e7b0 	.word	0x2003e7b0
   d5c1c:	2003e7ac 	.word	0x2003e7ac
   d5c20:	2003e7a8 	.word	0x2003e7a8
   d5c24:	2003e7a4 	.word	0x2003e7a4
   d5c28:	2003e7a0 	.word	0x2003e7a0

000d5c2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5c2c:	4b18      	ldr	r3, [pc, #96]	; (d5c90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5c2e:	681a      	ldr	r2, [r3, #0]
   d5c30:	07d1      	lsls	r1, r2, #31
   d5c32:	bf5c      	itt	pl
   d5c34:	2201      	movpl	r2, #1
   d5c36:	601a      	strpl	r2, [r3, #0]
   d5c38:	4b16      	ldr	r3, [pc, #88]	; (d5c94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5c3a:	681a      	ldr	r2, [r3, #0]
   d5c3c:	07d2      	lsls	r2, r2, #31
   d5c3e:	bf5c      	itt	pl
   d5c40:	2201      	movpl	r2, #1
   d5c42:	601a      	strpl	r2, [r3, #0]
   d5c44:	4b14      	ldr	r3, [pc, #80]	; (d5c98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5c46:	681a      	ldr	r2, [r3, #0]
   d5c48:	07d0      	lsls	r0, r2, #31
   d5c4a:	bf5c      	itt	pl
   d5c4c:	2201      	movpl	r2, #1
   d5c4e:	601a      	strpl	r2, [r3, #0]
   d5c50:	4b12      	ldr	r3, [pc, #72]	; (d5c9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5c52:	681a      	ldr	r2, [r3, #0]
   d5c54:	07d1      	lsls	r1, r2, #31
   d5c56:	bf5c      	itt	pl
   d5c58:	2201      	movpl	r2, #1
   d5c5a:	601a      	strpl	r2, [r3, #0]
   d5c5c:	4b10      	ldr	r3, [pc, #64]	; (d5ca0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5c5e:	681a      	ldr	r2, [r3, #0]
   d5c60:	07d2      	lsls	r2, r2, #31
   d5c62:	bf5c      	itt	pl
   d5c64:	2201      	movpl	r2, #1
   d5c66:	601a      	strpl	r2, [r3, #0]
   d5c68:	4b0e      	ldr	r3, [pc, #56]	; (d5ca4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5c6a:	681a      	ldr	r2, [r3, #0]
   d5c6c:	07d0      	lsls	r0, r2, #31
   d5c6e:	bf5c      	itt	pl
   d5c70:	2201      	movpl	r2, #1
   d5c72:	601a      	strpl	r2, [r3, #0]
   d5c74:	4b0c      	ldr	r3, [pc, #48]	; (d5ca8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5c76:	681a      	ldr	r2, [r3, #0]
   d5c78:	07d1      	lsls	r1, r2, #31
   d5c7a:	bf5c      	itt	pl
   d5c7c:	2201      	movpl	r2, #1
   d5c7e:	601a      	strpl	r2, [r3, #0]
   d5c80:	4b0a      	ldr	r3, [pc, #40]	; (d5cac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5c82:	681a      	ldr	r2, [r3, #0]
   d5c84:	07d2      	lsls	r2, r2, #31
   d5c86:	bf5c      	itt	pl
   d5c88:	2201      	movpl	r2, #1
   d5c8a:	601a      	strpl	r2, [r3, #0]
   d5c8c:	4770      	bx	lr
   d5c8e:	bf00      	nop
   d5c90:	2003e7ec 	.word	0x2003e7ec
   d5c94:	2003e7e8 	.word	0x2003e7e8
   d5c98:	2003e7e4 	.word	0x2003e7e4
   d5c9c:	2003e7e0 	.word	0x2003e7e0
   d5ca0:	2003e7dc 	.word	0x2003e7dc
   d5ca4:	2003e7d8 	.word	0x2003e7d8
   d5ca8:	2003e7d4 	.word	0x2003e7d4
   d5cac:	2003e7d0 	.word	0x2003e7d0

000d5cb0 <__aeabi_drsub>:
   d5cb0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5cb4:	e002      	b.n	d5cbc <__adddf3>
   d5cb6:	bf00      	nop

000d5cb8 <__aeabi_dsub>:
   d5cb8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5cbc <__adddf3>:
   d5cbc:	b530      	push	{r4, r5, lr}
   d5cbe:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5cc2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5cc6:	ea94 0f05 	teq	r4, r5
   d5cca:	bf08      	it	eq
   d5ccc:	ea90 0f02 	teqeq	r0, r2
   d5cd0:	bf1f      	itttt	ne
   d5cd2:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5cd6:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5cda:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5cde:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5ce2:	f000 80e2 	beq.w	d5eaa <__adddf3+0x1ee>
   d5ce6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5cea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5cee:	bfb8      	it	lt
   d5cf0:	426d      	neglt	r5, r5
   d5cf2:	dd0c      	ble.n	d5d0e <__adddf3+0x52>
   d5cf4:	442c      	add	r4, r5
   d5cf6:	ea80 0202 	eor.w	r2, r0, r2
   d5cfa:	ea81 0303 	eor.w	r3, r1, r3
   d5cfe:	ea82 0000 	eor.w	r0, r2, r0
   d5d02:	ea83 0101 	eor.w	r1, r3, r1
   d5d06:	ea80 0202 	eor.w	r2, r0, r2
   d5d0a:	ea81 0303 	eor.w	r3, r1, r3
   d5d0e:	2d36      	cmp	r5, #54	; 0x36
   d5d10:	bf88      	it	hi
   d5d12:	bd30      	pophi	{r4, r5, pc}
   d5d14:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5d18:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5d1c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5d20:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5d24:	d002      	beq.n	d5d2c <__adddf3+0x70>
   d5d26:	4240      	negs	r0, r0
   d5d28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5d2c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5d30:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5d34:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5d38:	d002      	beq.n	d5d40 <__adddf3+0x84>
   d5d3a:	4252      	negs	r2, r2
   d5d3c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5d40:	ea94 0f05 	teq	r4, r5
   d5d44:	f000 80a7 	beq.w	d5e96 <__adddf3+0x1da>
   d5d48:	f1a4 0401 	sub.w	r4, r4, #1
   d5d4c:	f1d5 0e20 	rsbs	lr, r5, #32
   d5d50:	db0d      	blt.n	d5d6e <__adddf3+0xb2>
   d5d52:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5d56:	fa22 f205 	lsr.w	r2, r2, r5
   d5d5a:	1880      	adds	r0, r0, r2
   d5d5c:	f141 0100 	adc.w	r1, r1, #0
   d5d60:	fa03 f20e 	lsl.w	r2, r3, lr
   d5d64:	1880      	adds	r0, r0, r2
   d5d66:	fa43 f305 	asr.w	r3, r3, r5
   d5d6a:	4159      	adcs	r1, r3
   d5d6c:	e00e      	b.n	d5d8c <__adddf3+0xd0>
   d5d6e:	f1a5 0520 	sub.w	r5, r5, #32
   d5d72:	f10e 0e20 	add.w	lr, lr, #32
   d5d76:	2a01      	cmp	r2, #1
   d5d78:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5d7c:	bf28      	it	cs
   d5d7e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5d82:	fa43 f305 	asr.w	r3, r3, r5
   d5d86:	18c0      	adds	r0, r0, r3
   d5d88:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5d8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5d90:	d507      	bpl.n	d5da2 <__adddf3+0xe6>
   d5d92:	f04f 0e00 	mov.w	lr, #0
   d5d96:	f1dc 0c00 	rsbs	ip, ip, #0
   d5d9a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5d9e:	eb6e 0101 	sbc.w	r1, lr, r1
   d5da2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5da6:	d31b      	bcc.n	d5de0 <__adddf3+0x124>
   d5da8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5dac:	d30c      	bcc.n	d5dc8 <__adddf3+0x10c>
   d5dae:	0849      	lsrs	r1, r1, #1
   d5db0:	ea5f 0030 	movs.w	r0, r0, rrx
   d5db4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5db8:	f104 0401 	add.w	r4, r4, #1
   d5dbc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5dc0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5dc4:	f080 809a 	bcs.w	d5efc <__adddf3+0x240>
   d5dc8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5dcc:	bf08      	it	eq
   d5dce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5dd2:	f150 0000 	adcs.w	r0, r0, #0
   d5dd6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5dda:	ea41 0105 	orr.w	r1, r1, r5
   d5dde:	bd30      	pop	{r4, r5, pc}
   d5de0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5de4:	4140      	adcs	r0, r0
   d5de6:	eb41 0101 	adc.w	r1, r1, r1
   d5dea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5dee:	f1a4 0401 	sub.w	r4, r4, #1
   d5df2:	d1e9      	bne.n	d5dc8 <__adddf3+0x10c>
   d5df4:	f091 0f00 	teq	r1, #0
   d5df8:	bf04      	itt	eq
   d5dfa:	4601      	moveq	r1, r0
   d5dfc:	2000      	moveq	r0, #0
   d5dfe:	fab1 f381 	clz	r3, r1
   d5e02:	bf08      	it	eq
   d5e04:	3320      	addeq	r3, #32
   d5e06:	f1a3 030b 	sub.w	r3, r3, #11
   d5e0a:	f1b3 0220 	subs.w	r2, r3, #32
   d5e0e:	da0c      	bge.n	d5e2a <__adddf3+0x16e>
   d5e10:	320c      	adds	r2, #12
   d5e12:	dd08      	ble.n	d5e26 <__adddf3+0x16a>
   d5e14:	f102 0c14 	add.w	ip, r2, #20
   d5e18:	f1c2 020c 	rsb	r2, r2, #12
   d5e1c:	fa01 f00c 	lsl.w	r0, r1, ip
   d5e20:	fa21 f102 	lsr.w	r1, r1, r2
   d5e24:	e00c      	b.n	d5e40 <__adddf3+0x184>
   d5e26:	f102 0214 	add.w	r2, r2, #20
   d5e2a:	bfd8      	it	le
   d5e2c:	f1c2 0c20 	rsble	ip, r2, #32
   d5e30:	fa01 f102 	lsl.w	r1, r1, r2
   d5e34:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5e38:	bfdc      	itt	le
   d5e3a:	ea41 010c 	orrle.w	r1, r1, ip
   d5e3e:	4090      	lslle	r0, r2
   d5e40:	1ae4      	subs	r4, r4, r3
   d5e42:	bfa2      	ittt	ge
   d5e44:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5e48:	4329      	orrge	r1, r5
   d5e4a:	bd30      	popge	{r4, r5, pc}
   d5e4c:	ea6f 0404 	mvn.w	r4, r4
   d5e50:	3c1f      	subs	r4, #31
   d5e52:	da1c      	bge.n	d5e8e <__adddf3+0x1d2>
   d5e54:	340c      	adds	r4, #12
   d5e56:	dc0e      	bgt.n	d5e76 <__adddf3+0x1ba>
   d5e58:	f104 0414 	add.w	r4, r4, #20
   d5e5c:	f1c4 0220 	rsb	r2, r4, #32
   d5e60:	fa20 f004 	lsr.w	r0, r0, r4
   d5e64:	fa01 f302 	lsl.w	r3, r1, r2
   d5e68:	ea40 0003 	orr.w	r0, r0, r3
   d5e6c:	fa21 f304 	lsr.w	r3, r1, r4
   d5e70:	ea45 0103 	orr.w	r1, r5, r3
   d5e74:	bd30      	pop	{r4, r5, pc}
   d5e76:	f1c4 040c 	rsb	r4, r4, #12
   d5e7a:	f1c4 0220 	rsb	r2, r4, #32
   d5e7e:	fa20 f002 	lsr.w	r0, r0, r2
   d5e82:	fa01 f304 	lsl.w	r3, r1, r4
   d5e86:	ea40 0003 	orr.w	r0, r0, r3
   d5e8a:	4629      	mov	r1, r5
   d5e8c:	bd30      	pop	{r4, r5, pc}
   d5e8e:	fa21 f004 	lsr.w	r0, r1, r4
   d5e92:	4629      	mov	r1, r5
   d5e94:	bd30      	pop	{r4, r5, pc}
   d5e96:	f094 0f00 	teq	r4, #0
   d5e9a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5e9e:	bf06      	itte	eq
   d5ea0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5ea4:	3401      	addeq	r4, #1
   d5ea6:	3d01      	subne	r5, #1
   d5ea8:	e74e      	b.n	d5d48 <__adddf3+0x8c>
   d5eaa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5eae:	bf18      	it	ne
   d5eb0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5eb4:	d029      	beq.n	d5f0a <__adddf3+0x24e>
   d5eb6:	ea94 0f05 	teq	r4, r5
   d5eba:	bf08      	it	eq
   d5ebc:	ea90 0f02 	teqeq	r0, r2
   d5ec0:	d005      	beq.n	d5ece <__adddf3+0x212>
   d5ec2:	ea54 0c00 	orrs.w	ip, r4, r0
   d5ec6:	bf04      	itt	eq
   d5ec8:	4619      	moveq	r1, r3
   d5eca:	4610      	moveq	r0, r2
   d5ecc:	bd30      	pop	{r4, r5, pc}
   d5ece:	ea91 0f03 	teq	r1, r3
   d5ed2:	bf1e      	ittt	ne
   d5ed4:	2100      	movne	r1, #0
   d5ed6:	2000      	movne	r0, #0
   d5ed8:	bd30      	popne	{r4, r5, pc}
   d5eda:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5ede:	d105      	bne.n	d5eec <__adddf3+0x230>
   d5ee0:	0040      	lsls	r0, r0, #1
   d5ee2:	4149      	adcs	r1, r1
   d5ee4:	bf28      	it	cs
   d5ee6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5eea:	bd30      	pop	{r4, r5, pc}
   d5eec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5ef0:	bf3c      	itt	cc
   d5ef2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5ef6:	bd30      	popcc	{r4, r5, pc}
   d5ef8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5efc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5f00:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5f04:	f04f 0000 	mov.w	r0, #0
   d5f08:	bd30      	pop	{r4, r5, pc}
   d5f0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5f0e:	bf1a      	itte	ne
   d5f10:	4619      	movne	r1, r3
   d5f12:	4610      	movne	r0, r2
   d5f14:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5f18:	bf1c      	itt	ne
   d5f1a:	460b      	movne	r3, r1
   d5f1c:	4602      	movne	r2, r0
   d5f1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5f22:	bf06      	itte	eq
   d5f24:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5f28:	ea91 0f03 	teqeq	r1, r3
   d5f2c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5f30:	bd30      	pop	{r4, r5, pc}
   d5f32:	bf00      	nop

000d5f34 <__aeabi_ui2d>:
   d5f34:	f090 0f00 	teq	r0, #0
   d5f38:	bf04      	itt	eq
   d5f3a:	2100      	moveq	r1, #0
   d5f3c:	4770      	bxeq	lr
   d5f3e:	b530      	push	{r4, r5, lr}
   d5f40:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5f44:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5f48:	f04f 0500 	mov.w	r5, #0
   d5f4c:	f04f 0100 	mov.w	r1, #0
   d5f50:	e750      	b.n	d5df4 <__adddf3+0x138>
   d5f52:	bf00      	nop

000d5f54 <__aeabi_i2d>:
   d5f54:	f090 0f00 	teq	r0, #0
   d5f58:	bf04      	itt	eq
   d5f5a:	2100      	moveq	r1, #0
   d5f5c:	4770      	bxeq	lr
   d5f5e:	b530      	push	{r4, r5, lr}
   d5f60:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5f64:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5f68:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5f6c:	bf48      	it	mi
   d5f6e:	4240      	negmi	r0, r0
   d5f70:	f04f 0100 	mov.w	r1, #0
   d5f74:	e73e      	b.n	d5df4 <__adddf3+0x138>
   d5f76:	bf00      	nop

000d5f78 <__aeabi_f2d>:
   d5f78:	0042      	lsls	r2, r0, #1
   d5f7a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5f7e:	ea4f 0131 	mov.w	r1, r1, rrx
   d5f82:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5f86:	bf1f      	itttt	ne
   d5f88:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5f8c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5f90:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5f94:	4770      	bxne	lr
   d5f96:	f092 0f00 	teq	r2, #0
   d5f9a:	bf14      	ite	ne
   d5f9c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5fa0:	4770      	bxeq	lr
   d5fa2:	b530      	push	{r4, r5, lr}
   d5fa4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5fa8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5fac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5fb0:	e720      	b.n	d5df4 <__adddf3+0x138>
   d5fb2:	bf00      	nop

000d5fb4 <__aeabi_ul2d>:
   d5fb4:	ea50 0201 	orrs.w	r2, r0, r1
   d5fb8:	bf08      	it	eq
   d5fba:	4770      	bxeq	lr
   d5fbc:	b530      	push	{r4, r5, lr}
   d5fbe:	f04f 0500 	mov.w	r5, #0
   d5fc2:	e00a      	b.n	d5fda <__aeabi_l2d+0x16>

000d5fc4 <__aeabi_l2d>:
   d5fc4:	ea50 0201 	orrs.w	r2, r0, r1
   d5fc8:	bf08      	it	eq
   d5fca:	4770      	bxeq	lr
   d5fcc:	b530      	push	{r4, r5, lr}
   d5fce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5fd2:	d502      	bpl.n	d5fda <__aeabi_l2d+0x16>
   d5fd4:	4240      	negs	r0, r0
   d5fd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5fda:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5fde:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5fe2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5fe6:	f43f aedc 	beq.w	d5da2 <__adddf3+0xe6>
   d5fea:	f04f 0203 	mov.w	r2, #3
   d5fee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5ff2:	bf18      	it	ne
   d5ff4:	3203      	addne	r2, #3
   d5ff6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5ffa:	bf18      	it	ne
   d5ffc:	3203      	addne	r2, #3
   d5ffe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6002:	f1c2 0320 	rsb	r3, r2, #32
   d6006:	fa00 fc03 	lsl.w	ip, r0, r3
   d600a:	fa20 f002 	lsr.w	r0, r0, r2
   d600e:	fa01 fe03 	lsl.w	lr, r1, r3
   d6012:	ea40 000e 	orr.w	r0, r0, lr
   d6016:	fa21 f102 	lsr.w	r1, r1, r2
   d601a:	4414      	add	r4, r2
   d601c:	e6c1      	b.n	d5da2 <__adddf3+0xe6>
   d601e:	bf00      	nop

000d6020 <__aeabi_dmul>:
   d6020:	b570      	push	{r4, r5, r6, lr}
   d6022:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6026:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d602a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d602e:	bf1d      	ittte	ne
   d6030:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6034:	ea94 0f0c 	teqne	r4, ip
   d6038:	ea95 0f0c 	teqne	r5, ip
   d603c:	f000 f8de 	bleq	d61fc <__aeabi_dmul+0x1dc>
   d6040:	442c      	add	r4, r5
   d6042:	ea81 0603 	eor.w	r6, r1, r3
   d6046:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d604a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d604e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6052:	bf18      	it	ne
   d6054:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6058:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d605c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6060:	d038      	beq.n	d60d4 <__aeabi_dmul+0xb4>
   d6062:	fba0 ce02 	umull	ip, lr, r0, r2
   d6066:	f04f 0500 	mov.w	r5, #0
   d606a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d606e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6072:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6076:	f04f 0600 	mov.w	r6, #0
   d607a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d607e:	f09c 0f00 	teq	ip, #0
   d6082:	bf18      	it	ne
   d6084:	f04e 0e01 	orrne.w	lr, lr, #1
   d6088:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d608c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6090:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6094:	d204      	bcs.n	d60a0 <__aeabi_dmul+0x80>
   d6096:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d609a:	416d      	adcs	r5, r5
   d609c:	eb46 0606 	adc.w	r6, r6, r6
   d60a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d60a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d60a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d60ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d60b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d60b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d60b8:	bf88      	it	hi
   d60ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d60be:	d81e      	bhi.n	d60fe <__aeabi_dmul+0xde>
   d60c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d60c4:	bf08      	it	eq
   d60c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d60ca:	f150 0000 	adcs.w	r0, r0, #0
   d60ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d60d2:	bd70      	pop	{r4, r5, r6, pc}
   d60d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d60d8:	ea46 0101 	orr.w	r1, r6, r1
   d60dc:	ea40 0002 	orr.w	r0, r0, r2
   d60e0:	ea81 0103 	eor.w	r1, r1, r3
   d60e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d60e8:	bfc2      	ittt	gt
   d60ea:	ebd4 050c 	rsbsgt	r5, r4, ip
   d60ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d60f2:	bd70      	popgt	{r4, r5, r6, pc}
   d60f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d60f8:	f04f 0e00 	mov.w	lr, #0
   d60fc:	3c01      	subs	r4, #1
   d60fe:	f300 80ab 	bgt.w	d6258 <__aeabi_dmul+0x238>
   d6102:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6106:	bfde      	ittt	le
   d6108:	2000      	movle	r0, #0
   d610a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d610e:	bd70      	pople	{r4, r5, r6, pc}
   d6110:	f1c4 0400 	rsb	r4, r4, #0
   d6114:	3c20      	subs	r4, #32
   d6116:	da35      	bge.n	d6184 <__aeabi_dmul+0x164>
   d6118:	340c      	adds	r4, #12
   d611a:	dc1b      	bgt.n	d6154 <__aeabi_dmul+0x134>
   d611c:	f104 0414 	add.w	r4, r4, #20
   d6120:	f1c4 0520 	rsb	r5, r4, #32
   d6124:	fa00 f305 	lsl.w	r3, r0, r5
   d6128:	fa20 f004 	lsr.w	r0, r0, r4
   d612c:	fa01 f205 	lsl.w	r2, r1, r5
   d6130:	ea40 0002 	orr.w	r0, r0, r2
   d6134:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6138:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d613c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6140:	fa21 f604 	lsr.w	r6, r1, r4
   d6144:	eb42 0106 	adc.w	r1, r2, r6
   d6148:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d614c:	bf08      	it	eq
   d614e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6152:	bd70      	pop	{r4, r5, r6, pc}
   d6154:	f1c4 040c 	rsb	r4, r4, #12
   d6158:	f1c4 0520 	rsb	r5, r4, #32
   d615c:	fa00 f304 	lsl.w	r3, r0, r4
   d6160:	fa20 f005 	lsr.w	r0, r0, r5
   d6164:	fa01 f204 	lsl.w	r2, r1, r4
   d6168:	ea40 0002 	orr.w	r0, r0, r2
   d616c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6170:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6174:	f141 0100 	adc.w	r1, r1, #0
   d6178:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d617c:	bf08      	it	eq
   d617e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6182:	bd70      	pop	{r4, r5, r6, pc}
   d6184:	f1c4 0520 	rsb	r5, r4, #32
   d6188:	fa00 f205 	lsl.w	r2, r0, r5
   d618c:	ea4e 0e02 	orr.w	lr, lr, r2
   d6190:	fa20 f304 	lsr.w	r3, r0, r4
   d6194:	fa01 f205 	lsl.w	r2, r1, r5
   d6198:	ea43 0302 	orr.w	r3, r3, r2
   d619c:	fa21 f004 	lsr.w	r0, r1, r4
   d61a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d61a4:	fa21 f204 	lsr.w	r2, r1, r4
   d61a8:	ea20 0002 	bic.w	r0, r0, r2
   d61ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d61b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d61b4:	bf08      	it	eq
   d61b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d61ba:	bd70      	pop	{r4, r5, r6, pc}
   d61bc:	f094 0f00 	teq	r4, #0
   d61c0:	d10f      	bne.n	d61e2 <__aeabi_dmul+0x1c2>
   d61c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d61c6:	0040      	lsls	r0, r0, #1
   d61c8:	eb41 0101 	adc.w	r1, r1, r1
   d61cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d61d0:	bf08      	it	eq
   d61d2:	3c01      	subeq	r4, #1
   d61d4:	d0f7      	beq.n	d61c6 <__aeabi_dmul+0x1a6>
   d61d6:	ea41 0106 	orr.w	r1, r1, r6
   d61da:	f095 0f00 	teq	r5, #0
   d61de:	bf18      	it	ne
   d61e0:	4770      	bxne	lr
   d61e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d61e6:	0052      	lsls	r2, r2, #1
   d61e8:	eb43 0303 	adc.w	r3, r3, r3
   d61ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d61f0:	bf08      	it	eq
   d61f2:	3d01      	subeq	r5, #1
   d61f4:	d0f7      	beq.n	d61e6 <__aeabi_dmul+0x1c6>
   d61f6:	ea43 0306 	orr.w	r3, r3, r6
   d61fa:	4770      	bx	lr
   d61fc:	ea94 0f0c 	teq	r4, ip
   d6200:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6204:	bf18      	it	ne
   d6206:	ea95 0f0c 	teqne	r5, ip
   d620a:	d00c      	beq.n	d6226 <__aeabi_dmul+0x206>
   d620c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6210:	bf18      	it	ne
   d6212:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6216:	d1d1      	bne.n	d61bc <__aeabi_dmul+0x19c>
   d6218:	ea81 0103 	eor.w	r1, r1, r3
   d621c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6220:	f04f 0000 	mov.w	r0, #0
   d6224:	bd70      	pop	{r4, r5, r6, pc}
   d6226:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d622a:	bf06      	itte	eq
   d622c:	4610      	moveq	r0, r2
   d622e:	4619      	moveq	r1, r3
   d6230:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6234:	d019      	beq.n	d626a <__aeabi_dmul+0x24a>
   d6236:	ea94 0f0c 	teq	r4, ip
   d623a:	d102      	bne.n	d6242 <__aeabi_dmul+0x222>
   d623c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6240:	d113      	bne.n	d626a <__aeabi_dmul+0x24a>
   d6242:	ea95 0f0c 	teq	r5, ip
   d6246:	d105      	bne.n	d6254 <__aeabi_dmul+0x234>
   d6248:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d624c:	bf1c      	itt	ne
   d624e:	4610      	movne	r0, r2
   d6250:	4619      	movne	r1, r3
   d6252:	d10a      	bne.n	d626a <__aeabi_dmul+0x24a>
   d6254:	ea81 0103 	eor.w	r1, r1, r3
   d6258:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d625c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6260:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6264:	f04f 0000 	mov.w	r0, #0
   d6268:	bd70      	pop	{r4, r5, r6, pc}
   d626a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d626e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6272:	bd70      	pop	{r4, r5, r6, pc}

000d6274 <__aeabi_ddiv>:
   d6274:	b570      	push	{r4, r5, r6, lr}
   d6276:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d627a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d627e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6282:	bf1d      	ittte	ne
   d6284:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6288:	ea94 0f0c 	teqne	r4, ip
   d628c:	ea95 0f0c 	teqne	r5, ip
   d6290:	f000 f8a7 	bleq	d63e2 <__aeabi_ddiv+0x16e>
   d6294:	eba4 0405 	sub.w	r4, r4, r5
   d6298:	ea81 0e03 	eor.w	lr, r1, r3
   d629c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d62a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d62a4:	f000 8088 	beq.w	d63b8 <__aeabi_ddiv+0x144>
   d62a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d62ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d62b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d62b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d62b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d62bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d62c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d62c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d62c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d62cc:	429d      	cmp	r5, r3
   d62ce:	bf08      	it	eq
   d62d0:	4296      	cmpeq	r6, r2
   d62d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d62d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d62da:	d202      	bcs.n	d62e2 <__aeabi_ddiv+0x6e>
   d62dc:	085b      	lsrs	r3, r3, #1
   d62de:	ea4f 0232 	mov.w	r2, r2, rrx
   d62e2:	1ab6      	subs	r6, r6, r2
   d62e4:	eb65 0503 	sbc.w	r5, r5, r3
   d62e8:	085b      	lsrs	r3, r3, #1
   d62ea:	ea4f 0232 	mov.w	r2, r2, rrx
   d62ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d62f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d62f6:	ebb6 0e02 	subs.w	lr, r6, r2
   d62fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d62fe:	bf22      	ittt	cs
   d6300:	1ab6      	subcs	r6, r6, r2
   d6302:	4675      	movcs	r5, lr
   d6304:	ea40 000c 	orrcs.w	r0, r0, ip
   d6308:	085b      	lsrs	r3, r3, #1
   d630a:	ea4f 0232 	mov.w	r2, r2, rrx
   d630e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6312:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6316:	bf22      	ittt	cs
   d6318:	1ab6      	subcs	r6, r6, r2
   d631a:	4675      	movcs	r5, lr
   d631c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6320:	085b      	lsrs	r3, r3, #1
   d6322:	ea4f 0232 	mov.w	r2, r2, rrx
   d6326:	ebb6 0e02 	subs.w	lr, r6, r2
   d632a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d632e:	bf22      	ittt	cs
   d6330:	1ab6      	subcs	r6, r6, r2
   d6332:	4675      	movcs	r5, lr
   d6334:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6338:	085b      	lsrs	r3, r3, #1
   d633a:	ea4f 0232 	mov.w	r2, r2, rrx
   d633e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6342:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6346:	bf22      	ittt	cs
   d6348:	1ab6      	subcs	r6, r6, r2
   d634a:	4675      	movcs	r5, lr
   d634c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6350:	ea55 0e06 	orrs.w	lr, r5, r6
   d6354:	d018      	beq.n	d6388 <__aeabi_ddiv+0x114>
   d6356:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d635a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d635e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6362:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6366:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d636a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d636e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6372:	d1c0      	bne.n	d62f6 <__aeabi_ddiv+0x82>
   d6374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6378:	d10b      	bne.n	d6392 <__aeabi_ddiv+0x11e>
   d637a:	ea41 0100 	orr.w	r1, r1, r0
   d637e:	f04f 0000 	mov.w	r0, #0
   d6382:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6386:	e7b6      	b.n	d62f6 <__aeabi_ddiv+0x82>
   d6388:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d638c:	bf04      	itt	eq
   d638e:	4301      	orreq	r1, r0
   d6390:	2000      	moveq	r0, #0
   d6392:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6396:	bf88      	it	hi
   d6398:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d639c:	f63f aeaf 	bhi.w	d60fe <__aeabi_dmul+0xde>
   d63a0:	ebb5 0c03 	subs.w	ip, r5, r3
   d63a4:	bf04      	itt	eq
   d63a6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d63aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d63ae:	f150 0000 	adcs.w	r0, r0, #0
   d63b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d63b6:	bd70      	pop	{r4, r5, r6, pc}
   d63b8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d63bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d63c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d63c4:	bfc2      	ittt	gt
   d63c6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d63ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d63ce:	bd70      	popgt	{r4, r5, r6, pc}
   d63d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d63d4:	f04f 0e00 	mov.w	lr, #0
   d63d8:	3c01      	subs	r4, #1
   d63da:	e690      	b.n	d60fe <__aeabi_dmul+0xde>
   d63dc:	ea45 0e06 	orr.w	lr, r5, r6
   d63e0:	e68d      	b.n	d60fe <__aeabi_dmul+0xde>
   d63e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d63e6:	ea94 0f0c 	teq	r4, ip
   d63ea:	bf08      	it	eq
   d63ec:	ea95 0f0c 	teqeq	r5, ip
   d63f0:	f43f af3b 	beq.w	d626a <__aeabi_dmul+0x24a>
   d63f4:	ea94 0f0c 	teq	r4, ip
   d63f8:	d10a      	bne.n	d6410 <__aeabi_ddiv+0x19c>
   d63fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d63fe:	f47f af34 	bne.w	d626a <__aeabi_dmul+0x24a>
   d6402:	ea95 0f0c 	teq	r5, ip
   d6406:	f47f af25 	bne.w	d6254 <__aeabi_dmul+0x234>
   d640a:	4610      	mov	r0, r2
   d640c:	4619      	mov	r1, r3
   d640e:	e72c      	b.n	d626a <__aeabi_dmul+0x24a>
   d6410:	ea95 0f0c 	teq	r5, ip
   d6414:	d106      	bne.n	d6424 <__aeabi_ddiv+0x1b0>
   d6416:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d641a:	f43f aefd 	beq.w	d6218 <__aeabi_dmul+0x1f8>
   d641e:	4610      	mov	r0, r2
   d6420:	4619      	mov	r1, r3
   d6422:	e722      	b.n	d626a <__aeabi_dmul+0x24a>
   d6424:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6428:	bf18      	it	ne
   d642a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d642e:	f47f aec5 	bne.w	d61bc <__aeabi_dmul+0x19c>
   d6432:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6436:	f47f af0d 	bne.w	d6254 <__aeabi_dmul+0x234>
   d643a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d643e:	f47f aeeb 	bne.w	d6218 <__aeabi_dmul+0x1f8>
   d6442:	e712      	b.n	d626a <__aeabi_dmul+0x24a>

000d6444 <__gedf2>:
   d6444:	f04f 3cff 	mov.w	ip, #4294967295
   d6448:	e006      	b.n	d6458 <__cmpdf2+0x4>
   d644a:	bf00      	nop

000d644c <__ledf2>:
   d644c:	f04f 0c01 	mov.w	ip, #1
   d6450:	e002      	b.n	d6458 <__cmpdf2+0x4>
   d6452:	bf00      	nop

000d6454 <__cmpdf2>:
   d6454:	f04f 0c01 	mov.w	ip, #1
   d6458:	f84d cd04 	str.w	ip, [sp, #-4]!
   d645c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6460:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6464:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6468:	bf18      	it	ne
   d646a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d646e:	d01b      	beq.n	d64a8 <__cmpdf2+0x54>
   d6470:	b001      	add	sp, #4
   d6472:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6476:	bf0c      	ite	eq
   d6478:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d647c:	ea91 0f03 	teqne	r1, r3
   d6480:	bf02      	ittt	eq
   d6482:	ea90 0f02 	teqeq	r0, r2
   d6486:	2000      	moveq	r0, #0
   d6488:	4770      	bxeq	lr
   d648a:	f110 0f00 	cmn.w	r0, #0
   d648e:	ea91 0f03 	teq	r1, r3
   d6492:	bf58      	it	pl
   d6494:	4299      	cmppl	r1, r3
   d6496:	bf08      	it	eq
   d6498:	4290      	cmpeq	r0, r2
   d649a:	bf2c      	ite	cs
   d649c:	17d8      	asrcs	r0, r3, #31
   d649e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d64a2:	f040 0001 	orr.w	r0, r0, #1
   d64a6:	4770      	bx	lr
   d64a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d64ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d64b0:	d102      	bne.n	d64b8 <__cmpdf2+0x64>
   d64b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d64b6:	d107      	bne.n	d64c8 <__cmpdf2+0x74>
   d64b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d64bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d64c0:	d1d6      	bne.n	d6470 <__cmpdf2+0x1c>
   d64c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d64c6:	d0d3      	beq.n	d6470 <__cmpdf2+0x1c>
   d64c8:	f85d 0b04 	ldr.w	r0, [sp], #4
   d64cc:	4770      	bx	lr
   d64ce:	bf00      	nop

000d64d0 <__aeabi_cdrcmple>:
   d64d0:	4684      	mov	ip, r0
   d64d2:	4610      	mov	r0, r2
   d64d4:	4662      	mov	r2, ip
   d64d6:	468c      	mov	ip, r1
   d64d8:	4619      	mov	r1, r3
   d64da:	4663      	mov	r3, ip
   d64dc:	e000      	b.n	d64e0 <__aeabi_cdcmpeq>
   d64de:	bf00      	nop

000d64e0 <__aeabi_cdcmpeq>:
   d64e0:	b501      	push	{r0, lr}
   d64e2:	f7ff ffb7 	bl	d6454 <__cmpdf2>
   d64e6:	2800      	cmp	r0, #0
   d64e8:	bf48      	it	mi
   d64ea:	f110 0f00 	cmnmi.w	r0, #0
   d64ee:	bd01      	pop	{r0, pc}

000d64f0 <__aeabi_dcmpeq>:
   d64f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d64f4:	f7ff fff4 	bl	d64e0 <__aeabi_cdcmpeq>
   d64f8:	bf0c      	ite	eq
   d64fa:	2001      	moveq	r0, #1
   d64fc:	2000      	movne	r0, #0
   d64fe:	f85d fb08 	ldr.w	pc, [sp], #8
   d6502:	bf00      	nop

000d6504 <__aeabi_dcmplt>:
   d6504:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6508:	f7ff ffea 	bl	d64e0 <__aeabi_cdcmpeq>
   d650c:	bf34      	ite	cc
   d650e:	2001      	movcc	r0, #1
   d6510:	2000      	movcs	r0, #0
   d6512:	f85d fb08 	ldr.w	pc, [sp], #8
   d6516:	bf00      	nop

000d6518 <__aeabi_dcmple>:
   d6518:	f84d ed08 	str.w	lr, [sp, #-8]!
   d651c:	f7ff ffe0 	bl	d64e0 <__aeabi_cdcmpeq>
   d6520:	bf94      	ite	ls
   d6522:	2001      	movls	r0, #1
   d6524:	2000      	movhi	r0, #0
   d6526:	f85d fb08 	ldr.w	pc, [sp], #8
   d652a:	bf00      	nop

000d652c <__aeabi_dcmpge>:
   d652c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6530:	f7ff ffce 	bl	d64d0 <__aeabi_cdrcmple>
   d6534:	bf94      	ite	ls
   d6536:	2001      	movls	r0, #1
   d6538:	2000      	movhi	r0, #0
   d653a:	f85d fb08 	ldr.w	pc, [sp], #8
   d653e:	bf00      	nop

000d6540 <__aeabi_dcmpgt>:
   d6540:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6544:	f7ff ffc4 	bl	d64d0 <__aeabi_cdrcmple>
   d6548:	bf34      	ite	cc
   d654a:	2001      	movcc	r0, #1
   d654c:	2000      	movcs	r0, #0
   d654e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6552:	bf00      	nop

000d6554 <__aeabi_d2uiz>:
   d6554:	004a      	lsls	r2, r1, #1
   d6556:	d211      	bcs.n	d657c <__aeabi_d2uiz+0x28>
   d6558:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d655c:	d211      	bcs.n	d6582 <__aeabi_d2uiz+0x2e>
   d655e:	d50d      	bpl.n	d657c <__aeabi_d2uiz+0x28>
   d6560:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6564:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6568:	d40e      	bmi.n	d6588 <__aeabi_d2uiz+0x34>
   d656a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d656e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6572:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6576:	fa23 f002 	lsr.w	r0, r3, r2
   d657a:	4770      	bx	lr
   d657c:	f04f 0000 	mov.w	r0, #0
   d6580:	4770      	bx	lr
   d6582:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6586:	d102      	bne.n	d658e <__aeabi_d2uiz+0x3a>
   d6588:	f04f 30ff 	mov.w	r0, #4294967295
   d658c:	4770      	bx	lr
   d658e:	f04f 0000 	mov.w	r0, #0
   d6592:	4770      	bx	lr

000d6594 <__aeabi_d2f>:
   d6594:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6598:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d659c:	bf24      	itt	cs
   d659e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d65a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d65a6:	d90d      	bls.n	d65c4 <__aeabi_d2f+0x30>
   d65a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d65ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d65b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d65b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d65b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d65bc:	bf08      	it	eq
   d65be:	f020 0001 	biceq.w	r0, r0, #1
   d65c2:	4770      	bx	lr
   d65c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d65c8:	d121      	bne.n	d660e <__aeabi_d2f+0x7a>
   d65ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d65ce:	bfbc      	itt	lt
   d65d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d65d4:	4770      	bxlt	lr
   d65d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d65da:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d65de:	f1c2 0218 	rsb	r2, r2, #24
   d65e2:	f1c2 0c20 	rsb	ip, r2, #32
   d65e6:	fa10 f30c 	lsls.w	r3, r0, ip
   d65ea:	fa20 f002 	lsr.w	r0, r0, r2
   d65ee:	bf18      	it	ne
   d65f0:	f040 0001 	orrne.w	r0, r0, #1
   d65f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d65f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d65fc:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6600:	ea40 000c 	orr.w	r0, r0, ip
   d6604:	fa23 f302 	lsr.w	r3, r3, r2
   d6608:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d660c:	e7cc      	b.n	d65a8 <__aeabi_d2f+0x14>
   d660e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d6612:	d107      	bne.n	d6624 <__aeabi_d2f+0x90>
   d6614:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6618:	bf1e      	ittt	ne
   d661a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d661e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d6622:	4770      	bxne	lr
   d6624:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6628:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d662c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6630:	4770      	bx	lr
   d6632:	bf00      	nop

000d6634 <__aeabi_uldivmod>:
   d6634:	b953      	cbnz	r3, d664c <__aeabi_uldivmod+0x18>
   d6636:	b94a      	cbnz	r2, d664c <__aeabi_uldivmod+0x18>
   d6638:	2900      	cmp	r1, #0
   d663a:	bf08      	it	eq
   d663c:	2800      	cmpeq	r0, #0
   d663e:	bf1c      	itt	ne
   d6640:	f04f 31ff 	movne.w	r1, #4294967295
   d6644:	f04f 30ff 	movne.w	r0, #4294967295
   d6648:	f000 b9a2 	b.w	d6990 <__aeabi_idiv0>
   d664c:	f1ad 0c08 	sub.w	ip, sp, #8
   d6650:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d6654:	f000 f82a 	bl	d66ac <__udivmoddi4>
   d6658:	f8dd e004 	ldr.w	lr, [sp, #4]
   d665c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6660:	b004      	add	sp, #16
   d6662:	4770      	bx	lr

000d6664 <__aeabi_d2ulz>:
   d6664:	b5d0      	push	{r4, r6, r7, lr}
   d6666:	2200      	movs	r2, #0
   d6668:	4b0e      	ldr	r3, [pc, #56]	; (d66a4 <__aeabi_d2ulz+0x40>)
   d666a:	4606      	mov	r6, r0
   d666c:	460f      	mov	r7, r1
   d666e:	f7ff fcd7 	bl	d6020 <__aeabi_dmul>
   d6672:	f7ff ff6f 	bl	d6554 <__aeabi_d2uiz>
   d6676:	4604      	mov	r4, r0
   d6678:	f7ff fc5c 	bl	d5f34 <__aeabi_ui2d>
   d667c:	2200      	movs	r2, #0
   d667e:	4b0a      	ldr	r3, [pc, #40]	; (d66a8 <__aeabi_d2ulz+0x44>)
   d6680:	f7ff fcce 	bl	d6020 <__aeabi_dmul>
   d6684:	4602      	mov	r2, r0
   d6686:	460b      	mov	r3, r1
   d6688:	4630      	mov	r0, r6
   d668a:	4639      	mov	r1, r7
   d668c:	f7ff fb14 	bl	d5cb8 <__aeabi_dsub>
   d6690:	f7ff ff60 	bl	d6554 <__aeabi_d2uiz>
   d6694:	4623      	mov	r3, r4
   d6696:	2200      	movs	r2, #0
   d6698:	ea42 0200 	orr.w	r2, r2, r0
   d669c:	4610      	mov	r0, r2
   d669e:	4619      	mov	r1, r3
   d66a0:	bdd0      	pop	{r4, r6, r7, pc}
   d66a2:	bf00      	nop
   d66a4:	3df00000 	.word	0x3df00000
   d66a8:	41f00000 	.word	0x41f00000

000d66ac <__udivmoddi4>:
   d66ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d66b0:	468c      	mov	ip, r1
   d66b2:	460e      	mov	r6, r1
   d66b4:	4604      	mov	r4, r0
   d66b6:	9d08      	ldr	r5, [sp, #32]
   d66b8:	2b00      	cmp	r3, #0
   d66ba:	d150      	bne.n	d675e <__udivmoddi4+0xb2>
   d66bc:	428a      	cmp	r2, r1
   d66be:	4617      	mov	r7, r2
   d66c0:	d96c      	bls.n	d679c <__udivmoddi4+0xf0>
   d66c2:	fab2 fe82 	clz	lr, r2
   d66c6:	f1be 0f00 	cmp.w	lr, #0
   d66ca:	d00b      	beq.n	d66e4 <__udivmoddi4+0x38>
   d66cc:	f1ce 0420 	rsb	r4, lr, #32
   d66d0:	fa20 f404 	lsr.w	r4, r0, r4
   d66d4:	fa01 f60e 	lsl.w	r6, r1, lr
   d66d8:	ea44 0c06 	orr.w	ip, r4, r6
   d66dc:	fa02 f70e 	lsl.w	r7, r2, lr
   d66e0:	fa00 f40e 	lsl.w	r4, r0, lr
   d66e4:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d66e8:	0c22      	lsrs	r2, r4, #16
   d66ea:	fbbc f0f9 	udiv	r0, ip, r9
   d66ee:	fa1f f887 	uxth.w	r8, r7
   d66f2:	fb09 c610 	mls	r6, r9, r0, ip
   d66f6:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d66fa:	fb00 f308 	mul.w	r3, r0, r8
   d66fe:	42b3      	cmp	r3, r6
   d6700:	d909      	bls.n	d6716 <__udivmoddi4+0x6a>
   d6702:	19f6      	adds	r6, r6, r7
   d6704:	f100 32ff 	add.w	r2, r0, #4294967295
   d6708:	f080 8122 	bcs.w	d6950 <__udivmoddi4+0x2a4>
   d670c:	42b3      	cmp	r3, r6
   d670e:	f240 811f 	bls.w	d6950 <__udivmoddi4+0x2a4>
   d6712:	3802      	subs	r0, #2
   d6714:	443e      	add	r6, r7
   d6716:	1af6      	subs	r6, r6, r3
   d6718:	b2a2      	uxth	r2, r4
   d671a:	fbb6 f3f9 	udiv	r3, r6, r9
   d671e:	fb09 6613 	mls	r6, r9, r3, r6
   d6722:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d6726:	fb03 f808 	mul.w	r8, r3, r8
   d672a:	45a0      	cmp	r8, r4
   d672c:	d909      	bls.n	d6742 <__udivmoddi4+0x96>
   d672e:	19e4      	adds	r4, r4, r7
   d6730:	f103 32ff 	add.w	r2, r3, #4294967295
   d6734:	f080 810a 	bcs.w	d694c <__udivmoddi4+0x2a0>
   d6738:	45a0      	cmp	r8, r4
   d673a:	f240 8107 	bls.w	d694c <__udivmoddi4+0x2a0>
   d673e:	3b02      	subs	r3, #2
   d6740:	443c      	add	r4, r7
   d6742:	ebc8 0404 	rsb	r4, r8, r4
   d6746:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d674a:	2100      	movs	r1, #0
   d674c:	2d00      	cmp	r5, #0
   d674e:	d062      	beq.n	d6816 <__udivmoddi4+0x16a>
   d6750:	fa24 f40e 	lsr.w	r4, r4, lr
   d6754:	2300      	movs	r3, #0
   d6756:	602c      	str	r4, [r5, #0]
   d6758:	606b      	str	r3, [r5, #4]
   d675a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d675e:	428b      	cmp	r3, r1
   d6760:	d907      	bls.n	d6772 <__udivmoddi4+0xc6>
   d6762:	2d00      	cmp	r5, #0
   d6764:	d055      	beq.n	d6812 <__udivmoddi4+0x166>
   d6766:	2100      	movs	r1, #0
   d6768:	e885 0041 	stmia.w	r5, {r0, r6}
   d676c:	4608      	mov	r0, r1
   d676e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6772:	fab3 f183 	clz	r1, r3
   d6776:	2900      	cmp	r1, #0
   d6778:	f040 8090 	bne.w	d689c <__udivmoddi4+0x1f0>
   d677c:	42b3      	cmp	r3, r6
   d677e:	d302      	bcc.n	d6786 <__udivmoddi4+0xda>
   d6780:	4282      	cmp	r2, r0
   d6782:	f200 80f8 	bhi.w	d6976 <__udivmoddi4+0x2ca>
   d6786:	1a84      	subs	r4, r0, r2
   d6788:	eb66 0603 	sbc.w	r6, r6, r3
   d678c:	2001      	movs	r0, #1
   d678e:	46b4      	mov	ip, r6
   d6790:	2d00      	cmp	r5, #0
   d6792:	d040      	beq.n	d6816 <__udivmoddi4+0x16a>
   d6794:	e885 1010 	stmia.w	r5, {r4, ip}
   d6798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d679c:	b912      	cbnz	r2, d67a4 <__udivmoddi4+0xf8>
   d679e:	2701      	movs	r7, #1
   d67a0:	fbb7 f7f2 	udiv	r7, r7, r2
   d67a4:	fab7 fe87 	clz	lr, r7
   d67a8:	f1be 0f00 	cmp.w	lr, #0
   d67ac:	d135      	bne.n	d681a <__udivmoddi4+0x16e>
   d67ae:	1bf3      	subs	r3, r6, r7
   d67b0:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d67b4:	fa1f fc87 	uxth.w	ip, r7
   d67b8:	2101      	movs	r1, #1
   d67ba:	fbb3 f0f8 	udiv	r0, r3, r8
   d67be:	0c22      	lsrs	r2, r4, #16
   d67c0:	fb08 3610 	mls	r6, r8, r0, r3
   d67c4:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d67c8:	fb0c f300 	mul.w	r3, ip, r0
   d67cc:	42b3      	cmp	r3, r6
   d67ce:	d907      	bls.n	d67e0 <__udivmoddi4+0x134>
   d67d0:	19f6      	adds	r6, r6, r7
   d67d2:	f100 32ff 	add.w	r2, r0, #4294967295
   d67d6:	d202      	bcs.n	d67de <__udivmoddi4+0x132>
   d67d8:	42b3      	cmp	r3, r6
   d67da:	f200 80ce 	bhi.w	d697a <__udivmoddi4+0x2ce>
   d67de:	4610      	mov	r0, r2
   d67e0:	1af6      	subs	r6, r6, r3
   d67e2:	b2a2      	uxth	r2, r4
   d67e4:	fbb6 f3f8 	udiv	r3, r6, r8
   d67e8:	fb08 6613 	mls	r6, r8, r3, r6
   d67ec:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d67f0:	fb0c fc03 	mul.w	ip, ip, r3
   d67f4:	45a4      	cmp	ip, r4
   d67f6:	d907      	bls.n	d6808 <__udivmoddi4+0x15c>
   d67f8:	19e4      	adds	r4, r4, r7
   d67fa:	f103 32ff 	add.w	r2, r3, #4294967295
   d67fe:	d202      	bcs.n	d6806 <__udivmoddi4+0x15a>
   d6800:	45a4      	cmp	ip, r4
   d6802:	f200 80b5 	bhi.w	d6970 <__udivmoddi4+0x2c4>
   d6806:	4613      	mov	r3, r2
   d6808:	ebcc 0404 	rsb	r4, ip, r4
   d680c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d6810:	e79c      	b.n	d674c <__udivmoddi4+0xa0>
   d6812:	4629      	mov	r1, r5
   d6814:	4628      	mov	r0, r5
   d6816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d681a:	f1ce 0120 	rsb	r1, lr, #32
   d681e:	fa06 f30e 	lsl.w	r3, r6, lr
   d6822:	fa07 f70e 	lsl.w	r7, r7, lr
   d6826:	fa20 f901 	lsr.w	r9, r0, r1
   d682a:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d682e:	40ce      	lsrs	r6, r1
   d6830:	ea49 0903 	orr.w	r9, r9, r3
   d6834:	fbb6 faf8 	udiv	sl, r6, r8
   d6838:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d683c:	fb08 661a 	mls	r6, r8, sl, r6
   d6840:	fa1f fc87 	uxth.w	ip, r7
   d6844:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d6848:	fb0a f20c 	mul.w	r2, sl, ip
   d684c:	429a      	cmp	r2, r3
   d684e:	fa00 f40e 	lsl.w	r4, r0, lr
   d6852:	d90a      	bls.n	d686a <__udivmoddi4+0x1be>
   d6854:	19db      	adds	r3, r3, r7
   d6856:	f10a 31ff 	add.w	r1, sl, #4294967295
   d685a:	f080 8087 	bcs.w	d696c <__udivmoddi4+0x2c0>
   d685e:	429a      	cmp	r2, r3
   d6860:	f240 8084 	bls.w	d696c <__udivmoddi4+0x2c0>
   d6864:	f1aa 0a02 	sub.w	sl, sl, #2
   d6868:	443b      	add	r3, r7
   d686a:	1a9b      	subs	r3, r3, r2
   d686c:	fa1f f989 	uxth.w	r9, r9
   d6870:	fbb3 f1f8 	udiv	r1, r3, r8
   d6874:	fb08 3311 	mls	r3, r8, r1, r3
   d6878:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d687c:	fb01 f60c 	mul.w	r6, r1, ip
   d6880:	429e      	cmp	r6, r3
   d6882:	d907      	bls.n	d6894 <__udivmoddi4+0x1e8>
   d6884:	19db      	adds	r3, r3, r7
   d6886:	f101 32ff 	add.w	r2, r1, #4294967295
   d688a:	d26b      	bcs.n	d6964 <__udivmoddi4+0x2b8>
   d688c:	429e      	cmp	r6, r3
   d688e:	d969      	bls.n	d6964 <__udivmoddi4+0x2b8>
   d6890:	3902      	subs	r1, #2
   d6892:	443b      	add	r3, r7
   d6894:	1b9b      	subs	r3, r3, r6
   d6896:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d689a:	e78e      	b.n	d67ba <__udivmoddi4+0x10e>
   d689c:	f1c1 0e20 	rsb	lr, r1, #32
   d68a0:	fa22 f40e 	lsr.w	r4, r2, lr
   d68a4:	408b      	lsls	r3, r1
   d68a6:	4323      	orrs	r3, r4
   d68a8:	fa20 f70e 	lsr.w	r7, r0, lr
   d68ac:	fa06 f401 	lsl.w	r4, r6, r1
   d68b0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d68b4:	fa26 f60e 	lsr.w	r6, r6, lr
   d68b8:	433c      	orrs	r4, r7
   d68ba:	fbb6 f9fc 	udiv	r9, r6, ip
   d68be:	0c27      	lsrs	r7, r4, #16
   d68c0:	fb0c 6619 	mls	r6, ip, r9, r6
   d68c4:	fa1f f883 	uxth.w	r8, r3
   d68c8:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d68cc:	fb09 f708 	mul.w	r7, r9, r8
   d68d0:	42b7      	cmp	r7, r6
   d68d2:	fa02 f201 	lsl.w	r2, r2, r1
   d68d6:	fa00 fa01 	lsl.w	sl, r0, r1
   d68da:	d908      	bls.n	d68ee <__udivmoddi4+0x242>
   d68dc:	18f6      	adds	r6, r6, r3
   d68de:	f109 30ff 	add.w	r0, r9, #4294967295
   d68e2:	d241      	bcs.n	d6968 <__udivmoddi4+0x2bc>
   d68e4:	42b7      	cmp	r7, r6
   d68e6:	d93f      	bls.n	d6968 <__udivmoddi4+0x2bc>
   d68e8:	f1a9 0902 	sub.w	r9, r9, #2
   d68ec:	441e      	add	r6, r3
   d68ee:	1bf6      	subs	r6, r6, r7
   d68f0:	b2a0      	uxth	r0, r4
   d68f2:	fbb6 f4fc 	udiv	r4, r6, ip
   d68f6:	fb0c 6614 	mls	r6, ip, r4, r6
   d68fa:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d68fe:	fb04 f808 	mul.w	r8, r4, r8
   d6902:	45b8      	cmp	r8, r7
   d6904:	d907      	bls.n	d6916 <__udivmoddi4+0x26a>
   d6906:	18ff      	adds	r7, r7, r3
   d6908:	f104 30ff 	add.w	r0, r4, #4294967295
   d690c:	d228      	bcs.n	d6960 <__udivmoddi4+0x2b4>
   d690e:	45b8      	cmp	r8, r7
   d6910:	d926      	bls.n	d6960 <__udivmoddi4+0x2b4>
   d6912:	3c02      	subs	r4, #2
   d6914:	441f      	add	r7, r3
   d6916:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d691a:	ebc8 0707 	rsb	r7, r8, r7
   d691e:	fba0 8902 	umull	r8, r9, r0, r2
   d6922:	454f      	cmp	r7, r9
   d6924:	4644      	mov	r4, r8
   d6926:	464e      	mov	r6, r9
   d6928:	d314      	bcc.n	d6954 <__udivmoddi4+0x2a8>
   d692a:	d029      	beq.n	d6980 <__udivmoddi4+0x2d4>
   d692c:	b365      	cbz	r5, d6988 <__udivmoddi4+0x2dc>
   d692e:	ebba 0304 	subs.w	r3, sl, r4
   d6932:	eb67 0706 	sbc.w	r7, r7, r6
   d6936:	fa07 fe0e 	lsl.w	lr, r7, lr
   d693a:	40cb      	lsrs	r3, r1
   d693c:	40cf      	lsrs	r7, r1
   d693e:	ea4e 0303 	orr.w	r3, lr, r3
   d6942:	e885 0088 	stmia.w	r5, {r3, r7}
   d6946:	2100      	movs	r1, #0
   d6948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d694c:	4613      	mov	r3, r2
   d694e:	e6f8      	b.n	d6742 <__udivmoddi4+0x96>
   d6950:	4610      	mov	r0, r2
   d6952:	e6e0      	b.n	d6716 <__udivmoddi4+0x6a>
   d6954:	ebb8 0402 	subs.w	r4, r8, r2
   d6958:	eb69 0603 	sbc.w	r6, r9, r3
   d695c:	3801      	subs	r0, #1
   d695e:	e7e5      	b.n	d692c <__udivmoddi4+0x280>
   d6960:	4604      	mov	r4, r0
   d6962:	e7d8      	b.n	d6916 <__udivmoddi4+0x26a>
   d6964:	4611      	mov	r1, r2
   d6966:	e795      	b.n	d6894 <__udivmoddi4+0x1e8>
   d6968:	4681      	mov	r9, r0
   d696a:	e7c0      	b.n	d68ee <__udivmoddi4+0x242>
   d696c:	468a      	mov	sl, r1
   d696e:	e77c      	b.n	d686a <__udivmoddi4+0x1be>
   d6970:	3b02      	subs	r3, #2
   d6972:	443c      	add	r4, r7
   d6974:	e748      	b.n	d6808 <__udivmoddi4+0x15c>
   d6976:	4608      	mov	r0, r1
   d6978:	e70a      	b.n	d6790 <__udivmoddi4+0xe4>
   d697a:	3802      	subs	r0, #2
   d697c:	443e      	add	r6, r7
   d697e:	e72f      	b.n	d67e0 <__udivmoddi4+0x134>
   d6980:	45c2      	cmp	sl, r8
   d6982:	d3e7      	bcc.n	d6954 <__udivmoddi4+0x2a8>
   d6984:	463e      	mov	r6, r7
   d6986:	e7d1      	b.n	d692c <__udivmoddi4+0x280>
   d6988:	4629      	mov	r1, r5
   d698a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d698e:	bf00      	nop

000d6990 <__aeabi_idiv0>:
   d6990:	4770      	bx	lr
   d6992:	bf00      	nop

000d6994 <__cxa_atexit>:
   d6994:	b510      	push	{r4, lr}
   d6996:	4c05      	ldr	r4, [pc, #20]	; (d69ac <__cxa_atexit+0x18>)
   d6998:	4613      	mov	r3, r2
   d699a:	b12c      	cbz	r4, d69a8 <__cxa_atexit+0x14>
   d699c:	460a      	mov	r2, r1
   d699e:	4601      	mov	r1, r0
   d69a0:	2002      	movs	r0, #2
   d69a2:	f3af 8000 	nop.w
   d69a6:	bd10      	pop	{r4, pc}
   d69a8:	4620      	mov	r0, r4
   d69aa:	bd10      	pop	{r4, pc}
   d69ac:	00000000 	.word	0x00000000

000d69b0 <memcpy>:
   d69b0:	b510      	push	{r4, lr}
   d69b2:	1e43      	subs	r3, r0, #1
   d69b4:	440a      	add	r2, r1
   d69b6:	4291      	cmp	r1, r2
   d69b8:	d004      	beq.n	d69c4 <memcpy+0x14>
   d69ba:	f811 4b01 	ldrb.w	r4, [r1], #1
   d69be:	f803 4f01 	strb.w	r4, [r3, #1]!
   d69c2:	e7f8      	b.n	d69b6 <memcpy+0x6>
   d69c4:	bd10      	pop	{r4, pc}

000d69c6 <memset>:
   d69c6:	4402      	add	r2, r0
   d69c8:	4603      	mov	r3, r0
   d69ca:	4293      	cmp	r3, r2
   d69cc:	d002      	beq.n	d69d4 <memset+0xe>
   d69ce:	f803 1b01 	strb.w	r1, [r3], #1
   d69d2:	e7fa      	b.n	d69ca <memset+0x4>
   d69d4:	4770      	bx	lr
	...

000d69d8 <srand>:
   d69d8:	b538      	push	{r3, r4, r5, lr}
   d69da:	4b12      	ldr	r3, [pc, #72]	; (d6a24 <srand+0x4c>)
   d69dc:	681c      	ldr	r4, [r3, #0]
   d69de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d69e0:	4605      	mov	r5, r0
   d69e2:	b9d3      	cbnz	r3, d6a1a <srand+0x42>
   d69e4:	2018      	movs	r0, #24
   d69e6:	f7fd fe11 	bl	d460c <malloc>
   d69ea:	f243 330e 	movw	r3, #13070	; 0x330e
   d69ee:	63a0      	str	r0, [r4, #56]	; 0x38
   d69f0:	8003      	strh	r3, [r0, #0]
   d69f2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d69f6:	8043      	strh	r3, [r0, #2]
   d69f8:	f241 2334 	movw	r3, #4660	; 0x1234
   d69fc:	8083      	strh	r3, [r0, #4]
   d69fe:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6a02:	80c3      	strh	r3, [r0, #6]
   d6a04:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6a08:	8103      	strh	r3, [r0, #8]
   d6a0a:	2305      	movs	r3, #5
   d6a0c:	8143      	strh	r3, [r0, #10]
   d6a0e:	230b      	movs	r3, #11
   d6a10:	8183      	strh	r3, [r0, #12]
   d6a12:	2201      	movs	r2, #1
   d6a14:	2300      	movs	r3, #0
   d6a16:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6a1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6a1c:	2200      	movs	r2, #0
   d6a1e:	611d      	str	r5, [r3, #16]
   d6a20:	615a      	str	r2, [r3, #20]
   d6a22:	bd38      	pop	{r3, r4, r5, pc}
   d6a24:	2003e3bc 	.word	0x2003e3bc

000d6a28 <strdup>:
   d6a28:	4b02      	ldr	r3, [pc, #8]	; (d6a34 <strdup+0xc>)
   d6a2a:	4601      	mov	r1, r0
   d6a2c:	6818      	ldr	r0, [r3, #0]
   d6a2e:	f000 b803 	b.w	d6a38 <_strdup_r>
   d6a32:	bf00      	nop
   d6a34:	2003e3bc 	.word	0x2003e3bc

000d6a38 <_strdup_r>:
   d6a38:	b570      	push	{r4, r5, r6, lr}
   d6a3a:	4606      	mov	r6, r0
   d6a3c:	4608      	mov	r0, r1
   d6a3e:	460c      	mov	r4, r1
   d6a40:	f000 f80d 	bl	d6a5e <strlen>
   d6a44:	1c45      	adds	r5, r0, #1
   d6a46:	4629      	mov	r1, r5
   d6a48:	4630      	mov	r0, r6
   d6a4a:	f7fd fe07 	bl	d465c <_malloc_r>
   d6a4e:	4606      	mov	r6, r0
   d6a50:	b118      	cbz	r0, d6a5a <_strdup_r+0x22>
   d6a52:	462a      	mov	r2, r5
   d6a54:	4621      	mov	r1, r4
   d6a56:	f7ff ffab 	bl	d69b0 <memcpy>
   d6a5a:	4630      	mov	r0, r6
   d6a5c:	bd70      	pop	{r4, r5, r6, pc}

000d6a5e <strlen>:
   d6a5e:	4603      	mov	r3, r0
   d6a60:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6a64:	2a00      	cmp	r2, #0
   d6a66:	d1fb      	bne.n	d6a60 <strlen+0x2>
   d6a68:	1a18      	subs	r0, r3, r0
   d6a6a:	3801      	subs	r0, #1
   d6a6c:	4770      	bx	lr

000d6a6e <link_code_end>:
	...

000d6a70 <dynalib_user>:
   d6a70:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d6a80:	0000 0000 6554 706d 7265 7461 7275 2065     ....Temperature 
   d6a90:	6e69 4320 6c65 6973 7375 203a 3025 322e     in Celsius: %0.2
   d6aa0:	2066 000a 6554 706d 7265 7461 7275 2065     f ..Temperature 
   d6ab0:	6e69 4620 6861 6572 686e 6965 3a74 2520     in Fahrenheit: %
   d6ac0:	2e30 6632 0a20 5000 6572 7373 7275 2065     0.2f ..Pressure 
   d6ad0:	6e69 7020 6973 203a 3025 322e 2c66 5220     in psi: %0.2f, R
   d6ae0:	7761 5220 6165 6964 676e 203a 6925 000a     aw Reading: %i..
   d6af0:	7250 7365 7573 6572 0000 0000               Pressure....

000d6afc <_ZTVN5spark13EthernetClassE>:
	...
   d6b04:	46cb 000d 46c1 000d 46b7 000d 46ad 000d     .F...F...F...F..
   d6b14:	46a1 000d 4695 000d 4689 000d 4681 000d     .F...F...F...F..
   d6b24:	4677 000d 466d 000d 5879 000d 6162 6475     wF..mF..yX..baud
   d6b34:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d6b44:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d6b54:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d6b64:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d6b74:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d6b84:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d6b94:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d6ba4:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d6bb4:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d6bc4:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d6bd4:	0d00 000a 0066 6e6c 6600 006e 6f63 6564     ....f.ln.fn.code
   d6be4:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   d6bf4:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d6c04:	726f 7000 6e61 6369 6100 6c6c 5a00 2500     or.panic.all.Z.%
   d6c14:	302b 6433 253a 3230 0075 5925 252d 2d6d     +03d:%02u.%Y-%m-
   d6c24:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
   d6c34:	7463 6d69 0065 0000                         ctime...

000d6c3c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6c44:	4c91 000d 4c97 000d 4cdb 000d 4ca5 000d     .L...L...L...L..
   d6c54:	4c93 000d                                   .L..

000d6c58 <_ZTV9IPAddress>:
	...
   d6c60:	5229 000d 5219 000d 521b 000d               )R...R...R..

000d6c6c <_ZTV9USBSerial>:
	...
   d6c74:	5301 000d 5351 000d 535f 000d 49dd 000d     .S..QS.._S...I..
   d6c84:	533d 000d 5303 000d 5319 000d 534b 000d     =S...S...S..KS..
   d6c94:	532f 000d 52fd 000d                         /S...R..

000d6c9c <_ZTV11USARTSerial>:
	...
   d6ca4:	540d 000d 545d 000d 546b 000d 49dd 000d     .T..]T..kT...I..
   d6cb4:	5421 000d 5443 000d 542f 000d 5457 000d     !T..CT../T..WT..
   d6cc4:	540f 000d 5413 000d                         .T...T..

000d6ccc <_ZTV7TwoWire>:
	...
   d6cd4:	5531 000d 557b 000d 5553 000d 5533 000d     1U..{U..SU..3U..
   d6ce4:	555b 000d 5563 000d 556b 000d 5573 000d     [U..cU..kU..sU..

000d6cf4 <_ZTVN5spark9MeshClassE>:
	...
   d6cfc:	5679 000d 566f 000d 5665 000d 565b 000d     yV..oV..eV..[V..
   d6d0c:	564f 000d 5643 000d 5637 000d 562f 000d     OV..CV..7V../V..
   d6d1c:	5625 000d 561b 000d 5879 000d               %V...V..yX..

000d6d28 <_ZTVN5spark9WiFiClassE>:
	...
   d6d30:	57f3 000d 57e9 000d 57df 000d 5795 000d     .W...W...W...W..
   d6d40:	57d3 000d 57c7 000d 57bb 000d 57b3 000d     .W...W...W...W..
   d6d50:	57a9 000d 579f 000d 5879 000d               .W...W..yX..

000d6d5c <_ZTVN5spark12NetworkClassE>:
	...
   d6d64:	5811 000d 581b 000d 5825 000d 582f 000d     .X...X..%X../X..
   d6d74:	5839 000d 5845 000d 5851 000d 585d 000d     9X..EX..QX..]X..
   d6d84:	5865 000d 586f 000d 5879 000d               eX..oX..yX..

000d6d90 <_ZSt7nothrow>:
   d6d90:	0000 0000                                   ....

000d6d94 <__sf_fake_stdin>:
	...

000d6db4 <__sf_fake_stdout>:
	...

000d6dd4 <__sf_fake_stderr>:
	...
   d6df4:	0043                                        C.

000d6df6 <link_const_variable_data_end>:
	...

000d6df8 <link_constructors_location>:
   d6df8:	000d42b5 	.word	0x000d42b5
   d6dfc:	000d46d5 	.word	0x000d46d5
   d6e00:	000d4709 	.word	0x000d4709
   d6e04:	000d49b5 	.word	0x000d49b5
   d6e08:	000d4afd 	.word	0x000d4afd
   d6e0c:	000d4b0d 	.word	0x000d4b0d
   d6e10:	000d4b65 	.word	0x000d4b65
   d6e14:	000d5745 	.word	0x000d5745
   d6e18:	000d57fd 	.word	0x000d57fd
   d6e1c:	000d5945 	.word	0x000d5945
   d6e20:	000d5a21 	.word	0x000d5a21
   d6e24:	000d5aa5 	.word	0x000d5aa5
   d6e28:	000d5b69 	.word	0x000d5b69
   d6e2c:	000d5c2d 	.word	0x000d5c2d
