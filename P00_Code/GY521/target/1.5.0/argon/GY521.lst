
c:/Users/IoTPa/Documents/Brian/Particle/GY521/target/1.5.0/argon/GY521.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000024f0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6510  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e34c  000d6514  0001e34c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000043c  2003e3b4  2003e3b4  0002e3b4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d657c  000d657c  0002657c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d65a4  000d65a4  000265a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000b052b  00000000  00000000  000265a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000d686  00000000  00000000  000d6ad3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00018251  00000000  00000000  000e4159  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001f08  00000000  00000000  000fc3aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003b78  00000000  00000000  000fe2b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00030ee8  00000000  00000000  00101e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001fc4c  00000000  00000000  00132d12  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00101081  00000000  00000000  0015295e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000bb14  00000000  00000000  002539e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 f861 	bl	d60f8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 f866 	bl	d610e <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e34c 	.word	0x2003e34c
   d404c:	000d6514 	.word	0x000d6514
   d4050:	2003e3b4 	.word	0x2003e3b4
   d4054:	2003e3b4 	.word	0x2003e3b4
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f000 fdd3 	bl	d4c08 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d6508 	.word	0x000d6508
   d4084:	000d64d0 	.word	0x000d64d0

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b826 	b.w	d40d8 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f847 	bl	d4120 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f000 bd79 	b.w	d4b8c <_post_loop>

000d409a <_ZdlPv>:
   d409a:	f000 bb35 	b.w	d4708 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bb33 	b.w	d4708 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d40b2:	6803      	ldr	r3, [r0, #0]
   d40b4:	b2c9      	uxtb	r1, r1
   d40b6:	689b      	ldr	r3, [r3, #8]
   d40b8:	4718      	bx	r3
	...

000d40bc <_Z20convert_int16_to_strs>:
int16_t accelerometer_x, accelerometer_y, accelerometer_z; // variables for accelerometer raw data
float Ax,Ay,Az;
int16_t gyro_x, gyro_y, gyro_z; // variables for gyro raw data
int16_t temperature; // variables for temperature data
char tmp_str[7]; // temporary variable used in convert function
char* convert_int16_to_str(int16_t i) { // converts int16 to string. Moreover, resulting strings will have the same length in the debug monitor.
   d40bc:	b510      	push	{r4, lr}
  sprintf(tmp_str, "%6d", i);
   d40be:	4c04      	ldr	r4, [pc, #16]	; (d40d0 <_Z20convert_int16_to_strs+0x14>)
   d40c0:	4904      	ldr	r1, [pc, #16]	; (d40d4 <_Z20convert_int16_to_strs+0x18>)
   d40c2:	4602      	mov	r2, r0
   d40c4:	4620      	mov	r0, r4
   d40c6:	f000 fb27 	bl	d4718 <sprintf>
  return tmp_str;
}
   d40ca:	4620      	mov	r0, r4
   d40cc:	bd10      	pop	{r4, pc}
   d40ce:	bf00      	nop
   d40d0:	2003e3b8 	.word	0x2003e3b8
   d40d4:	000d6194 	.word	0x000d6194

000d40d8 <setup>:
void setup() {
   d40d8:	b508      	push	{r3, lr}
  Serial.begin(9600);
   d40da:	f000 fe95 	bl	d4e08 <_Z16_fetch_usbserialv>
   d40de:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40e2:	f000 fe85 	bl	d4df0 <_ZN9USBSerial5beginEl>
  Wire.begin();
   d40e6:	f001 f969 	bl	d53bc <_Z19__fetch_global_Wirev>
   d40ea:	f000 ff6f 	bl	d4fcc <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(MPU_ADDR); // Begins a transmission to the I2C slave (GY-521 board)
   d40ee:	f001 f965 	bl	d53bc <_Z19__fetch_global_Wirev>
   d40f2:	2168      	movs	r1, #104	; 0x68
   d40f4:	f000 ffa2 	bl	d503c <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x6B); // PWR_MGMT_1 register
   d40f8:	f001 f960 	bl	d53bc <_Z19__fetch_global_Wirev>
   d40fc:	216b      	movs	r1, #107	; 0x6b
   d40fe:	f7ff ffd8 	bl	d40b2 <_ZN7TwoWire5writeEi>
  Wire.write(0); // set to zero (wakes up the MPU-6050)
   d4102:	f001 f95b 	bl	d53bc <_Z19__fetch_global_Wirev>
   d4106:	2100      	movs	r1, #0
   d4108:	f7ff ffd3 	bl	d40b2 <_ZN7TwoWire5writeEi>
  Wire.endTransmission(true);
   d410c:	f001 f956 	bl	d53bc <_Z19__fetch_global_Wirev>
   d4110:	2101      	movs	r1, #1
}
   d4112:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.begin(9600);
  Wire.begin();
  Wire.beginTransmission(MPU_ADDR); // Begins a transmission to the I2C slave (GY-521 board)
  Wire.write(0x6B); // PWR_MGMT_1 register
  Wire.write(0); // set to zero (wakes up the MPU-6050)
  Wire.endTransmission(true);
   d4116:	f000 bf94 	b.w	d5042 <_ZN7TwoWire15endTransmissionEh>
   d411a:	0000      	movs	r0, r0
   d411c:	0000      	movs	r0, r0
	...

000d4120 <loop>:
}
void loop() {
   d4120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4124:	b087      	sub	sp, #28
  Wire.beginTransmission(MPU_ADDR);
   d4126:	f001 f949 	bl	d53bc <_Z19__fetch_global_Wirev>
   d412a:	2168      	movs	r1, #104	; 0x68
   d412c:	f000 ff86 	bl	d503c <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x3B); // starting with register 0x3B (ACCEL_XOUT_H) [MPU-6000 and MPU-6050 Register Map and Descriptions Revision 4.2, p.40]
   d4130:	f001 f944 	bl	d53bc <_Z19__fetch_global_Wirev>
   d4134:	213b      	movs	r1, #59	; 0x3b
   d4136:	f7ff ffbc 	bl	d40b2 <_ZN7TwoWire5writeEi>
  Wire.endTransmission(false); // the parameter indicates that the Arduino will send a restart. As a result, the connection is kept active.
   d413a:	f001 f93f 	bl	d53bc <_Z19__fetch_global_Wirev>
   d413e:	2100      	movs	r1, #0
   d4140:	f000 ff7f 	bl	d5042 <_ZN7TwoWire15endTransmissionEh>
  Wire.requestFrom(MPU_ADDR, 7*2, true); // request a total of 7*2=14 registers
   d4144:	f001 f93a 	bl	d53bc <_Z19__fetch_global_Wirev>
   d4148:	220e      	movs	r2, #14
   d414a:	2168      	movs	r1, #104	; 0x68
   d414c:	2301      	movs	r3, #1
   d414e:	f000 ff5f 	bl	d5010 <_ZN7TwoWire11requestFromEhjh>
  
  // "Wire.read()<<8 | Wire.read();" means two registers are read and stored in the same variable
  accelerometer_x = Wire.read()<<8 | Wire.read(); // reading registers: 0x3B (ACCEL_XOUT_H) and 0x3C (ACCEL_XOUT_L)
   d4152:	f001 f933 	bl	d53bc <_Z19__fetch_global_Wirev>
   d4156:	6803      	ldr	r3, [r0, #0]
   d4158:	4e8b      	ldr	r6, [pc, #556]	; (d4388 <loop+0x268>)
   d415a:	695b      	ldr	r3, [r3, #20]
  accelerometer_y = Wire.read()<<8 | Wire.read(); // reading registers: 0x3D (ACCEL_YOUT_H) and 0x3E (ACCEL_YOUT_L)
   d415c:	4d8b      	ldr	r5, [pc, #556]	; (d438c <loop+0x26c>)
  accelerometer_z = Wire.read()<<8 | Wire.read(); // reading registers: 0x3F (ACCEL_ZOUT_H) and 0x40 (ACCEL_ZOUT_L)

  Ax = accelerometer_x/16384.0*9.8067;
   d415e:	4f8c      	ldr	r7, [pc, #560]	; (d4390 <loop+0x270>)
  Ay = accelerometer_y/16384.0*9.8067;
   d4160:	f8df 8258 	ldr.w	r8, [pc, #600]	; d43bc <loop+0x29c>
  Az = accelerometer_z/16384.0*9.8067;
   d4164:	f8df 9258 	ldr.w	r9, [pc, #600]	; d43c0 <loop+0x2a0>

  temperature = Wire.read()<<8 | Wire.read(); // reading registers: 0x41 (TEMP_OUT_H) and 0x42 (TEMP_OUT_L)
   d4168:	f8df b258 	ldr.w	fp, [pc, #600]	; d43c4 <loop+0x2a4>
  gyro_x = Wire.read()<<8 | Wire.read(); // reading registers: 0x43 (GYRO_XOUT_H) and 0x44 (GYRO_XOUT_L)
   d416c:	f8df a258 	ldr.w	sl, [pc, #600]	; d43c8 <loop+0x2a8>
  Wire.write(0x3B); // starting with register 0x3B (ACCEL_XOUT_H) [MPU-6000 and MPU-6050 Register Map and Descriptions Revision 4.2, p.40]
  Wire.endTransmission(false); // the parameter indicates that the Arduino will send a restart. As a result, the connection is kept active.
  Wire.requestFrom(MPU_ADDR, 7*2, true); // request a total of 7*2=14 registers
  
  // "Wire.read()<<8 | Wire.read();" means two registers are read and stored in the same variable
  accelerometer_x = Wire.read()<<8 | Wire.read(); // reading registers: 0x3B (ACCEL_XOUT_H) and 0x3C (ACCEL_XOUT_L)
   d4170:	4798      	blx	r3
   d4172:	4604      	mov	r4, r0
   d4174:	f001 f922 	bl	d53bc <_Z19__fetch_global_Wirev>
   d4178:	6803      	ldr	r3, [r0, #0]
   d417a:	695b      	ldr	r3, [r3, #20]
   d417c:	4798      	blx	r3
   d417e:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d4182:	8030      	strh	r0, [r6, #0]
  accelerometer_y = Wire.read()<<8 | Wire.read(); // reading registers: 0x3D (ACCEL_YOUT_H) and 0x3E (ACCEL_YOUT_L)
   d4184:	f001 f91a 	bl	d53bc <_Z19__fetch_global_Wirev>
   d4188:	6803      	ldr	r3, [r0, #0]
   d418a:	695b      	ldr	r3, [r3, #20]
   d418c:	4798      	blx	r3
   d418e:	4604      	mov	r4, r0
   d4190:	f001 f914 	bl	d53bc <_Z19__fetch_global_Wirev>
   d4194:	6803      	ldr	r3, [r0, #0]
   d4196:	695b      	ldr	r3, [r3, #20]
   d4198:	4798      	blx	r3
   d419a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d419e:	8028      	strh	r0, [r5, #0]
  accelerometer_z = Wire.read()<<8 | Wire.read(); // reading registers: 0x3F (ACCEL_ZOUT_H) and 0x40 (ACCEL_ZOUT_L)
   d41a0:	f001 f90c 	bl	d53bc <_Z19__fetch_global_Wirev>
   d41a4:	6803      	ldr	r3, [r0, #0]
   d41a6:	695b      	ldr	r3, [r3, #20]
   d41a8:	4798      	blx	r3
   d41aa:	4604      	mov	r4, r0
   d41ac:	f001 f906 	bl	d53bc <_Z19__fetch_global_Wirev>
   d41b0:	6803      	ldr	r3, [r0, #0]
   d41b2:	695b      	ldr	r3, [r3, #20]
   d41b4:	4798      	blx	r3
   d41b6:	4b77      	ldr	r3, [pc, #476]	; (d4394 <loop+0x274>)
   d41b8:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d41bc:	b204      	sxth	r4, r0
   d41be:	801c      	strh	r4, [r3, #0]

  Ax = accelerometer_x/16384.0*9.8067;
   d41c0:	f9b6 0000 	ldrsh.w	r0, [r6]
  Ay = accelerometer_y/16384.0*9.8067;
  Az = accelerometer_z/16384.0*9.8067;

  temperature = Wire.read()<<8 | Wire.read(); // reading registers: 0x41 (TEMP_OUT_H) and 0x42 (TEMP_OUT_L)
  gyro_x = Wire.read()<<8 | Wire.read(); // reading registers: 0x43 (GYRO_XOUT_H) and 0x44 (GYRO_XOUT_L)
  gyro_y = Wire.read()<<8 | Wire.read(); // reading registers: 0x45 (GYRO_YOUT_H) and 0x46 (GYRO_YOUT_L)
   d41c4:	4e74      	ldr	r6, [pc, #464]	; (d4398 <loop+0x278>)
  // "Wire.read()<<8 | Wire.read();" means two registers are read and stored in the same variable
  accelerometer_x = Wire.read()<<8 | Wire.read(); // reading registers: 0x3B (ACCEL_XOUT_H) and 0x3C (ACCEL_XOUT_L)
  accelerometer_y = Wire.read()<<8 | Wire.read(); // reading registers: 0x3D (ACCEL_YOUT_H) and 0x3E (ACCEL_YOUT_L)
  accelerometer_z = Wire.read()<<8 | Wire.read(); // reading registers: 0x3F (ACCEL_ZOUT_H) and 0x40 (ACCEL_ZOUT_L)

  Ax = accelerometer_x/16384.0*9.8067;
   d41c6:	f001 fbdb 	bl	d5980 <__aeabi_i2d>
   d41ca:	2200      	movs	r2, #0
   d41cc:	4b73      	ldr	r3, [pc, #460]	; (d439c <loop+0x27c>)
   d41ce:	f001 fc3d 	bl	d5a4c <__aeabi_dmul>
   d41d2:	a369      	add	r3, pc, #420	; (adr r3, d4378 <loop+0x258>)
   d41d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41d8:	f001 fc38 	bl	d5a4c <__aeabi_dmul>
   d41dc:	f001 ff2e 	bl	d603c <__aeabi_d2f>
   d41e0:	6038      	str	r0, [r7, #0]
  Ay = accelerometer_y/16384.0*9.8067;
   d41e2:	f9b5 0000 	ldrsh.w	r0, [r5]
  Az = accelerometer_z/16384.0*9.8067;

  temperature = Wire.read()<<8 | Wire.read(); // reading registers: 0x41 (TEMP_OUT_H) and 0x42 (TEMP_OUT_L)
  gyro_x = Wire.read()<<8 | Wire.read(); // reading registers: 0x43 (GYRO_XOUT_H) and 0x44 (GYRO_XOUT_L)
  gyro_y = Wire.read()<<8 | Wire.read(); // reading registers: 0x45 (GYRO_YOUT_H) and 0x46 (GYRO_YOUT_L)
  gyro_z = Wire.read()<<8 | Wire.read(); // reading registers: 0x47 (GYRO_ZOUT_H) and 0x48 (GYRO_ZOUT_L)
   d41e6:	4d6e      	ldr	r5, [pc, #440]	; (d43a0 <loop+0x280>)
  accelerometer_x = Wire.read()<<8 | Wire.read(); // reading registers: 0x3B (ACCEL_XOUT_H) and 0x3C (ACCEL_XOUT_L)
  accelerometer_y = Wire.read()<<8 | Wire.read(); // reading registers: 0x3D (ACCEL_YOUT_H) and 0x3E (ACCEL_YOUT_L)
  accelerometer_z = Wire.read()<<8 | Wire.read(); // reading registers: 0x3F (ACCEL_ZOUT_H) and 0x40 (ACCEL_ZOUT_L)

  Ax = accelerometer_x/16384.0*9.8067;
  Ay = accelerometer_y/16384.0*9.8067;
   d41e8:	f001 fbca 	bl	d5980 <__aeabi_i2d>
   d41ec:	2200      	movs	r2, #0
   d41ee:	4b6b      	ldr	r3, [pc, #428]	; (d439c <loop+0x27c>)
   d41f0:	f001 fc2c 	bl	d5a4c <__aeabi_dmul>
   d41f4:	a360      	add	r3, pc, #384	; (adr r3, d4378 <loop+0x258>)
   d41f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41fa:	f001 fc27 	bl	d5a4c <__aeabi_dmul>
   d41fe:	f001 ff1d 	bl	d603c <__aeabi_d2f>
   d4202:	f8c8 0000 	str.w	r0, [r8]
  Az = accelerometer_z/16384.0*9.8067;
   d4206:	4620      	mov	r0, r4
   d4208:	f001 fbba 	bl	d5980 <__aeabi_i2d>
   d420c:	2200      	movs	r2, #0
   d420e:	4b63      	ldr	r3, [pc, #396]	; (d439c <loop+0x27c>)
   d4210:	f001 fc1c 	bl	d5a4c <__aeabi_dmul>
   d4214:	a358      	add	r3, pc, #352	; (adr r3, d4378 <loop+0x258>)
   d4216:	e9d3 2300 	ldrd	r2, r3, [r3]
   d421a:	f001 fc17 	bl	d5a4c <__aeabi_dmul>
   d421e:	f001 ff0d 	bl	d603c <__aeabi_d2f>
   d4222:	f8c9 0000 	str.w	r0, [r9]

  temperature = Wire.read()<<8 | Wire.read(); // reading registers: 0x41 (TEMP_OUT_H) and 0x42 (TEMP_OUT_L)
   d4226:	f001 f8c9 	bl	d53bc <_Z19__fetch_global_Wirev>
   d422a:	6803      	ldr	r3, [r0, #0]
   d422c:	695b      	ldr	r3, [r3, #20]
   d422e:	4798      	blx	r3
   d4230:	4604      	mov	r4, r0
   d4232:	f001 f8c3 	bl	d53bc <_Z19__fetch_global_Wirev>
   d4236:	6803      	ldr	r3, [r0, #0]
   d4238:	695b      	ldr	r3, [r3, #20]
   d423a:	4798      	blx	r3
   d423c:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d4240:	f8ab 0000 	strh.w	r0, [fp]
  gyro_x = Wire.read()<<8 | Wire.read(); // reading registers: 0x43 (GYRO_XOUT_H) and 0x44 (GYRO_XOUT_L)
   d4244:	f001 f8ba 	bl	d53bc <_Z19__fetch_global_Wirev>
   d4248:	6803      	ldr	r3, [r0, #0]
   d424a:	695b      	ldr	r3, [r3, #20]
   d424c:	4798      	blx	r3
   d424e:	4604      	mov	r4, r0
   d4250:	f001 f8b4 	bl	d53bc <_Z19__fetch_global_Wirev>
   d4254:	6803      	ldr	r3, [r0, #0]
   d4256:	695b      	ldr	r3, [r3, #20]
   d4258:	4798      	blx	r3
   d425a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d425e:	f8aa 0000 	strh.w	r0, [sl]
  gyro_y = Wire.read()<<8 | Wire.read(); // reading registers: 0x45 (GYRO_YOUT_H) and 0x46 (GYRO_YOUT_L)
   d4262:	f001 f8ab 	bl	d53bc <_Z19__fetch_global_Wirev>
   d4266:	6803      	ldr	r3, [r0, #0]
   d4268:	695b      	ldr	r3, [r3, #20]
   d426a:	4798      	blx	r3
   d426c:	4604      	mov	r4, r0
   d426e:	f001 f8a5 	bl	d53bc <_Z19__fetch_global_Wirev>
   d4272:	6803      	ldr	r3, [r0, #0]
   d4274:	695b      	ldr	r3, [r3, #20]
   d4276:	4798      	blx	r3
   d4278:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d427c:	8030      	strh	r0, [r6, #0]
  gyro_z = Wire.read()<<8 | Wire.read(); // reading registers: 0x47 (GYRO_ZOUT_H) and 0x48 (GYRO_ZOUT_L)
   d427e:	f001 f89d 	bl	d53bc <_Z19__fetch_global_Wirev>
   d4282:	6803      	ldr	r3, [r0, #0]
   d4284:	695b      	ldr	r3, [r3, #20]
   d4286:	4798      	blx	r3
   d4288:	4604      	mov	r4, r0
   d428a:	f001 f897 	bl	d53bc <_Z19__fetch_global_Wirev>
   d428e:	6803      	ldr	r3, [r0, #0]
   d4290:	695b      	ldr	r3, [r3, #20]
   d4292:	4798      	blx	r3
   d4294:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d4298:	8028      	strh	r0, [r5, #0]
  
  // print out data
  Serial.printf("aX = %0.2f | aX = %0.2f | aX = %0.2f",Ax,Ay,Az);
   d429a:	f000 fdb5 	bl	d4e08 <_Z16_fetch_usbserialv>
   d429e:	4604      	mov	r4, r0
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d42a0:	f8d9 0000 	ldr.w	r0, [r9]
   d42a4:	f001 fb7e 	bl	d59a4 <__aeabi_f2d>
   d42a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d42ac:	f8d8 0000 	ldr.w	r0, [r8]
   d42b0:	f001 fb78 	bl	d59a4 <__aeabi_f2d>
   d42b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d42b8:	6838      	ldr	r0, [r7, #0]
   d42ba:	f001 fb73 	bl	d59a4 <__aeabi_f2d>
   d42be:	4a39      	ldr	r2, [pc, #228]	; (d43a4 <loop+0x284>)
   d42c0:	e9cd 0100 	strd	r0, r1, [sp]
   d42c4:	2100      	movs	r1, #0
   d42c6:	4620      	mov	r0, r4
   d42c8:	f000 fbd5 	bl	d4a76 <_ZN5Print11printf_implEbPKcz>
  // the following equation was taken from the documentation [MPU-6000/MPU-6050 Register Map and Description, p.30]
  Serial.print(" | tmp = "); Serial.print(temperature/340.00+36.53);
   d42cc:	f000 fd9c 	bl	d4e08 <_Z16_fetch_usbserialv>
   d42d0:	4935      	ldr	r1, [pc, #212]	; (d43a8 <loop+0x288>)
   d42d2:	f000 fadb 	bl	d488c <_ZN5Print5printEPKc>
   d42d6:	f000 fd97 	bl	d4e08 <_Z16_fetch_usbserialv>
   d42da:	4604      	mov	r4, r0
   d42dc:	f9bb 0000 	ldrsh.w	r0, [fp]
   d42e0:	f001 fb4e 	bl	d5980 <__aeabi_i2d>
   d42e4:	2200      	movs	r2, #0
   d42e6:	4b31      	ldr	r3, [pc, #196]	; (d43ac <loop+0x28c>)
   d42e8:	f001 fcda 	bl	d5ca0 <__aeabi_ddiv>
   d42ec:	a324      	add	r3, pc, #144	; (adr r3, d4380 <loop+0x260>)
   d42ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42f2:	f001 f9f9 	bl	d56e8 <__adddf3>
   d42f6:	ec41 0b10 	vmov	d0, r0, r1
   d42fa:	2102      	movs	r1, #2
   d42fc:	4620      	mov	r0, r4
   d42fe:	f000 fbb7 	bl	d4a70 <_ZN5Print5printEdi>
  Serial.print(" | gX = "); Serial.print(convert_int16_to_str(gyro_x));
   d4302:	f000 fd81 	bl	d4e08 <_Z16_fetch_usbserialv>
   d4306:	492a      	ldr	r1, [pc, #168]	; (d43b0 <loop+0x290>)
   d4308:	f000 fac0 	bl	d488c <_ZN5Print5printEPKc>
   d430c:	f000 fd7c 	bl	d4e08 <_Z16_fetch_usbserialv>
   d4310:	4604      	mov	r4, r0
   d4312:	f9ba 0000 	ldrsh.w	r0, [sl]
   d4316:	f7ff fed1 	bl	d40bc <_Z20convert_int16_to_strs>
   d431a:	4601      	mov	r1, r0
   d431c:	4620      	mov	r0, r4
   d431e:	f000 fab5 	bl	d488c <_ZN5Print5printEPKc>
  Serial.print(" | gY = "); Serial.print(convert_int16_to_str(gyro_y));
   d4322:	f000 fd71 	bl	d4e08 <_Z16_fetch_usbserialv>
   d4326:	4923      	ldr	r1, [pc, #140]	; (d43b4 <loop+0x294>)
   d4328:	f000 fab0 	bl	d488c <_ZN5Print5printEPKc>
   d432c:	f000 fd6c 	bl	d4e08 <_Z16_fetch_usbserialv>
   d4330:	4604      	mov	r4, r0
   d4332:	f9b6 0000 	ldrsh.w	r0, [r6]
   d4336:	f7ff fec1 	bl	d40bc <_Z20convert_int16_to_strs>
   d433a:	4601      	mov	r1, r0
   d433c:	4620      	mov	r0, r4
   d433e:	f000 faa5 	bl	d488c <_ZN5Print5printEPKc>
  Serial.print(" | gZ = "); Serial.print(convert_int16_to_str(gyro_z));
   d4342:	f000 fd61 	bl	d4e08 <_Z16_fetch_usbserialv>
   d4346:	491c      	ldr	r1, [pc, #112]	; (d43b8 <loop+0x298>)
   d4348:	f000 faa0 	bl	d488c <_ZN5Print5printEPKc>
   d434c:	f000 fd5c 	bl	d4e08 <_Z16_fetch_usbserialv>
   d4350:	4604      	mov	r4, r0
   d4352:	f9b5 0000 	ldrsh.w	r0, [r5]
   d4356:	f7ff feb1 	bl	d40bc <_Z20convert_int16_to_strs>
   d435a:	4601      	mov	r1, r0
   d435c:	4620      	mov	r0, r4
   d435e:	f000 fa95 	bl	d488c <_ZN5Print5printEPKc>
  Serial.println();
   d4362:	f000 fd51 	bl	d4e08 <_Z16_fetch_usbserialv>
   d4366:	f000 fa98 	bl	d489a <_ZN5Print7printlnEv>
  
  // delay
  delay(1000);
   d436a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d436e:	b007      	add	sp, #28
   d4370:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Serial.print(" | gY = "); Serial.print(convert_int16_to_str(gyro_y));
  Serial.print(" | gZ = "); Serial.print(convert_int16_to_str(gyro_z));
  Serial.println();
  
  // delay
  delay(1000);
   d4374:	f000 bbcc 	b.w	d4b10 <delay>
   d4378:	c84b5dcc 	.word	0xc84b5dcc
   d437c:	40239d07 	.word	0x40239d07
   d4380:	0a3d70a4 	.word	0x0a3d70a4
   d4384:	404243d7 	.word	0x404243d7
   d4388:	2003e3c0 	.word	0x2003e3c0
   d438c:	2003e3c2 	.word	0x2003e3c2
   d4390:	2003e3d8 	.word	0x2003e3d8
   d4394:	2003e3c4 	.word	0x2003e3c4
   d4398:	2003e3d2 	.word	0x2003e3d2
   d439c:	3f100000 	.word	0x3f100000
   d43a0:	2003e3d4 	.word	0x2003e3d4
   d43a4:	000d6198 	.word	0x000d6198
   d43a8:	000d61bd 	.word	0x000d61bd
   d43ac:	40754000 	.word	0x40754000
   d43b0:	000d61c7 	.word	0x000d61c7
   d43b4:	000d61d0 	.word	0x000d61d0
   d43b8:	000d61d9 	.word	0x000d61d9
   d43bc:	2003e3c8 	.word	0x2003e3c8
   d43c0:	2003e3cc 	.word	0x2003e3cc
   d43c4:	2003e3d6 	.word	0x2003e3d6
   d43c8:	2003e3d0 	.word	0x2003e3d0

000d43cc <_GLOBAL__sub_I_accelerometer_x>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d43cc:	f000 b810 	b.w	d43f0 <HAL_Pin_Map>

000d43d0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d43d0:	b508      	push	{r3, lr}
   d43d2:	4b02      	ldr	r3, [pc, #8]	; (d43dc <netdb_freeaddrinfo+0xc>)
   d43d4:	681b      	ldr	r3, [r3, #0]
   d43d6:	689b      	ldr	r3, [r3, #8]
   d43d8:	9301      	str	r3, [sp, #4]
   d43da:	bd08      	pop	{r3, pc}
   d43dc:	00030268 	.word	0x00030268

000d43e0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d43e0:	b508      	push	{r3, lr}
   d43e2:	4b02      	ldr	r3, [pc, #8]	; (d43ec <netdb_getaddrinfo+0xc>)
   d43e4:	681b      	ldr	r3, [r3, #0]
   d43e6:	68db      	ldr	r3, [r3, #12]
   d43e8:	9301      	str	r3, [sp, #4]
   d43ea:	bd08      	pop	{r3, pc}
   d43ec:	00030268 	.word	0x00030268

000d43f0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d43f0:	b508      	push	{r3, lr}
   d43f2:	4b02      	ldr	r3, [pc, #8]	; (d43fc <HAL_Pin_Map+0xc>)
   d43f4:	681b      	ldr	r3, [r3, #0]
   d43f6:	681b      	ldr	r3, [r3, #0]
   d43f8:	9301      	str	r3, [sp, #4]
   d43fa:	bd08      	pop	{r3, pc}
   d43fc:	0003022c 	.word	0x0003022c

000d4400 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4400:	b508      	push	{r3, lr}
   d4402:	4b02      	ldr	r3, [pc, #8]	; (d440c <HAL_RNG_GetRandomNumber+0xc>)
   d4404:	681b      	ldr	r3, [r3, #0]
   d4406:	685b      	ldr	r3, [r3, #4]
   d4408:	9301      	str	r3, [sp, #4]
   d440a:	bd08      	pop	{r3, pc}
   d440c:	00030218 	.word	0x00030218

000d4410 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4410:	b508      	push	{r3, lr}
   d4412:	4b02      	ldr	r3, [pc, #8]	; (d441c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4414:	681b      	ldr	r3, [r3, #0]
   d4416:	695b      	ldr	r3, [r3, #20]
   d4418:	9301      	str	r3, [sp, #4]
   d441a:	bd08      	pop	{r3, pc}
   d441c:	00030218 	.word	0x00030218

000d4420 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4420:	b508      	push	{r3, lr}
   d4422:	4b02      	ldr	r3, [pc, #8]	; (d442c <os_thread_is_current+0xc>)
   d4424:	681b      	ldr	r3, [r3, #0]
   d4426:	689b      	ldr	r3, [r3, #8]
   d4428:	9301      	str	r3, [sp, #4]
   d442a:	bd08      	pop	{r3, pc}
   d442c:	00030248 	.word	0x00030248

000d4430 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4430:	b508      	push	{r3, lr}
   d4432:	4b02      	ldr	r3, [pc, #8]	; (d443c <os_thread_join+0xc>)
   d4434:	681b      	ldr	r3, [r3, #0]
   d4436:	691b      	ldr	r3, [r3, #16]
   d4438:	9301      	str	r3, [sp, #4]
   d443a:	bd08      	pop	{r3, pc}
   d443c:	00030248 	.word	0x00030248

000d4440 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4440:	b508      	push	{r3, lr}
   d4442:	4b02      	ldr	r3, [pc, #8]	; (d444c <os_thread_cleanup+0xc>)
   d4444:	681b      	ldr	r3, [r3, #0]
   d4446:	695b      	ldr	r3, [r3, #20]
   d4448:	9301      	str	r3, [sp, #4]
   d444a:	bd08      	pop	{r3, pc}
   d444c:	00030248 	.word	0x00030248

000d4450 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4450:	b508      	push	{r3, lr}
   d4452:	4b02      	ldr	r3, [pc, #8]	; (d445c <os_mutex_recursive_create+0xc>)
   d4454:	681b      	ldr	r3, [r3, #0]
   d4456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4458:	9301      	str	r3, [sp, #4]
   d445a:	bd08      	pop	{r3, pc}
   d445c:	00030248 	.word	0x00030248

000d4460 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4460:	b508      	push	{r3, lr}
   d4462:	4b02      	ldr	r3, [pc, #8]	; (d446c <os_mutex_recursive_destroy+0xc>)
   d4464:	681b      	ldr	r3, [r3, #0]
   d4466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4468:	9301      	str	r3, [sp, #4]
   d446a:	bd08      	pop	{r3, pc}
   d446c:	00030248 	.word	0x00030248

000d4470 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4470:	b508      	push	{r3, lr}
   d4472:	4b02      	ldr	r3, [pc, #8]	; (d447c <inet_inet_ntop+0xc>)
   d4474:	681b      	ldr	r3, [r3, #0]
   d4476:	695b      	ldr	r3, [r3, #20]
   d4478:	9301      	str	r3, [sp, #4]
   d447a:	bd08      	pop	{r3, pc}
   d447c:	00030264 	.word	0x00030264

000d4480 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4480:	b508      	push	{r3, lr}
   d4482:	4b02      	ldr	r3, [pc, #8]	; (d448c <HAL_USART_Init+0xc>)
   d4484:	681b      	ldr	r3, [r3, #0]
   d4486:	681b      	ldr	r3, [r3, #0]
   d4488:	9301      	str	r3, [sp, #4]
   d448a:	bd08      	pop	{r3, pc}
   d448c:	0003023c 	.word	0x0003023c

000d4490 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4490:	b508      	push	{r3, lr}
   d4492:	4b02      	ldr	r3, [pc, #8]	; (d449c <HAL_USART_Write_Data+0xc>)
   d4494:	681b      	ldr	r3, [r3, #0]
   d4496:	68db      	ldr	r3, [r3, #12]
   d4498:	9301      	str	r3, [sp, #4]
   d449a:	bd08      	pop	{r3, pc}
   d449c:	0003023c 	.word	0x0003023c

000d44a0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d44a0:	b508      	push	{r3, lr}
   d44a2:	4b02      	ldr	r3, [pc, #8]	; (d44ac <HAL_USART_Available_Data+0xc>)
   d44a4:	681b      	ldr	r3, [r3, #0]
   d44a6:	691b      	ldr	r3, [r3, #16]
   d44a8:	9301      	str	r3, [sp, #4]
   d44aa:	bd08      	pop	{r3, pc}
   d44ac:	0003023c 	.word	0x0003023c

000d44b0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d44b0:	b508      	push	{r3, lr}
   d44b2:	4b02      	ldr	r3, [pc, #8]	; (d44bc <HAL_USART_Read_Data+0xc>)
   d44b4:	681b      	ldr	r3, [r3, #0]
   d44b6:	695b      	ldr	r3, [r3, #20]
   d44b8:	9301      	str	r3, [sp, #4]
   d44ba:	bd08      	pop	{r3, pc}
   d44bc:	0003023c 	.word	0x0003023c

000d44c0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d44c0:	b508      	push	{r3, lr}
   d44c2:	4b02      	ldr	r3, [pc, #8]	; (d44cc <HAL_USART_Peek_Data+0xc>)
   d44c4:	681b      	ldr	r3, [r3, #0]
   d44c6:	699b      	ldr	r3, [r3, #24]
   d44c8:	9301      	str	r3, [sp, #4]
   d44ca:	bd08      	pop	{r3, pc}
   d44cc:	0003023c 	.word	0x0003023c

000d44d0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d44d0:	b508      	push	{r3, lr}
   d44d2:	4b02      	ldr	r3, [pc, #8]	; (d44dc <HAL_USART_Flush_Data+0xc>)
   d44d4:	681b      	ldr	r3, [r3, #0]
   d44d6:	69db      	ldr	r3, [r3, #28]
   d44d8:	9301      	str	r3, [sp, #4]
   d44da:	bd08      	pop	{r3, pc}
   d44dc:	0003023c 	.word	0x0003023c

000d44e0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d44e0:	b508      	push	{r3, lr}
   d44e2:	4b02      	ldr	r3, [pc, #8]	; (d44ec <HAL_USART_Available_Data_For_Write+0xc>)
   d44e4:	681b      	ldr	r3, [r3, #0]
   d44e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d44e8:	9301      	str	r3, [sp, #4]
   d44ea:	bd08      	pop	{r3, pc}
   d44ec:	0003023c 	.word	0x0003023c

000d44f0 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d44f0:	b508      	push	{r3, lr}
   d44f2:	4b02      	ldr	r3, [pc, #8]	; (d44fc <HAL_I2C_Begin+0xc>)
   d44f4:	681b      	ldr	r3, [r3, #0]
   d44f6:	68db      	ldr	r3, [r3, #12]
   d44f8:	9301      	str	r3, [sp, #4]
   d44fa:	bd08      	pop	{r3, pc}
   d44fc:	00030228 	.word	0x00030228

000d4500 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d4500:	b508      	push	{r3, lr}
   d4502:	4b02      	ldr	r3, [pc, #8]	; (d450c <HAL_I2C_Begin_Transmission+0xc>)
   d4504:	681b      	ldr	r3, [r3, #0]
   d4506:	699b      	ldr	r3, [r3, #24]
   d4508:	9301      	str	r3, [sp, #4]
   d450a:	bd08      	pop	{r3, pc}
   d450c:	00030228 	.word	0x00030228

000d4510 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4510:	b508      	push	{r3, lr}
   d4512:	4b02      	ldr	r3, [pc, #8]	; (d451c <HAL_I2C_End_Transmission+0xc>)
   d4514:	681b      	ldr	r3, [r3, #0]
   d4516:	69db      	ldr	r3, [r3, #28]
   d4518:	9301      	str	r3, [sp, #4]
   d451a:	bd08      	pop	{r3, pc}
   d451c:	00030228 	.word	0x00030228

000d4520 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4520:	b508      	push	{r3, lr}
   d4522:	4b02      	ldr	r3, [pc, #8]	; (d452c <HAL_I2C_Write_Data+0xc>)
   d4524:	681b      	ldr	r3, [r3, #0]
   d4526:	6a1b      	ldr	r3, [r3, #32]
   d4528:	9301      	str	r3, [sp, #4]
   d452a:	bd08      	pop	{r3, pc}
   d452c:	00030228 	.word	0x00030228

000d4530 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4530:	b508      	push	{r3, lr}
   d4532:	4b02      	ldr	r3, [pc, #8]	; (d453c <HAL_I2C_Available_Data+0xc>)
   d4534:	681b      	ldr	r3, [r3, #0]
   d4536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4538:	9301      	str	r3, [sp, #4]
   d453a:	bd08      	pop	{r3, pc}
   d453c:	00030228 	.word	0x00030228

000d4540 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4540:	b508      	push	{r3, lr}
   d4542:	4b02      	ldr	r3, [pc, #8]	; (d454c <HAL_I2C_Read_Data+0xc>)
   d4544:	681b      	ldr	r3, [r3, #0]
   d4546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4548:	9301      	str	r3, [sp, #4]
   d454a:	bd08      	pop	{r3, pc}
   d454c:	00030228 	.word	0x00030228

000d4550 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4550:	b508      	push	{r3, lr}
   d4552:	4b02      	ldr	r3, [pc, #8]	; (d455c <HAL_I2C_Peek_Data+0xc>)
   d4554:	681b      	ldr	r3, [r3, #0]
   d4556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4558:	9301      	str	r3, [sp, #4]
   d455a:	bd08      	pop	{r3, pc}
   d455c:	00030228 	.word	0x00030228

000d4560 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4560:	b508      	push	{r3, lr}
   d4562:	4b02      	ldr	r3, [pc, #8]	; (d456c <HAL_I2C_Flush_Data+0xc>)
   d4564:	681b      	ldr	r3, [r3, #0]
   d4566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4568:	9301      	str	r3, [sp, #4]
   d456a:	bd08      	pop	{r3, pc}
   d456c:	00030228 	.word	0x00030228

000d4570 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4570:	b508      	push	{r3, lr}
   d4572:	4b02      	ldr	r3, [pc, #8]	; (d457c <HAL_I2C_Init+0xc>)
   d4574:	681b      	ldr	r3, [r3, #0]
   d4576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4578:	9301      	str	r3, [sp, #4]
   d457a:	bd08      	pop	{r3, pc}
   d457c:	00030228 	.word	0x00030228

000d4580 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d4580:	b508      	push	{r3, lr}
   d4582:	4b02      	ldr	r3, [pc, #8]	; (d458c <HAL_I2C_Request_Data_Ex+0xc>)
   d4584:	681b      	ldr	r3, [r3, #0]
   d4586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4588:	9301      	str	r3, [sp, #4]
   d458a:	bd08      	pop	{r3, pc}
   d458c:	00030228 	.word	0x00030228

000d4590 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4590:	b508      	push	{r3, lr}
   d4592:	4b02      	ldr	r3, [pc, #8]	; (d459c <HAL_USB_USART_Init+0xc>)
   d4594:	681b      	ldr	r3, [r3, #0]
   d4596:	681b      	ldr	r3, [r3, #0]
   d4598:	9301      	str	r3, [sp, #4]
   d459a:	bd08      	pop	{r3, pc}
   d459c:	0003024c 	.word	0x0003024c

000d45a0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d45a0:	b508      	push	{r3, lr}
   d45a2:	4b02      	ldr	r3, [pc, #8]	; (d45ac <HAL_USB_USART_Begin+0xc>)
   d45a4:	681b      	ldr	r3, [r3, #0]
   d45a6:	685b      	ldr	r3, [r3, #4]
   d45a8:	9301      	str	r3, [sp, #4]
   d45aa:	bd08      	pop	{r3, pc}
   d45ac:	0003024c 	.word	0x0003024c

000d45b0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d45b0:	b508      	push	{r3, lr}
   d45b2:	4b02      	ldr	r3, [pc, #8]	; (d45bc <HAL_USB_USART_Available_Data+0xc>)
   d45b4:	681b      	ldr	r3, [r3, #0]
   d45b6:	691b      	ldr	r3, [r3, #16]
   d45b8:	9301      	str	r3, [sp, #4]
   d45ba:	bd08      	pop	{r3, pc}
   d45bc:	0003024c 	.word	0x0003024c

000d45c0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d45c0:	b508      	push	{r3, lr}
   d45c2:	4b02      	ldr	r3, [pc, #8]	; (d45cc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d45c4:	681b      	ldr	r3, [r3, #0]
   d45c6:	695b      	ldr	r3, [r3, #20]
   d45c8:	9301      	str	r3, [sp, #4]
   d45ca:	bd08      	pop	{r3, pc}
   d45cc:	0003024c 	.word	0x0003024c

000d45d0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d45d0:	b508      	push	{r3, lr}
   d45d2:	4b02      	ldr	r3, [pc, #8]	; (d45dc <HAL_USB_USART_Receive_Data+0xc>)
   d45d4:	681b      	ldr	r3, [r3, #0]
   d45d6:	699b      	ldr	r3, [r3, #24]
   d45d8:	9301      	str	r3, [sp, #4]
   d45da:	bd08      	pop	{r3, pc}
   d45dc:	0003024c 	.word	0x0003024c

000d45e0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d45e0:	b508      	push	{r3, lr}
   d45e2:	4b02      	ldr	r3, [pc, #8]	; (d45ec <HAL_USB_USART_Send_Data+0xc>)
   d45e4:	681b      	ldr	r3, [r3, #0]
   d45e6:	69db      	ldr	r3, [r3, #28]
   d45e8:	9301      	str	r3, [sp, #4]
   d45ea:	bd08      	pop	{r3, pc}
   d45ec:	0003024c 	.word	0x0003024c

000d45f0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d45f0:	b508      	push	{r3, lr}
   d45f2:	4b02      	ldr	r3, [pc, #8]	; (d45fc <HAL_USB_USART_Flush_Data+0xc>)
   d45f4:	681b      	ldr	r3, [r3, #0]
   d45f6:	6a1b      	ldr	r3, [r3, #32]
   d45f8:	9301      	str	r3, [sp, #4]
   d45fa:	bd08      	pop	{r3, pc}
   d45fc:	0003024c 	.word	0x0003024c

000d4600 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4600:	b508      	push	{r3, lr}
   d4602:	4b02      	ldr	r3, [pc, #8]	; (d460c <set_system_mode+0xc>)
   d4604:	681b      	ldr	r3, [r3, #0]
   d4606:	685b      	ldr	r3, [r3, #4]
   d4608:	9301      	str	r3, [sp, #4]
   d460a:	bd08      	pop	{r3, pc}
   d460c:	00030220 	.word	0x00030220

000d4610 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4610:	b508      	push	{r3, lr}
   d4612:	4b02      	ldr	r3, [pc, #8]	; (d461c <system_delay_ms+0xc>)
   d4614:	681b      	ldr	r3, [r3, #0]
   d4616:	695b      	ldr	r3, [r3, #20]
   d4618:	9301      	str	r3, [sp, #4]
   d461a:	bd08      	pop	{r3, pc}
   d461c:	00030220 	.word	0x00030220

000d4620 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4620:	b508      	push	{r3, lr}
   d4622:	4b03      	ldr	r3, [pc, #12]	; (d4630 <system_ctrl_set_app_request_handler+0x10>)
   d4624:	681b      	ldr	r3, [r3, #0]
   d4626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d462a:	9301      	str	r3, [sp, #4]
   d462c:	bd08      	pop	{r3, pc}
   d462e:	0000      	.short	0x0000
   d4630:	00030220 	.word	0x00030220

000d4634 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4634:	b508      	push	{r3, lr}
   d4636:	4b03      	ldr	r3, [pc, #12]	; (d4644 <system_ctrl_set_result+0x10>)
   d4638:	681b      	ldr	r3, [r3, #0]
   d463a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d463e:	9301      	str	r3, [sp, #4]
   d4640:	bd08      	pop	{r3, pc}
   d4642:	0000      	.short	0x0000
   d4644:	00030220 	.word	0x00030220

000d4648 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4648:	b508      	push	{r3, lr}
   d464a:	4b02      	ldr	r3, [pc, #8]	; (d4654 <network_connect+0xc>)
   d464c:	681b      	ldr	r3, [r3, #0]
   d464e:	685b      	ldr	r3, [r3, #4]
   d4650:	9301      	str	r3, [sp, #4]
   d4652:	bd08      	pop	{r3, pc}
   d4654:	00030240 	.word	0x00030240

000d4658 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4658:	b508      	push	{r3, lr}
   d465a:	4b02      	ldr	r3, [pc, #8]	; (d4664 <network_connecting+0xc>)
   d465c:	681b      	ldr	r3, [r3, #0]
   d465e:	689b      	ldr	r3, [r3, #8]
   d4660:	9301      	str	r3, [sp, #4]
   d4662:	bd08      	pop	{r3, pc}
   d4664:	00030240 	.word	0x00030240

000d4668 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4668:	b508      	push	{r3, lr}
   d466a:	4b02      	ldr	r3, [pc, #8]	; (d4674 <network_disconnect+0xc>)
   d466c:	681b      	ldr	r3, [r3, #0]
   d466e:	68db      	ldr	r3, [r3, #12]
   d4670:	9301      	str	r3, [sp, #4]
   d4672:	bd08      	pop	{r3, pc}
   d4674:	00030240 	.word	0x00030240

000d4678 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4678:	b508      	push	{r3, lr}
   d467a:	4b02      	ldr	r3, [pc, #8]	; (d4684 <network_ready+0xc>)
   d467c:	681b      	ldr	r3, [r3, #0]
   d467e:	691b      	ldr	r3, [r3, #16]
   d4680:	9301      	str	r3, [sp, #4]
   d4682:	bd08      	pop	{r3, pc}
   d4684:	00030240 	.word	0x00030240

000d4688 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4688:	b508      	push	{r3, lr}
   d468a:	4b02      	ldr	r3, [pc, #8]	; (d4694 <network_on+0xc>)
   d468c:	681b      	ldr	r3, [r3, #0]
   d468e:	695b      	ldr	r3, [r3, #20]
   d4690:	9301      	str	r3, [sp, #4]
   d4692:	bd08      	pop	{r3, pc}
   d4694:	00030240 	.word	0x00030240

000d4698 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4698:	b508      	push	{r3, lr}
   d469a:	4b02      	ldr	r3, [pc, #8]	; (d46a4 <network_off+0xc>)
   d469c:	681b      	ldr	r3, [r3, #0]
   d469e:	699b      	ldr	r3, [r3, #24]
   d46a0:	9301      	str	r3, [sp, #4]
   d46a2:	bd08      	pop	{r3, pc}
   d46a4:	00030240 	.word	0x00030240

000d46a8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d46a8:	b508      	push	{r3, lr}
   d46aa:	4b02      	ldr	r3, [pc, #8]	; (d46b4 <network_listen+0xc>)
   d46ac:	681b      	ldr	r3, [r3, #0]
   d46ae:	69db      	ldr	r3, [r3, #28]
   d46b0:	9301      	str	r3, [sp, #4]
   d46b2:	bd08      	pop	{r3, pc}
   d46b4:	00030240 	.word	0x00030240

000d46b8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d46b8:	b508      	push	{r3, lr}
   d46ba:	4b02      	ldr	r3, [pc, #8]	; (d46c4 <network_listening+0xc>)
   d46bc:	681b      	ldr	r3, [r3, #0]
   d46be:	6a1b      	ldr	r3, [r3, #32]
   d46c0:	9301      	str	r3, [sp, #4]
   d46c2:	bd08      	pop	{r3, pc}
   d46c4:	00030240 	.word	0x00030240

000d46c8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d46c8:	b508      	push	{r3, lr}
   d46ca:	4b02      	ldr	r3, [pc, #8]	; (d46d4 <network_set_listen_timeout+0xc>)
   d46cc:	681b      	ldr	r3, [r3, #0]
   d46ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d46d0:	9301      	str	r3, [sp, #4]
   d46d2:	bd08      	pop	{r3, pc}
   d46d4:	00030240 	.word	0x00030240

000d46d8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d46d8:	b508      	push	{r3, lr}
   d46da:	4b02      	ldr	r3, [pc, #8]	; (d46e4 <network_get_listen_timeout+0xc>)
   d46dc:	681b      	ldr	r3, [r3, #0]
   d46de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d46e0:	9301      	str	r3, [sp, #4]
   d46e2:	bd08      	pop	{r3, pc}
   d46e4:	00030240 	.word	0x00030240

000d46e8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d46e8:	b508      	push	{r3, lr}
   d46ea:	4b02      	ldr	r3, [pc, #8]	; (d46f4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d46ec:	681b      	ldr	r3, [r3, #0]
   d46ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d46f0:	9301      	str	r3, [sp, #4]
   d46f2:	bd08      	pop	{r3, pc}
   d46f4:	00030244 	.word	0x00030244

000d46f8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d46f8:	b508      	push	{r3, lr}
   d46fa:	4b02      	ldr	r3, [pc, #8]	; (d4704 <malloc+0xc>)
   d46fc:	681b      	ldr	r3, [r3, #0]
   d46fe:	681b      	ldr	r3, [r3, #0]
   d4700:	9301      	str	r3, [sp, #4]
   d4702:	bd08      	pop	{r3, pc}
   d4704:	0003021c 	.word	0x0003021c

000d4708 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4708:	b508      	push	{r3, lr}
   d470a:	4b02      	ldr	r3, [pc, #8]	; (d4714 <free+0xc>)
   d470c:	681b      	ldr	r3, [r3, #0]
   d470e:	685b      	ldr	r3, [r3, #4]
   d4710:	9301      	str	r3, [sp, #4]
   d4712:	bd08      	pop	{r3, pc}
   d4714:	0003021c 	.word	0x0003021c

000d4718 <sprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d4718:	b508      	push	{r3, lr}
   d471a:	4b02      	ldr	r3, [pc, #8]	; (d4724 <sprintf+0xc>)
   d471c:	681b      	ldr	r3, [r3, #0]
   d471e:	68db      	ldr	r3, [r3, #12]
   d4720:	9301      	str	r3, [sp, #4]
   d4722:	bd08      	pop	{r3, pc}
   d4724:	0003021c 	.word	0x0003021c

000d4728 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4728:	b508      	push	{r3, lr}
   d472a:	4b02      	ldr	r3, [pc, #8]	; (d4734 <vsnprintf+0xc>)
   d472c:	681b      	ldr	r3, [r3, #0]
   d472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4730:	9301      	str	r3, [sp, #4]
   d4732:	bd08      	pop	{r3, pc}
   d4734:	0003021c 	.word	0x0003021c

000d4738 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4738:	2200      	movs	r2, #0
   d473a:	4611      	mov	r1, r2
   d473c:	6840      	ldr	r0, [r0, #4]
   d473e:	f7ff bfbb 	b.w	d46b8 <network_listening>

000d4742 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4742:	2200      	movs	r2, #0
   d4744:	4611      	mov	r1, r2
   d4746:	6840      	ldr	r0, [r0, #4]
   d4748:	f7ff bfc6 	b.w	d46d8 <network_get_listen_timeout>

000d474c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d474c:	2200      	movs	r2, #0
   d474e:	6840      	ldr	r0, [r0, #4]
   d4750:	f7ff bfba 	b.w	d46c8 <network_set_listen_timeout>

000d4754 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4754:	2200      	movs	r2, #0
   d4756:	f081 0101 	eor.w	r1, r1, #1
   d475a:	6840      	ldr	r0, [r0, #4]
   d475c:	f7ff bfa4 	b.w	d46a8 <network_listen>

000d4760 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4760:	2300      	movs	r3, #0
   d4762:	461a      	mov	r2, r3
   d4764:	4619      	mov	r1, r3
   d4766:	6840      	ldr	r0, [r0, #4]
   d4768:	f7ff bf96 	b.w	d4698 <network_off>

000d476c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d476c:	2300      	movs	r3, #0
   d476e:	461a      	mov	r2, r3
   d4770:	4619      	mov	r1, r3
   d4772:	6840      	ldr	r0, [r0, #4]
   d4774:	f7ff bf88 	b.w	d4688 <network_on>

000d4778 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4778:	2200      	movs	r2, #0
   d477a:	4611      	mov	r1, r2
   d477c:	6840      	ldr	r0, [r0, #4]
   d477e:	f7ff bf7b 	b.w	d4678 <network_ready>

000d4782 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4782:	2200      	movs	r2, #0
   d4784:	4611      	mov	r1, r2
   d4786:	6840      	ldr	r0, [r0, #4]
   d4788:	f7ff bf66 	b.w	d4658 <network_connecting>

000d478c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d478c:	2200      	movs	r2, #0
   d478e:	2102      	movs	r1, #2
   d4790:	6840      	ldr	r0, [r0, #4]
   d4792:	f7ff bf69 	b.w	d4668 <network_disconnect>

000d4796 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4796:	2300      	movs	r3, #0
   d4798:	461a      	mov	r2, r3
   d479a:	6840      	ldr	r0, [r0, #4]
   d479c:	f7ff bf54 	b.w	d4648 <network_connect>

000d47a0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d47a0:	4b02      	ldr	r3, [pc, #8]	; (d47ac <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d47a2:	2203      	movs	r2, #3
   d47a4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d47a6:	4a02      	ldr	r2, [pc, #8]	; (d47b0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d47a8:	601a      	str	r2, [r3, #0]
   d47aa:	4770      	bx	lr
   d47ac:	2003e3dc 	.word	0x2003e3dc
   d47b0:	000d61ec 	.word	0x000d61ec

000d47b4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d47b4:	b510      	push	{r4, lr}
   d47b6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d47b8:	6800      	ldr	r0, [r0, #0]
   d47ba:	b118      	cbz	r0, d47c4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d47bc:	f7ff ffa4 	bl	d4708 <free>
            wakeupSource_ = nullptr;
   d47c0:	2300      	movs	r3, #0
   d47c2:	6023      	str	r3, [r4, #0]
   d47c4:	bd10      	pop	{r4, pc}

000d47c6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d47c6:	b510      	push	{r4, lr}
   d47c8:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d47ca:	f7ff fff3 	bl	d47b4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d47ce:	4620      	mov	r0, r4
   d47d0:	bd10      	pop	{r4, pc}
	...

000d47d4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d47d4:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d47d6:	4c09      	ldr	r4, [pc, #36]	; (d47fc <_GLOBAL__sub_I_System+0x28>)
   d47d8:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d47da:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d47de:	6020      	str	r0, [r4, #0]
   d47e0:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d47e2:	71a0      	strb	r0, [r4, #6]
   d47e4:	8120      	strh	r0, [r4, #8]
   d47e6:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d47e8:	f7ff ff0a 	bl	d4600 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d47ec:	4620      	mov	r0, r4
   d47ee:	4a04      	ldr	r2, [pc, #16]	; (d4800 <_GLOBAL__sub_I_System+0x2c>)
   d47f0:	4904      	ldr	r1, [pc, #16]	; (d4804 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d47f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d47f6:	f000 be07 	b.w	d5408 <__aeabi_atexit>
   d47fa:	bf00      	nop
   d47fc:	2003e3e4 	.word	0x2003e3e4
   d4800:	2003e3b4 	.word	0x2003e3b4
   d4804:	000d47c7 	.word	0x000d47c7

000d4808 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4808:	b510      	push	{r4, lr}
   d480a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d480c:	6800      	ldr	r0, [r0, #0]
   d480e:	b108      	cbz	r0, d4814 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4810:	f7ff fe26 	bl	d4460 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4814:	4620      	mov	r0, r4
   d4816:	bd10      	pop	{r4, pc}

000d4818 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4818:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d481a:	4c06      	ldr	r4, [pc, #24]	; (d4834 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d481c:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d481e:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4820:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4822:	f7ff fe15 	bl	d4450 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4826:	4620      	mov	r0, r4
   d4828:	4a03      	ldr	r2, [pc, #12]	; (d4838 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d482a:	4904      	ldr	r1, [pc, #16]	; (d483c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d482c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4830:	f000 bdea 	b.w	d5408 <__aeabi_atexit>
   d4834:	2003e3f0 	.word	0x2003e3f0
   d4838:	2003e3b4 	.word	0x2003e3b4
   d483c:	000d4809 	.word	0x000d4809

000d4840 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4842:	4606      	mov	r6, r0
   d4844:	460d      	mov	r5, r1
   d4846:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4848:	2400      	movs	r4, #0
  while (size--) {
   d484a:	42bd      	cmp	r5, r7
   d484c:	d00c      	beq.n	d4868 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d484e:	6833      	ldr	r3, [r6, #0]
   d4850:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4854:	689b      	ldr	r3, [r3, #8]
   d4856:	4630      	mov	r0, r6
   d4858:	4798      	blx	r3
     if (chunk>=0)
   d485a:	2800      	cmp	r0, #0
   d485c:	db01      	blt.n	d4862 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d485e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4860:	e7f3      	b.n	d484a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4862:	2c00      	cmp	r4, #0
   d4864:	bf08      	it	eq
   d4866:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4868:	4620      	mov	r0, r4
   d486a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d486c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d486c:	b570      	push	{r4, r5, r6, lr}
   d486e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4870:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4872:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4874:	b149      	cbz	r1, d488a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4876:	f001 fc7b 	bl	d6170 <strlen>
   d487a:	682b      	ldr	r3, [r5, #0]
   d487c:	4602      	mov	r2, r0
   d487e:	4621      	mov	r1, r4
   d4880:	4628      	mov	r0, r5
   d4882:	68db      	ldr	r3, [r3, #12]
    }
   d4884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4888:	4718      	bx	r3
    }
   d488a:	bd70      	pop	{r4, r5, r6, pc}

000d488c <_ZN5Print5printEPKc>:
   d488c:	b508      	push	{r3, lr}
   d488e:	f7ff ffed 	bl	d486c <_ZN5Print5writeEPKc>
   d4892:	bd08      	pop	{r3, pc}

000d4894 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4894:	6803      	ldr	r3, [r0, #0]
   d4896:	689b      	ldr	r3, [r3, #8]
   d4898:	4718      	bx	r3

000d489a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d489a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d489c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d489e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d48a0:	f7ff fff8 	bl	d4894 <_ZN5Print5printEc>
  n += print('\n');
   d48a4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d48a6:	4604      	mov	r4, r0
  n += print('\n');
   d48a8:	4628      	mov	r0, r5
   d48aa:	f7ff fff3 	bl	d4894 <_ZN5Print5printEc>
  return n;
}
   d48ae:	4420      	add	r0, r4
   d48b0:	bd38      	pop	{r3, r4, r5, pc}

000d48b2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d48b2:	b530      	push	{r4, r5, lr}
   d48b4:	b08b      	sub	sp, #44	; 0x2c
   d48b6:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d48b8:	2100      	movs	r1, #0
   d48ba:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d48be:	2a01      	cmp	r2, #1
   d48c0:	bf98      	it	ls
   d48c2:	220a      	movls	r2, #10
   d48c4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d48c8:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d48cc:	fb05 3312 	mls	r3, r5, r2, r3
   d48d0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d48d4:	2b09      	cmp	r3, #9
   d48d6:	bf94      	ite	ls
   d48d8:	3330      	addls	r3, #48	; 0x30
   d48da:	3337      	addhi	r3, #55	; 0x37
   d48dc:	b2db      	uxtb	r3, r3
   d48de:	4621      	mov	r1, r4
   d48e0:	f804 3901 	strb.w	r3, [r4], #-1
   d48e4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d48e6:	2d00      	cmp	r5, #0
   d48e8:	d1ee      	bne.n	d48c8 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d48ea:	f7ff ffbf 	bl	d486c <_ZN5Print5writeEPKc>
}
   d48ee:	b00b      	add	sp, #44	; 0x2c
   d48f0:	bd30      	pop	{r4, r5, pc}
	...

000d48f4 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d48f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d48f8:	ec57 6b10 	vmov	r6, r7, d0
   d48fc:	4682      	mov	sl, r0
   d48fe:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d4900:	ee10 2a10 	vmov	r2, s0
   d4904:	463b      	mov	r3, r7
   d4906:	ee10 0a10 	vmov	r0, s0
   d490a:	4639      	mov	r1, r7
   d490c:	f001 fb38 	bl	d5f80 <__aeabi_dcmpun>
   d4910:	b108      	cbz	r0, d4916 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4912:	494e      	ldr	r1, [pc, #312]	; (d4a4c <_ZN5Print10printFloatEdh+0x158>)
   d4914:	e012      	b.n	d493c <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d4916:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d491a:	f04f 32ff 	mov.w	r2, #4294967295
   d491e:	4b4c      	ldr	r3, [pc, #304]	; (d4a50 <_ZN5Print10printFloatEdh+0x15c>)
   d4920:	4630      	mov	r0, r6
   d4922:	4649      	mov	r1, r9
   d4924:	f001 fb2c 	bl	d5f80 <__aeabi_dcmpun>
   d4928:	b968      	cbnz	r0, d4946 <_ZN5Print10printFloatEdh+0x52>
   d492a:	f04f 32ff 	mov.w	r2, #4294967295
   d492e:	4b48      	ldr	r3, [pc, #288]	; (d4a50 <_ZN5Print10printFloatEdh+0x15c>)
   d4930:	4630      	mov	r0, r6
   d4932:	4649      	mov	r1, r9
   d4934:	f001 fb06 	bl	d5f44 <__aeabi_dcmple>
   d4938:	b928      	cbnz	r0, d4946 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d493a:	4946      	ldr	r1, [pc, #280]	; (d4a54 <_ZN5Print10printFloatEdh+0x160>)
   d493c:	4650      	mov	r0, sl
   d493e:	f7ff ff95 	bl	d486c <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d4942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d4946:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d494a:	4b43      	ldr	r3, [pc, #268]	; (d4a58 <_ZN5Print10printFloatEdh+0x164>)
   d494c:	4630      	mov	r0, r6
   d494e:	4639      	mov	r1, r7
   d4950:	f001 fb0c 	bl	d5f6c <__aeabi_dcmpgt>
   d4954:	b108      	cbz	r0, d495a <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4956:	4941      	ldr	r1, [pc, #260]	; (d4a5c <_ZN5Print10printFloatEdh+0x168>)
   d4958:	e7f0      	b.n	d493c <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d495a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d495e:	4b40      	ldr	r3, [pc, #256]	; (d4a60 <_ZN5Print10printFloatEdh+0x16c>)
   d4960:	4630      	mov	r0, r6
   d4962:	4639      	mov	r1, r7
   d4964:	f001 fae4 	bl	d5f30 <__aeabi_dcmplt>
   d4968:	2800      	cmp	r0, #0
   d496a:	d1f4      	bne.n	d4956 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d496c:	2200      	movs	r2, #0
   d496e:	2300      	movs	r3, #0
   d4970:	4630      	mov	r0, r6
   d4972:	4639      	mov	r1, r7
   d4974:	f001 fadc 	bl	d5f30 <__aeabi_dcmplt>
   d4978:	b140      	cbz	r0, d498c <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d497a:	212d      	movs	r1, #45	; 0x2d
   d497c:	4650      	mov	r0, sl
   d497e:	f7ff ff89 	bl	d4894 <_ZN5Print5printEc>
     number = -number;
   d4982:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d4986:	4604      	mov	r4, r0
     number = -number;
   d4988:	461f      	mov	r7, r3
   d498a:	e000      	b.n	d498e <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d498c:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d498e:	4935      	ldr	r1, [pc, #212]	; (d4a64 <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4990:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d4994:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d4996:	fa5f f388 	uxtb.w	r3, r8
   d499a:	429d      	cmp	r5, r3
   d499c:	d906      	bls.n	d49ac <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d499e:	2200      	movs	r2, #0
   d49a0:	4b31      	ldr	r3, [pc, #196]	; (d4a68 <_ZN5Print10printFloatEdh+0x174>)
   d49a2:	f001 f97d 	bl	d5ca0 <__aeabi_ddiv>
   d49a6:	f108 0801 	add.w	r8, r8, #1
   d49aa:	e7f4      	b.n	d4996 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d49ac:	4632      	mov	r2, r6
   d49ae:	463b      	mov	r3, r7
   d49b0:	f000 fe9a 	bl	d56e8 <__adddf3>
   d49b4:	460f      	mov	r7, r1
   d49b6:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d49b8:	f001 fb20 	bl	d5ffc <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d49bc:	220a      	movs	r2, #10
   d49be:	4601      	mov	r1, r0
   d49c0:	4680      	mov	r8, r0
   d49c2:	4650      	mov	r0, sl
   d49c4:	f7ff ff75 	bl	d48b2 <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d49c8:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d49ca:	b3e5      	cbz	r5, d4a46 <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d49cc:	4640      	mov	r0, r8
   d49ce:	f000 ffc7 	bl	d5960 <__aeabi_ui2d>
   d49d2:	4602      	mov	r2, r0
   d49d4:	460b      	mov	r3, r1
   d49d6:	4630      	mov	r0, r6
   d49d8:	4639      	mov	r1, r7
   d49da:	f000 fe83 	bl	d56e4 <__aeabi_dsub>
   d49de:	4606      	mov	r6, r0
   d49e0:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d49e2:	4650      	mov	r0, sl
   d49e4:	4921      	ldr	r1, [pc, #132]	; (d4a6c <_ZN5Print10printFloatEdh+0x178>)
   d49e6:	f7ff ff41 	bl	d486c <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d49ea:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d49ec:	2200      	movs	r2, #0
   d49ee:	4b1e      	ldr	r3, [pc, #120]	; (d4a68 <_ZN5Print10printFloatEdh+0x174>)
   d49f0:	4630      	mov	r0, r6
   d49f2:	4639      	mov	r1, r7
   d49f4:	f001 f82a 	bl	d5a4c <__aeabi_dmul>
   d49f8:	4606      	mov	r6, r0
   d49fa:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d49fc:	f001 fad6 	bl	d5fac <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d4a00:	f1b0 0900 	subs.w	r9, r0, #0
   d4a04:	da07      	bge.n	d4a16 <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d4a06:	212d      	movs	r1, #45	; 0x2d
   d4a08:	4650      	mov	r0, sl
   d4a0a:	f7ff ff43 	bl	d4894 <_ZN5Print5printEc>
            val = -n;
   d4a0e:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d4a12:	4680      	mov	r8, r0
   d4a14:	e002      	b.n	d4a1c <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d4a16:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d4a18:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4a1c:	220a      	movs	r2, #10
   d4a1e:	4650      	mov	r0, sl
   d4a20:	f7ff ff47 	bl	d48b2 <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d4a24:	4440      	add	r0, r8
   d4a26:	4404      	add	r4, r0
    remainder -= toPrint;
   d4a28:	4648      	mov	r0, r9
   d4a2a:	f000 ffa9 	bl	d5980 <__aeabi_i2d>
   d4a2e:	4602      	mov	r2, r0
   d4a30:	460b      	mov	r3, r1
   d4a32:	4630      	mov	r0, r6
   d4a34:	4639      	mov	r1, r7
   d4a36:	f000 fe55 	bl	d56e4 <__aeabi_dsub>
   d4a3a:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d4a3c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d4a40:	4606      	mov	r6, r0
   d4a42:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d4a44:	d1d2      	bne.n	d49ec <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d4a46:	4620      	mov	r0, r4
   d4a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4a4c:	000d6218 	.word	0x000d6218
   d4a50:	7fefffff 	.word	0x7fefffff
   d4a54:	000d6222 	.word	0x000d6222
   d4a58:	41efffff 	.word	0x41efffff
   d4a5c:	000d621c 	.word	0x000d621c
   d4a60:	c1efffff 	.word	0xc1efffff
   d4a64:	3fe00000 	.word	0x3fe00000
   d4a68:	40240000 	.word	0x40240000
   d4a6c:	000d6220 	.word	0x000d6220

000d4a70 <_ZN5Print5printEdi>:
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d4a70:	b2c9      	uxtb	r1, r1
   d4a72:	f7ff bf3f 	b.w	d48f4 <_ZN5Print10printFloatEdh>

000d4a76 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4a76:	b40c      	push	{r2, r3}
   d4a78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4a7c:	b087      	sub	sp, #28
   d4a7e:	af00      	add	r7, sp, #0
   d4a80:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d4a84:	4605      	mov	r5, r0
   d4a86:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d4a8a:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4a8c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d4a8e:	4623      	mov	r3, r4
   d4a90:	464a      	mov	r2, r9
   d4a92:	2114      	movs	r1, #20
   d4a94:	1d38      	adds	r0, r7, #4
   d4a96:	f7ff fe47 	bl	d4728 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d4a9a:	2813      	cmp	r0, #19
   d4a9c:	d805      	bhi.n	d4aaa <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4a9e:	1d39      	adds	r1, r7, #4
   d4aa0:	4628      	mov	r0, r5
   d4aa2:	f7ff fee3 	bl	d486c <_ZN5Print5writeEPKc>
   d4aa6:	4604      	mov	r4, r0
   d4aa8:	e013      	b.n	d4ad2 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4aaa:	f100 0308 	add.w	r3, r0, #8
   d4aae:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d4ab2:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4ab4:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d4ab8:	1c41      	adds	r1, r0, #1
   d4aba:	4623      	mov	r3, r4
   d4abc:	464a      	mov	r2, r9
   d4abe:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d4ac0:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d4ac2:	f7ff fe31 	bl	d4728 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4ac6:	4669      	mov	r1, sp
   d4ac8:	4628      	mov	r0, r5
   d4aca:	f7ff fecf 	bl	d486c <_ZN5Print5writeEPKc>
   d4ace:	4604      	mov	r4, r0
   d4ad0:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d4ad2:	b11e      	cbz	r6, d4adc <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d4ad4:	4628      	mov	r0, r5
   d4ad6:	f7ff fee0 	bl	d489a <_ZN5Print7printlnEv>
   d4ada:	4404      	add	r4, r0
    return n;
}
   d4adc:	4620      	mov	r0, r4
   d4ade:	371c      	adds	r7, #28
   d4ae0:	46bd      	mov	sp, r7
   d4ae2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4ae6:	b002      	add	sp, #8
   d4ae8:	4770      	bx	lr
	...

000d4aec <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4aec:	4b01      	ldr	r3, [pc, #4]	; (d4af4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4aee:	4a02      	ldr	r2, [pc, #8]	; (d4af8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4af0:	601a      	str	r2, [r3, #0]
   d4af2:	4770      	bx	lr
   d4af4:	2003e3f4 	.word	0x2003e3f4
   d4af8:	000d6299 	.word	0x000d6299

000d4afc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4afc:	4b02      	ldr	r3, [pc, #8]	; (d4b08 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4afe:	681a      	ldr	r2, [r3, #0]
   d4b00:	4b02      	ldr	r3, [pc, #8]	; (d4b0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4b02:	601a      	str	r2, [r3, #0]
   d4b04:	4770      	bx	lr
   d4b06:	bf00      	nop
   d4b08:	2003e34c 	.word	0x2003e34c
   d4b0c:	2003e3f8 	.word	0x2003e3f8

000d4b10 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4b10:	2100      	movs	r1, #0
   d4b12:	f7ff bd7d 	b.w	d4610 <system_delay_ms>

000d4b16 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4b16:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4b18:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4b1a:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4b1c:	b113      	cbz	r3, d4b24 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4b1e:	2203      	movs	r2, #3
   d4b20:	4601      	mov	r1, r0
   d4b22:	4798      	blx	r3
    }
   d4b24:	4620      	mov	r0, r4
   d4b26:	bd10      	pop	{r4, pc}

000d4b28 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4b28:	b510      	push	{r4, lr}
   d4b2a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4b2c:	f7ff fff3 	bl	d4b16 <_ZNSt14_Function_baseD1Ev>
   d4b30:	4620      	mov	r0, r4
   d4b32:	bd10      	pop	{r4, pc}

000d4b34 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4b34:	4803      	ldr	r0, [pc, #12]	; (d4b44 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4b36:	4a04      	ldr	r2, [pc, #16]	; (d4b48 <_GLOBAL__sub_I_RGB+0x14>)
   d4b38:	4904      	ldr	r1, [pc, #16]	; (d4b4c <_GLOBAL__sub_I_RGB+0x18>)
   d4b3a:	2300      	movs	r3, #0
   d4b3c:	6083      	str	r3, [r0, #8]
   d4b3e:	f000 bc63 	b.w	d5408 <__aeabi_atexit>
   d4b42:	bf00      	nop
   d4b44:	2003e3fc 	.word	0x2003e3fc
   d4b48:	2003e3b4 	.word	0x2003e3b4
   d4b4c:	000d4b29 	.word	0x000d4b29

000d4b50 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4b50:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4b52:	4b0c      	ldr	r3, [pc, #48]	; (d4b84 <serialEventRun+0x34>)
   d4b54:	b133      	cbz	r3, d4b64 <serialEventRun+0x14>
   d4b56:	f000 f957 	bl	d4e08 <_Z16_fetch_usbserialv>
   d4b5a:	6803      	ldr	r3, [r0, #0]
   d4b5c:	691b      	ldr	r3, [r3, #16]
   d4b5e:	4798      	blx	r3
   d4b60:	2800      	cmp	r0, #0
   d4b62:	dc09      	bgt.n	d4b78 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4b64:	4b08      	ldr	r3, [pc, #32]	; (d4b88 <serialEventRun+0x38>)
   d4b66:	b163      	cbz	r3, d4b82 <serialEventRun+0x32>
   d4b68:	f000 f9cc 	bl	d4f04 <_Z22__fetch_global_Serial1v>
   d4b6c:	6803      	ldr	r3, [r0, #0]
   d4b6e:	691b      	ldr	r3, [r3, #16]
   d4b70:	4798      	blx	r3
   d4b72:	2800      	cmp	r0, #0
   d4b74:	dc03      	bgt.n	d4b7e <serialEventRun+0x2e>
   d4b76:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4b78:	f3af 8000 	nop.w
   d4b7c:	e7f2      	b.n	d4b64 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4b7e:	f3af 8000 	nop.w
   d4b82:	bd08      	pop	{r3, pc}
	...

000d4b8c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4b8c:	b508      	push	{r3, lr}
	serialEventRun();
   d4b8e:	f7ff ffdf 	bl	d4b50 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4b92:	f7ff fc3d 	bl	d4410 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4b96:	4b01      	ldr	r3, [pc, #4]	; (d4b9c <_post_loop+0x10>)
   d4b98:	6018      	str	r0, [r3, #0]
   d4b9a:	bd08      	pop	{r3, pc}
   d4b9c:	2003e730 	.word	0x2003e730

000d4ba0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4ba0:	4802      	ldr	r0, [pc, #8]	; (d4bac <_Z33system_initialize_user_backup_ramv+0xc>)
   d4ba2:	4a03      	ldr	r2, [pc, #12]	; (d4bb0 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4ba4:	4903      	ldr	r1, [pc, #12]	; (d4bb4 <_Z33system_initialize_user_backup_ramv+0x14>)
   d4ba6:	1a12      	subs	r2, r2, r0
   d4ba8:	f001 baa6 	b.w	d60f8 <memcpy>
   d4bac:	2003f400 	.word	0x2003f400
   d4bb0:	2003f404 	.word	0x2003f404
   d4bb4:	000d6510 	.word	0x000d6510

000d4bb8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4bb8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4bba:	2300      	movs	r3, #0
   d4bbc:	9300      	str	r3, [sp, #0]
   d4bbe:	461a      	mov	r2, r3
   d4bc0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4bc4:	f7ff fd36 	bl	d4634 <system_ctrl_set_result>
}
   d4bc8:	b003      	add	sp, #12
   d4bca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4bd0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4bd0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4bd2:	8843      	ldrh	r3, [r0, #2]
   d4bd4:	2b0a      	cmp	r3, #10
   d4bd6:	d008      	beq.n	d4bea <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4bd8:	2b50      	cmp	r3, #80	; 0x50
   d4bda:	d109      	bne.n	d4bf0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4bdc:	4b09      	ldr	r3, [pc, #36]	; (d4c04 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4bde:	681b      	ldr	r3, [r3, #0]
   d4be0:	b13b      	cbz	r3, d4bf2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4be2:	b003      	add	sp, #12
   d4be4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4be8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4bea:	f7ff ffe5 	bl	d4bb8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4bee:	e006      	b.n	d4bfe <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4bf0:	2300      	movs	r3, #0
   d4bf2:	9300      	str	r3, [sp, #0]
   d4bf4:	461a      	mov	r2, r3
   d4bf6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4bfa:	f7ff fd1b 	bl	d4634 <system_ctrl_set_result>
        break;
    }
}
   d4bfe:	b003      	add	sp, #12
   d4c00:	f85d fb04 	ldr.w	pc, [sp], #4
   d4c04:	2003e40c 	.word	0x2003e40c

000d4c08 <module_user_init_hook>:

void module_user_init_hook()
{
   d4c08:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4c0a:	4c10      	ldr	r4, [pc, #64]	; (d4c4c <module_user_init_hook+0x44>)
   d4c0c:	4d10      	ldr	r5, [pc, #64]	; (d4c50 <module_user_init_hook+0x48>)
   d4c0e:	6823      	ldr	r3, [r4, #0]
   d4c10:	42ab      	cmp	r3, r5
   d4c12:	4b10      	ldr	r3, [pc, #64]	; (d4c54 <module_user_init_hook+0x4c>)
   d4c14:	bf0c      	ite	eq
   d4c16:	2201      	moveq	r2, #1
   d4c18:	2200      	movne	r2, #0
   d4c1a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4c1c:	d002      	beq.n	d4c24 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d4c1e:	f7ff ffbf 	bl	d4ba0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4c22:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4c24:	f7ff fbec 	bl	d4400 <HAL_RNG_GetRandomNumber>
   d4c28:	4604      	mov	r4, r0
    srand(seed);
   d4c2a:	f001 fa79 	bl	d6120 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4c2e:	4b0a      	ldr	r3, [pc, #40]	; (d4c58 <module_user_init_hook+0x50>)
   d4c30:	b113      	cbz	r3, d4c38 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d4c32:	4620      	mov	r0, r4
   d4c34:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4c38:	2100      	movs	r1, #0
   d4c3a:	4807      	ldr	r0, [pc, #28]	; (d4c58 <module_user_init_hook+0x50>)
   d4c3c:	f7ff fd54 	bl	d46e8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4c40:	2100      	movs	r1, #0
   d4c42:	4806      	ldr	r0, [pc, #24]	; (d4c5c <module_user_init_hook+0x54>)
}
   d4c44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4c48:	f7ff bcea 	b.w	d4620 <system_ctrl_set_app_request_handler>
   d4c4c:	2003f400 	.word	0x2003f400
   d4c50:	9a271c1e 	.word	0x9a271c1e
   d4c54:	2003e410 	.word	0x2003e410
   d4c58:	00000000 	.word	0x00000000
   d4c5c:	000d4bd1 	.word	0x000d4bd1

000d4c60 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4c60:	4770      	bx	lr

000d4c62 <_ZN9IPAddressD0Ev>:
   d4c62:	b510      	push	{r4, lr}
   d4c64:	2118      	movs	r1, #24
   d4c66:	4604      	mov	r4, r0
   d4c68:	f000 fbdc 	bl	d5424 <_ZdlPvj>
   d4c6c:	4620      	mov	r0, r4
   d4c6e:	bd10      	pop	{r4, pc}

000d4c70 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4c70:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4c72:	7d03      	ldrb	r3, [r0, #20]
   d4c74:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4c76:	b08d      	sub	sp, #52	; 0x34
   d4c78:	460e      	mov	r6, r1
   d4c7a:	f100 0704 	add.w	r7, r0, #4
   d4c7e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4c82:	d002      	beq.n	d4c8a <_ZNK9IPAddress7printToER5Print+0x1a>
   d4c84:	f100 0508 	add.w	r5, r0, #8
   d4c88:	e018      	b.n	d4cbc <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4c8a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4c8c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4c8e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4c92:	232f      	movs	r3, #47	; 0x2f
   d4c94:	462a      	mov	r2, r5
   d4c96:	200a      	movs	r0, #10
   d4c98:	f7ff fbea 	bl	d4470 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4c9c:	4628      	mov	r0, r5
   d4c9e:	f001 fa67 	bl	d6170 <strlen>
   d4ca2:	6833      	ldr	r3, [r6, #0]
   d4ca4:	4602      	mov	r2, r0
   d4ca6:	68db      	ldr	r3, [r3, #12]
   d4ca8:	4629      	mov	r1, r5
   d4caa:	4630      	mov	r0, r6
   d4cac:	4798      	blx	r3
   d4cae:	e00f      	b.n	d4cd0 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4cb0:	b124      	cbz	r4, d4cbc <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4cb2:	212e      	movs	r1, #46	; 0x2e
   d4cb4:	4630      	mov	r0, r6
   d4cb6:	f7ff fded 	bl	d4894 <_ZN5Print5printEc>
   d4cba:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4cbc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4cc0:	220a      	movs	r2, #10
   d4cc2:	4630      	mov	r0, r6
   d4cc4:	f7ff fdf5 	bl	d48b2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4cc8:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4cca:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4ccc:	d1f0      	bne.n	d4cb0 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4cce:	4620      	mov	r0, r4
    }
    return n;
}
   d4cd0:	b00d      	add	sp, #52	; 0x34
   d4cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4cd4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4cd4:	b510      	push	{r4, lr}
   d4cd6:	4b05      	ldr	r3, [pc, #20]	; (d4cec <_ZN9IPAddressC1Ev+0x18>)
   d4cd8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4cda:	2211      	movs	r2, #17
   d4cdc:	f840 3b04 	str.w	r3, [r0], #4
   d4ce0:	2100      	movs	r1, #0
   d4ce2:	f001 fa14 	bl	d610e <memset>
{
    clear();
}
   d4ce6:	4620      	mov	r0, r4
   d4ce8:	bd10      	pop	{r4, pc}
   d4cea:	bf00      	nop
   d4cec:	000d6338 	.word	0x000d6338

000d4cf0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4cf0:	4603      	mov	r3, r0
   d4cf2:	4a07      	ldr	r2, [pc, #28]	; (d4d10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4cf4:	b510      	push	{r4, lr}
   d4cf6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4cfa:	f101 0210 	add.w	r2, r1, #16
   d4cfe:	f851 4b04 	ldr.w	r4, [r1], #4
   d4d02:	f843 4b04 	str.w	r4, [r3], #4
   d4d06:	4291      	cmp	r1, r2
   d4d08:	d1f9      	bne.n	d4cfe <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4d0a:	780a      	ldrb	r2, [r1, #0]
   d4d0c:	701a      	strb	r2, [r3, #0]
}
   d4d0e:	bd10      	pop	{r4, pc}
   d4d10:	000d6338 	.word	0x000d6338

000d4d14 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4d14:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4d16:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4d1a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4d1e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4d22:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4d26:	2304      	movs	r3, #4
   d4d28:	6041      	str	r1, [r0, #4]
   d4d2a:	7503      	strb	r3, [r0, #20]
   d4d2c:	bd10      	pop	{r4, pc}

000d4d2e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4d2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4d30:	780d      	ldrb	r5, [r1, #0]
   d4d32:	788b      	ldrb	r3, [r1, #2]
   d4d34:	784a      	ldrb	r2, [r1, #1]
   d4d36:	78c9      	ldrb	r1, [r1, #3]
   d4d38:	9100      	str	r1, [sp, #0]
   d4d3a:	4629      	mov	r1, r5
   d4d3c:	f7ff ffea 	bl	d4d14 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4d40:	b003      	add	sp, #12
   d4d42:	bd30      	pop	{r4, r5, pc}

000d4d44 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4d44:	7441      	strb	r1, [r0, #17]
   d4d46:	4770      	bx	lr

000d4d48 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4d48:	4770      	bx	lr

000d4d4a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4d4a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4d4c:	2100      	movs	r1, #0
   d4d4e:	7c00      	ldrb	r0, [r0, #16]
   d4d50:	f7ff fc3e 	bl	d45d0 <HAL_USB_USART_Receive_Data>
}
   d4d54:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4d58:	bf28      	it	cs
   d4d5a:	f04f 30ff 	movcs.w	r0, #4294967295
   d4d5e:	bd08      	pop	{r3, pc}

000d4d60 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4d60:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4d62:	2101      	movs	r1, #1
   d4d64:	7c00      	ldrb	r0, [r0, #16]
   d4d66:	f7ff fc33 	bl	d45d0 <HAL_USB_USART_Receive_Data>
}
   d4d6a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4d6e:	bf28      	it	cs
   d4d70:	f04f 30ff 	movcs.w	r0, #4294967295
   d4d74:	bd08      	pop	{r3, pc}

000d4d76 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4d76:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4d78:	7c00      	ldrb	r0, [r0, #16]
   d4d7a:	f7ff fc21 	bl	d45c0 <HAL_USB_USART_Available_Data_For_Write>
}
   d4d7e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4d82:	bd08      	pop	{r3, pc}

000d4d84 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4d84:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4d86:	7c00      	ldrb	r0, [r0, #16]
   d4d88:	f7ff fc12 	bl	d45b0 <HAL_USB_USART_Available_Data>
}
   d4d8c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4d90:	bd08      	pop	{r3, pc}

000d4d92 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4d92:	7c00      	ldrb	r0, [r0, #16]
   d4d94:	f7ff bc2c 	b.w	d45f0 <HAL_USB_USART_Flush_Data>

000d4d98 <_ZN9USBSerialD0Ev>:
   d4d98:	b510      	push	{r4, lr}
   d4d9a:	2114      	movs	r1, #20
   d4d9c:	4604      	mov	r4, r0
   d4d9e:	f000 fb41 	bl	d5424 <_ZdlPvj>
   d4da2:	4620      	mov	r0, r4
   d4da4:	bd10      	pop	{r4, pc}

000d4da6 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4da6:	b538      	push	{r3, r4, r5, lr}
   d4da8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4daa:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4dac:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4dae:	f7ff fc07 	bl	d45c0 <HAL_USB_USART_Available_Data_For_Write>
   d4db2:	2800      	cmp	r0, #0
   d4db4:	dc01      	bgt.n	d4dba <_ZN9USBSerial5writeEh+0x14>
   d4db6:	7c60      	ldrb	r0, [r4, #17]
   d4db8:	b128      	cbz	r0, d4dc6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4dba:	4629      	mov	r1, r5
   d4dbc:	7c20      	ldrb	r0, [r4, #16]
   d4dbe:	f7ff fc0f 	bl	d45e0 <HAL_USB_USART_Send_Data>
   d4dc2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4dc6:	bd38      	pop	{r3, r4, r5, pc}

000d4dc8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4dc8:	b510      	push	{r4, lr}
   d4dca:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4dcc:	2300      	movs	r3, #0
   d4dce:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4dd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4dd4:	60a3      	str	r3, [r4, #8]
   d4dd6:	4b05      	ldr	r3, [pc, #20]	; (d4dec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4dd8:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4dda:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4ddc:	4608      	mov	r0, r1
{
  _serial = serial;
   d4dde:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4de0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4de2:	4611      	mov	r1, r2
   d4de4:	f7ff fbd4 	bl	d4590 <HAL_USB_USART_Init>
}
   d4de8:	4620      	mov	r0, r4
   d4dea:	bd10      	pop	{r4, pc}
   d4dec:	000d634c 	.word	0x000d634c

000d4df0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4df0:	2200      	movs	r2, #0
   d4df2:	7c00      	ldrb	r0, [r0, #16]
   d4df4:	f7ff bbd4 	b.w	d45a0 <HAL_USB_USART_Begin>

000d4df8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4df8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4dfa:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4dfc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4dfe:	2100      	movs	r1, #0
   d4e00:	f001 f985 	bl	d610e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4e04:	4620      	mov	r0, r4
   d4e06:	bd10      	pop	{r4, pc}

000d4e08 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4e08:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4e0a:	4d0e      	ldr	r5, [pc, #56]	; (d4e44 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4e0c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4e0e:	a801      	add	r0, sp, #4
   d4e10:	f7ff fff2 	bl	d4df8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4e14:	6829      	ldr	r1, [r5, #0]
   d4e16:	f011 0401 	ands.w	r4, r1, #1
   d4e1a:	d110      	bne.n	d4e3e <_Z16_fetch_usbserialv+0x36>
   d4e1c:	4628      	mov	r0, r5
   d4e1e:	f7ff f940 	bl	d40a2 <__cxa_guard_acquire>
   d4e22:	b160      	cbz	r0, d4e3e <_Z16_fetch_usbserialv+0x36>
   d4e24:	aa01      	add	r2, sp, #4
   d4e26:	4621      	mov	r1, r4
   d4e28:	4807      	ldr	r0, [pc, #28]	; (d4e48 <_Z16_fetch_usbserialv+0x40>)
   d4e2a:	f7ff ffcd 	bl	d4dc8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4e2e:	4628      	mov	r0, r5
   d4e30:	f7ff f93c 	bl	d40ac <__cxa_guard_release>
   d4e34:	4a05      	ldr	r2, [pc, #20]	; (d4e4c <_Z16_fetch_usbserialv+0x44>)
   d4e36:	4906      	ldr	r1, [pc, #24]	; (d4e50 <_Z16_fetch_usbserialv+0x48>)
   d4e38:	4803      	ldr	r0, [pc, #12]	; (d4e48 <_Z16_fetch_usbserialv+0x40>)
   d4e3a:	f000 fae5 	bl	d5408 <__aeabi_atexit>
	return _usbserial;
}
   d4e3e:	4802      	ldr	r0, [pc, #8]	; (d4e48 <_Z16_fetch_usbserialv+0x40>)
   d4e40:	b007      	add	sp, #28
   d4e42:	bd30      	pop	{r4, r5, pc}
   d4e44:	2003e414 	.word	0x2003e414
   d4e48:	2003e418 	.word	0x2003e418
   d4e4c:	2003e3b4 	.word	0x2003e3b4
   d4e50:	000d4d49 	.word	0x000d4d49

000d4e54 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4e54:	4770      	bx	lr

000d4e56 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4e56:	7441      	strb	r1, [r0, #17]
   d4e58:	4770      	bx	lr

000d4e5a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4e5a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4e5c:	7c00      	ldrb	r0, [r0, #16]
   d4e5e:	f7ff fb3f 	bl	d44e0 <HAL_USART_Available_Data_For_Write>
}
   d4e62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4e66:	bd08      	pop	{r3, pc}

000d4e68 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4e68:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d4e6a:	7c00      	ldrb	r0, [r0, #16]
   d4e6c:	f7ff fb18 	bl	d44a0 <HAL_USART_Available_Data>
}
   d4e70:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4e74:	bd08      	pop	{r3, pc}

000d4e76 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4e76:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4e78:	7c00      	ldrb	r0, [r0, #16]
   d4e7a:	f7ff fb21 	bl	d44c0 <HAL_USART_Peek_Data>
}
   d4e7e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4e82:	bf28      	it	cs
   d4e84:	f04f 30ff 	movcs.w	r0, #4294967295
   d4e88:	bd08      	pop	{r3, pc}

000d4e8a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4e8a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d4e8c:	7c00      	ldrb	r0, [r0, #16]
   d4e8e:	f7ff fb0f 	bl	d44b0 <HAL_USART_Read_Data>
}
   d4e92:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4e96:	bf28      	it	cs
   d4e98:	f04f 30ff 	movcs.w	r0, #4294967295
   d4e9c:	bd08      	pop	{r3, pc}

000d4e9e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4e9e:	7c00      	ldrb	r0, [r0, #16]
   d4ea0:	f7ff bb16 	b.w	d44d0 <HAL_USART_Flush_Data>

000d4ea4 <_ZN11USARTSerialD0Ev>:
   d4ea4:	b510      	push	{r4, lr}
   d4ea6:	2114      	movs	r1, #20
   d4ea8:	4604      	mov	r4, r0
   d4eaa:	f000 fabb 	bl	d5424 <_ZdlPvj>
   d4eae:	4620      	mov	r0, r4
   d4eb0:	bd10      	pop	{r4, pc}

000d4eb2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4eb2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4eb4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4eb6:	4604      	mov	r4, r0
   d4eb8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4eba:	b925      	cbnz	r5, d4ec6 <_ZN11USARTSerial5writeEh+0x14>
   d4ebc:	7c00      	ldrb	r0, [r0, #16]
   d4ebe:	f7ff fb0f 	bl	d44e0 <HAL_USART_Available_Data_For_Write>
   d4ec2:	2800      	cmp	r0, #0
   d4ec4:	dd05      	ble.n	d4ed2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4ec6:	4631      	mov	r1, r6
   d4ec8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4eca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4ece:	f7ff badf 	b.w	d4490 <HAL_USART_Write_Data>
  }
  return 0;
}
   d4ed2:	4628      	mov	r0, r5
   d4ed4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4ed8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4ed8:	b510      	push	{r4, lr}
   d4eda:	4604      	mov	r4, r0
   d4edc:	4608      	mov	r0, r1
   d4ede:	4611      	mov	r1, r2
   d4ee0:	2200      	movs	r2, #0
   d4ee2:	6062      	str	r2, [r4, #4]
   d4ee4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4ee8:	60a2      	str	r2, [r4, #8]
   d4eea:	4a05      	ldr	r2, [pc, #20]	; (d4f00 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d4eec:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d4eee:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4ef0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4ef2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d4ef4:	461a      	mov	r2, r3
   d4ef6:	f7ff fac3 	bl	d4480 <HAL_USART_Init>
}
   d4efa:	4620      	mov	r0, r4
   d4efc:	bd10      	pop	{r4, pc}
   d4efe:	bf00      	nop
   d4f00:	000d637c 	.word	0x000d637c

000d4f04 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4f04:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4f06:	4d0c      	ldr	r5, [pc, #48]	; (d4f38 <_Z22__fetch_global_Serial1v+0x34>)
   d4f08:	6829      	ldr	r1, [r5, #0]
   d4f0a:	f011 0401 	ands.w	r4, r1, #1
   d4f0e:	d111      	bne.n	d4f34 <_Z22__fetch_global_Serial1v+0x30>
   d4f10:	4628      	mov	r0, r5
   d4f12:	f7ff f8c6 	bl	d40a2 <__cxa_guard_acquire>
   d4f16:	b168      	cbz	r0, d4f34 <_Z22__fetch_global_Serial1v+0x30>
   d4f18:	4a08      	ldr	r2, [pc, #32]	; (d4f3c <_Z22__fetch_global_Serial1v+0x38>)
   d4f1a:	4b09      	ldr	r3, [pc, #36]	; (d4f40 <_Z22__fetch_global_Serial1v+0x3c>)
   d4f1c:	4809      	ldr	r0, [pc, #36]	; (d4f44 <_Z22__fetch_global_Serial1v+0x40>)
   d4f1e:	4621      	mov	r1, r4
   d4f20:	f7ff ffda 	bl	d4ed8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d4f24:	4628      	mov	r0, r5
   d4f26:	f7ff f8c1 	bl	d40ac <__cxa_guard_release>
   d4f2a:	4a07      	ldr	r2, [pc, #28]	; (d4f48 <_Z22__fetch_global_Serial1v+0x44>)
   d4f2c:	4907      	ldr	r1, [pc, #28]	; (d4f4c <_Z22__fetch_global_Serial1v+0x48>)
   d4f2e:	4805      	ldr	r0, [pc, #20]	; (d4f44 <_Z22__fetch_global_Serial1v+0x40>)
   d4f30:	f000 fa6a 	bl	d5408 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4f34:	4803      	ldr	r0, [pc, #12]	; (d4f44 <_Z22__fetch_global_Serial1v+0x40>)
   d4f36:	bd38      	pop	{r3, r4, r5, pc}
   d4f38:	2003e4c4 	.word	0x2003e4c4
   d4f3c:	2003e4c8 	.word	0x2003e4c8
   d4f40:	2003e440 	.word	0x2003e440
   d4f44:	2003e42c 	.word	0x2003e42c
   d4f48:	2003e3b4 	.word	0x2003e3b4
   d4f4c:	000d4e55 	.word	0x000d4e55

000d4f50 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d4f50:	4770      	bx	lr

000d4f52 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4f52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4f54:	4606      	mov	r6, r0
   d4f56:	4615      	mov	r5, r2
   d4f58:	460c      	mov	r4, r1
   d4f5a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4f5c:	42bc      	cmp	r4, r7
   d4f5e:	d006      	beq.n	d4f6e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4f60:	6833      	ldr	r3, [r6, #0]
   d4f62:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4f66:	689b      	ldr	r3, [r3, #8]
   d4f68:	4630      	mov	r0, r6
   d4f6a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4f6c:	e7f6      	b.n	d4f5c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4f6e:	4628      	mov	r0, r5
   d4f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4f72 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4f72:	2200      	movs	r2, #0
   d4f74:	7c00      	ldrb	r0, [r0, #16]
   d4f76:	f7ff bad3 	b.w	d4520 <HAL_I2C_Write_Data>

000d4f7a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4f7a:	2100      	movs	r1, #0
   d4f7c:	7c00      	ldrb	r0, [r0, #16]
   d4f7e:	f7ff bad7 	b.w	d4530 <HAL_I2C_Available_Data>

000d4f82 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4f82:	2100      	movs	r1, #0
   d4f84:	7c00      	ldrb	r0, [r0, #16]
   d4f86:	f7ff badb 	b.w	d4540 <HAL_I2C_Read_Data>

000d4f8a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4f8a:	2100      	movs	r1, #0
   d4f8c:	7c00      	ldrb	r0, [r0, #16]
   d4f8e:	f7ff badf 	b.w	d4550 <HAL_I2C_Peek_Data>

000d4f92 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4f92:	2100      	movs	r1, #0
   d4f94:	7c00      	ldrb	r0, [r0, #16]
   d4f96:	f7ff bae3 	b.w	d4560 <HAL_I2C_Flush_Data>

000d4f9a <_ZN7TwoWireD0Ev>:
   d4f9a:	b510      	push	{r4, lr}
   d4f9c:	2114      	movs	r1, #20
   d4f9e:	4604      	mov	r4, r0
   d4fa0:	f000 fa40 	bl	d5424 <_ZdlPvj>
   d4fa4:	4620      	mov	r0, r4
   d4fa6:	bd10      	pop	{r4, pc}

000d4fa8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4fa8:	b510      	push	{r4, lr}
   d4faa:	4604      	mov	r4, r0
   d4fac:	2300      	movs	r3, #0
   d4fae:	6063      	str	r3, [r4, #4]
   d4fb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4fb4:	60a3      	str	r3, [r4, #8]
   d4fb6:	4b04      	ldr	r3, [pc, #16]	; (d4fc8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d4fb8:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4fba:	4608      	mov	r0, r1
   d4fbc:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d4fbe:	4611      	mov	r1, r2
   d4fc0:	f7ff fad6 	bl	d4570 <HAL_I2C_Init>
}
   d4fc4:	4620      	mov	r0, r4
   d4fc6:	bd10      	pop	{r4, pc}
   d4fc8:	000d63ac 	.word	0x000d63ac

000d4fcc <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d4fcc:	2300      	movs	r3, #0
   d4fce:	461a      	mov	r2, r3
   d4fd0:	4619      	mov	r1, r3
   d4fd2:	7c00      	ldrb	r0, [r0, #16]
   d4fd4:	f7ff ba8c 	b.w	d44f0 <HAL_I2C_Begin>

000d4fd8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d4fd8:	b570      	push	{r4, r5, r6, lr}
   d4fda:	460c      	mov	r4, r1
   d4fdc:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d4fde:	2514      	movs	r5, #20
   d4fe0:	4606      	mov	r6, r0
   d4fe2:	462a      	mov	r2, r5
   d4fe4:	2100      	movs	r1, #0
   d4fe6:	a801      	add	r0, sp, #4
   d4fe8:	f001 f891 	bl	d610e <memset>
   d4fec:	7823      	ldrb	r3, [r4, #0]
   d4fee:	f88d 3008 	strb.w	r3, [sp, #8]
   d4ff2:	6863      	ldr	r3, [r4, #4]
   d4ff4:	9303      	str	r3, [sp, #12]
   d4ff6:	68e3      	ldr	r3, [r4, #12]
   d4ff8:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d4ffa:	2200      	movs	r2, #0
   d4ffc:	7a23      	ldrb	r3, [r4, #8]
   d4ffe:	7c30      	ldrb	r0, [r6, #16]
   d5000:	f8ad 5004 	strh.w	r5, [sp, #4]
   d5004:	a901      	add	r1, sp, #4
   d5006:	9305      	str	r3, [sp, #20]
   d5008:	f7ff faba 	bl	d4580 <HAL_I2C_Request_Data_Ex>
}
   d500c:	b006      	add	sp, #24
   d500e:	bd70      	pop	{r4, r5, r6, pc}

000d5010 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d5010:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5012:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d5014:	f88d 1000 	strb.w	r1, [sp]
   d5018:	f04f 0164 	mov.w	r1, #100	; 0x64
   d501c:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d501e:	bf18      	it	ne
   d5020:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d5022:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d5024:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5026:	f88d 3008 	strb.w	r3, [sp, #8]
   d502a:	f7ff ffd5 	bl	d4fd8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d502e:	b005      	add	sp, #20
   d5030:	f85d fb04 	ldr.w	pc, [sp], #4

000d5034 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5034:	2200      	movs	r2, #0
   d5036:	7c00      	ldrb	r0, [r0, #16]
   d5038:	f7ff ba62 	b.w	d4500 <HAL_I2C_Begin_Transmission>

000d503c <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d503c:	b2c9      	uxtb	r1, r1
   d503e:	f7ff bff9 	b.w	d5034 <_ZN7TwoWire17beginTransmissionEh>

000d5042 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5042:	2200      	movs	r2, #0
   d5044:	7c00      	ldrb	r0, [r0, #16]
   d5046:	f7ff ba63 	b.w	d4510 <HAL_I2C_End_Transmission>

000d504a <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d504a:	2200      	movs	r2, #0
   d504c:	4611      	mov	r1, r2
   d504e:	6840      	ldr	r0, [r0, #4]
   d5050:	f7ff bb32 	b.w	d46b8 <network_listening>

000d5054 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5054:	2200      	movs	r2, #0
   d5056:	4611      	mov	r1, r2
   d5058:	6840      	ldr	r0, [r0, #4]
   d505a:	f7ff bb3d 	b.w	d46d8 <network_get_listen_timeout>

000d505e <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d505e:	2200      	movs	r2, #0
   d5060:	6840      	ldr	r0, [r0, #4]
   d5062:	f7ff bb31 	b.w	d46c8 <network_set_listen_timeout>

000d5066 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5066:	2200      	movs	r2, #0
   d5068:	f081 0101 	eor.w	r1, r1, #1
   d506c:	6840      	ldr	r0, [r0, #4]
   d506e:	f7ff bb1b 	b.w	d46a8 <network_listen>

000d5072 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5072:	2300      	movs	r3, #0
   d5074:	461a      	mov	r2, r3
   d5076:	2101      	movs	r1, #1
   d5078:	6840      	ldr	r0, [r0, #4]
   d507a:	f7ff bb0d 	b.w	d4698 <network_off>

000d507e <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d507e:	2300      	movs	r3, #0
   d5080:	461a      	mov	r2, r3
   d5082:	4619      	mov	r1, r3
   d5084:	6840      	ldr	r0, [r0, #4]
   d5086:	f7ff baff 	b.w	d4688 <network_on>

000d508a <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d508a:	2200      	movs	r2, #0
   d508c:	4611      	mov	r1, r2
   d508e:	6840      	ldr	r0, [r0, #4]
   d5090:	f7ff baf2 	b.w	d4678 <network_ready>

000d5094 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5094:	2200      	movs	r2, #0
   d5096:	4611      	mov	r1, r2
   d5098:	6840      	ldr	r0, [r0, #4]
   d509a:	f7ff badd 	b.w	d4658 <network_connecting>

000d509e <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d509e:	2200      	movs	r2, #0
   d50a0:	2102      	movs	r1, #2
   d50a2:	6840      	ldr	r0, [r0, #4]
   d50a4:	f7ff bae0 	b.w	d4668 <network_disconnect>

000d50a8 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d50a8:	2300      	movs	r3, #0
   d50aa:	461a      	mov	r2, r3
   d50ac:	6840      	ldr	r0, [r0, #4]
   d50ae:	f7ff bacb 	b.w	d4648 <network_connect>

000d50b2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d50b2:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d50b4:	4605      	mov	r5, r0
   d50b6:	b188      	cbz	r0, d50dc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d50b8:	6804      	ldr	r4, [r0, #0]
   d50ba:	b14c      	cbz	r4, d50d0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d50bc:	68a3      	ldr	r3, [r4, #8]
   d50be:	b11b      	cbz	r3, d50c8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d50c0:	2203      	movs	r2, #3
   d50c2:	4621      	mov	r1, r4
   d50c4:	4620      	mov	r0, r4
   d50c6:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d50c8:	2110      	movs	r1, #16
   d50ca:	4620      	mov	r0, r4
   d50cc:	f000 f9aa 	bl	d5424 <_ZdlPvj>
   d50d0:	4628      	mov	r0, r5
   d50d2:	2114      	movs	r1, #20
      }
   d50d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d50d8:	f000 b9a4 	b.w	d5424 <_ZdlPvj>
   d50dc:	bd38      	pop	{r3, r4, r5, pc}

000d50de <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d50de:	b110      	cbz	r0, d50e6 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d50e0:	6803      	ldr	r3, [r0, #0]
   d50e2:	685b      	ldr	r3, [r3, #4]
   d50e4:	4718      	bx	r3
   d50e6:	4770      	bx	lr

000d50e8 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d50e8:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d50ea:	6803      	ldr	r3, [r0, #0]
   d50ec:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d50ee:	b1bb      	cbz	r3, d5120 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d50f0:	6858      	ldr	r0, [r3, #4]
   d50f2:	f7ff f995 	bl	d4420 <os_thread_is_current>
   d50f6:	b978      	cbnz	r0, d5118 <_ZN6ThreadD1Ev+0x30>
   d50f8:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d50fa:	7c5a      	ldrb	r2, [r3, #17]
   d50fc:	b912      	cbnz	r2, d5104 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d50fe:	6858      	ldr	r0, [r3, #4]
   d5100:	f7ff f996 	bl	d4430 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5104:	6823      	ldr	r3, [r4, #0]
   d5106:	6858      	ldr	r0, [r3, #4]
   d5108:	f7ff f99a 	bl	d4440 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d510c:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d510e:	2300      	movs	r3, #0
   d5110:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5112:	b128      	cbz	r0, d5120 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5114:	f7ff ffcd 	bl	d50b2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5118:	6820      	ldr	r0, [r4, #0]
   d511a:	b108      	cbz	r0, d5120 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d511c:	f7ff ffc9 	bl	d50b2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5120:	4620      	mov	r0, r4
   d5122:	bd10      	pop	{r4, pc}

000d5124 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d5124:	b538      	push	{r3, r4, r5, lr}
   d5126:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5128:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d512c:	b108      	cbz	r0, d5132 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d512e:	f7fe ffb6 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5132:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5136:	b108      	cbz	r0, d513c <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d5138:	f7ff f992 	bl	d4460 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d513c:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d5140:	b135      	cbz	r5, d5150 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5142:	4628      	mov	r0, r5
   d5144:	f7ff ffd0 	bl	d50e8 <_ZN6ThreadD1Ev>
   d5148:	2104      	movs	r1, #4
   d514a:	4628      	mov	r0, r5
   d514c:	f000 f96a 	bl	d5424 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5150:	6820      	ldr	r0, [r4, #0]
   d5152:	b108      	cbz	r0, d5158 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5154:	f7ff ffc3 	bl	d50de <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5158:	4620      	mov	r0, r4
   d515a:	bd38      	pop	{r3, r4, r5, pc}

000d515c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d515c:	b510      	push	{r4, lr}
   d515e:	4b04      	ldr	r3, [pc, #16]	; (d5170 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5160:	4604      	mov	r4, r0
   d5162:	f840 3b08 	str.w	r3, [r0], #8
   d5166:	f7ff ffdd 	bl	d5124 <_ZN5spark11MeshPublishD1Ev>
   d516a:	4620      	mov	r0, r4
   d516c:	bd10      	pop	{r4, pc}
   d516e:	bf00      	nop
   d5170:	000d63d4 	.word	0x000d63d4

000d5174 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5174:	b538      	push	{r3, r4, r5, lr}
   d5176:	4c0e      	ldr	r4, [pc, #56]	; (d51b0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5178:	4b0e      	ldr	r3, [pc, #56]	; (d51b4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d517a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d517c:	2500      	movs	r5, #0
   d517e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5180:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5184:	6063      	str	r3, [r4, #4]
   d5186:	60a5      	str	r5, [r4, #8]
   d5188:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d518c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5190:	f7ff f95e 	bl	d4450 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5194:	4b08      	ldr	r3, [pc, #32]	; (d51b8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5196:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d519a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d519e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d51a0:	4620      	mov	r0, r4
   d51a2:	4a06      	ldr	r2, [pc, #24]	; (d51bc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d51a4:	4906      	ldr	r1, [pc, #24]	; (d51c0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d51a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d51aa:	f000 b92d 	b.w	d5408 <__aeabi_atexit>
   d51ae:	bf00      	nop
   d51b0:	2003e54c 	.word	0x2003e54c
   d51b4:	000d643c 	.word	0x000d643c
   d51b8:	000d63d4 	.word	0x000d63d4
   d51bc:	2003e3b4 	.word	0x2003e3b4
   d51c0:	000d515d 	.word	0x000d515d

000d51c4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d51c4:	2200      	movs	r2, #0
   d51c6:	4611      	mov	r1, r2
   d51c8:	6840      	ldr	r0, [r0, #4]
   d51ca:	f7ff ba55 	b.w	d4678 <network_ready>

000d51ce <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d51ce:	2200      	movs	r2, #0
   d51d0:	4611      	mov	r1, r2
   d51d2:	6840      	ldr	r0, [r0, #4]
   d51d4:	f7ff ba70 	b.w	d46b8 <network_listening>

000d51d8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d51d8:	2200      	movs	r2, #0
   d51da:	4611      	mov	r1, r2
   d51dc:	6840      	ldr	r0, [r0, #4]
   d51de:	f7ff ba7b 	b.w	d46d8 <network_get_listen_timeout>

000d51e2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d51e2:	2200      	movs	r2, #0
   d51e4:	6840      	ldr	r0, [r0, #4]
   d51e6:	f7ff ba6f 	b.w	d46c8 <network_set_listen_timeout>

000d51ea <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d51ea:	2200      	movs	r2, #0
   d51ec:	f081 0101 	eor.w	r1, r1, #1
   d51f0:	6840      	ldr	r0, [r0, #4]
   d51f2:	f7ff ba59 	b.w	d46a8 <network_listen>

000d51f6 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d51f6:	2300      	movs	r3, #0
   d51f8:	461a      	mov	r2, r3
   d51fa:	4619      	mov	r1, r3
   d51fc:	6840      	ldr	r0, [r0, #4]
   d51fe:	f7ff ba4b 	b.w	d4698 <network_off>

000d5202 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5202:	2300      	movs	r3, #0
   d5204:	461a      	mov	r2, r3
   d5206:	4619      	mov	r1, r3
   d5208:	6840      	ldr	r0, [r0, #4]
   d520a:	f7ff ba3d 	b.w	d4688 <network_on>

000d520e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d520e:	2200      	movs	r2, #0
   d5210:	4611      	mov	r1, r2
   d5212:	6840      	ldr	r0, [r0, #4]
   d5214:	f7ff ba20 	b.w	d4658 <network_connecting>

000d5218 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5218:	2200      	movs	r2, #0
   d521a:	2102      	movs	r1, #2
   d521c:	6840      	ldr	r0, [r0, #4]
   d521e:	f7ff ba23 	b.w	d4668 <network_disconnect>

000d5222 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5222:	2300      	movs	r3, #0
   d5224:	461a      	mov	r2, r3
   d5226:	6840      	ldr	r0, [r0, #4]
   d5228:	f7ff ba0e 	b.w	d4648 <network_connect>

000d522c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d522c:	4b02      	ldr	r3, [pc, #8]	; (d5238 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d522e:	2204      	movs	r2, #4
   d5230:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5232:	4a02      	ldr	r2, [pc, #8]	; (d523c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5234:	601a      	str	r2, [r3, #0]
   d5236:	4770      	bx	lr
   d5238:	2003e720 	.word	0x2003e720
   d523c:	000d6408 	.word	0x000d6408

000d5240 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5240:	2300      	movs	r3, #0
   d5242:	461a      	mov	r2, r3
   d5244:	6840      	ldr	r0, [r0, #4]
   d5246:	f7ff b9ff 	b.w	d4648 <network_connect>

000d524a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d524a:	2200      	movs	r2, #0
   d524c:	2102      	movs	r1, #2
   d524e:	6840      	ldr	r0, [r0, #4]
   d5250:	f7ff ba0a 	b.w	d4668 <network_disconnect>

000d5254 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5254:	2200      	movs	r2, #0
   d5256:	4611      	mov	r1, r2
   d5258:	6840      	ldr	r0, [r0, #4]
   d525a:	f7ff b9fd 	b.w	d4658 <network_connecting>

000d525e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d525e:	2200      	movs	r2, #0
   d5260:	4611      	mov	r1, r2
   d5262:	6840      	ldr	r0, [r0, #4]
   d5264:	f7ff ba08 	b.w	d4678 <network_ready>

000d5268 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5268:	2300      	movs	r3, #0
   d526a:	461a      	mov	r2, r3
   d526c:	4619      	mov	r1, r3
   d526e:	6840      	ldr	r0, [r0, #4]
   d5270:	f7ff ba0a 	b.w	d4688 <network_on>

000d5274 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5274:	2300      	movs	r3, #0
   d5276:	461a      	mov	r2, r3
   d5278:	4619      	mov	r1, r3
   d527a:	6840      	ldr	r0, [r0, #4]
   d527c:	f7ff ba0c 	b.w	d4698 <network_off>

000d5280 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5280:	2200      	movs	r2, #0
   d5282:	f081 0101 	eor.w	r1, r1, #1
   d5286:	6840      	ldr	r0, [r0, #4]
   d5288:	f7ff ba0e 	b.w	d46a8 <network_listen>

000d528c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d528c:	2200      	movs	r2, #0
   d528e:	6840      	ldr	r0, [r0, #4]
   d5290:	f7ff ba1a 	b.w	d46c8 <network_set_listen_timeout>

000d5294 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5294:	2200      	movs	r2, #0
   d5296:	4611      	mov	r1, r2
   d5298:	6840      	ldr	r0, [r0, #4]
   d529a:	f7ff ba1d 	b.w	d46d8 <network_get_listen_timeout>

000d529e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d529e:	2200      	movs	r2, #0
   d52a0:	4611      	mov	r1, r2
   d52a2:	6840      	ldr	r0, [r0, #4]
   d52a4:	f7ff ba08 	b.w	d46b8 <network_listening>

000d52a8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d52a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d52ac:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d52ae:	b095      	sub	sp, #84	; 0x54
   d52b0:	4616      	mov	r6, r2
   d52b2:	460d      	mov	r5, r1
   d52b4:	4607      	mov	r7, r0
    IPAddress addr;
   d52b6:	f7ff fd0d 	bl	d4cd4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d52ba:	4621      	mov	r1, r4
   d52bc:	2220      	movs	r2, #32
   d52be:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d52c0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d52c2:	f000 ff24 	bl	d610e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d52c6:	2340      	movs	r3, #64	; 0x40
   d52c8:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d52ca:	4621      	mov	r1, r4
   d52cc:	466b      	mov	r3, sp
   d52ce:	aa0c      	add	r2, sp, #48	; 0x30
   d52d0:	4630      	mov	r0, r6
   d52d2:	f7ff f885 	bl	d43e0 <netdb_getaddrinfo>
    if (!r) {
   d52d6:	4604      	mov	r4, r0
   d52d8:	2800      	cmp	r0, #0
   d52da:	d144      	bne.n	d5366 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d52dc:	4602      	mov	r2, r0
   d52de:	2101      	movs	r1, #1
   d52e0:	6868      	ldr	r0, [r5, #4]
   d52e2:	f7ff f9c9 	bl	d4678 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d52e6:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d52e8:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d52ea:	4622      	mov	r2, r4
   d52ec:	6868      	ldr	r0, [r5, #4]
   d52ee:	f7ff f9c3 	bl	d4678 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d52f2:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d52f4:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d52f6:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d52f8:	2e00      	cmp	r6, #0
   d52fa:	d034      	beq.n	d5366 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d52fc:	2900      	cmp	r1, #0
   d52fe:	d132      	bne.n	d5366 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5300:	6873      	ldr	r3, [r6, #4]
   d5302:	2b02      	cmp	r3, #2
   d5304:	d002      	beq.n	d530c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5306:	2b0a      	cmp	r3, #10
   d5308:	d009      	beq.n	d531e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d530a:	e02a      	b.n	d5362 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d530c:	f1b8 0f00 	cmp.w	r8, #0
   d5310:	d027      	beq.n	d5362 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5312:	6971      	ldr	r1, [r6, #20]
   d5314:	4638      	mov	r0, r7
   d5316:	3104      	adds	r1, #4
   d5318:	f7ff fd09 	bl	d4d2e <_ZN9IPAddressaSEPKh>
   d531c:	e020      	b.n	d5360 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d531e:	f1b9 0f00 	cmp.w	r9, #0
   d5322:	d01e      	beq.n	d5362 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5324:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5326:	2211      	movs	r2, #17
   d5328:	a801      	add	r0, sp, #4
   d532a:	f000 fef0 	bl	d610e <memset>
                    a.v = 6;
   d532e:	2306      	movs	r3, #6
   d5330:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5334:	ad01      	add	r5, sp, #4
   d5336:	f104 0308 	add.w	r3, r4, #8
   d533a:	3418      	adds	r4, #24
   d533c:	6818      	ldr	r0, [r3, #0]
   d533e:	6859      	ldr	r1, [r3, #4]
   d5340:	462a      	mov	r2, r5
   d5342:	c203      	stmia	r2!, {r0, r1}
   d5344:	3308      	adds	r3, #8
   d5346:	42a3      	cmp	r3, r4
   d5348:	4615      	mov	r5, r2
   d534a:	d1f7      	bne.n	d533c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d534c:	a901      	add	r1, sp, #4
   d534e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5350:	ad07      	add	r5, sp, #28
   d5352:	f7ff fccd 	bl	d4cf0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5356:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5358:	1d3c      	adds	r4, r7, #4
   d535a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d535c:	682b      	ldr	r3, [r5, #0]
   d535e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5360:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5362:	69f6      	ldr	r6, [r6, #28]
   d5364:	e7c8      	b.n	d52f8 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5366:	9800      	ldr	r0, [sp, #0]
   d5368:	f7ff f832 	bl	d43d0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d536c:	4638      	mov	r0, r7
   d536e:	b015      	add	sp, #84	; 0x54
   d5370:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5374 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5374:	4b02      	ldr	r3, [pc, #8]	; (d5380 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5376:	4a03      	ldr	r2, [pc, #12]	; (d5384 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5378:	601a      	str	r2, [r3, #0]
   d537a:	2200      	movs	r2, #0
   d537c:	605a      	str	r2, [r3, #4]
   d537e:	4770      	bx	lr
   d5380:	2003e728 	.word	0x2003e728
   d5384:	000d643c 	.word	0x000d643c

000d5388 <_Z17acquireWireBufferv>:
   d5388:	b570      	push	{r4, r5, r6, lr}
   d538a:	4604      	mov	r4, r0
   d538c:	2514      	movs	r5, #20
   d538e:	462a      	mov	r2, r5
   d5390:	4e09      	ldr	r6, [pc, #36]	; (d53b8 <_Z17acquireWireBufferv+0x30>)
   d5392:	2100      	movs	r1, #0
   d5394:	f000 febb 	bl	d610e <memset>
   d5398:	8025      	strh	r5, [r4, #0]
   d539a:	2520      	movs	r5, #32
   d539c:	4631      	mov	r1, r6
   d539e:	60a5      	str	r5, [r4, #8]
   d53a0:	6125      	str	r5, [r4, #16]
   d53a2:	4628      	mov	r0, r5
   d53a4:	f000 f840 	bl	d5428 <_ZnajRKSt9nothrow_t>
   d53a8:	4631      	mov	r1, r6
   d53aa:	6060      	str	r0, [r4, #4]
   d53ac:	4628      	mov	r0, r5
   d53ae:	f000 f83b 	bl	d5428 <_ZnajRKSt9nothrow_t>
   d53b2:	60e0      	str	r0, [r4, #12]
   d53b4:	4620      	mov	r0, r4
   d53b6:	bd70      	pop	{r4, r5, r6, pc}
   d53b8:	000d6468 	.word	0x000d6468

000d53bc <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d53bc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d53be:	4d0e      	ldr	r5, [pc, #56]	; (d53f8 <_Z19__fetch_global_Wirev+0x3c>)
   d53c0:	6829      	ldr	r1, [r5, #0]
   d53c2:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d53c6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d53c8:	d113      	bne.n	d53f2 <_Z19__fetch_global_Wirev+0x36>
   d53ca:	4628      	mov	r0, r5
   d53cc:	f7fe fe69 	bl	d40a2 <__cxa_guard_acquire>
   d53d0:	b178      	cbz	r0, d53f2 <_Z19__fetch_global_Wirev+0x36>
   d53d2:	a801      	add	r0, sp, #4
   d53d4:	f7ff ffd8 	bl	d5388 <_Z17acquireWireBufferv>
   d53d8:	aa01      	add	r2, sp, #4
   d53da:	4621      	mov	r1, r4
   d53dc:	4807      	ldr	r0, [pc, #28]	; (d53fc <_Z19__fetch_global_Wirev+0x40>)
   d53de:	f7ff fde3 	bl	d4fa8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d53e2:	4628      	mov	r0, r5
   d53e4:	f7fe fe62 	bl	d40ac <__cxa_guard_release>
   d53e8:	4a05      	ldr	r2, [pc, #20]	; (d5400 <_Z19__fetch_global_Wirev+0x44>)
   d53ea:	4906      	ldr	r1, [pc, #24]	; (d5404 <_Z19__fetch_global_Wirev+0x48>)
   d53ec:	4803      	ldr	r0, [pc, #12]	; (d53fc <_Z19__fetch_global_Wirev+0x40>)
   d53ee:	f000 f80b 	bl	d5408 <__aeabi_atexit>
	return wire;
}
   d53f2:	4802      	ldr	r0, [pc, #8]	; (d53fc <_Z19__fetch_global_Wirev+0x40>)
   d53f4:	b007      	add	sp, #28
   d53f6:	bd30      	pop	{r4, r5, pc}
   d53f8:	2003e734 	.word	0x2003e734
   d53fc:	2003e738 	.word	0x2003e738
   d5400:	2003e3b4 	.word	0x2003e3b4
   d5404:	000d4f51 	.word	0x000d4f51

000d5408 <__aeabi_atexit>:
   d5408:	460b      	mov	r3, r1
   d540a:	4601      	mov	r1, r0
   d540c:	4618      	mov	r0, r3
   d540e:	f000 be65 	b.w	d60dc <__cxa_atexit>
	...

000d5414 <_ZSt15get_new_handlerv>:
   d5414:	4b02      	ldr	r3, [pc, #8]	; (d5420 <_ZSt15get_new_handlerv+0xc>)
   d5416:	6818      	ldr	r0, [r3, #0]
   d5418:	f3bf 8f5f 	dmb	sy
   d541c:	4770      	bx	lr
   d541e:	bf00      	nop
   d5420:	2003e74c 	.word	0x2003e74c

000d5424 <_ZdlPvj>:
   d5424:	f7fe be39 	b.w	d409a <_ZdlPv>

000d5428 <_ZnajRKSt9nothrow_t>:
   d5428:	f000 b800 	b.w	d542c <_ZnwjRKSt9nothrow_t>

000d542c <_ZnwjRKSt9nothrow_t>:
   d542c:	b510      	push	{r4, lr}
   d542e:	2800      	cmp	r0, #0
   d5430:	bf14      	ite	ne
   d5432:	4604      	movne	r4, r0
   d5434:	2401      	moveq	r4, #1
   d5436:	4620      	mov	r0, r4
   d5438:	f7ff f95e 	bl	d46f8 <malloc>
   d543c:	b920      	cbnz	r0, d5448 <_ZnwjRKSt9nothrow_t+0x1c>
   d543e:	f7ff ffe9 	bl	d5414 <_ZSt15get_new_handlerv>
   d5442:	b108      	cbz	r0, d5448 <_ZnwjRKSt9nothrow_t+0x1c>
   d5444:	4780      	blx	r0
   d5446:	e7f6      	b.n	d5436 <_ZnwjRKSt9nothrow_t+0xa>
   d5448:	bd10      	pop	{r4, pc}
	...

000d544c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d544c:	4b18      	ldr	r3, [pc, #96]	; (d54b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d544e:	681a      	ldr	r2, [r3, #0]
   d5450:	07d1      	lsls	r1, r2, #31
   d5452:	bf5c      	itt	pl
   d5454:	2201      	movpl	r2, #1
   d5456:	601a      	strpl	r2, [r3, #0]
   d5458:	4b16      	ldr	r3, [pc, #88]	; (d54b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d545a:	681a      	ldr	r2, [r3, #0]
   d545c:	07d2      	lsls	r2, r2, #31
   d545e:	bf5c      	itt	pl
   d5460:	2201      	movpl	r2, #1
   d5462:	601a      	strpl	r2, [r3, #0]
   d5464:	4b14      	ldr	r3, [pc, #80]	; (d54b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5466:	681a      	ldr	r2, [r3, #0]
   d5468:	07d0      	lsls	r0, r2, #31
   d546a:	bf5c      	itt	pl
   d546c:	2201      	movpl	r2, #1
   d546e:	601a      	strpl	r2, [r3, #0]
   d5470:	4b12      	ldr	r3, [pc, #72]	; (d54bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5472:	681a      	ldr	r2, [r3, #0]
   d5474:	07d1      	lsls	r1, r2, #31
   d5476:	bf5c      	itt	pl
   d5478:	2201      	movpl	r2, #1
   d547a:	601a      	strpl	r2, [r3, #0]
   d547c:	4b10      	ldr	r3, [pc, #64]	; (d54c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d547e:	681a      	ldr	r2, [r3, #0]
   d5480:	07d2      	lsls	r2, r2, #31
   d5482:	bf5c      	itt	pl
   d5484:	2201      	movpl	r2, #1
   d5486:	601a      	strpl	r2, [r3, #0]
   d5488:	4b0e      	ldr	r3, [pc, #56]	; (d54c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d548a:	681a      	ldr	r2, [r3, #0]
   d548c:	07d0      	lsls	r0, r2, #31
   d548e:	bf5c      	itt	pl
   d5490:	2201      	movpl	r2, #1
   d5492:	601a      	strpl	r2, [r3, #0]
   d5494:	4b0c      	ldr	r3, [pc, #48]	; (d54c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5496:	681a      	ldr	r2, [r3, #0]
   d5498:	07d1      	lsls	r1, r2, #31
   d549a:	bf5c      	itt	pl
   d549c:	2201      	movpl	r2, #1
   d549e:	601a      	strpl	r2, [r3, #0]
   d54a0:	4b0a      	ldr	r3, [pc, #40]	; (d54cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d54a2:	681a      	ldr	r2, [r3, #0]
   d54a4:	07d2      	lsls	r2, r2, #31
   d54a6:	bf5c      	itt	pl
   d54a8:	2201      	movpl	r2, #1
   d54aa:	601a      	strpl	r2, [r3, #0]
   d54ac:	4770      	bx	lr
   d54ae:	bf00      	nop
   d54b0:	2003e76c 	.word	0x2003e76c
   d54b4:	2003e768 	.word	0x2003e768
   d54b8:	2003e764 	.word	0x2003e764
   d54bc:	2003e760 	.word	0x2003e760
   d54c0:	2003e75c 	.word	0x2003e75c
   d54c4:	2003e758 	.word	0x2003e758
   d54c8:	2003e754 	.word	0x2003e754
   d54cc:	2003e750 	.word	0x2003e750

000d54d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d54d0:	4b24      	ldr	r3, [pc, #144]	; (d5564 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d54d2:	681a      	ldr	r2, [r3, #0]
   d54d4:	07d0      	lsls	r0, r2, #31
   d54d6:	bf5c      	itt	pl
   d54d8:	2201      	movpl	r2, #1
   d54da:	601a      	strpl	r2, [r3, #0]
   d54dc:	4b22      	ldr	r3, [pc, #136]	; (d5568 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d54de:	681a      	ldr	r2, [r3, #0]
   d54e0:	07d1      	lsls	r1, r2, #31
   d54e2:	bf5c      	itt	pl
   d54e4:	2201      	movpl	r2, #1
   d54e6:	601a      	strpl	r2, [r3, #0]
   d54e8:	4b20      	ldr	r3, [pc, #128]	; (d556c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d54ea:	681a      	ldr	r2, [r3, #0]
   d54ec:	07d2      	lsls	r2, r2, #31
   d54ee:	bf5c      	itt	pl
   d54f0:	2201      	movpl	r2, #1
   d54f2:	601a      	strpl	r2, [r3, #0]
   d54f4:	4b1e      	ldr	r3, [pc, #120]	; (d5570 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d54f6:	681a      	ldr	r2, [r3, #0]
   d54f8:	07d0      	lsls	r0, r2, #31
   d54fa:	bf5c      	itt	pl
   d54fc:	2201      	movpl	r2, #1
   d54fe:	601a      	strpl	r2, [r3, #0]
   d5500:	4b1c      	ldr	r3, [pc, #112]	; (d5574 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5502:	681a      	ldr	r2, [r3, #0]
   d5504:	07d1      	lsls	r1, r2, #31
   d5506:	bf5c      	itt	pl
   d5508:	2201      	movpl	r2, #1
   d550a:	601a      	strpl	r2, [r3, #0]
   d550c:	4b1a      	ldr	r3, [pc, #104]	; (d5578 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d550e:	681a      	ldr	r2, [r3, #0]
   d5510:	07d2      	lsls	r2, r2, #31
   d5512:	bf5c      	itt	pl
   d5514:	2201      	movpl	r2, #1
   d5516:	601a      	strpl	r2, [r3, #0]
   d5518:	4b18      	ldr	r3, [pc, #96]	; (d557c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d551a:	681a      	ldr	r2, [r3, #0]
   d551c:	07d0      	lsls	r0, r2, #31
   d551e:	bf5c      	itt	pl
   d5520:	2201      	movpl	r2, #1
   d5522:	601a      	strpl	r2, [r3, #0]
   d5524:	4b16      	ldr	r3, [pc, #88]	; (d5580 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5526:	681a      	ldr	r2, [r3, #0]
   d5528:	07d1      	lsls	r1, r2, #31
   d552a:	bf5c      	itt	pl
   d552c:	2201      	movpl	r2, #1
   d552e:	601a      	strpl	r2, [r3, #0]
   d5530:	4b14      	ldr	r3, [pc, #80]	; (d5584 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5532:	681a      	ldr	r2, [r3, #0]
   d5534:	07d2      	lsls	r2, r2, #31
   d5536:	bf5c      	itt	pl
   d5538:	2201      	movpl	r2, #1
   d553a:	601a      	strpl	r2, [r3, #0]
   d553c:	4b12      	ldr	r3, [pc, #72]	; (d5588 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d553e:	681a      	ldr	r2, [r3, #0]
   d5540:	07d0      	lsls	r0, r2, #31
   d5542:	bf5c      	itt	pl
   d5544:	2201      	movpl	r2, #1
   d5546:	601a      	strpl	r2, [r3, #0]
   d5548:	4b10      	ldr	r3, [pc, #64]	; (d558c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d554a:	681a      	ldr	r2, [r3, #0]
   d554c:	07d1      	lsls	r1, r2, #31
   d554e:	bf5c      	itt	pl
   d5550:	2201      	movpl	r2, #1
   d5552:	601a      	strpl	r2, [r3, #0]
   d5554:	4b0e      	ldr	r3, [pc, #56]	; (d5590 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5556:	681a      	ldr	r2, [r3, #0]
   d5558:	07d2      	lsls	r2, r2, #31
   d555a:	bf5c      	itt	pl
   d555c:	2201      	movpl	r2, #1
   d555e:	601a      	strpl	r2, [r3, #0]
   d5560:	4770      	bx	lr
   d5562:	bf00      	nop
   d5564:	2003e79c 	.word	0x2003e79c
   d5568:	2003e798 	.word	0x2003e798
   d556c:	2003e794 	.word	0x2003e794
   d5570:	2003e790 	.word	0x2003e790
   d5574:	2003e78c 	.word	0x2003e78c
   d5578:	2003e788 	.word	0x2003e788
   d557c:	2003e784 	.word	0x2003e784
   d5580:	2003e780 	.word	0x2003e780
   d5584:	2003e77c 	.word	0x2003e77c
   d5588:	2003e778 	.word	0x2003e778
   d558c:	2003e774 	.word	0x2003e774
   d5590:	2003e770 	.word	0x2003e770

000d5594 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5594:	4b24      	ldr	r3, [pc, #144]	; (d5628 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5596:	681a      	ldr	r2, [r3, #0]
   d5598:	07d0      	lsls	r0, r2, #31
   d559a:	bf5c      	itt	pl
   d559c:	2201      	movpl	r2, #1
   d559e:	601a      	strpl	r2, [r3, #0]
   d55a0:	4b22      	ldr	r3, [pc, #136]	; (d562c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d55a2:	681a      	ldr	r2, [r3, #0]
   d55a4:	07d1      	lsls	r1, r2, #31
   d55a6:	bf5c      	itt	pl
   d55a8:	2201      	movpl	r2, #1
   d55aa:	601a      	strpl	r2, [r3, #0]
   d55ac:	4b20      	ldr	r3, [pc, #128]	; (d5630 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d55ae:	681a      	ldr	r2, [r3, #0]
   d55b0:	07d2      	lsls	r2, r2, #31
   d55b2:	bf5c      	itt	pl
   d55b4:	2201      	movpl	r2, #1
   d55b6:	601a      	strpl	r2, [r3, #0]
   d55b8:	4b1e      	ldr	r3, [pc, #120]	; (d5634 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d55ba:	681a      	ldr	r2, [r3, #0]
   d55bc:	07d0      	lsls	r0, r2, #31
   d55be:	bf5c      	itt	pl
   d55c0:	2201      	movpl	r2, #1
   d55c2:	601a      	strpl	r2, [r3, #0]
   d55c4:	4b1c      	ldr	r3, [pc, #112]	; (d5638 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d55c6:	681a      	ldr	r2, [r3, #0]
   d55c8:	07d1      	lsls	r1, r2, #31
   d55ca:	bf5c      	itt	pl
   d55cc:	2201      	movpl	r2, #1
   d55ce:	601a      	strpl	r2, [r3, #0]
   d55d0:	4b1a      	ldr	r3, [pc, #104]	; (d563c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d55d2:	681a      	ldr	r2, [r3, #0]
   d55d4:	07d2      	lsls	r2, r2, #31
   d55d6:	bf5c      	itt	pl
   d55d8:	2201      	movpl	r2, #1
   d55da:	601a      	strpl	r2, [r3, #0]
   d55dc:	4b18      	ldr	r3, [pc, #96]	; (d5640 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d55de:	681a      	ldr	r2, [r3, #0]
   d55e0:	07d0      	lsls	r0, r2, #31
   d55e2:	bf5c      	itt	pl
   d55e4:	2201      	movpl	r2, #1
   d55e6:	601a      	strpl	r2, [r3, #0]
   d55e8:	4b16      	ldr	r3, [pc, #88]	; (d5644 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d55ea:	681a      	ldr	r2, [r3, #0]
   d55ec:	07d1      	lsls	r1, r2, #31
   d55ee:	bf5c      	itt	pl
   d55f0:	2201      	movpl	r2, #1
   d55f2:	601a      	strpl	r2, [r3, #0]
   d55f4:	4b14      	ldr	r3, [pc, #80]	; (d5648 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d55f6:	681a      	ldr	r2, [r3, #0]
   d55f8:	07d2      	lsls	r2, r2, #31
   d55fa:	bf5c      	itt	pl
   d55fc:	2201      	movpl	r2, #1
   d55fe:	601a      	strpl	r2, [r3, #0]
   d5600:	4b12      	ldr	r3, [pc, #72]	; (d564c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5602:	681a      	ldr	r2, [r3, #0]
   d5604:	07d0      	lsls	r0, r2, #31
   d5606:	bf5c      	itt	pl
   d5608:	2201      	movpl	r2, #1
   d560a:	601a      	strpl	r2, [r3, #0]
   d560c:	4b10      	ldr	r3, [pc, #64]	; (d5650 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d560e:	681a      	ldr	r2, [r3, #0]
   d5610:	07d1      	lsls	r1, r2, #31
   d5612:	bf5c      	itt	pl
   d5614:	2201      	movpl	r2, #1
   d5616:	601a      	strpl	r2, [r3, #0]
   d5618:	4b0e      	ldr	r3, [pc, #56]	; (d5654 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d561a:	681a      	ldr	r2, [r3, #0]
   d561c:	07d2      	lsls	r2, r2, #31
   d561e:	bf5c      	itt	pl
   d5620:	2201      	movpl	r2, #1
   d5622:	601a      	strpl	r2, [r3, #0]
   d5624:	4770      	bx	lr
   d5626:	bf00      	nop
   d5628:	2003e7cc 	.word	0x2003e7cc
   d562c:	2003e7c8 	.word	0x2003e7c8
   d5630:	2003e7c4 	.word	0x2003e7c4
   d5634:	2003e7c0 	.word	0x2003e7c0
   d5638:	2003e7bc 	.word	0x2003e7bc
   d563c:	2003e7b8 	.word	0x2003e7b8
   d5640:	2003e7b4 	.word	0x2003e7b4
   d5644:	2003e7b0 	.word	0x2003e7b0
   d5648:	2003e7ac 	.word	0x2003e7ac
   d564c:	2003e7a8 	.word	0x2003e7a8
   d5650:	2003e7a4 	.word	0x2003e7a4
   d5654:	2003e7a0 	.word	0x2003e7a0

000d5658 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5658:	4b18      	ldr	r3, [pc, #96]	; (d56bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d565a:	681a      	ldr	r2, [r3, #0]
   d565c:	07d1      	lsls	r1, r2, #31
   d565e:	bf5c      	itt	pl
   d5660:	2201      	movpl	r2, #1
   d5662:	601a      	strpl	r2, [r3, #0]
   d5664:	4b16      	ldr	r3, [pc, #88]	; (d56c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5666:	681a      	ldr	r2, [r3, #0]
   d5668:	07d2      	lsls	r2, r2, #31
   d566a:	bf5c      	itt	pl
   d566c:	2201      	movpl	r2, #1
   d566e:	601a      	strpl	r2, [r3, #0]
   d5670:	4b14      	ldr	r3, [pc, #80]	; (d56c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5672:	681a      	ldr	r2, [r3, #0]
   d5674:	07d0      	lsls	r0, r2, #31
   d5676:	bf5c      	itt	pl
   d5678:	2201      	movpl	r2, #1
   d567a:	601a      	strpl	r2, [r3, #0]
   d567c:	4b12      	ldr	r3, [pc, #72]	; (d56c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d567e:	681a      	ldr	r2, [r3, #0]
   d5680:	07d1      	lsls	r1, r2, #31
   d5682:	bf5c      	itt	pl
   d5684:	2201      	movpl	r2, #1
   d5686:	601a      	strpl	r2, [r3, #0]
   d5688:	4b10      	ldr	r3, [pc, #64]	; (d56cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d568a:	681a      	ldr	r2, [r3, #0]
   d568c:	07d2      	lsls	r2, r2, #31
   d568e:	bf5c      	itt	pl
   d5690:	2201      	movpl	r2, #1
   d5692:	601a      	strpl	r2, [r3, #0]
   d5694:	4b0e      	ldr	r3, [pc, #56]	; (d56d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5696:	681a      	ldr	r2, [r3, #0]
   d5698:	07d0      	lsls	r0, r2, #31
   d569a:	bf5c      	itt	pl
   d569c:	2201      	movpl	r2, #1
   d569e:	601a      	strpl	r2, [r3, #0]
   d56a0:	4b0c      	ldr	r3, [pc, #48]	; (d56d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d56a2:	681a      	ldr	r2, [r3, #0]
   d56a4:	07d1      	lsls	r1, r2, #31
   d56a6:	bf5c      	itt	pl
   d56a8:	2201      	movpl	r2, #1
   d56aa:	601a      	strpl	r2, [r3, #0]
   d56ac:	4b0a      	ldr	r3, [pc, #40]	; (d56d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d56ae:	681a      	ldr	r2, [r3, #0]
   d56b0:	07d2      	lsls	r2, r2, #31
   d56b2:	bf5c      	itt	pl
   d56b4:	2201      	movpl	r2, #1
   d56b6:	601a      	strpl	r2, [r3, #0]
   d56b8:	4770      	bx	lr
   d56ba:	bf00      	nop
   d56bc:	2003e7ec 	.word	0x2003e7ec
   d56c0:	2003e7e8 	.word	0x2003e7e8
   d56c4:	2003e7e4 	.word	0x2003e7e4
   d56c8:	2003e7e0 	.word	0x2003e7e0
   d56cc:	2003e7dc 	.word	0x2003e7dc
   d56d0:	2003e7d8 	.word	0x2003e7d8
   d56d4:	2003e7d4 	.word	0x2003e7d4
   d56d8:	2003e7d0 	.word	0x2003e7d0

000d56dc <__aeabi_drsub>:
   d56dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d56e0:	e002      	b.n	d56e8 <__adddf3>
   d56e2:	bf00      	nop

000d56e4 <__aeabi_dsub>:
   d56e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d56e8 <__adddf3>:
   d56e8:	b530      	push	{r4, r5, lr}
   d56ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d56ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d56f2:	ea94 0f05 	teq	r4, r5
   d56f6:	bf08      	it	eq
   d56f8:	ea90 0f02 	teqeq	r0, r2
   d56fc:	bf1f      	itttt	ne
   d56fe:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5702:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5706:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d570a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d570e:	f000 80e2 	beq.w	d58d6 <__adddf3+0x1ee>
   d5712:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5716:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d571a:	bfb8      	it	lt
   d571c:	426d      	neglt	r5, r5
   d571e:	dd0c      	ble.n	d573a <__adddf3+0x52>
   d5720:	442c      	add	r4, r5
   d5722:	ea80 0202 	eor.w	r2, r0, r2
   d5726:	ea81 0303 	eor.w	r3, r1, r3
   d572a:	ea82 0000 	eor.w	r0, r2, r0
   d572e:	ea83 0101 	eor.w	r1, r3, r1
   d5732:	ea80 0202 	eor.w	r2, r0, r2
   d5736:	ea81 0303 	eor.w	r3, r1, r3
   d573a:	2d36      	cmp	r5, #54	; 0x36
   d573c:	bf88      	it	hi
   d573e:	bd30      	pophi	{r4, r5, pc}
   d5740:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5744:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5748:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d574c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5750:	d002      	beq.n	d5758 <__adddf3+0x70>
   d5752:	4240      	negs	r0, r0
   d5754:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5758:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d575c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5760:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5764:	d002      	beq.n	d576c <__adddf3+0x84>
   d5766:	4252      	negs	r2, r2
   d5768:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d576c:	ea94 0f05 	teq	r4, r5
   d5770:	f000 80a7 	beq.w	d58c2 <__adddf3+0x1da>
   d5774:	f1a4 0401 	sub.w	r4, r4, #1
   d5778:	f1d5 0e20 	rsbs	lr, r5, #32
   d577c:	db0d      	blt.n	d579a <__adddf3+0xb2>
   d577e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5782:	fa22 f205 	lsr.w	r2, r2, r5
   d5786:	1880      	adds	r0, r0, r2
   d5788:	f141 0100 	adc.w	r1, r1, #0
   d578c:	fa03 f20e 	lsl.w	r2, r3, lr
   d5790:	1880      	adds	r0, r0, r2
   d5792:	fa43 f305 	asr.w	r3, r3, r5
   d5796:	4159      	adcs	r1, r3
   d5798:	e00e      	b.n	d57b8 <__adddf3+0xd0>
   d579a:	f1a5 0520 	sub.w	r5, r5, #32
   d579e:	f10e 0e20 	add.w	lr, lr, #32
   d57a2:	2a01      	cmp	r2, #1
   d57a4:	fa03 fc0e 	lsl.w	ip, r3, lr
   d57a8:	bf28      	it	cs
   d57aa:	f04c 0c02 	orrcs.w	ip, ip, #2
   d57ae:	fa43 f305 	asr.w	r3, r3, r5
   d57b2:	18c0      	adds	r0, r0, r3
   d57b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d57b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d57bc:	d507      	bpl.n	d57ce <__adddf3+0xe6>
   d57be:	f04f 0e00 	mov.w	lr, #0
   d57c2:	f1dc 0c00 	rsbs	ip, ip, #0
   d57c6:	eb7e 0000 	sbcs.w	r0, lr, r0
   d57ca:	eb6e 0101 	sbc.w	r1, lr, r1
   d57ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d57d2:	d31b      	bcc.n	d580c <__adddf3+0x124>
   d57d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d57d8:	d30c      	bcc.n	d57f4 <__adddf3+0x10c>
   d57da:	0849      	lsrs	r1, r1, #1
   d57dc:	ea5f 0030 	movs.w	r0, r0, rrx
   d57e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d57e4:	f104 0401 	add.w	r4, r4, #1
   d57e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d57ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d57f0:	f080 809a 	bcs.w	d5928 <__adddf3+0x240>
   d57f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d57f8:	bf08      	it	eq
   d57fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d57fe:	f150 0000 	adcs.w	r0, r0, #0
   d5802:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5806:	ea41 0105 	orr.w	r1, r1, r5
   d580a:	bd30      	pop	{r4, r5, pc}
   d580c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5810:	4140      	adcs	r0, r0
   d5812:	eb41 0101 	adc.w	r1, r1, r1
   d5816:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d581a:	f1a4 0401 	sub.w	r4, r4, #1
   d581e:	d1e9      	bne.n	d57f4 <__adddf3+0x10c>
   d5820:	f091 0f00 	teq	r1, #0
   d5824:	bf04      	itt	eq
   d5826:	4601      	moveq	r1, r0
   d5828:	2000      	moveq	r0, #0
   d582a:	fab1 f381 	clz	r3, r1
   d582e:	bf08      	it	eq
   d5830:	3320      	addeq	r3, #32
   d5832:	f1a3 030b 	sub.w	r3, r3, #11
   d5836:	f1b3 0220 	subs.w	r2, r3, #32
   d583a:	da0c      	bge.n	d5856 <__adddf3+0x16e>
   d583c:	320c      	adds	r2, #12
   d583e:	dd08      	ble.n	d5852 <__adddf3+0x16a>
   d5840:	f102 0c14 	add.w	ip, r2, #20
   d5844:	f1c2 020c 	rsb	r2, r2, #12
   d5848:	fa01 f00c 	lsl.w	r0, r1, ip
   d584c:	fa21 f102 	lsr.w	r1, r1, r2
   d5850:	e00c      	b.n	d586c <__adddf3+0x184>
   d5852:	f102 0214 	add.w	r2, r2, #20
   d5856:	bfd8      	it	le
   d5858:	f1c2 0c20 	rsble	ip, r2, #32
   d585c:	fa01 f102 	lsl.w	r1, r1, r2
   d5860:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5864:	bfdc      	itt	le
   d5866:	ea41 010c 	orrle.w	r1, r1, ip
   d586a:	4090      	lslle	r0, r2
   d586c:	1ae4      	subs	r4, r4, r3
   d586e:	bfa2      	ittt	ge
   d5870:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5874:	4329      	orrge	r1, r5
   d5876:	bd30      	popge	{r4, r5, pc}
   d5878:	ea6f 0404 	mvn.w	r4, r4
   d587c:	3c1f      	subs	r4, #31
   d587e:	da1c      	bge.n	d58ba <__adddf3+0x1d2>
   d5880:	340c      	adds	r4, #12
   d5882:	dc0e      	bgt.n	d58a2 <__adddf3+0x1ba>
   d5884:	f104 0414 	add.w	r4, r4, #20
   d5888:	f1c4 0220 	rsb	r2, r4, #32
   d588c:	fa20 f004 	lsr.w	r0, r0, r4
   d5890:	fa01 f302 	lsl.w	r3, r1, r2
   d5894:	ea40 0003 	orr.w	r0, r0, r3
   d5898:	fa21 f304 	lsr.w	r3, r1, r4
   d589c:	ea45 0103 	orr.w	r1, r5, r3
   d58a0:	bd30      	pop	{r4, r5, pc}
   d58a2:	f1c4 040c 	rsb	r4, r4, #12
   d58a6:	f1c4 0220 	rsb	r2, r4, #32
   d58aa:	fa20 f002 	lsr.w	r0, r0, r2
   d58ae:	fa01 f304 	lsl.w	r3, r1, r4
   d58b2:	ea40 0003 	orr.w	r0, r0, r3
   d58b6:	4629      	mov	r1, r5
   d58b8:	bd30      	pop	{r4, r5, pc}
   d58ba:	fa21 f004 	lsr.w	r0, r1, r4
   d58be:	4629      	mov	r1, r5
   d58c0:	bd30      	pop	{r4, r5, pc}
   d58c2:	f094 0f00 	teq	r4, #0
   d58c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d58ca:	bf06      	itte	eq
   d58cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d58d0:	3401      	addeq	r4, #1
   d58d2:	3d01      	subne	r5, #1
   d58d4:	e74e      	b.n	d5774 <__adddf3+0x8c>
   d58d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d58da:	bf18      	it	ne
   d58dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d58e0:	d029      	beq.n	d5936 <__adddf3+0x24e>
   d58e2:	ea94 0f05 	teq	r4, r5
   d58e6:	bf08      	it	eq
   d58e8:	ea90 0f02 	teqeq	r0, r2
   d58ec:	d005      	beq.n	d58fa <__adddf3+0x212>
   d58ee:	ea54 0c00 	orrs.w	ip, r4, r0
   d58f2:	bf04      	itt	eq
   d58f4:	4619      	moveq	r1, r3
   d58f6:	4610      	moveq	r0, r2
   d58f8:	bd30      	pop	{r4, r5, pc}
   d58fa:	ea91 0f03 	teq	r1, r3
   d58fe:	bf1e      	ittt	ne
   d5900:	2100      	movne	r1, #0
   d5902:	2000      	movne	r0, #0
   d5904:	bd30      	popne	{r4, r5, pc}
   d5906:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d590a:	d105      	bne.n	d5918 <__adddf3+0x230>
   d590c:	0040      	lsls	r0, r0, #1
   d590e:	4149      	adcs	r1, r1
   d5910:	bf28      	it	cs
   d5912:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5916:	bd30      	pop	{r4, r5, pc}
   d5918:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d591c:	bf3c      	itt	cc
   d591e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5922:	bd30      	popcc	{r4, r5, pc}
   d5924:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5928:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d592c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5930:	f04f 0000 	mov.w	r0, #0
   d5934:	bd30      	pop	{r4, r5, pc}
   d5936:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d593a:	bf1a      	itte	ne
   d593c:	4619      	movne	r1, r3
   d593e:	4610      	movne	r0, r2
   d5940:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5944:	bf1c      	itt	ne
   d5946:	460b      	movne	r3, r1
   d5948:	4602      	movne	r2, r0
   d594a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d594e:	bf06      	itte	eq
   d5950:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5954:	ea91 0f03 	teqeq	r1, r3
   d5958:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d595c:	bd30      	pop	{r4, r5, pc}
   d595e:	bf00      	nop

000d5960 <__aeabi_ui2d>:
   d5960:	f090 0f00 	teq	r0, #0
   d5964:	bf04      	itt	eq
   d5966:	2100      	moveq	r1, #0
   d5968:	4770      	bxeq	lr
   d596a:	b530      	push	{r4, r5, lr}
   d596c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5970:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5974:	f04f 0500 	mov.w	r5, #0
   d5978:	f04f 0100 	mov.w	r1, #0
   d597c:	e750      	b.n	d5820 <__adddf3+0x138>
   d597e:	bf00      	nop

000d5980 <__aeabi_i2d>:
   d5980:	f090 0f00 	teq	r0, #0
   d5984:	bf04      	itt	eq
   d5986:	2100      	moveq	r1, #0
   d5988:	4770      	bxeq	lr
   d598a:	b530      	push	{r4, r5, lr}
   d598c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5990:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5994:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5998:	bf48      	it	mi
   d599a:	4240      	negmi	r0, r0
   d599c:	f04f 0100 	mov.w	r1, #0
   d59a0:	e73e      	b.n	d5820 <__adddf3+0x138>
   d59a2:	bf00      	nop

000d59a4 <__aeabi_f2d>:
   d59a4:	0042      	lsls	r2, r0, #1
   d59a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d59aa:	ea4f 0131 	mov.w	r1, r1, rrx
   d59ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d59b2:	bf1f      	itttt	ne
   d59b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d59b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d59bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d59c0:	4770      	bxne	lr
   d59c2:	f092 0f00 	teq	r2, #0
   d59c6:	bf14      	ite	ne
   d59c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d59cc:	4770      	bxeq	lr
   d59ce:	b530      	push	{r4, r5, lr}
   d59d0:	f44f 7460 	mov.w	r4, #896	; 0x380
   d59d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d59d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d59dc:	e720      	b.n	d5820 <__adddf3+0x138>
   d59de:	bf00      	nop

000d59e0 <__aeabi_ul2d>:
   d59e0:	ea50 0201 	orrs.w	r2, r0, r1
   d59e4:	bf08      	it	eq
   d59e6:	4770      	bxeq	lr
   d59e8:	b530      	push	{r4, r5, lr}
   d59ea:	f04f 0500 	mov.w	r5, #0
   d59ee:	e00a      	b.n	d5a06 <__aeabi_l2d+0x16>

000d59f0 <__aeabi_l2d>:
   d59f0:	ea50 0201 	orrs.w	r2, r0, r1
   d59f4:	bf08      	it	eq
   d59f6:	4770      	bxeq	lr
   d59f8:	b530      	push	{r4, r5, lr}
   d59fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d59fe:	d502      	bpl.n	d5a06 <__aeabi_l2d+0x16>
   d5a00:	4240      	negs	r0, r0
   d5a02:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5a06:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5a0a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5a0e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5a12:	f43f aedc 	beq.w	d57ce <__adddf3+0xe6>
   d5a16:	f04f 0203 	mov.w	r2, #3
   d5a1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5a1e:	bf18      	it	ne
   d5a20:	3203      	addne	r2, #3
   d5a22:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5a26:	bf18      	it	ne
   d5a28:	3203      	addne	r2, #3
   d5a2a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5a2e:	f1c2 0320 	rsb	r3, r2, #32
   d5a32:	fa00 fc03 	lsl.w	ip, r0, r3
   d5a36:	fa20 f002 	lsr.w	r0, r0, r2
   d5a3a:	fa01 fe03 	lsl.w	lr, r1, r3
   d5a3e:	ea40 000e 	orr.w	r0, r0, lr
   d5a42:	fa21 f102 	lsr.w	r1, r1, r2
   d5a46:	4414      	add	r4, r2
   d5a48:	e6c1      	b.n	d57ce <__adddf3+0xe6>
   d5a4a:	bf00      	nop

000d5a4c <__aeabi_dmul>:
   d5a4c:	b570      	push	{r4, r5, r6, lr}
   d5a4e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5a52:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5a56:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5a5a:	bf1d      	ittte	ne
   d5a5c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5a60:	ea94 0f0c 	teqne	r4, ip
   d5a64:	ea95 0f0c 	teqne	r5, ip
   d5a68:	f000 f8de 	bleq	d5c28 <__aeabi_dmul+0x1dc>
   d5a6c:	442c      	add	r4, r5
   d5a6e:	ea81 0603 	eor.w	r6, r1, r3
   d5a72:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d5a76:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d5a7a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5a7e:	bf18      	it	ne
   d5a80:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5a84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5a88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5a8c:	d038      	beq.n	d5b00 <__aeabi_dmul+0xb4>
   d5a8e:	fba0 ce02 	umull	ip, lr, r0, r2
   d5a92:	f04f 0500 	mov.w	r5, #0
   d5a96:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5a9a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5a9e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5aa2:	f04f 0600 	mov.w	r6, #0
   d5aa6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5aaa:	f09c 0f00 	teq	ip, #0
   d5aae:	bf18      	it	ne
   d5ab0:	f04e 0e01 	orrne.w	lr, lr, #1
   d5ab4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5ab8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5abc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5ac0:	d204      	bcs.n	d5acc <__aeabi_dmul+0x80>
   d5ac2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5ac6:	416d      	adcs	r5, r5
   d5ac8:	eb46 0606 	adc.w	r6, r6, r6
   d5acc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d5ad0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5ad4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d5ad8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5adc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d5ae0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5ae4:	bf88      	it	hi
   d5ae6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5aea:	d81e      	bhi.n	d5b2a <__aeabi_dmul+0xde>
   d5aec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5af0:	bf08      	it	eq
   d5af2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d5af6:	f150 0000 	adcs.w	r0, r0, #0
   d5afa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5afe:	bd70      	pop	{r4, r5, r6, pc}
   d5b00:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5b04:	ea46 0101 	orr.w	r1, r6, r1
   d5b08:	ea40 0002 	orr.w	r0, r0, r2
   d5b0c:	ea81 0103 	eor.w	r1, r1, r3
   d5b10:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5b14:	bfc2      	ittt	gt
   d5b16:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5b1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5b1e:	bd70      	popgt	{r4, r5, r6, pc}
   d5b20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5b24:	f04f 0e00 	mov.w	lr, #0
   d5b28:	3c01      	subs	r4, #1
   d5b2a:	f300 80ab 	bgt.w	d5c84 <__aeabi_dmul+0x238>
   d5b2e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d5b32:	bfde      	ittt	le
   d5b34:	2000      	movle	r0, #0
   d5b36:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d5b3a:	bd70      	pople	{r4, r5, r6, pc}
   d5b3c:	f1c4 0400 	rsb	r4, r4, #0
   d5b40:	3c20      	subs	r4, #32
   d5b42:	da35      	bge.n	d5bb0 <__aeabi_dmul+0x164>
   d5b44:	340c      	adds	r4, #12
   d5b46:	dc1b      	bgt.n	d5b80 <__aeabi_dmul+0x134>
   d5b48:	f104 0414 	add.w	r4, r4, #20
   d5b4c:	f1c4 0520 	rsb	r5, r4, #32
   d5b50:	fa00 f305 	lsl.w	r3, r0, r5
   d5b54:	fa20 f004 	lsr.w	r0, r0, r4
   d5b58:	fa01 f205 	lsl.w	r2, r1, r5
   d5b5c:	ea40 0002 	orr.w	r0, r0, r2
   d5b60:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d5b64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5b68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5b6c:	fa21 f604 	lsr.w	r6, r1, r4
   d5b70:	eb42 0106 	adc.w	r1, r2, r6
   d5b74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5b78:	bf08      	it	eq
   d5b7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5b7e:	bd70      	pop	{r4, r5, r6, pc}
   d5b80:	f1c4 040c 	rsb	r4, r4, #12
   d5b84:	f1c4 0520 	rsb	r5, r4, #32
   d5b88:	fa00 f304 	lsl.w	r3, r0, r4
   d5b8c:	fa20 f005 	lsr.w	r0, r0, r5
   d5b90:	fa01 f204 	lsl.w	r2, r1, r4
   d5b94:	ea40 0002 	orr.w	r0, r0, r2
   d5b98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5b9c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5ba0:	f141 0100 	adc.w	r1, r1, #0
   d5ba4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5ba8:	bf08      	it	eq
   d5baa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5bae:	bd70      	pop	{r4, r5, r6, pc}
   d5bb0:	f1c4 0520 	rsb	r5, r4, #32
   d5bb4:	fa00 f205 	lsl.w	r2, r0, r5
   d5bb8:	ea4e 0e02 	orr.w	lr, lr, r2
   d5bbc:	fa20 f304 	lsr.w	r3, r0, r4
   d5bc0:	fa01 f205 	lsl.w	r2, r1, r5
   d5bc4:	ea43 0302 	orr.w	r3, r3, r2
   d5bc8:	fa21 f004 	lsr.w	r0, r1, r4
   d5bcc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5bd0:	fa21 f204 	lsr.w	r2, r1, r4
   d5bd4:	ea20 0002 	bic.w	r0, r0, r2
   d5bd8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d5bdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5be0:	bf08      	it	eq
   d5be2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5be6:	bd70      	pop	{r4, r5, r6, pc}
   d5be8:	f094 0f00 	teq	r4, #0
   d5bec:	d10f      	bne.n	d5c0e <__aeabi_dmul+0x1c2>
   d5bee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d5bf2:	0040      	lsls	r0, r0, #1
   d5bf4:	eb41 0101 	adc.w	r1, r1, r1
   d5bf8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5bfc:	bf08      	it	eq
   d5bfe:	3c01      	subeq	r4, #1
   d5c00:	d0f7      	beq.n	d5bf2 <__aeabi_dmul+0x1a6>
   d5c02:	ea41 0106 	orr.w	r1, r1, r6
   d5c06:	f095 0f00 	teq	r5, #0
   d5c0a:	bf18      	it	ne
   d5c0c:	4770      	bxne	lr
   d5c0e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d5c12:	0052      	lsls	r2, r2, #1
   d5c14:	eb43 0303 	adc.w	r3, r3, r3
   d5c18:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d5c1c:	bf08      	it	eq
   d5c1e:	3d01      	subeq	r5, #1
   d5c20:	d0f7      	beq.n	d5c12 <__aeabi_dmul+0x1c6>
   d5c22:	ea43 0306 	orr.w	r3, r3, r6
   d5c26:	4770      	bx	lr
   d5c28:	ea94 0f0c 	teq	r4, ip
   d5c2c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5c30:	bf18      	it	ne
   d5c32:	ea95 0f0c 	teqne	r5, ip
   d5c36:	d00c      	beq.n	d5c52 <__aeabi_dmul+0x206>
   d5c38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5c3c:	bf18      	it	ne
   d5c3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5c42:	d1d1      	bne.n	d5be8 <__aeabi_dmul+0x19c>
   d5c44:	ea81 0103 	eor.w	r1, r1, r3
   d5c48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5c4c:	f04f 0000 	mov.w	r0, #0
   d5c50:	bd70      	pop	{r4, r5, r6, pc}
   d5c52:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5c56:	bf06      	itte	eq
   d5c58:	4610      	moveq	r0, r2
   d5c5a:	4619      	moveq	r1, r3
   d5c5c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5c60:	d019      	beq.n	d5c96 <__aeabi_dmul+0x24a>
   d5c62:	ea94 0f0c 	teq	r4, ip
   d5c66:	d102      	bne.n	d5c6e <__aeabi_dmul+0x222>
   d5c68:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d5c6c:	d113      	bne.n	d5c96 <__aeabi_dmul+0x24a>
   d5c6e:	ea95 0f0c 	teq	r5, ip
   d5c72:	d105      	bne.n	d5c80 <__aeabi_dmul+0x234>
   d5c74:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d5c78:	bf1c      	itt	ne
   d5c7a:	4610      	movne	r0, r2
   d5c7c:	4619      	movne	r1, r3
   d5c7e:	d10a      	bne.n	d5c96 <__aeabi_dmul+0x24a>
   d5c80:	ea81 0103 	eor.w	r1, r1, r3
   d5c84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5c88:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5c8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5c90:	f04f 0000 	mov.w	r0, #0
   d5c94:	bd70      	pop	{r4, r5, r6, pc}
   d5c96:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5c9a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d5c9e:	bd70      	pop	{r4, r5, r6, pc}

000d5ca0 <__aeabi_ddiv>:
   d5ca0:	b570      	push	{r4, r5, r6, lr}
   d5ca2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5ca6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5caa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5cae:	bf1d      	ittte	ne
   d5cb0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5cb4:	ea94 0f0c 	teqne	r4, ip
   d5cb8:	ea95 0f0c 	teqne	r5, ip
   d5cbc:	f000 f8a7 	bleq	d5e0e <__aeabi_ddiv+0x16e>
   d5cc0:	eba4 0405 	sub.w	r4, r4, r5
   d5cc4:	ea81 0e03 	eor.w	lr, r1, r3
   d5cc8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5ccc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5cd0:	f000 8088 	beq.w	d5de4 <__aeabi_ddiv+0x144>
   d5cd4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5cd8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d5cdc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d5ce0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d5ce4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d5ce8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d5cec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d5cf0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d5cf4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d5cf8:	429d      	cmp	r5, r3
   d5cfa:	bf08      	it	eq
   d5cfc:	4296      	cmpeq	r6, r2
   d5cfe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d5d02:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d5d06:	d202      	bcs.n	d5d0e <__aeabi_ddiv+0x6e>
   d5d08:	085b      	lsrs	r3, r3, #1
   d5d0a:	ea4f 0232 	mov.w	r2, r2, rrx
   d5d0e:	1ab6      	subs	r6, r6, r2
   d5d10:	eb65 0503 	sbc.w	r5, r5, r3
   d5d14:	085b      	lsrs	r3, r3, #1
   d5d16:	ea4f 0232 	mov.w	r2, r2, rrx
   d5d1a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d5d1e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d5d22:	ebb6 0e02 	subs.w	lr, r6, r2
   d5d26:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5d2a:	bf22      	ittt	cs
   d5d2c:	1ab6      	subcs	r6, r6, r2
   d5d2e:	4675      	movcs	r5, lr
   d5d30:	ea40 000c 	orrcs.w	r0, r0, ip
   d5d34:	085b      	lsrs	r3, r3, #1
   d5d36:	ea4f 0232 	mov.w	r2, r2, rrx
   d5d3a:	ebb6 0e02 	subs.w	lr, r6, r2
   d5d3e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5d42:	bf22      	ittt	cs
   d5d44:	1ab6      	subcs	r6, r6, r2
   d5d46:	4675      	movcs	r5, lr
   d5d48:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d5d4c:	085b      	lsrs	r3, r3, #1
   d5d4e:	ea4f 0232 	mov.w	r2, r2, rrx
   d5d52:	ebb6 0e02 	subs.w	lr, r6, r2
   d5d56:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5d5a:	bf22      	ittt	cs
   d5d5c:	1ab6      	subcs	r6, r6, r2
   d5d5e:	4675      	movcs	r5, lr
   d5d60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d5d64:	085b      	lsrs	r3, r3, #1
   d5d66:	ea4f 0232 	mov.w	r2, r2, rrx
   d5d6a:	ebb6 0e02 	subs.w	lr, r6, r2
   d5d6e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5d72:	bf22      	ittt	cs
   d5d74:	1ab6      	subcs	r6, r6, r2
   d5d76:	4675      	movcs	r5, lr
   d5d78:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d5d7c:	ea55 0e06 	orrs.w	lr, r5, r6
   d5d80:	d018      	beq.n	d5db4 <__aeabi_ddiv+0x114>
   d5d82:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d5d86:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d5d8a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d5d8e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d5d92:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d5d96:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d5d9a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d5d9e:	d1c0      	bne.n	d5d22 <__aeabi_ddiv+0x82>
   d5da0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5da4:	d10b      	bne.n	d5dbe <__aeabi_ddiv+0x11e>
   d5da6:	ea41 0100 	orr.w	r1, r1, r0
   d5daa:	f04f 0000 	mov.w	r0, #0
   d5dae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d5db2:	e7b6      	b.n	d5d22 <__aeabi_ddiv+0x82>
   d5db4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5db8:	bf04      	itt	eq
   d5dba:	4301      	orreq	r1, r0
   d5dbc:	2000      	moveq	r0, #0
   d5dbe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5dc2:	bf88      	it	hi
   d5dc4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5dc8:	f63f aeaf 	bhi.w	d5b2a <__aeabi_dmul+0xde>
   d5dcc:	ebb5 0c03 	subs.w	ip, r5, r3
   d5dd0:	bf04      	itt	eq
   d5dd2:	ebb6 0c02 	subseq.w	ip, r6, r2
   d5dd6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5dda:	f150 0000 	adcs.w	r0, r0, #0
   d5dde:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5de2:	bd70      	pop	{r4, r5, r6, pc}
   d5de4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d5de8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d5dec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d5df0:	bfc2      	ittt	gt
   d5df2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5df6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5dfa:	bd70      	popgt	{r4, r5, r6, pc}
   d5dfc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5e00:	f04f 0e00 	mov.w	lr, #0
   d5e04:	3c01      	subs	r4, #1
   d5e06:	e690      	b.n	d5b2a <__aeabi_dmul+0xde>
   d5e08:	ea45 0e06 	orr.w	lr, r5, r6
   d5e0c:	e68d      	b.n	d5b2a <__aeabi_dmul+0xde>
   d5e0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5e12:	ea94 0f0c 	teq	r4, ip
   d5e16:	bf08      	it	eq
   d5e18:	ea95 0f0c 	teqeq	r5, ip
   d5e1c:	f43f af3b 	beq.w	d5c96 <__aeabi_dmul+0x24a>
   d5e20:	ea94 0f0c 	teq	r4, ip
   d5e24:	d10a      	bne.n	d5e3c <__aeabi_ddiv+0x19c>
   d5e26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5e2a:	f47f af34 	bne.w	d5c96 <__aeabi_dmul+0x24a>
   d5e2e:	ea95 0f0c 	teq	r5, ip
   d5e32:	f47f af25 	bne.w	d5c80 <__aeabi_dmul+0x234>
   d5e36:	4610      	mov	r0, r2
   d5e38:	4619      	mov	r1, r3
   d5e3a:	e72c      	b.n	d5c96 <__aeabi_dmul+0x24a>
   d5e3c:	ea95 0f0c 	teq	r5, ip
   d5e40:	d106      	bne.n	d5e50 <__aeabi_ddiv+0x1b0>
   d5e42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5e46:	f43f aefd 	beq.w	d5c44 <__aeabi_dmul+0x1f8>
   d5e4a:	4610      	mov	r0, r2
   d5e4c:	4619      	mov	r1, r3
   d5e4e:	e722      	b.n	d5c96 <__aeabi_dmul+0x24a>
   d5e50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5e54:	bf18      	it	ne
   d5e56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5e5a:	f47f aec5 	bne.w	d5be8 <__aeabi_dmul+0x19c>
   d5e5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d5e62:	f47f af0d 	bne.w	d5c80 <__aeabi_dmul+0x234>
   d5e66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d5e6a:	f47f aeeb 	bne.w	d5c44 <__aeabi_dmul+0x1f8>
   d5e6e:	e712      	b.n	d5c96 <__aeabi_dmul+0x24a>

000d5e70 <__gedf2>:
   d5e70:	f04f 3cff 	mov.w	ip, #4294967295
   d5e74:	e006      	b.n	d5e84 <__cmpdf2+0x4>
   d5e76:	bf00      	nop

000d5e78 <__ledf2>:
   d5e78:	f04f 0c01 	mov.w	ip, #1
   d5e7c:	e002      	b.n	d5e84 <__cmpdf2+0x4>
   d5e7e:	bf00      	nop

000d5e80 <__cmpdf2>:
   d5e80:	f04f 0c01 	mov.w	ip, #1
   d5e84:	f84d cd04 	str.w	ip, [sp, #-4]!
   d5e88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5e8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5e90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5e94:	bf18      	it	ne
   d5e96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d5e9a:	d01b      	beq.n	d5ed4 <__cmpdf2+0x54>
   d5e9c:	b001      	add	sp, #4
   d5e9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d5ea2:	bf0c      	ite	eq
   d5ea4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d5ea8:	ea91 0f03 	teqne	r1, r3
   d5eac:	bf02      	ittt	eq
   d5eae:	ea90 0f02 	teqeq	r0, r2
   d5eb2:	2000      	moveq	r0, #0
   d5eb4:	4770      	bxeq	lr
   d5eb6:	f110 0f00 	cmn.w	r0, #0
   d5eba:	ea91 0f03 	teq	r1, r3
   d5ebe:	bf58      	it	pl
   d5ec0:	4299      	cmppl	r1, r3
   d5ec2:	bf08      	it	eq
   d5ec4:	4290      	cmpeq	r0, r2
   d5ec6:	bf2c      	ite	cs
   d5ec8:	17d8      	asrcs	r0, r3, #31
   d5eca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d5ece:	f040 0001 	orr.w	r0, r0, #1
   d5ed2:	4770      	bx	lr
   d5ed4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5ed8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5edc:	d102      	bne.n	d5ee4 <__cmpdf2+0x64>
   d5ede:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d5ee2:	d107      	bne.n	d5ef4 <__cmpdf2+0x74>
   d5ee4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5ee8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5eec:	d1d6      	bne.n	d5e9c <__cmpdf2+0x1c>
   d5eee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d5ef2:	d0d3      	beq.n	d5e9c <__cmpdf2+0x1c>
   d5ef4:	f85d 0b04 	ldr.w	r0, [sp], #4
   d5ef8:	4770      	bx	lr
   d5efa:	bf00      	nop

000d5efc <__aeabi_cdrcmple>:
   d5efc:	4684      	mov	ip, r0
   d5efe:	4610      	mov	r0, r2
   d5f00:	4662      	mov	r2, ip
   d5f02:	468c      	mov	ip, r1
   d5f04:	4619      	mov	r1, r3
   d5f06:	4663      	mov	r3, ip
   d5f08:	e000      	b.n	d5f0c <__aeabi_cdcmpeq>
   d5f0a:	bf00      	nop

000d5f0c <__aeabi_cdcmpeq>:
   d5f0c:	b501      	push	{r0, lr}
   d5f0e:	f7ff ffb7 	bl	d5e80 <__cmpdf2>
   d5f12:	2800      	cmp	r0, #0
   d5f14:	bf48      	it	mi
   d5f16:	f110 0f00 	cmnmi.w	r0, #0
   d5f1a:	bd01      	pop	{r0, pc}

000d5f1c <__aeabi_dcmpeq>:
   d5f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5f20:	f7ff fff4 	bl	d5f0c <__aeabi_cdcmpeq>
   d5f24:	bf0c      	ite	eq
   d5f26:	2001      	moveq	r0, #1
   d5f28:	2000      	movne	r0, #0
   d5f2a:	f85d fb08 	ldr.w	pc, [sp], #8
   d5f2e:	bf00      	nop

000d5f30 <__aeabi_dcmplt>:
   d5f30:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5f34:	f7ff ffea 	bl	d5f0c <__aeabi_cdcmpeq>
   d5f38:	bf34      	ite	cc
   d5f3a:	2001      	movcc	r0, #1
   d5f3c:	2000      	movcs	r0, #0
   d5f3e:	f85d fb08 	ldr.w	pc, [sp], #8
   d5f42:	bf00      	nop

000d5f44 <__aeabi_dcmple>:
   d5f44:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5f48:	f7ff ffe0 	bl	d5f0c <__aeabi_cdcmpeq>
   d5f4c:	bf94      	ite	ls
   d5f4e:	2001      	movls	r0, #1
   d5f50:	2000      	movhi	r0, #0
   d5f52:	f85d fb08 	ldr.w	pc, [sp], #8
   d5f56:	bf00      	nop

000d5f58 <__aeabi_dcmpge>:
   d5f58:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5f5c:	f7ff ffce 	bl	d5efc <__aeabi_cdrcmple>
   d5f60:	bf94      	ite	ls
   d5f62:	2001      	movls	r0, #1
   d5f64:	2000      	movhi	r0, #0
   d5f66:	f85d fb08 	ldr.w	pc, [sp], #8
   d5f6a:	bf00      	nop

000d5f6c <__aeabi_dcmpgt>:
   d5f6c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5f70:	f7ff ffc4 	bl	d5efc <__aeabi_cdrcmple>
   d5f74:	bf34      	ite	cc
   d5f76:	2001      	movcc	r0, #1
   d5f78:	2000      	movcs	r0, #0
   d5f7a:	f85d fb08 	ldr.w	pc, [sp], #8
   d5f7e:	bf00      	nop

000d5f80 <__aeabi_dcmpun>:
   d5f80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5f84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5f88:	d102      	bne.n	d5f90 <__aeabi_dcmpun+0x10>
   d5f8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d5f8e:	d10a      	bne.n	d5fa6 <__aeabi_dcmpun+0x26>
   d5f90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5f94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5f98:	d102      	bne.n	d5fa0 <__aeabi_dcmpun+0x20>
   d5f9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d5f9e:	d102      	bne.n	d5fa6 <__aeabi_dcmpun+0x26>
   d5fa0:	f04f 0000 	mov.w	r0, #0
   d5fa4:	4770      	bx	lr
   d5fa6:	f04f 0001 	mov.w	r0, #1
   d5faa:	4770      	bx	lr

000d5fac <__aeabi_d2iz>:
   d5fac:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d5fb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d5fb4:	d215      	bcs.n	d5fe2 <__aeabi_d2iz+0x36>
   d5fb6:	d511      	bpl.n	d5fdc <__aeabi_d2iz+0x30>
   d5fb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d5fbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d5fc0:	d912      	bls.n	d5fe8 <__aeabi_d2iz+0x3c>
   d5fc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d5fc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d5fca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d5fce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5fd2:	fa23 f002 	lsr.w	r0, r3, r2
   d5fd6:	bf18      	it	ne
   d5fd8:	4240      	negne	r0, r0
   d5fda:	4770      	bx	lr
   d5fdc:	f04f 0000 	mov.w	r0, #0
   d5fe0:	4770      	bx	lr
   d5fe2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d5fe6:	d105      	bne.n	d5ff4 <__aeabi_d2iz+0x48>
   d5fe8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d5fec:	bf08      	it	eq
   d5fee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d5ff2:	4770      	bx	lr
   d5ff4:	f04f 0000 	mov.w	r0, #0
   d5ff8:	4770      	bx	lr
   d5ffa:	bf00      	nop

000d5ffc <__aeabi_d2uiz>:
   d5ffc:	004a      	lsls	r2, r1, #1
   d5ffe:	d211      	bcs.n	d6024 <__aeabi_d2uiz+0x28>
   d6000:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6004:	d211      	bcs.n	d602a <__aeabi_d2uiz+0x2e>
   d6006:	d50d      	bpl.n	d6024 <__aeabi_d2uiz+0x28>
   d6008:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d600c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6010:	d40e      	bmi.n	d6030 <__aeabi_d2uiz+0x34>
   d6012:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6016:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d601a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d601e:	fa23 f002 	lsr.w	r0, r3, r2
   d6022:	4770      	bx	lr
   d6024:	f04f 0000 	mov.w	r0, #0
   d6028:	4770      	bx	lr
   d602a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d602e:	d102      	bne.n	d6036 <__aeabi_d2uiz+0x3a>
   d6030:	f04f 30ff 	mov.w	r0, #4294967295
   d6034:	4770      	bx	lr
   d6036:	f04f 0000 	mov.w	r0, #0
   d603a:	4770      	bx	lr

000d603c <__aeabi_d2f>:
   d603c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6040:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6044:	bf24      	itt	cs
   d6046:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d604a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d604e:	d90d      	bls.n	d606c <__aeabi_d2f+0x30>
   d6050:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6054:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6058:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d605c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6060:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6064:	bf08      	it	eq
   d6066:	f020 0001 	biceq.w	r0, r0, #1
   d606a:	4770      	bx	lr
   d606c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6070:	d121      	bne.n	d60b6 <__aeabi_d2f+0x7a>
   d6072:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d6076:	bfbc      	itt	lt
   d6078:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d607c:	4770      	bxlt	lr
   d607e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6082:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d6086:	f1c2 0218 	rsb	r2, r2, #24
   d608a:	f1c2 0c20 	rsb	ip, r2, #32
   d608e:	fa10 f30c 	lsls.w	r3, r0, ip
   d6092:	fa20 f002 	lsr.w	r0, r0, r2
   d6096:	bf18      	it	ne
   d6098:	f040 0001 	orrne.w	r0, r0, #1
   d609c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d60a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d60a4:	fa03 fc0c 	lsl.w	ip, r3, ip
   d60a8:	ea40 000c 	orr.w	r0, r0, ip
   d60ac:	fa23 f302 	lsr.w	r3, r3, r2
   d60b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d60b4:	e7cc      	b.n	d6050 <__aeabi_d2f+0x14>
   d60b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d60ba:	d107      	bne.n	d60cc <__aeabi_d2f+0x90>
   d60bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d60c0:	bf1e      	ittt	ne
   d60c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d60c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d60ca:	4770      	bxne	lr
   d60cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d60d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d60d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d60d8:	4770      	bx	lr
   d60da:	bf00      	nop

000d60dc <__cxa_atexit>:
   d60dc:	b510      	push	{r4, lr}
   d60de:	4c05      	ldr	r4, [pc, #20]	; (d60f4 <__cxa_atexit+0x18>)
   d60e0:	4613      	mov	r3, r2
   d60e2:	b12c      	cbz	r4, d60f0 <__cxa_atexit+0x14>
   d60e4:	460a      	mov	r2, r1
   d60e6:	4601      	mov	r1, r0
   d60e8:	2002      	movs	r0, #2
   d60ea:	f3af 8000 	nop.w
   d60ee:	bd10      	pop	{r4, pc}
   d60f0:	4620      	mov	r0, r4
   d60f2:	bd10      	pop	{r4, pc}
   d60f4:	00000000 	.word	0x00000000

000d60f8 <memcpy>:
   d60f8:	b510      	push	{r4, lr}
   d60fa:	1e43      	subs	r3, r0, #1
   d60fc:	440a      	add	r2, r1
   d60fe:	4291      	cmp	r1, r2
   d6100:	d004      	beq.n	d610c <memcpy+0x14>
   d6102:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6106:	f803 4f01 	strb.w	r4, [r3, #1]!
   d610a:	e7f8      	b.n	d60fe <memcpy+0x6>
   d610c:	bd10      	pop	{r4, pc}

000d610e <memset>:
   d610e:	4402      	add	r2, r0
   d6110:	4603      	mov	r3, r0
   d6112:	4293      	cmp	r3, r2
   d6114:	d002      	beq.n	d611c <memset+0xe>
   d6116:	f803 1b01 	strb.w	r1, [r3], #1
   d611a:	e7fa      	b.n	d6112 <memset+0x4>
   d611c:	4770      	bx	lr
	...

000d6120 <srand>:
   d6120:	b538      	push	{r3, r4, r5, lr}
   d6122:	4b12      	ldr	r3, [pc, #72]	; (d616c <srand+0x4c>)
   d6124:	681c      	ldr	r4, [r3, #0]
   d6126:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6128:	4605      	mov	r5, r0
   d612a:	b9d3      	cbnz	r3, d6162 <srand+0x42>
   d612c:	2018      	movs	r0, #24
   d612e:	f7fe fae3 	bl	d46f8 <malloc>
   d6132:	f243 330e 	movw	r3, #13070	; 0x330e
   d6136:	63a0      	str	r0, [r4, #56]	; 0x38
   d6138:	8003      	strh	r3, [r0, #0]
   d613a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d613e:	8043      	strh	r3, [r0, #2]
   d6140:	f241 2334 	movw	r3, #4660	; 0x1234
   d6144:	8083      	strh	r3, [r0, #4]
   d6146:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d614a:	80c3      	strh	r3, [r0, #6]
   d614c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6150:	8103      	strh	r3, [r0, #8]
   d6152:	2305      	movs	r3, #5
   d6154:	8143      	strh	r3, [r0, #10]
   d6156:	230b      	movs	r3, #11
   d6158:	8183      	strh	r3, [r0, #12]
   d615a:	2201      	movs	r2, #1
   d615c:	2300      	movs	r3, #0
   d615e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6162:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6164:	2200      	movs	r2, #0
   d6166:	611d      	str	r5, [r3, #16]
   d6168:	615a      	str	r2, [r3, #20]
   d616a:	bd38      	pop	{r3, r4, r5, pc}
   d616c:	2003e3b0 	.word	0x2003e3b0

000d6170 <strlen>:
   d6170:	4603      	mov	r3, r0
   d6172:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6176:	2a00      	cmp	r2, #0
   d6178:	d1fb      	bne.n	d6172 <strlen+0x2>
   d617a:	1a18      	subs	r0, r3, r0
   d617c:	3801      	subs	r0, #1
   d617e:	4770      	bx	lr

000d6180 <dynalib_user>:
   d6180:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d6190:	0000 0000 3625 0064 5861 3d20 2520 2e30     ....%6d.aX = %0.
   d61a0:	6632 7c20 6120 2058 203d 3025 322e 2066     2f | aX = %0.2f 
   d61b0:	207c 5861 3d20 2520 2e30 6632 2000 207c     | aX = %0.2f. | 
   d61c0:	6d74 2070 203d 2000 207c 5867 3d20 0020     tmp = . | gX = .
   d61d0:	7c20 6720 2059 203d 2000 207c 5a67 3d20      | gY = . | gZ =
   d61e0:	0020 0000                                    ...

000d61e4 <_ZTVN5spark13EthernetClassE>:
	...
   d61ec:	4797 000d 478d 000d 4783 000d 4779 000d     .G...G...G..yG..
   d61fc:	476d 000d 4761 000d 4755 000d 474d 000d     mG..aG..UG..MG..
   d620c:	4743 000d 4739 000d 52a9 000d 616e 006e     CG..9G...R..nan.
   d621c:	766f 0066 002e 6e69 0066 6162 6475 5300     ovf...inf.baud.S
   d622c:	7265 6169 006c 6553 6972 6c61 0031 7974     erial.Serial1.ty
   d623c:	6570 7000 7261 6d61 6300 646d 6900 0064     pe.param.cmd.id.
   d624c:	6e68 0064 7473 6d72 6600 6c69 0074 766c     hnd.strm.filt.lv
   d625c:	006c 6461 4864 6e61 6c64 7265 7200 6d65     l.addHandler.rem
   d626c:	766f 4865 6e61 6c64 7265 6500 756e 486d     oveHandler.enumH
   d627c:	6e61 6c64 7265 0073 534a 4e4f 7453 6572     andlers.JSONStre
   d628c:	6d61 6f4c 4867 6e61 6c64 7265 6100 7070     amLogHandler.app
   d629c:	2500 3130 7530 0020 205d 2500 0064 202c     .%010u .] .%d., 
   d62ac:	2800 3a29 0020 5b20 6300 646f 2065 203d     .(): . [.code = 
   d62bc:	2500 0069 6564 6174 6c69 2073 203d 0d00     .%i.details = ..
   d62cc:	000a 6e6c 6600 006e 6f63 6564 6400 7465     ..ln.fn.code.det
   d62dc:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
   d62ec:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   d62fc:	6e61 6369 6100 6c6c 5a00 2500 302b 6433     anic.all.Z.%+03d
   d630c:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   d631c:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   d632c:	0065 0000                                   e...

000d6330 <_ZTV9IPAddress>:
	...
   d6338:	4c71 000d 4c61 000d 4c63 000d               qL..aL..cL..

000d6344 <_ZTV9USBSerial>:
	...
   d634c:	4d49 000d 4d99 000d 4da7 000d 4841 000d     IM...M...M..AH..
   d635c:	4d85 000d 4d4b 000d 4d61 000d 4d93 000d     .M..KM..aM...M..
   d636c:	4d77 000d 4d45 000d                         wM..EM..

000d6374 <_ZTV11USARTSerial>:
	...
   d637c:	4e55 000d 4ea5 000d 4eb3 000d 4841 000d     UN...N...N..AH..
   d638c:	4e69 000d 4e8b 000d 4e77 000d 4e9f 000d     iN...N..wN...N..
   d639c:	4e57 000d 4e5b 000d                         WN..[N..

000d63a4 <_ZTV7TwoWire>:
	...
   d63ac:	4f51 000d 4f9b 000d 4f73 000d 4f53 000d     QO...O..sO..SO..
   d63bc:	4f7b 000d 4f83 000d 4f8b 000d 4f93 000d     {O...O...O...O..

000d63cc <_ZTVN5spark9MeshClassE>:
	...
   d63d4:	50a9 000d 509f 000d 5095 000d 508b 000d     .P...P...P...P..
   d63e4:	507f 000d 5073 000d 5067 000d 505f 000d     .P..sP..gP.._P..
   d63f4:	5055 000d 504b 000d 52a9 000d               UP..KP...R..

000d6400 <_ZTVN5spark9WiFiClassE>:
	...
   d6408:	5223 000d 5219 000d 520f 000d 51c5 000d     #R...R...R...Q..
   d6418:	5203 000d 51f7 000d 51eb 000d 51e3 000d     .R...Q...Q...Q..
   d6428:	51d9 000d 51cf 000d 52a9 000d               .Q...Q...R..

000d6434 <_ZTVN5spark12NetworkClassE>:
	...
   d643c:	5241 000d 524b 000d 5255 000d 525f 000d     AR..KR..UR.._R..
   d644c:	5269 000d 5275 000d 5281 000d 528d 000d     iR..uR...R...R..
   d645c:	5295 000d 529f 000d 52a9 000d               .R...R...R..

000d6468 <_ZSt7nothrow>:
   d6468:	0000 0000                                   ....

000d646c <__sf_fake_stdin>:
	...

000d648c <__sf_fake_stdout>:
	...

000d64ac <__sf_fake_stderr>:
	...
   d64cc:	0043                                        C.

000d64ce <link_const_variable_data_end>:
	...

000d64d0 <link_constructors_location>:
   d64d0:	000d43cd 	.word	0x000d43cd
   d64d4:	000d47a1 	.word	0x000d47a1
   d64d8:	000d47d5 	.word	0x000d47d5
   d64dc:	000d4819 	.word	0x000d4819
   d64e0:	000d4aed 	.word	0x000d4aed
   d64e4:	000d4afd 	.word	0x000d4afd
   d64e8:	000d4b35 	.word	0x000d4b35
   d64ec:	000d5175 	.word	0x000d5175
   d64f0:	000d522d 	.word	0x000d522d
   d64f4:	000d5375 	.word	0x000d5375
   d64f8:	000d544d 	.word	0x000d544d
   d64fc:	000d54d1 	.word	0x000d54d1
   d6500:	000d5595 	.word	0x000d5595
   d6504:	000d5659 	.word	0x000d5659

000d6508 <link_constructors_end>:
	...
